// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_nikonlens_t {
 *     float EffectiveMaxAp;
 *     unsigned char LensIDNumber;
 *     unsigned char LensFStops;
 *     unsigned char MCUVersion;
 *     unsigned char LensType;
 * };
 * }
 */
public class libraw_nikonlens_t {

    public static MemoryLayout $LAYOUT() {
        return constants$82.const$5;
    }
    public static VarHandle EffectiveMaxAp$VH() {
        return constants$83.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float EffectiveMaxAp;
     * }
     */
    public static float EffectiveMaxAp$get(MemorySegment seg) {
        return (float)constants$83.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float EffectiveMaxAp;
     * }
     */
    public static void EffectiveMaxAp$set(MemorySegment seg, float x) {
        constants$83.const$0.set(seg, x);
    }
    public static float EffectiveMaxAp$get(MemorySegment seg, long index) {
        return (float)constants$83.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void EffectiveMaxAp$set(MemorySegment seg, long index, float x) {
        constants$83.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LensIDNumber$VH() {
        return constants$83.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char LensIDNumber;
     * }
     */
    public static byte LensIDNumber$get(MemorySegment seg) {
        return (byte)constants$83.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char LensIDNumber;
     * }
     */
    public static void LensIDNumber$set(MemorySegment seg, byte x) {
        constants$83.const$1.set(seg, x);
    }
    public static byte LensIDNumber$get(MemorySegment seg, long index) {
        return (byte)constants$83.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void LensIDNumber$set(MemorySegment seg, long index, byte x) {
        constants$83.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LensFStops$VH() {
        return constants$83.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char LensFStops;
     * }
     */
    public static byte LensFStops$get(MemorySegment seg) {
        return (byte)constants$83.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char LensFStops;
     * }
     */
    public static void LensFStops$set(MemorySegment seg, byte x) {
        constants$83.const$2.set(seg, x);
    }
    public static byte LensFStops$get(MemorySegment seg, long index) {
        return (byte)constants$83.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void LensFStops$set(MemorySegment seg, long index, byte x) {
        constants$83.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MCUVersion$VH() {
        return constants$83.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char MCUVersion;
     * }
     */
    public static byte MCUVersion$get(MemorySegment seg) {
        return (byte)constants$83.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char MCUVersion;
     * }
     */
    public static void MCUVersion$set(MemorySegment seg, byte x) {
        constants$83.const$3.set(seg, x);
    }
    public static byte MCUVersion$get(MemorySegment seg, long index) {
        return (byte)constants$83.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void MCUVersion$set(MemorySegment seg, long index, byte x) {
        constants$83.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LensType$VH() {
        return constants$83.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char LensType;
     * }
     */
    public static byte LensType$get(MemorySegment seg) {
        return (byte)constants$83.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char LensType;
     * }
     */
    public static void LensType$set(MemorySegment seg, byte x) {
        constants$83.const$4.set(seg, x);
    }
    public static byte LensType$get(MemorySegment seg, long index) {
        return (byte)constants$83.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void LensType$set(MemorySegment seg, long index, byte x) {
        constants$83.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


