// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_nikonlens_t {
 *     float EffectiveMaxAp;
 *     unsigned char LensIDNumber;
 *     unsigned char LensFStops;
 *     unsigned char MCUVersion;
 *     unsigned char LensType;
 * };
 * }
 */
public class libraw_nikonlens_t {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_FLOAT$LAYOUT.withName("EffectiveMaxAp"),
        Constants$root.C_CHAR$LAYOUT.withName("LensIDNumber"),
        Constants$root.C_CHAR$LAYOUT.withName("LensFStops"),
        Constants$root.C_CHAR$LAYOUT.withName("MCUVersion"),
        Constants$root.C_CHAR$LAYOUT.withName("LensType")
    ).withName("libraw_nikonlens_t");
    public static MemoryLayout $LAYOUT() {
        return libraw_nikonlens_t.$struct$LAYOUT;
    }
    static final VarHandle EffectiveMaxAp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EffectiveMaxAp"));
    public static VarHandle EffectiveMaxAp$VH() {
        return libraw_nikonlens_t.EffectiveMaxAp$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float EffectiveMaxAp;
     * }
     */
    public static float EffectiveMaxAp$get(MemorySegment seg) {
        return (float)libraw_nikonlens_t.EffectiveMaxAp$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float EffectiveMaxAp;
     * }
     */
    public static void EffectiveMaxAp$set(MemorySegment seg, float x) {
        libraw_nikonlens_t.EffectiveMaxAp$VH.set(seg, x);
    }
    public static float EffectiveMaxAp$get(MemorySegment seg, long index) {
        return (float)libraw_nikonlens_t.EffectiveMaxAp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EffectiveMaxAp$set(MemorySegment seg, long index, float x) {
        libraw_nikonlens_t.EffectiveMaxAp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LensIDNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LensIDNumber"));
    public static VarHandle LensIDNumber$VH() {
        return libraw_nikonlens_t.LensIDNumber$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char LensIDNumber;
     * }
     */
    public static byte LensIDNumber$get(MemorySegment seg) {
        return (byte)libraw_nikonlens_t.LensIDNumber$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char LensIDNumber;
     * }
     */
    public static void LensIDNumber$set(MemorySegment seg, byte x) {
        libraw_nikonlens_t.LensIDNumber$VH.set(seg, x);
    }
    public static byte LensIDNumber$get(MemorySegment seg, long index) {
        return (byte)libraw_nikonlens_t.LensIDNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LensIDNumber$set(MemorySegment seg, long index, byte x) {
        libraw_nikonlens_t.LensIDNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LensFStops$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LensFStops"));
    public static VarHandle LensFStops$VH() {
        return libraw_nikonlens_t.LensFStops$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char LensFStops;
     * }
     */
    public static byte LensFStops$get(MemorySegment seg) {
        return (byte)libraw_nikonlens_t.LensFStops$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char LensFStops;
     * }
     */
    public static void LensFStops$set(MemorySegment seg, byte x) {
        libraw_nikonlens_t.LensFStops$VH.set(seg, x);
    }
    public static byte LensFStops$get(MemorySegment seg, long index) {
        return (byte)libraw_nikonlens_t.LensFStops$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LensFStops$set(MemorySegment seg, long index, byte x) {
        libraw_nikonlens_t.LensFStops$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MCUVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MCUVersion"));
    public static VarHandle MCUVersion$VH() {
        return libraw_nikonlens_t.MCUVersion$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char MCUVersion;
     * }
     */
    public static byte MCUVersion$get(MemorySegment seg) {
        return (byte)libraw_nikonlens_t.MCUVersion$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char MCUVersion;
     * }
     */
    public static void MCUVersion$set(MemorySegment seg, byte x) {
        libraw_nikonlens_t.MCUVersion$VH.set(seg, x);
    }
    public static byte MCUVersion$get(MemorySegment seg, long index) {
        return (byte)libraw_nikonlens_t.MCUVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MCUVersion$set(MemorySegment seg, long index, byte x) {
        libraw_nikonlens_t.MCUVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LensType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LensType"));
    public static VarHandle LensType$VH() {
        return libraw_nikonlens_t.LensType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char LensType;
     * }
     */
    public static byte LensType$get(MemorySegment seg) {
        return (byte)libraw_nikonlens_t.LensType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char LensType;
     * }
     */
    public static void LensType$set(MemorySegment seg, byte x) {
        libraw_nikonlens_t.LensType$VH.set(seg, x);
    }
    public static byte LensType$get(MemorySegment seg, long index) {
        return (byte)libraw_nikonlens_t.LensType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LensType$set(MemorySegment seg, long index, byte x) {
        libraw_nikonlens_t.LensType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


