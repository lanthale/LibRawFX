// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_canon_makernotes_t {
 *     int ColorDataVer;
 *     int ColorDataSubVer;
 *     int SpecularWhiteLevel;
 *     int NormalWhiteLevel;
 *     int ChannelBlackLevel[4];
 *     int AverageBlackLevel;
 *     unsigned int multishot[4];
 *     short MeteringMode;
 *     short SpotMeteringMode;
 *     unsigned char FlashMeteringMode;
 *     short FlashExposureLock;
 *     short ExposureMode;
 *     short AESetting;
 *     short ImageStabilization;
 *     short FlashMode;
 *     short FlashActivity;
 *     short FlashBits;
 *     short ManualFlashOutput;
 *     short FlashOutput;
 *     short FlashGuideNumber;
 *     short ContinuousDrive;
 *     short SensorWidth;
 *     short SensorHeight;
 *     int AFMicroAdjMode;
 *     float AFMicroAdjValue;
 *     short MakernotesFlip;
 *     short RecordMode;
 *     short SRAWQuality;
 *     unsigned int wbi;
 *     short RF_lensID;
 *     int AutoLightingOptimizer;
 *     int HighlightTonePriority;
 *     struct libraw_area_t DefaultCropAbsolute;
 *     struct libraw_area_t RecommendedImageArea;
 *     struct libraw_area_t LeftOpticalBlack;
 *     struct libraw_area_t UpperOpticalBlack;
 *     struct libraw_area_t ActiveArea;
 *     short ISOgain[2];
 * };
 * }
 */
public class libraw_canon_makernotes_t {

    public static MemoryLayout $LAYOUT() {
        return constants$20.const$5;
    }
    public static VarHandle ColorDataVer$VH() {
        return constants$21.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int ColorDataVer;
     * }
     */
    public static int ColorDataVer$get(MemorySegment seg) {
        return (int)constants$21.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int ColorDataVer;
     * }
     */
    public static void ColorDataVer$set(MemorySegment seg, int x) {
        constants$21.const$0.set(seg, x);
    }
    public static int ColorDataVer$get(MemorySegment seg, long index) {
        return (int)constants$21.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ColorDataVer$set(MemorySegment seg, long index, int x) {
        constants$21.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ColorDataSubVer$VH() {
        return constants$21.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int ColorDataSubVer;
     * }
     */
    public static int ColorDataSubVer$get(MemorySegment seg) {
        return (int)constants$21.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int ColorDataSubVer;
     * }
     */
    public static void ColorDataSubVer$set(MemorySegment seg, int x) {
        constants$21.const$1.set(seg, x);
    }
    public static int ColorDataSubVer$get(MemorySegment seg, long index) {
        return (int)constants$21.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ColorDataSubVer$set(MemorySegment seg, long index, int x) {
        constants$21.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SpecularWhiteLevel$VH() {
        return constants$21.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int SpecularWhiteLevel;
     * }
     */
    public static int SpecularWhiteLevel$get(MemorySegment seg) {
        return (int)constants$21.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int SpecularWhiteLevel;
     * }
     */
    public static void SpecularWhiteLevel$set(MemorySegment seg, int x) {
        constants$21.const$2.set(seg, x);
    }
    public static int SpecularWhiteLevel$get(MemorySegment seg, long index) {
        return (int)constants$21.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SpecularWhiteLevel$set(MemorySegment seg, long index, int x) {
        constants$21.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NormalWhiteLevel$VH() {
        return constants$21.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int NormalWhiteLevel;
     * }
     */
    public static int NormalWhiteLevel$get(MemorySegment seg) {
        return (int)constants$21.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int NormalWhiteLevel;
     * }
     */
    public static void NormalWhiteLevel$set(MemorySegment seg, int x) {
        constants$21.const$3.set(seg, x);
    }
    public static int NormalWhiteLevel$get(MemorySegment seg, long index) {
        return (int)constants$21.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void NormalWhiteLevel$set(MemorySegment seg, long index, int x) {
        constants$21.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ChannelBlackLevel$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static VarHandle AverageBlackLevel$VH() {
        return constants$21.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int AverageBlackLevel;
     * }
     */
    public static int AverageBlackLevel$get(MemorySegment seg) {
        return (int)constants$21.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int AverageBlackLevel;
     * }
     */
    public static void AverageBlackLevel$set(MemorySegment seg, int x) {
        constants$21.const$4.set(seg, x);
    }
    public static int AverageBlackLevel$get(MemorySegment seg, long index) {
        return (int)constants$21.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void AverageBlackLevel$set(MemorySegment seg, long index, int x) {
        constants$21.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment multishot$slice(MemorySegment seg) {
        return seg.asSlice(36, 16);
    }
    public static VarHandle MeteringMode$VH() {
        return constants$21.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short MeteringMode;
     * }
     */
    public static short MeteringMode$get(MemorySegment seg) {
        return (short)constants$21.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short MeteringMode;
     * }
     */
    public static void MeteringMode$set(MemorySegment seg, short x) {
        constants$21.const$5.set(seg, x);
    }
    public static short MeteringMode$get(MemorySegment seg, long index) {
        return (short)constants$21.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void MeteringMode$set(MemorySegment seg, long index, short x) {
        constants$21.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SpotMeteringMode$VH() {
        return constants$22.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short SpotMeteringMode;
     * }
     */
    public static short SpotMeteringMode$get(MemorySegment seg) {
        return (short)constants$22.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short SpotMeteringMode;
     * }
     */
    public static void SpotMeteringMode$set(MemorySegment seg, short x) {
        constants$22.const$0.set(seg, x);
    }
    public static short SpotMeteringMode$get(MemorySegment seg, long index) {
        return (short)constants$22.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void SpotMeteringMode$set(MemorySegment seg, long index, short x) {
        constants$22.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FlashMeteringMode$VH() {
        return constants$22.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char FlashMeteringMode;
     * }
     */
    public static byte FlashMeteringMode$get(MemorySegment seg) {
        return (byte)constants$22.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char FlashMeteringMode;
     * }
     */
    public static void FlashMeteringMode$set(MemorySegment seg, byte x) {
        constants$22.const$1.set(seg, x);
    }
    public static byte FlashMeteringMode$get(MemorySegment seg, long index) {
        return (byte)constants$22.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashMeteringMode$set(MemorySegment seg, long index, byte x) {
        constants$22.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FlashExposureLock$VH() {
        return constants$22.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short FlashExposureLock;
     * }
     */
    public static short FlashExposureLock$get(MemorySegment seg) {
        return (short)constants$22.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short FlashExposureLock;
     * }
     */
    public static void FlashExposureLock$set(MemorySegment seg, short x) {
        constants$22.const$2.set(seg, x);
    }
    public static short FlashExposureLock$get(MemorySegment seg, long index) {
        return (short)constants$22.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashExposureLock$set(MemorySegment seg, long index, short x) {
        constants$22.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ExposureMode$VH() {
        return constants$22.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short ExposureMode;
     * }
     */
    public static short ExposureMode$get(MemorySegment seg) {
        return (short)constants$22.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short ExposureMode;
     * }
     */
    public static void ExposureMode$set(MemorySegment seg, short x) {
        constants$22.const$3.set(seg, x);
    }
    public static short ExposureMode$get(MemorySegment seg, long index) {
        return (short)constants$22.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ExposureMode$set(MemorySegment seg, long index, short x) {
        constants$22.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AESetting$VH() {
        return constants$22.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short AESetting;
     * }
     */
    public static short AESetting$get(MemorySegment seg) {
        return (short)constants$22.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short AESetting;
     * }
     */
    public static void AESetting$set(MemorySegment seg, short x) {
        constants$22.const$4.set(seg, x);
    }
    public static short AESetting$get(MemorySegment seg, long index) {
        return (short)constants$22.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void AESetting$set(MemorySegment seg, long index, short x) {
        constants$22.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ImageStabilization$VH() {
        return constants$22.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short ImageStabilization;
     * }
     */
    public static short ImageStabilization$get(MemorySegment seg) {
        return (short)constants$22.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short ImageStabilization;
     * }
     */
    public static void ImageStabilization$set(MemorySegment seg, short x) {
        constants$22.const$5.set(seg, x);
    }
    public static short ImageStabilization$get(MemorySegment seg, long index) {
        return (short)constants$22.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ImageStabilization$set(MemorySegment seg, long index, short x) {
        constants$22.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FlashMode$VH() {
        return constants$23.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short FlashMode;
     * }
     */
    public static short FlashMode$get(MemorySegment seg) {
        return (short)constants$23.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short FlashMode;
     * }
     */
    public static void FlashMode$set(MemorySegment seg, short x) {
        constants$23.const$0.set(seg, x);
    }
    public static short FlashMode$get(MemorySegment seg, long index) {
        return (short)constants$23.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashMode$set(MemorySegment seg, long index, short x) {
        constants$23.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FlashActivity$VH() {
        return constants$23.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short FlashActivity;
     * }
     */
    public static short FlashActivity$get(MemorySegment seg) {
        return (short)constants$23.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short FlashActivity;
     * }
     */
    public static void FlashActivity$set(MemorySegment seg, short x) {
        constants$23.const$1.set(seg, x);
    }
    public static short FlashActivity$get(MemorySegment seg, long index) {
        return (short)constants$23.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashActivity$set(MemorySegment seg, long index, short x) {
        constants$23.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FlashBits$VH() {
        return constants$23.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short FlashBits;
     * }
     */
    public static short FlashBits$get(MemorySegment seg) {
        return (short)constants$23.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short FlashBits;
     * }
     */
    public static void FlashBits$set(MemorySegment seg, short x) {
        constants$23.const$2.set(seg, x);
    }
    public static short FlashBits$get(MemorySegment seg, long index) {
        return (short)constants$23.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashBits$set(MemorySegment seg, long index, short x) {
        constants$23.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ManualFlashOutput$VH() {
        return constants$23.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short ManualFlashOutput;
     * }
     */
    public static short ManualFlashOutput$get(MemorySegment seg) {
        return (short)constants$23.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short ManualFlashOutput;
     * }
     */
    public static void ManualFlashOutput$set(MemorySegment seg, short x) {
        constants$23.const$3.set(seg, x);
    }
    public static short ManualFlashOutput$get(MemorySegment seg, long index) {
        return (short)constants$23.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ManualFlashOutput$set(MemorySegment seg, long index, short x) {
        constants$23.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FlashOutput$VH() {
        return constants$23.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short FlashOutput;
     * }
     */
    public static short FlashOutput$get(MemorySegment seg) {
        return (short)constants$23.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short FlashOutput;
     * }
     */
    public static void FlashOutput$set(MemorySegment seg, short x) {
        constants$23.const$4.set(seg, x);
    }
    public static short FlashOutput$get(MemorySegment seg, long index) {
        return (short)constants$23.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashOutput$set(MemorySegment seg, long index, short x) {
        constants$23.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FlashGuideNumber$VH() {
        return constants$23.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short FlashGuideNumber;
     * }
     */
    public static short FlashGuideNumber$get(MemorySegment seg) {
        return (short)constants$23.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short FlashGuideNumber;
     * }
     */
    public static void FlashGuideNumber$set(MemorySegment seg, short x) {
        constants$23.const$5.set(seg, x);
    }
    public static short FlashGuideNumber$get(MemorySegment seg, long index) {
        return (short)constants$23.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashGuideNumber$set(MemorySegment seg, long index, short x) {
        constants$23.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ContinuousDrive$VH() {
        return constants$24.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short ContinuousDrive;
     * }
     */
    public static short ContinuousDrive$get(MemorySegment seg) {
        return (short)constants$24.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short ContinuousDrive;
     * }
     */
    public static void ContinuousDrive$set(MemorySegment seg, short x) {
        constants$24.const$0.set(seg, x);
    }
    public static short ContinuousDrive$get(MemorySegment seg, long index) {
        return (short)constants$24.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ContinuousDrive$set(MemorySegment seg, long index, short x) {
        constants$24.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SensorWidth$VH() {
        return constants$24.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short SensorWidth;
     * }
     */
    public static short SensorWidth$get(MemorySegment seg) {
        return (short)constants$24.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short SensorWidth;
     * }
     */
    public static void SensorWidth$set(MemorySegment seg, short x) {
        constants$24.const$1.set(seg, x);
    }
    public static short SensorWidth$get(MemorySegment seg, long index) {
        return (short)constants$24.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SensorWidth$set(MemorySegment seg, long index, short x) {
        constants$24.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SensorHeight$VH() {
        return constants$24.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short SensorHeight;
     * }
     */
    public static short SensorHeight$get(MemorySegment seg) {
        return (short)constants$24.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short SensorHeight;
     * }
     */
    public static void SensorHeight$set(MemorySegment seg, short x) {
        constants$24.const$2.set(seg, x);
    }
    public static short SensorHeight$get(MemorySegment seg, long index) {
        return (short)constants$24.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SensorHeight$set(MemorySegment seg, long index, short x) {
        constants$24.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AFMicroAdjMode$VH() {
        return constants$24.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int AFMicroAdjMode;
     * }
     */
    public static int AFMicroAdjMode$get(MemorySegment seg) {
        return (int)constants$24.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int AFMicroAdjMode;
     * }
     */
    public static void AFMicroAdjMode$set(MemorySegment seg, int x) {
        constants$24.const$3.set(seg, x);
    }
    public static int AFMicroAdjMode$get(MemorySegment seg, long index) {
        return (int)constants$24.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void AFMicroAdjMode$set(MemorySegment seg, long index, int x) {
        constants$24.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AFMicroAdjValue$VH() {
        return constants$24.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float AFMicroAdjValue;
     * }
     */
    public static float AFMicroAdjValue$get(MemorySegment seg) {
        return (float)constants$24.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float AFMicroAdjValue;
     * }
     */
    public static void AFMicroAdjValue$set(MemorySegment seg, float x) {
        constants$24.const$4.set(seg, x);
    }
    public static float AFMicroAdjValue$get(MemorySegment seg, long index) {
        return (float)constants$24.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void AFMicroAdjValue$set(MemorySegment seg, long index, float x) {
        constants$24.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MakernotesFlip$VH() {
        return constants$24.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short MakernotesFlip;
     * }
     */
    public static short MakernotesFlip$get(MemorySegment seg) {
        return (short)constants$24.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short MakernotesFlip;
     * }
     */
    public static void MakernotesFlip$set(MemorySegment seg, short x) {
        constants$24.const$5.set(seg, x);
    }
    public static short MakernotesFlip$get(MemorySegment seg, long index) {
        return (short)constants$24.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void MakernotesFlip$set(MemorySegment seg, long index, short x) {
        constants$24.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RecordMode$VH() {
        return constants$25.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short RecordMode;
     * }
     */
    public static short RecordMode$get(MemorySegment seg) {
        return (short)constants$25.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short RecordMode;
     * }
     */
    public static void RecordMode$set(MemorySegment seg, short x) {
        constants$25.const$0.set(seg, x);
    }
    public static short RecordMode$get(MemorySegment seg, long index) {
        return (short)constants$25.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void RecordMode$set(MemorySegment seg, long index, short x) {
        constants$25.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SRAWQuality$VH() {
        return constants$25.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short SRAWQuality;
     * }
     */
    public static short SRAWQuality$get(MemorySegment seg) {
        return (short)constants$25.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short SRAWQuality;
     * }
     */
    public static void SRAWQuality$set(MemorySegment seg, short x) {
        constants$25.const$1.set(seg, x);
    }
    public static short SRAWQuality$get(MemorySegment seg, long index) {
        return (short)constants$25.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SRAWQuality$set(MemorySegment seg, long index, short x) {
        constants$25.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle wbi$VH() {
        return constants$25.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int wbi;
     * }
     */
    public static int wbi$get(MemorySegment seg) {
        return (int)constants$25.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int wbi;
     * }
     */
    public static void wbi$set(MemorySegment seg, int x) {
        constants$25.const$2.set(seg, x);
    }
    public static int wbi$get(MemorySegment seg, long index) {
        return (int)constants$25.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void wbi$set(MemorySegment seg, long index, int x) {
        constants$25.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RF_lensID$VH() {
        return constants$25.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short RF_lensID;
     * }
     */
    public static short RF_lensID$get(MemorySegment seg) {
        return (short)constants$25.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short RF_lensID;
     * }
     */
    public static void RF_lensID$set(MemorySegment seg, short x) {
        constants$25.const$3.set(seg, x);
    }
    public static short RF_lensID$get(MemorySegment seg, long index) {
        return (short)constants$25.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void RF_lensID$set(MemorySegment seg, long index, short x) {
        constants$25.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AutoLightingOptimizer$VH() {
        return constants$25.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int AutoLightingOptimizer;
     * }
     */
    public static int AutoLightingOptimizer$get(MemorySegment seg) {
        return (int)constants$25.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int AutoLightingOptimizer;
     * }
     */
    public static void AutoLightingOptimizer$set(MemorySegment seg, int x) {
        constants$25.const$4.set(seg, x);
    }
    public static int AutoLightingOptimizer$get(MemorySegment seg, long index) {
        return (int)constants$25.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void AutoLightingOptimizer$set(MemorySegment seg, long index, int x) {
        constants$25.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle HighlightTonePriority$VH() {
        return constants$25.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int HighlightTonePriority;
     * }
     */
    public static int HighlightTonePriority$get(MemorySegment seg) {
        return (int)constants$25.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int HighlightTonePriority;
     * }
     */
    public static void HighlightTonePriority$set(MemorySegment seg, int x) {
        constants$25.const$5.set(seg, x);
    }
    public static int HighlightTonePriority$get(MemorySegment seg, long index) {
        return (int)constants$25.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void HighlightTonePriority$set(MemorySegment seg, long index, int x) {
        constants$25.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment DefaultCropAbsolute$slice(MemorySegment seg) {
        return seg.asSlice(116, 8);
    }
    public static MemorySegment RecommendedImageArea$slice(MemorySegment seg) {
        return seg.asSlice(124, 8);
    }
    public static MemorySegment LeftOpticalBlack$slice(MemorySegment seg) {
        return seg.asSlice(132, 8);
    }
    public static MemorySegment UpperOpticalBlack$slice(MemorySegment seg) {
        return seg.asSlice(140, 8);
    }
    public static MemorySegment ActiveArea$slice(MemorySegment seg) {
        return seg.asSlice(148, 8);
    }
    public static MemorySegment ISOgain$slice(MemorySegment seg) {
        return seg.asSlice(156, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


