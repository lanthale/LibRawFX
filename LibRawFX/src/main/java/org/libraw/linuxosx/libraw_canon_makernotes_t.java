// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class libraw_canon_makernotes_t {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("ColorDataVer"),
        C_INT.withName("ColorDataSubVer"),
        C_INT.withName("SpecularWhiteLevel"),
        C_INT.withName("NormalWhiteLevel"),
        MemoryLayout.sequenceLayout(4, C_INT).withName("ChannelBlackLevel"),
        C_INT.withName("AverageBlackLevel"),
        MemoryLayout.sequenceLayout(4, C_INT).withName("multishot"),
        C_SHORT.withName("MeteringMode"),
        C_SHORT.withName("SpotMeteringMode"),
        C_CHAR.withName("FlashMeteringMode"),
        MemoryLayout.paddingLayout(8),
        C_SHORT.withName("FlashExposureLock"),
        C_SHORT.withName("ExposureMode"),
        C_SHORT.withName("AESetting"),
        C_SHORT.withName("ImageStabilization"),
        C_SHORT.withName("FlashMode"),
        C_SHORT.withName("FlashActivity"),
        C_SHORT.withName("FlashBits"),
        C_SHORT.withName("ManualFlashOutput"),
        C_SHORT.withName("FlashOutput"),
        C_SHORT.withName("FlashGuideNumber"),
        C_SHORT.withName("ContinuousDrive"),
        C_SHORT.withName("SensorWidth"),
        C_SHORT.withName("SensorHeight"),
        C_INT.withName("AFMicroAdjMode"),
        C_FLOAT.withName("AFMicroAdjValue"),
        C_SHORT.withName("MakernotesFlip"),
        C_SHORT.withName("RecordMode"),
        C_SHORT.withName("SRAWQuality"),
        MemoryLayout.paddingLayout(16),
        C_INT.withName("wbi"),
        C_SHORT.withName("RF_lensID"),
        MemoryLayout.paddingLayout(16),
        C_INT.withName("AutoLightingOptimizer"),
        C_INT.withName("HighlightTonePriority"),
        MemoryLayout.structLayout(
            C_SHORT.withName("t"),
            C_SHORT.withName("l"),
            C_SHORT.withName("b"),
            C_SHORT.withName("r")
        ).withName("DefaultCropAbsolute"),
        MemoryLayout.structLayout(
            C_SHORT.withName("t"),
            C_SHORT.withName("l"),
            C_SHORT.withName("b"),
            C_SHORT.withName("r")
        ).withName("RecommendedImageArea"),
        MemoryLayout.structLayout(
            C_SHORT.withName("t"),
            C_SHORT.withName("l"),
            C_SHORT.withName("b"),
            C_SHORT.withName("r")
        ).withName("LeftOpticalBlack"),
        MemoryLayout.structLayout(
            C_SHORT.withName("t"),
            C_SHORT.withName("l"),
            C_SHORT.withName("b"),
            C_SHORT.withName("r")
        ).withName("UpperOpticalBlack"),
        MemoryLayout.structLayout(
            C_SHORT.withName("t"),
            C_SHORT.withName("l"),
            C_SHORT.withName("b"),
            C_SHORT.withName("r")
        ).withName("ActiveArea"),
        MemoryLayout.sequenceLayout(2, C_SHORT).withName("ISOgain")
    );
    public static MemoryLayout $LAYOUT() {
        return libraw_canon_makernotes_t.$struct$LAYOUT;
    }
    static final VarHandle ColorDataVer$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ColorDataVer"));
    public static VarHandle ColorDataVer$VH() {
        return libraw_canon_makernotes_t.ColorDataVer$VH;
    }
    public static int ColorDataVer$get(MemorySegment seg) {
        return (int)libraw_canon_makernotes_t.ColorDataVer$VH.get(seg);
    }
    public static void ColorDataVer$set( MemorySegment seg, int x) {
        libraw_canon_makernotes_t.ColorDataVer$VH.set(seg, x);
    }
    public static int ColorDataVer$get(MemorySegment seg, long index) {
        return (int)libraw_canon_makernotes_t.ColorDataVer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ColorDataVer$set(MemorySegment seg, long index, int x) {
        libraw_canon_makernotes_t.ColorDataVer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ColorDataSubVer$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ColorDataSubVer"));
    public static VarHandle ColorDataSubVer$VH() {
        return libraw_canon_makernotes_t.ColorDataSubVer$VH;
    }
    public static int ColorDataSubVer$get(MemorySegment seg) {
        return (int)libraw_canon_makernotes_t.ColorDataSubVer$VH.get(seg);
    }
    public static void ColorDataSubVer$set( MemorySegment seg, int x) {
        libraw_canon_makernotes_t.ColorDataSubVer$VH.set(seg, x);
    }
    public static int ColorDataSubVer$get(MemorySegment seg, long index) {
        return (int)libraw_canon_makernotes_t.ColorDataSubVer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ColorDataSubVer$set(MemorySegment seg, long index, int x) {
        libraw_canon_makernotes_t.ColorDataSubVer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SpecularWhiteLevel$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("SpecularWhiteLevel"));
    public static VarHandle SpecularWhiteLevel$VH() {
        return libraw_canon_makernotes_t.SpecularWhiteLevel$VH;
    }
    public static int SpecularWhiteLevel$get(MemorySegment seg) {
        return (int)libraw_canon_makernotes_t.SpecularWhiteLevel$VH.get(seg);
    }
    public static void SpecularWhiteLevel$set( MemorySegment seg, int x) {
        libraw_canon_makernotes_t.SpecularWhiteLevel$VH.set(seg, x);
    }
    public static int SpecularWhiteLevel$get(MemorySegment seg, long index) {
        return (int)libraw_canon_makernotes_t.SpecularWhiteLevel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SpecularWhiteLevel$set(MemorySegment seg, long index, int x) {
        libraw_canon_makernotes_t.SpecularWhiteLevel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NormalWhiteLevel$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("NormalWhiteLevel"));
    public static VarHandle NormalWhiteLevel$VH() {
        return libraw_canon_makernotes_t.NormalWhiteLevel$VH;
    }
    public static int NormalWhiteLevel$get(MemorySegment seg) {
        return (int)libraw_canon_makernotes_t.NormalWhiteLevel$VH.get(seg);
    }
    public static void NormalWhiteLevel$set( MemorySegment seg, int x) {
        libraw_canon_makernotes_t.NormalWhiteLevel$VH.set(seg, x);
    }
    public static int NormalWhiteLevel$get(MemorySegment seg, long index) {
        return (int)libraw_canon_makernotes_t.NormalWhiteLevel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NormalWhiteLevel$set(MemorySegment seg, long index, int x) {
        libraw_canon_makernotes_t.NormalWhiteLevel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ChannelBlackLevel$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    static final VarHandle AverageBlackLevel$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("AverageBlackLevel"));
    public static VarHandle AverageBlackLevel$VH() {
        return libraw_canon_makernotes_t.AverageBlackLevel$VH;
    }
    public static int AverageBlackLevel$get(MemorySegment seg) {
        return (int)libraw_canon_makernotes_t.AverageBlackLevel$VH.get(seg);
    }
    public static void AverageBlackLevel$set( MemorySegment seg, int x) {
        libraw_canon_makernotes_t.AverageBlackLevel$VH.set(seg, x);
    }
    public static int AverageBlackLevel$get(MemorySegment seg, long index) {
        return (int)libraw_canon_makernotes_t.AverageBlackLevel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AverageBlackLevel$set(MemorySegment seg, long index, int x) {
        libraw_canon_makernotes_t.AverageBlackLevel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment multishot$slice(MemorySegment seg) {
        return seg.asSlice(36, 16);
    }
    static final VarHandle MeteringMode$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("MeteringMode"));
    public static VarHandle MeteringMode$VH() {
        return libraw_canon_makernotes_t.MeteringMode$VH;
    }
    public static short MeteringMode$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.MeteringMode$VH.get(seg);
    }
    public static void MeteringMode$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.MeteringMode$VH.set(seg, x);
    }
    public static short MeteringMode$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.MeteringMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MeteringMode$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.MeteringMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SpotMeteringMode$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("SpotMeteringMode"));
    public static VarHandle SpotMeteringMode$VH() {
        return libraw_canon_makernotes_t.SpotMeteringMode$VH;
    }
    public static short SpotMeteringMode$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.SpotMeteringMode$VH.get(seg);
    }
    public static void SpotMeteringMode$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.SpotMeteringMode$VH.set(seg, x);
    }
    public static short SpotMeteringMode$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.SpotMeteringMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SpotMeteringMode$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.SpotMeteringMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashMeteringMode$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("FlashMeteringMode"));
    public static VarHandle FlashMeteringMode$VH() {
        return libraw_canon_makernotes_t.FlashMeteringMode$VH;
    }
    public static byte FlashMeteringMode$get(MemorySegment seg) {
        return (byte)libraw_canon_makernotes_t.FlashMeteringMode$VH.get(seg);
    }
    public static void FlashMeteringMode$set( MemorySegment seg, byte x) {
        libraw_canon_makernotes_t.FlashMeteringMode$VH.set(seg, x);
    }
    public static byte FlashMeteringMode$get(MemorySegment seg, long index) {
        return (byte)libraw_canon_makernotes_t.FlashMeteringMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashMeteringMode$set(MemorySegment seg, long index, byte x) {
        libraw_canon_makernotes_t.FlashMeteringMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashExposureLock$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("FlashExposureLock"));
    public static VarHandle FlashExposureLock$VH() {
        return libraw_canon_makernotes_t.FlashExposureLock$VH;
    }
    public static short FlashExposureLock$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.FlashExposureLock$VH.get(seg);
    }
    public static void FlashExposureLock$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.FlashExposureLock$VH.set(seg, x);
    }
    public static short FlashExposureLock$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.FlashExposureLock$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashExposureLock$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.FlashExposureLock$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ExposureMode$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("ExposureMode"));
    public static VarHandle ExposureMode$VH() {
        return libraw_canon_makernotes_t.ExposureMode$VH;
    }
    public static short ExposureMode$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.ExposureMode$VH.get(seg);
    }
    public static void ExposureMode$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.ExposureMode$VH.set(seg, x);
    }
    public static short ExposureMode$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.ExposureMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExposureMode$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.ExposureMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AESetting$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("AESetting"));
    public static VarHandle AESetting$VH() {
        return libraw_canon_makernotes_t.AESetting$VH;
    }
    public static short AESetting$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.AESetting$VH.get(seg);
    }
    public static void AESetting$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.AESetting$VH.set(seg, x);
    }
    public static short AESetting$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.AESetting$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AESetting$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.AESetting$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ImageStabilization$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("ImageStabilization"));
    public static VarHandle ImageStabilization$VH() {
        return libraw_canon_makernotes_t.ImageStabilization$VH;
    }
    public static short ImageStabilization$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.ImageStabilization$VH.get(seg);
    }
    public static void ImageStabilization$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.ImageStabilization$VH.set(seg, x);
    }
    public static short ImageStabilization$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.ImageStabilization$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ImageStabilization$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.ImageStabilization$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashMode$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("FlashMode"));
    public static VarHandle FlashMode$VH() {
        return libraw_canon_makernotes_t.FlashMode$VH;
    }
    public static short FlashMode$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.FlashMode$VH.get(seg);
    }
    public static void FlashMode$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.FlashMode$VH.set(seg, x);
    }
    public static short FlashMode$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.FlashMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashMode$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.FlashMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashActivity$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("FlashActivity"));
    public static VarHandle FlashActivity$VH() {
        return libraw_canon_makernotes_t.FlashActivity$VH;
    }
    public static short FlashActivity$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.FlashActivity$VH.get(seg);
    }
    public static void FlashActivity$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.FlashActivity$VH.set(seg, x);
    }
    public static short FlashActivity$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.FlashActivity$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashActivity$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.FlashActivity$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashBits$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("FlashBits"));
    public static VarHandle FlashBits$VH() {
        return libraw_canon_makernotes_t.FlashBits$VH;
    }
    public static short FlashBits$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.FlashBits$VH.get(seg);
    }
    public static void FlashBits$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.FlashBits$VH.set(seg, x);
    }
    public static short FlashBits$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.FlashBits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashBits$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.FlashBits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ManualFlashOutput$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("ManualFlashOutput"));
    public static VarHandle ManualFlashOutput$VH() {
        return libraw_canon_makernotes_t.ManualFlashOutput$VH;
    }
    public static short ManualFlashOutput$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.ManualFlashOutput$VH.get(seg);
    }
    public static void ManualFlashOutput$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.ManualFlashOutput$VH.set(seg, x);
    }
    public static short ManualFlashOutput$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.ManualFlashOutput$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ManualFlashOutput$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.ManualFlashOutput$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashOutput$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("FlashOutput"));
    public static VarHandle FlashOutput$VH() {
        return libraw_canon_makernotes_t.FlashOutput$VH;
    }
    public static short FlashOutput$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.FlashOutput$VH.get(seg);
    }
    public static void FlashOutput$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.FlashOutput$VH.set(seg, x);
    }
    public static short FlashOutput$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.FlashOutput$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashOutput$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.FlashOutput$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashGuideNumber$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("FlashGuideNumber"));
    public static VarHandle FlashGuideNumber$VH() {
        return libraw_canon_makernotes_t.FlashGuideNumber$VH;
    }
    public static short FlashGuideNumber$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.FlashGuideNumber$VH.get(seg);
    }
    public static void FlashGuideNumber$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.FlashGuideNumber$VH.set(seg, x);
    }
    public static short FlashGuideNumber$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.FlashGuideNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashGuideNumber$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.FlashGuideNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ContinuousDrive$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("ContinuousDrive"));
    public static VarHandle ContinuousDrive$VH() {
        return libraw_canon_makernotes_t.ContinuousDrive$VH;
    }
    public static short ContinuousDrive$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.ContinuousDrive$VH.get(seg);
    }
    public static void ContinuousDrive$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.ContinuousDrive$VH.set(seg, x);
    }
    public static short ContinuousDrive$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.ContinuousDrive$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ContinuousDrive$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.ContinuousDrive$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SensorWidth$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("SensorWidth"));
    public static VarHandle SensorWidth$VH() {
        return libraw_canon_makernotes_t.SensorWidth$VH;
    }
    public static short SensorWidth$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.SensorWidth$VH.get(seg);
    }
    public static void SensorWidth$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.SensorWidth$VH.set(seg, x);
    }
    public static short SensorWidth$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.SensorWidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SensorWidth$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.SensorWidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SensorHeight$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("SensorHeight"));
    public static VarHandle SensorHeight$VH() {
        return libraw_canon_makernotes_t.SensorHeight$VH;
    }
    public static short SensorHeight$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.SensorHeight$VH.get(seg);
    }
    public static void SensorHeight$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.SensorHeight$VH.set(seg, x);
    }
    public static short SensorHeight$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.SensorHeight$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SensorHeight$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.SensorHeight$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AFMicroAdjMode$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("AFMicroAdjMode"));
    public static VarHandle AFMicroAdjMode$VH() {
        return libraw_canon_makernotes_t.AFMicroAdjMode$VH;
    }
    public static int AFMicroAdjMode$get(MemorySegment seg) {
        return (int)libraw_canon_makernotes_t.AFMicroAdjMode$VH.get(seg);
    }
    public static void AFMicroAdjMode$set( MemorySegment seg, int x) {
        libraw_canon_makernotes_t.AFMicroAdjMode$VH.set(seg, x);
    }
    public static int AFMicroAdjMode$get(MemorySegment seg, long index) {
        return (int)libraw_canon_makernotes_t.AFMicroAdjMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AFMicroAdjMode$set(MemorySegment seg, long index, int x) {
        libraw_canon_makernotes_t.AFMicroAdjMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AFMicroAdjValue$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("AFMicroAdjValue"));
    public static VarHandle AFMicroAdjValue$VH() {
        return libraw_canon_makernotes_t.AFMicroAdjValue$VH;
    }
    public static float AFMicroAdjValue$get(MemorySegment seg) {
        return (float)libraw_canon_makernotes_t.AFMicroAdjValue$VH.get(seg);
    }
    public static void AFMicroAdjValue$set( MemorySegment seg, float x) {
        libraw_canon_makernotes_t.AFMicroAdjValue$VH.set(seg, x);
    }
    public static float AFMicroAdjValue$get(MemorySegment seg, long index) {
        return (float)libraw_canon_makernotes_t.AFMicroAdjValue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AFMicroAdjValue$set(MemorySegment seg, long index, float x) {
        libraw_canon_makernotes_t.AFMicroAdjValue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MakernotesFlip$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("MakernotesFlip"));
    public static VarHandle MakernotesFlip$VH() {
        return libraw_canon_makernotes_t.MakernotesFlip$VH;
    }
    public static short MakernotesFlip$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.MakernotesFlip$VH.get(seg);
    }
    public static void MakernotesFlip$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.MakernotesFlip$VH.set(seg, x);
    }
    public static short MakernotesFlip$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.MakernotesFlip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MakernotesFlip$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.MakernotesFlip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RecordMode$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("RecordMode"));
    public static VarHandle RecordMode$VH() {
        return libraw_canon_makernotes_t.RecordMode$VH;
    }
    public static short RecordMode$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.RecordMode$VH.get(seg);
    }
    public static void RecordMode$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.RecordMode$VH.set(seg, x);
    }
    public static short RecordMode$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.RecordMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RecordMode$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.RecordMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SRAWQuality$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("SRAWQuality"));
    public static VarHandle SRAWQuality$VH() {
        return libraw_canon_makernotes_t.SRAWQuality$VH;
    }
    public static short SRAWQuality$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.SRAWQuality$VH.get(seg);
    }
    public static void SRAWQuality$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.SRAWQuality$VH.set(seg, x);
    }
    public static short SRAWQuality$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.SRAWQuality$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SRAWQuality$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.SRAWQuality$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wbi$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("wbi"));
    public static VarHandle wbi$VH() {
        return libraw_canon_makernotes_t.wbi$VH;
    }
    public static int wbi$get(MemorySegment seg) {
        return (int)libraw_canon_makernotes_t.wbi$VH.get(seg);
    }
    public static void wbi$set( MemorySegment seg, int x) {
        libraw_canon_makernotes_t.wbi$VH.set(seg, x);
    }
    public static int wbi$get(MemorySegment seg, long index) {
        return (int)libraw_canon_makernotes_t.wbi$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wbi$set(MemorySegment seg, long index, int x) {
        libraw_canon_makernotes_t.wbi$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RF_lensID$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("RF_lensID"));
    public static VarHandle RF_lensID$VH() {
        return libraw_canon_makernotes_t.RF_lensID$VH;
    }
    public static short RF_lensID$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.RF_lensID$VH.get(seg);
    }
    public static void RF_lensID$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.RF_lensID$VH.set(seg, x);
    }
    public static short RF_lensID$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.RF_lensID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RF_lensID$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.RF_lensID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AutoLightingOptimizer$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("AutoLightingOptimizer"));
    public static VarHandle AutoLightingOptimizer$VH() {
        return libraw_canon_makernotes_t.AutoLightingOptimizer$VH;
    }
    public static int AutoLightingOptimizer$get(MemorySegment seg) {
        return (int)libraw_canon_makernotes_t.AutoLightingOptimizer$VH.get(seg);
    }
    public static void AutoLightingOptimizer$set( MemorySegment seg, int x) {
        libraw_canon_makernotes_t.AutoLightingOptimizer$VH.set(seg, x);
    }
    public static int AutoLightingOptimizer$get(MemorySegment seg, long index) {
        return (int)libraw_canon_makernotes_t.AutoLightingOptimizer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AutoLightingOptimizer$set(MemorySegment seg, long index, int x) {
        libraw_canon_makernotes_t.AutoLightingOptimizer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle HighlightTonePriority$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("HighlightTonePriority"));
    public static VarHandle HighlightTonePriority$VH() {
        return libraw_canon_makernotes_t.HighlightTonePriority$VH;
    }
    public static int HighlightTonePriority$get(MemorySegment seg) {
        return (int)libraw_canon_makernotes_t.HighlightTonePriority$VH.get(seg);
    }
    public static void HighlightTonePriority$set( MemorySegment seg, int x) {
        libraw_canon_makernotes_t.HighlightTonePriority$VH.set(seg, x);
    }
    public static int HighlightTonePriority$get(MemorySegment seg, long index) {
        return (int)libraw_canon_makernotes_t.HighlightTonePriority$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void HighlightTonePriority$set(MemorySegment seg, long index, int x) {
        libraw_canon_makernotes_t.HighlightTonePriority$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment DefaultCropAbsolute$slice(MemorySegment seg) {
        return seg.asSlice(116, 8);
    }
    public static MemorySegment RecommendedImageArea$slice(MemorySegment seg) {
        return seg.asSlice(124, 8);
    }
    public static MemorySegment LeftOpticalBlack$slice(MemorySegment seg) {
        return seg.asSlice(132, 8);
    }
    public static MemorySegment UpperOpticalBlack$slice(MemorySegment seg) {
        return seg.asSlice(140, 8);
    }
    public static MemorySegment ActiveArea$slice(MemorySegment seg) {
        return seg.asSlice(148, 8);
    }
    public static MemorySegment ISOgain$slice(MemorySegment seg) {
        return seg.asSlice(156, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


