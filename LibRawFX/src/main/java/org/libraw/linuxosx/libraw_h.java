// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.util.Objects;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
public final class libraw_h  {

    /* package-private */ libraw_h() {}
    public static  int LIBRAW_MAX_METADATA_BLOCKS() {
        return libraw_h_constants_0.LIBRAW_MAX_METADATA_BLOCKS();
    }
    public static  int LIBRAW_CBLACK_SIZE() {
        return libraw_h_constants_0.LIBRAW_CBLACK_SIZE();
    }
    public static  int LIBRAW_IFD_MAXCOUNT() {
        return libraw_h_constants_0.LIBRAW_IFD_MAXCOUNT();
    }
    public static  int LIBRAW_CRXTRACKS_MAXCOUNT() {
        return libraw_h_constants_0.LIBRAW_CRXTRACKS_MAXCOUNT();
    }
    public static  int LIBRAW_AHD_TILE() {
        return libraw_h_constants_0.LIBRAW_AHD_TILE();
    }
    public static  int LIBRAW_XTRANS() {
        return libraw_h_constants_0.LIBRAW_XTRANS();
    }
    public static  int LIBRAW_PROGRESS_THUMB_MASK() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_THUMB_MASK();
    }
    public static  int LIBRAW_MAJOR_VERSION() {
        return libraw_h_constants_0.LIBRAW_MAJOR_VERSION();
    }
    public static  int LIBRAW_MINOR_VERSION() {
        return libraw_h_constants_0.LIBRAW_MINOR_VERSION();
    }
    public static  int LIBRAW_PATCH_VERSION() {
        return libraw_h_constants_0.LIBRAW_PATCH_VERSION();
    }
    public static  int LIBRAW_SHLIB_CURRENT() {
        return libraw_h_constants_0.LIBRAW_SHLIB_CURRENT();
    }
    public static  int LIBRAW_SHLIB_REVISION() {
        return libraw_h_constants_0.LIBRAW_SHLIB_REVISION();
    }
    public static  int LIBRAW_SHLIB_AGE() {
        return libraw_h_constants_0.LIBRAW_SHLIB_AGE();
    }
    public static  int LibRawBigEndian() {
        return libraw_h_constants_0.LibRawBigEndian();
    }
    public static  int LIBRAW_HISTOGRAM_SIZE() {
        return libraw_h_constants_0.LIBRAW_HISTOGRAM_SIZE();
    }
    public static  int LIBRAW_OPEN_BIGFILE() {
        return libraw_h_constants_0.LIBRAW_OPEN_BIGFILE();
    }
    public static  int LIBRAW_OPEN_FILE() {
        return libraw_h_constants_0.LIBRAW_OPEN_FILE();
    }
    public static  int LIBRAW_OPENBAYER_RGGB() {
        return libraw_h_constants_0.LIBRAW_OPENBAYER_RGGB();
    }
    public static  int LIBRAW_OPENBAYER_BGGR() {
        return libraw_h_constants_0.LIBRAW_OPENBAYER_BGGR();
    }
    public static  int LIBRAW_OPENBAYER_GRBG() {
        return libraw_h_constants_0.LIBRAW_OPENBAYER_GRBG();
    }
    public static  int LIBRAW_OPENBAYER_GBRG() {
        return libraw_h_constants_0.LIBRAW_OPENBAYER_GBRG();
    }
    public static  int LIBRAW_DNGFM_FORWARDMATRIX() {
        return libraw_h_constants_0.LIBRAW_DNGFM_FORWARDMATRIX();
    }
    public static  int LIBRAW_DNGFM_ILLUMINANT() {
        return libraw_h_constants_0.LIBRAW_DNGFM_ILLUMINANT();
    }
    public static  int LIBRAW_DNGFM_COLORMATRIX() {
        return libraw_h_constants_0.LIBRAW_DNGFM_COLORMATRIX();
    }
    public static  int LIBRAW_DNGFM_CALIBRATION() {
        return libraw_h_constants_0.LIBRAW_DNGFM_CALIBRATION();
    }
    public static  int LIBRAW_DNGFM_ANALOGBALANCE() {
        return libraw_h_constants_0.LIBRAW_DNGFM_ANALOGBALANCE();
    }
    public static  int LIBRAW_DNGFM_BLACK() {
        return libraw_h_constants_0.LIBRAW_DNGFM_BLACK();
    }
    public static  int LIBRAW_DNGFM_WHITE() {
        return libraw_h_constants_0.LIBRAW_DNGFM_WHITE();
    }
    public static  int LIBRAW_DNGFM_OPCODE2() {
        return libraw_h_constants_0.LIBRAW_DNGFM_OPCODE2();
    }
    public static  int LIBRAW_DNGFM_LINTABLE() {
        return libraw_h_constants_0.LIBRAW_DNGFM_LINTABLE();
    }
    public static  int LIBRAW_DNGFM_CROPORIGIN() {
        return libraw_h_constants_0.LIBRAW_DNGFM_CROPORIGIN();
    }
    public static  int LIBRAW_DNGFM_CROPSIZE() {
        return libraw_h_constants_0.LIBRAW_DNGFM_CROPSIZE();
    }
    public static  int LIBRAW_DNGFM_PREVIEWCS() {
        return libraw_h_constants_0.LIBRAW_DNGFM_PREVIEWCS();
    }
    public static  int LIBRAW_DNGFM_ASSHOTNEUTRAL() {
        return libraw_h_constants_0.LIBRAW_DNGFM_ASSHOTNEUTRAL();
    }
    public static  int LIBRAW_DNGFM_BASELINEEXPOSURE() {
        return libraw_h_constants_0.LIBRAW_DNGFM_BASELINEEXPOSURE();
    }
    public static  int LIBRAW_DNGFM_LINEARRESPONSELIMIT() {
        return libraw_h_constants_0.LIBRAW_DNGFM_LINEARRESPONSELIMIT();
    }
    public static  int LIBRAW_ASWB_APPLIED() {
        return libraw_h_constants_0.LIBRAW_ASWB_APPLIED();
    }
    public static  int LIBRAW_ASWB_CANON() {
        return libraw_h_constants_0.LIBRAW_ASWB_CANON();
    }
    public static  int LIBRAW_ASWB_NIKON() {
        return libraw_h_constants_0.LIBRAW_ASWB_NIKON();
    }
    public static  int LIBRAW_ASWB_NIKON_SRAW() {
        return libraw_h_constants_0.LIBRAW_ASWB_NIKON_SRAW();
    }
    public static  int LIBRAW_ASWB_PENTAX() {
        return libraw_h_constants_0.LIBRAW_ASWB_PENTAX();
    }
    public static  int LIBRAW_EXIFTAG_TYPE_UNKNOWN() {
        return libraw_h_constants_0.LIBRAW_EXIFTAG_TYPE_UNKNOWN();
    }
    public static  int LIBRAW_EXIFTAG_TYPE_BYTE() {
        return libraw_h_constants_0.LIBRAW_EXIFTAG_TYPE_BYTE();
    }
    public static  int LIBRAW_EXIFTAG_TYPE_ASCII() {
        return libraw_h_constants_0.LIBRAW_EXIFTAG_TYPE_ASCII();
    }
    public static  int LIBRAW_EXIFTAG_TYPE_SHORT() {
        return libraw_h_constants_0.LIBRAW_EXIFTAG_TYPE_SHORT();
    }
    public static  int LIBRAW_EXIFTAG_TYPE_LONG() {
        return libraw_h_constants_0.LIBRAW_EXIFTAG_TYPE_LONG();
    }
    public static  int LIBRAW_EXIFTAG_TYPE_RATIONAL() {
        return libraw_h_constants_0.LIBRAW_EXIFTAG_TYPE_RATIONAL();
    }
    public static  int LIBRAW_EXIFTAG_TYPE_SBYTE() {
        return libraw_h_constants_0.LIBRAW_EXIFTAG_TYPE_SBYTE();
    }
    public static  int LIBRAW_EXIFTAG_TYPE_UNDEFINED() {
        return libraw_h_constants_0.LIBRAW_EXIFTAG_TYPE_UNDEFINED();
    }
    public static  int LIBRAW_EXIFTAG_TYPE_SSHORT() {
        return libraw_h_constants_0.LIBRAW_EXIFTAG_TYPE_SSHORT();
    }
    public static  int LIBRAW_EXIFTAG_TYPE_SLONG() {
        return libraw_h_constants_0.LIBRAW_EXIFTAG_TYPE_SLONG();
    }
    public static  int LIBRAW_EXIFTAG_TYPE_SRATIONAL() {
        return libraw_h_constants_0.LIBRAW_EXIFTAG_TYPE_SRATIONAL();
    }
    public static  int LIBRAW_EXIFTAG_TYPE_FLOAT() {
        return libraw_h_constants_0.LIBRAW_EXIFTAG_TYPE_FLOAT();
    }
    public static  int LIBRAW_EXIFTAG_TYPE_DOUBLE() {
        return libraw_h_constants_0.LIBRAW_EXIFTAG_TYPE_DOUBLE();
    }
    public static  int LIBRAW_EXIFTAG_TYPE_IFD() {
        return libraw_h_constants_0.LIBRAW_EXIFTAG_TYPE_IFD();
    }
    public static  int LIBRAW_EXIFTAG_TYPE_UNICODE() {
        return libraw_h_constants_0.LIBRAW_EXIFTAG_TYPE_UNICODE();
    }
    public static  int LIBRAW_EXIFTAG_TYPE_COMPLEX() {
        return libraw_h_constants_0.LIBRAW_EXIFTAG_TYPE_COMPLEX();
    }
    public static  int LIBRAW_EXIFTAG_TYPE_LONG8() {
        return libraw_h_constants_0.LIBRAW_EXIFTAG_TYPE_LONG8();
    }
    public static  int LIBRAW_EXIFTAG_TYPE_SLONG8() {
        return libraw_h_constants_0.LIBRAW_EXIFTAG_TYPE_SLONG8();
    }
    public static  int LIBRAW_EXIFTAG_TYPE_IFD8() {
        return libraw_h_constants_0.LIBRAW_EXIFTAG_TYPE_IFD8();
    }
    public static  int LIBRAW_WBI_Unknown() {
        return libraw_h_constants_0.LIBRAW_WBI_Unknown();
    }
    public static  int LIBRAW_WBI_Daylight() {
        return libraw_h_constants_0.LIBRAW_WBI_Daylight();
    }
    public static  int LIBRAW_WBI_Fluorescent() {
        return libraw_h_constants_0.LIBRAW_WBI_Fluorescent();
    }
    public static  int LIBRAW_WBI_Tungsten() {
        return libraw_h_constants_0.LIBRAW_WBI_Tungsten();
    }
    public static  int LIBRAW_WBI_Flash() {
        return libraw_h_constants_0.LIBRAW_WBI_Flash();
    }
    public static  int LIBRAW_WBI_FineWeather() {
        return libraw_h_constants_0.LIBRAW_WBI_FineWeather();
    }
    public static  int LIBRAW_WBI_Cloudy() {
        return libraw_h_constants_0.LIBRAW_WBI_Cloudy();
    }
    public static  int LIBRAW_WBI_Shade() {
        return libraw_h_constants_0.LIBRAW_WBI_Shade();
    }
    public static  int LIBRAW_WBI_FL_D() {
        return libraw_h_constants_0.LIBRAW_WBI_FL_D();
    }
    public static  int LIBRAW_WBI_FL_N() {
        return libraw_h_constants_0.LIBRAW_WBI_FL_N();
    }
    public static  int LIBRAW_WBI_FL_W() {
        return libraw_h_constants_0.LIBRAW_WBI_FL_W();
    }
    public static  int LIBRAW_WBI_FL_WW() {
        return libraw_h_constants_0.LIBRAW_WBI_FL_WW();
    }
    public static  int LIBRAW_WBI_FL_L() {
        return libraw_h_constants_0.LIBRAW_WBI_FL_L();
    }
    public static  int LIBRAW_WBI_Ill_A() {
        return libraw_h_constants_0.LIBRAW_WBI_Ill_A();
    }
    public static  int LIBRAW_WBI_Ill_B() {
        return libraw_h_constants_0.LIBRAW_WBI_Ill_B();
    }
    public static  int LIBRAW_WBI_Ill_C() {
        return libraw_h_constants_0.LIBRAW_WBI_Ill_C();
    }
    public static  int LIBRAW_WBI_D55() {
        return libraw_h_constants_0.LIBRAW_WBI_D55();
    }
    public static  int LIBRAW_WBI_D65() {
        return libraw_h_constants_0.LIBRAW_WBI_D65();
    }
    public static  int LIBRAW_WBI_D75() {
        return libraw_h_constants_0.LIBRAW_WBI_D75();
    }
    public static  int LIBRAW_WBI_D50() {
        return libraw_h_constants_0.LIBRAW_WBI_D50();
    }
    public static  int LIBRAW_WBI_StudioTungsten() {
        return libraw_h_constants_0.LIBRAW_WBI_StudioTungsten();
    }
    public static  int LIBRAW_WBI_Sunset() {
        return libraw_h_constants_0.LIBRAW_WBI_Sunset();
    }
    public static  int LIBRAW_WBI_Underwater() {
        return libraw_h_constants_0.LIBRAW_WBI_Underwater();
    }
    public static  int LIBRAW_WBI_FluorescentHigh() {
        return libraw_h_constants_0.LIBRAW_WBI_FluorescentHigh();
    }
    public static  int LIBRAW_WBI_HT_Mercury() {
        return libraw_h_constants_0.LIBRAW_WBI_HT_Mercury();
    }
    public static  int LIBRAW_WBI_AsShot() {
        return libraw_h_constants_0.LIBRAW_WBI_AsShot();
    }
    public static  int LIBRAW_WBI_Auto() {
        return libraw_h_constants_0.LIBRAW_WBI_Auto();
    }
    public static  int LIBRAW_WBI_Custom() {
        return libraw_h_constants_0.LIBRAW_WBI_Custom();
    }
    public static  int LIBRAW_WBI_Auto1() {
        return libraw_h_constants_0.LIBRAW_WBI_Auto1();
    }
    public static  int LIBRAW_WBI_Auto2() {
        return libraw_h_constants_0.LIBRAW_WBI_Auto2();
    }
    public static  int LIBRAW_WBI_Auto3() {
        return libraw_h_constants_0.LIBRAW_WBI_Auto3();
    }
    public static  int LIBRAW_WBI_Auto4() {
        return libraw_h_constants_0.LIBRAW_WBI_Auto4();
    }
    public static  int LIBRAW_WBI_Custom1() {
        return libraw_h_constants_0.LIBRAW_WBI_Custom1();
    }
    public static  int LIBRAW_WBI_Custom2() {
        return libraw_h_constants_0.LIBRAW_WBI_Custom2();
    }
    public static  int LIBRAW_WBI_Custom3() {
        return libraw_h_constants_0.LIBRAW_WBI_Custom3();
    }
    public static  int LIBRAW_WBI_Custom4() {
        return libraw_h_constants_0.LIBRAW_WBI_Custom4();
    }
    public static  int LIBRAW_WBI_Custom5() {
        return libraw_h_constants_0.LIBRAW_WBI_Custom5();
    }
    public static  int LIBRAW_WBI_Custom6() {
        return libraw_h_constants_0.LIBRAW_WBI_Custom6();
    }
    public static  int LIBRAW_WBI_PC_Set1() {
        return libraw_h_constants_0.LIBRAW_WBI_PC_Set1();
    }
    public static  int LIBRAW_WBI_PC_Set2() {
        return libraw_h_constants_0.LIBRAW_WBI_PC_Set2();
    }
    public static  int LIBRAW_WBI_PC_Set3() {
        return libraw_h_constants_0.LIBRAW_WBI_PC_Set3();
    }
    public static  int LIBRAW_WBI_PC_Set4() {
        return libraw_h_constants_0.LIBRAW_WBI_PC_Set4();
    }
    public static  int LIBRAW_WBI_PC_Set5() {
        return libraw_h_constants_0.LIBRAW_WBI_PC_Set5();
    }
    public static  int LIBRAW_WBI_Measured() {
        return libraw_h_constants_0.LIBRAW_WBI_Measured();
    }
    public static  int LIBRAW_WBI_BW() {
        return libraw_h_constants_0.LIBRAW_WBI_BW();
    }
    public static  int LIBRAW_WBI_Kelvin() {
        return libraw_h_constants_0.LIBRAW_WBI_Kelvin();
    }
    public static  int LIBRAW_WBI_Other() {
        return libraw_h_constants_0.LIBRAW_WBI_Other();
    }
    public static  int LIBRAW_WBI_None() {
        return libraw_h_constants_0.LIBRAW_WBI_None();
    }
    public static  int LIBRAW_ME_NONE() {
        return libraw_h_constants_0.LIBRAW_ME_NONE();
    }
    public static  int LIBRAW_ME_SIMPLE() {
        return libraw_h_constants_0.LIBRAW_ME_SIMPLE();
    }
    public static  int LIBRAW_ME_OVERLAY() {
        return libraw_h_constants_0.LIBRAW_ME_OVERLAY();
    }
    public static  int LIBRAW_ME_HDR() {
        return libraw_h_constants_0.LIBRAW_ME_HDR();
    }
    public static  int LIBRAW_DNG_NONE() {
        return libraw_h_constants_0.LIBRAW_DNG_NONE();
    }
    public static  int LIBRAW_DNG_FLOAT() {
        return libraw_h_constants_0.LIBRAW_DNG_FLOAT();
    }
    public static  int LIBRAW_DNG_LINEAR() {
        return libraw_h_constants_0.LIBRAW_DNG_LINEAR();
    }
    public static  int LIBRAW_DNG_DEFLATE() {
        return libraw_h_constants_0.LIBRAW_DNG_DEFLATE();
    }
    public static  int LIBRAW_DNG_XTRANS() {
        return libraw_h_constants_0.LIBRAW_DNG_XTRANS();
    }
    public static  int LIBRAW_DNG_OTHER() {
        return libraw_h_constants_0.LIBRAW_DNG_OTHER();
    }
    public static  int LIBRAW_DNG_8BIT() {
        return libraw_h_constants_0.LIBRAW_DNG_8BIT();
    }
    public static  int LIBRAW_DNG_ALL() {
        return libraw_h_constants_0.LIBRAW_DNG_ALL();
    }
    public static  int LIBRAW_DNG_DEFAULT() {
        return libraw_h_constants_0.LIBRAW_DNG_DEFAULT();
    }
    public static  int LIBRAW_CAPS_RAWSPEED() {
        return libraw_h_constants_0.LIBRAW_CAPS_RAWSPEED();
    }
    public static  int LIBRAW_CAPS_DNGSDK() {
        return libraw_h_constants_0.LIBRAW_CAPS_DNGSDK();
    }
    public static  int LIBRAW_CAPS_GPRSDK() {
        return libraw_h_constants_0.LIBRAW_CAPS_GPRSDK();
    }
    public static  int LIBRAW_CAPS_UNICODEPATHS() {
        return libraw_h_constants_0.LIBRAW_CAPS_UNICODEPATHS();
    }
    public static  int LIBRAW_CAPS_X3FTOOLS() {
        return libraw_h_constants_0.LIBRAW_CAPS_X3FTOOLS();
    }
    public static  int LIBRAW_CAPS_RPI6BY9() {
        return libraw_h_constants_0.LIBRAW_CAPS_RPI6BY9();
    }
    public static  int LIBRAW_COLORSPACE_NotFound() {
        return libraw_h_constants_0.LIBRAW_COLORSPACE_NotFound();
    }
    public static  int LIBRAW_COLORSPACE_sRGB() {
        return libraw_h_constants_0.LIBRAW_COLORSPACE_sRGB();
    }
    public static  int LIBRAW_COLORSPACE_AdobeRGB() {
        return libraw_h_constants_0.LIBRAW_COLORSPACE_AdobeRGB();
    }
    public static  int LIBRAW_COLORSPACE_WideGamutRGB() {
        return libraw_h_constants_0.LIBRAW_COLORSPACE_WideGamutRGB();
    }
    public static  int LIBRAW_COLORSPACE_ProPhotoRGB() {
        return libraw_h_constants_0.LIBRAW_COLORSPACE_ProPhotoRGB();
    }
    public static  int LIBRAW_COLORSPACE_ICC() {
        return libraw_h_constants_0.LIBRAW_COLORSPACE_ICC();
    }
    public static  int LIBRAW_COLORSPACE_Uncalibrated() {
        return libraw_h_constants_0.LIBRAW_COLORSPACE_Uncalibrated();
    }
    public static  int LIBRAW_COLORSPACE_CameraLinearUniWB() {
        return libraw_h_constants_0.LIBRAW_COLORSPACE_CameraLinearUniWB();
    }
    public static  int LIBRAW_COLORSPACE_CameraLinear() {
        return libraw_h_constants_0.LIBRAW_COLORSPACE_CameraLinear();
    }
    public static  int LIBRAW_COLORSPACE_CameraGammaUniWB() {
        return libraw_h_constants_0.LIBRAW_COLORSPACE_CameraGammaUniWB();
    }
    public static  int LIBRAW_COLORSPACE_CameraGamma() {
        return libraw_h_constants_0.LIBRAW_COLORSPACE_CameraGamma();
    }
    public static  int LIBRAW_COLORSPACE_MonochromeLinear() {
        return libraw_h_constants_0.LIBRAW_COLORSPACE_MonochromeLinear();
    }
    public static  int LIBRAW_COLORSPACE_MonochromeGamma() {
        return libraw_h_constants_0.LIBRAW_COLORSPACE_MonochromeGamma();
    }
    public static  int LIBRAW_COLORSPACE_Unknown() {
        return libraw_h_constants_0.LIBRAW_COLORSPACE_Unknown();
    }
    public static  int LIBRAW_CAMERAMAKER_Unknown() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Unknown();
    }
    public static  int LIBRAW_CAMERAMAKER_Agfa() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Agfa();
    }
    public static  int LIBRAW_CAMERAMAKER_Alcatel() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Alcatel();
    }
    public static  int LIBRAW_CAMERAMAKER_Apple() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Apple();
    }
    public static  int LIBRAW_CAMERAMAKER_Aptina() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Aptina();
    }
    public static  int LIBRAW_CAMERAMAKER_AVT() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_AVT();
    }
    public static  int LIBRAW_CAMERAMAKER_Baumer() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Baumer();
    }
    public static  int LIBRAW_CAMERAMAKER_Broadcom() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Broadcom();
    }
    public static  int LIBRAW_CAMERAMAKER_Canon() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Canon();
    }
    public static  int LIBRAW_CAMERAMAKER_Casio() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Casio();
    }
    public static  int LIBRAW_CAMERAMAKER_CINE() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_CINE();
    }
    public static  int LIBRAW_CAMERAMAKER_Clauss() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Clauss();
    }
    public static  int LIBRAW_CAMERAMAKER_Contax() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Contax();
    }
    public static  int LIBRAW_CAMERAMAKER_Creative() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Creative();
    }
    public static  int LIBRAW_CAMERAMAKER_DJI() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_DJI();
    }
    public static  int LIBRAW_CAMERAMAKER_DXO() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_DXO();
    }
    public static  int LIBRAW_CAMERAMAKER_Epson() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Epson();
    }
    public static  int LIBRAW_CAMERAMAKER_Foculus() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Foculus();
    }
    public static  int LIBRAW_CAMERAMAKER_Fujifilm() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Fujifilm();
    }
    public static  int LIBRAW_CAMERAMAKER_Generic() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Generic();
    }
    public static  int LIBRAW_CAMERAMAKER_Gione() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Gione();
    }
    public static  int LIBRAW_CAMERAMAKER_GITUP() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_GITUP();
    }
    public static  int LIBRAW_CAMERAMAKER_Google() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Google();
    }
    public static  int LIBRAW_CAMERAMAKER_GoPro() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_GoPro();
    }
    public static  int LIBRAW_CAMERAMAKER_Hasselblad() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Hasselblad();
    }
    public static  int LIBRAW_CAMERAMAKER_HTC() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_HTC();
    }
    public static  int LIBRAW_CAMERAMAKER_I_Mobile() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_I_Mobile();
    }
    public static  int LIBRAW_CAMERAMAKER_Imacon() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Imacon();
    }
    public static  int LIBRAW_CAMERAMAKER_JK_Imaging() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_JK_Imaging();
    }
    public static  int LIBRAW_CAMERAMAKER_Kodak() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Kodak();
    }
    public static  int LIBRAW_CAMERAMAKER_Konica() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Konica();
    }
    public static  int LIBRAW_CAMERAMAKER_Leaf() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Leaf();
    }
    public static  int LIBRAW_CAMERAMAKER_Leica() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Leica();
    }
    public static  int LIBRAW_CAMERAMAKER_Lenovo() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Lenovo();
    }
    public static  int LIBRAW_CAMERAMAKER_LG() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_LG();
    }
    public static  int LIBRAW_CAMERAMAKER_Logitech() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Logitech();
    }
    public static  int LIBRAW_CAMERAMAKER_Mamiya() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Mamiya();
    }
    public static  int LIBRAW_CAMERAMAKER_Matrix() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Matrix();
    }
    public static  int LIBRAW_CAMERAMAKER_Meizu() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Meizu();
    }
    public static  int LIBRAW_CAMERAMAKER_Micron() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Micron();
    }
    public static  int LIBRAW_CAMERAMAKER_Minolta() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Minolta();
    }
    public static  int LIBRAW_CAMERAMAKER_Motorola() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Motorola();
    }
    public static  int LIBRAW_CAMERAMAKER_NGM() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_NGM();
    }
    public static  int LIBRAW_CAMERAMAKER_Nikon() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Nikon();
    }
    public static  int LIBRAW_CAMERAMAKER_Nokia() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Nokia();
    }
    public static  int LIBRAW_CAMERAMAKER_Olympus() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Olympus();
    }
    public static  int LIBRAW_CAMERAMAKER_OmniVison() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_OmniVison();
    }
    public static  int LIBRAW_CAMERAMAKER_Panasonic() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Panasonic();
    }
    public static  int LIBRAW_CAMERAMAKER_Parrot() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Parrot();
    }
    public static  int LIBRAW_CAMERAMAKER_Pentax() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Pentax();
    }
    public static  int LIBRAW_CAMERAMAKER_PhaseOne() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_PhaseOne();
    }
    public static  int LIBRAW_CAMERAMAKER_PhotoControl() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_PhotoControl();
    }
    public static  int LIBRAW_CAMERAMAKER_Photron() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Photron();
    }
    public static  int LIBRAW_CAMERAMAKER_Pixelink() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Pixelink();
    }
    public static  int LIBRAW_CAMERAMAKER_Polaroid() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Polaroid();
    }
    public static  int LIBRAW_CAMERAMAKER_RED() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_RED();
    }
    public static  int LIBRAW_CAMERAMAKER_Ricoh() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Ricoh();
    }
    public static  int LIBRAW_CAMERAMAKER_Rollei() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Rollei();
    }
    public static  int LIBRAW_CAMERAMAKER_RoverShot() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_RoverShot();
    }
    public static  int LIBRAW_CAMERAMAKER_Samsung() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Samsung();
    }
    public static  int LIBRAW_CAMERAMAKER_Sigma() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Sigma();
    }
    public static  int LIBRAW_CAMERAMAKER_Sinar() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Sinar();
    }
    public static  int LIBRAW_CAMERAMAKER_SMaL() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_SMaL();
    }
    public static  int LIBRAW_CAMERAMAKER_Sony() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Sony();
    }
    public static  int LIBRAW_CAMERAMAKER_ST_Micro() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_ST_Micro();
    }
    public static  int LIBRAW_CAMERAMAKER_THL() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_THL();
    }
    public static  int LIBRAW_CAMERAMAKER_VLUU() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_VLUU();
    }
    public static  int LIBRAW_CAMERAMAKER_Xiaomi() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Xiaomi();
    }
    public static  int LIBRAW_CAMERAMAKER_XIAOYI() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_XIAOYI();
    }
    public static  int LIBRAW_CAMERAMAKER_YI() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_YI();
    }
    public static  int LIBRAW_CAMERAMAKER_Yuneec() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Yuneec();
    }
    public static  int LIBRAW_CAMERAMAKER_Zeiss() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_Zeiss();
    }
    public static  int LIBRAW_CAMERAMAKER_TheLastOne() {
        return libraw_h_constants_0.LIBRAW_CAMERAMAKER_TheLastOne();
    }
    public static  int LIBRAW_MOUNT_Unknown() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Unknown();
    }
    public static  int LIBRAW_MOUNT_Alpa() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Alpa();
    }
    public static  int LIBRAW_MOUNT_C() {
        return libraw_h_constants_0.LIBRAW_MOUNT_C();
    }
    public static  int LIBRAW_MOUNT_Canon_EF_M() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Canon_EF_M();
    }
    public static  int LIBRAW_MOUNT_Canon_EF_S() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Canon_EF_S();
    }
    public static  int LIBRAW_MOUNT_Canon_EF() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Canon_EF();
    }
    public static  int LIBRAW_MOUNT_Canon_RF() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Canon_RF();
    }
    public static  int LIBRAW_MOUNT_Contax_N() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Contax_N();
    }
    public static  int LIBRAW_MOUNT_Contax645() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Contax645();
    }
    public static  int LIBRAW_MOUNT_FT() {
        return libraw_h_constants_0.LIBRAW_MOUNT_FT();
    }
    public static  int LIBRAW_MOUNT_mFT() {
        return libraw_h_constants_0.LIBRAW_MOUNT_mFT();
    }
    public static  int LIBRAW_MOUNT_Fuji_GF() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Fuji_GF();
    }
    public static  int LIBRAW_MOUNT_Fuji_GX() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Fuji_GX();
    }
    public static  int LIBRAW_MOUNT_Fuji_X() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Fuji_X();
    }
    public static  int LIBRAW_MOUNT_Hasselblad_H() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Hasselblad_H();
    }
    public static  int LIBRAW_MOUNT_Hasselblad_V() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Hasselblad_V();
    }
    public static  int LIBRAW_MOUNT_Hasselblad_XCD() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Hasselblad_XCD();
    }
    public static  int LIBRAW_MOUNT_Leica_M() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Leica_M();
    }
    public static  int LIBRAW_MOUNT_Leica_R() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Leica_R();
    }
    public static  int LIBRAW_MOUNT_Leica_S() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Leica_S();
    }
    public static  int LIBRAW_MOUNT_Leica_SL() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Leica_SL();
    }
    public static  int LIBRAW_MOUNT_Leica_TL() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Leica_TL();
    }
    public static  int LIBRAW_MOUNT_LPS_L() {
        return libraw_h_constants_0.LIBRAW_MOUNT_LPS_L();
    }
    public static  int LIBRAW_MOUNT_Mamiya67() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Mamiya67();
    }
    public static  int LIBRAW_MOUNT_Mamiya645() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Mamiya645();
    }
    public static  int LIBRAW_MOUNT_Minolta_A() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Minolta_A();
    }
    public static  int LIBRAW_MOUNT_Nikon_CX() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Nikon_CX();
    }
    public static  int LIBRAW_MOUNT_Nikon_F() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Nikon_F();
    }
    public static  int LIBRAW_MOUNT_Nikon_Z() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Nikon_Z();
    }
    public static  int LIBRAW_MOUNT_Pentax_645() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Pentax_645();
    }
    public static  int LIBRAW_MOUNT_Pentax_K() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Pentax_K();
    }
    public static  int LIBRAW_MOUNT_Pentax_Q() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Pentax_Q();
    }
    public static  int LIBRAW_MOUNT_RicohModule() {
        return libraw_h_constants_0.LIBRAW_MOUNT_RicohModule();
    }
    public static  int LIBRAW_MOUNT_Rollei_bayonet() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Rollei_bayonet();
    }
    public static  int LIBRAW_MOUNT_Samsung_NX_M() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Samsung_NX_M();
    }
    public static  int LIBRAW_MOUNT_Samsung_NX() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Samsung_NX();
    }
    public static  int LIBRAW_MOUNT_Sigma_X3F() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Sigma_X3F();
    }
    public static  int LIBRAW_MOUNT_Sony_E() {
        return libraw_h_constants_0.LIBRAW_MOUNT_Sony_E();
    }
    public static  int LIBRAW_MOUNT_LF() {
        return libraw_h_constants_0.LIBRAW_MOUNT_LF();
    }
    public static  int LIBRAW_MOUNT_DigitalBack() {
        return libraw_h_constants_0.LIBRAW_MOUNT_DigitalBack();
    }
    public static  int LIBRAW_MOUNT_FixedLens() {
        return libraw_h_constants_0.LIBRAW_MOUNT_FixedLens();
    }
    public static  int LIBRAW_MOUNT_IL_UM() {
        return libraw_h_constants_0.LIBRAW_MOUNT_IL_UM();
    }
    public static  int LIBRAW_MOUNT_TheLastOne() {
        return libraw_h_constants_0.LIBRAW_MOUNT_TheLastOne();
    }
    public static  int LIBRAW_FORMAT_Unknown() {
        return libraw_h_constants_0.LIBRAW_FORMAT_Unknown();
    }
    public static  int LIBRAW_FORMAT_APSC() {
        return libraw_h_constants_0.LIBRAW_FORMAT_APSC();
    }
    public static  int LIBRAW_FORMAT_FF() {
        return libraw_h_constants_0.LIBRAW_FORMAT_FF();
    }
    public static  int LIBRAW_FORMAT_MF() {
        return libraw_h_constants_0.LIBRAW_FORMAT_MF();
    }
    public static  int LIBRAW_FORMAT_APSH() {
        return libraw_h_constants_0.LIBRAW_FORMAT_APSH();
    }
    public static  int LIBRAW_FORMAT_1INCH() {
        return libraw_h_constants_0.LIBRAW_FORMAT_1INCH();
    }
    public static  int LIBRAW_FORMAT_1div2p3INCH() {
        return libraw_h_constants_0.LIBRAW_FORMAT_1div2p3INCH();
    }
    public static  int LIBRAW_FORMAT_1div1p7INCH() {
        return libraw_h_constants_0.LIBRAW_FORMAT_1div1p7INCH();
    }
    public static  int LIBRAW_FORMAT_FT() {
        return libraw_h_constants_0.LIBRAW_FORMAT_FT();
    }
    public static  int LIBRAW_FORMAT_CROP645() {
        return libraw_h_constants_0.LIBRAW_FORMAT_CROP645();
    }
    public static  int LIBRAW_FORMAT_LeicaS() {
        return libraw_h_constants_0.LIBRAW_FORMAT_LeicaS();
    }
    public static  int LIBRAW_FORMAT_645() {
        return libraw_h_constants_0.LIBRAW_FORMAT_645();
    }
    public static  int LIBRAW_FORMAT_66() {
        return libraw_h_constants_0.LIBRAW_FORMAT_66();
    }
    public static  int LIBRAW_FORMAT_69() {
        return libraw_h_constants_0.LIBRAW_FORMAT_69();
    }
    public static  int LIBRAW_FORMAT_LF() {
        return libraw_h_constants_0.LIBRAW_FORMAT_LF();
    }
    public static  int LIBRAW_FORMAT_Leica_DMR() {
        return libraw_h_constants_0.LIBRAW_FORMAT_Leica_DMR();
    }
    public static  int LIBRAW_FORMAT_67() {
        return libraw_h_constants_0.LIBRAW_FORMAT_67();
    }
    public static  int LIBRAW_FORMAT_SigmaAPSC() {
        return libraw_h_constants_0.LIBRAW_FORMAT_SigmaAPSC();
    }
    public static  int LIBRAW_FORMAT_SigmaMerrill() {
        return libraw_h_constants_0.LIBRAW_FORMAT_SigmaMerrill();
    }
    public static  int LIBRAW_FORMAT_SigmaAPSH() {
        return libraw_h_constants_0.LIBRAW_FORMAT_SigmaAPSH();
    }
    public static  int LIBRAW_FORMAT_3648() {
        return libraw_h_constants_0.LIBRAW_FORMAT_3648();
    }
    public static  int LIBRAW_FORMAT_68() {
        return libraw_h_constants_0.LIBRAW_FORMAT_68();
    }
    public static  int LIBRAW_FORMAT_TheLastOne() {
        return libraw_h_constants_0.LIBRAW_FORMAT_TheLastOne();
    }
    public static  int LIBRAW_IMAGE_ASPECT_UNKNOWN() {
        return libraw_h_constants_0.LIBRAW_IMAGE_ASPECT_UNKNOWN();
    }
    public static  int LIBRAW_IMAGE_ASPECT_3to2() {
        return libraw_h_constants_0.LIBRAW_IMAGE_ASPECT_3to2();
    }
    public static  int LIBRAW_IMAGE_ASPECT_1to1() {
        return libraw_h_constants_0.LIBRAW_IMAGE_ASPECT_1to1();
    }
    public static  int LIBRAW_IMAGE_ASPECT_4to3() {
        return libraw_h_constants_0.LIBRAW_IMAGE_ASPECT_4to3();
    }
    public static  int LIBRAW_IMAGE_ASPECT_16to9() {
        return libraw_h_constants_0.LIBRAW_IMAGE_ASPECT_16to9();
    }
    public static  int LIBRAW_IMAGE_ASPECT_5to4() {
        return libraw_h_constants_0.LIBRAW_IMAGE_ASPECT_5to4();
    }
    public static  int LIBRAW_IMAGE_ASPECT_OTHER() {
        return libraw_h_constants_0.LIBRAW_IMAGE_ASPECT_OTHER();
    }
    public static  int LIBRAW_FT_UNDEFINED() {
        return libraw_h_constants_0.LIBRAW_FT_UNDEFINED();
    }
    public static  int LIBRAW_FT_PRIME_LENS() {
        return libraw_h_constants_0.LIBRAW_FT_PRIME_LENS();
    }
    public static  int LIBRAW_FT_ZOOM_LENS() {
        return libraw_h_constants_0.LIBRAW_FT_ZOOM_LENS();
    }
    public static  int LIBRAW_FT_ZOOM_LENS_CONSTANT_APERTURE() {
        return libraw_h_constants_0.LIBRAW_FT_ZOOM_LENS_CONSTANT_APERTURE();
    }
    public static  int LIBRAW_FT_ZOOM_LENS_VARIABLE_APERTURE() {
        return libraw_h_constants_0.LIBRAW_FT_ZOOM_LENS_VARIABLE_APERTURE();
    }
    public static  int LIBRAW_Canon_RecordMode_UNDEFINED() {
        return libraw_h_constants_0.LIBRAW_Canon_RecordMode_UNDEFINED();
    }
    public static  int LIBRAW_Canon_RecordMode_JPEG() {
        return libraw_h_constants_0.LIBRAW_Canon_RecordMode_JPEG();
    }
    public static  int LIBRAW_Canon_RecordMode_CRW_THM() {
        return libraw_h_constants_0.LIBRAW_Canon_RecordMode_CRW_THM();
    }
    public static  int LIBRAW_Canon_RecordMode_AVI_THM() {
        return libraw_h_constants_0.LIBRAW_Canon_RecordMode_AVI_THM();
    }
    public static  int LIBRAW_Canon_RecordMode_TIF() {
        return libraw_h_constants_0.LIBRAW_Canon_RecordMode_TIF();
    }
    public static  int LIBRAW_Canon_RecordMode_TIF_JPEG() {
        return libraw_h_constants_0.LIBRAW_Canon_RecordMode_TIF_JPEG();
    }
    public static  int LIBRAW_Canon_RecordMode_CR2() {
        return libraw_h_constants_0.LIBRAW_Canon_RecordMode_CR2();
    }
    public static  int LIBRAW_Canon_RecordMode_CR2_JPEG() {
        return libraw_h_constants_0.LIBRAW_Canon_RecordMode_CR2_JPEG();
    }
    public static  int LIBRAW_Canon_RecordMode_UNKNOWN() {
        return libraw_h_constants_0.LIBRAW_Canon_RecordMode_UNKNOWN();
    }
    public static  int LIBRAW_Canon_RecordMode_MOV() {
        return libraw_h_constants_0.LIBRAW_Canon_RecordMode_MOV();
    }
    public static  int LIBRAW_Canon_RecordMode_MP4() {
        return libraw_h_constants_0.LIBRAW_Canon_RecordMode_MP4();
    }
    public static  int LIBRAW_Canon_RecordMode_CRM() {
        return libraw_h_constants_0.LIBRAW_Canon_RecordMode_CRM();
    }
    public static  int LIBRAW_Canon_RecordMode_CR3() {
        return libraw_h_constants_0.LIBRAW_Canon_RecordMode_CR3();
    }
    public static  int LIBRAW_Canon_RecordMode_CR3_JPEG() {
        return libraw_h_constants_0.LIBRAW_Canon_RecordMode_CR3_JPEG();
    }
    public static  int LIBRAW_Canon_RecordMode_HEIF() {
        return libraw_h_constants_0.LIBRAW_Canon_RecordMode_HEIF();
    }
    public static  int LIBRAW_Canon_RecordMode_CR3_HEIF() {
        return libraw_h_constants_0.LIBRAW_Canon_RecordMode_CR3_HEIF();
    }
    public static  int LIBRAW_Canon_RecordMode_TheLastOne() {
        return libraw_h_constants_0.LIBRAW_Canon_RecordMode_TheLastOne();
    }
    public static  int LIBRAW_SONY_DSC() {
        return libraw_h_constants_0.LIBRAW_SONY_DSC();
    }
    public static  int LIBRAW_SONY_DSLR() {
        return libraw_h_constants_0.LIBRAW_SONY_DSLR();
    }
    public static  int LIBRAW_SONY_NEX() {
        return libraw_h_constants_0.LIBRAW_SONY_NEX();
    }
    public static  int LIBRAW_SONY_SLT() {
        return libraw_h_constants_0.LIBRAW_SONY_SLT();
    }
    public static  int LIBRAW_SONY_ILCE() {
        return libraw_h_constants_0.LIBRAW_SONY_ILCE();
    }
    public static  int LIBRAW_SONY_ILCA() {
        return libraw_h_constants_0.LIBRAW_SONY_ILCA();
    }
    public static  int LIBRAW_Kodak_UnknownSensor() {
        return libraw_h_constants_0.LIBRAW_Kodak_UnknownSensor();
    }
    public static  int LIBRAW_Kodak_M1() {
        return libraw_h_constants_0.LIBRAW_Kodak_M1();
    }
    public static  int LIBRAW_Kodak_M15() {
        return libraw_h_constants_0.LIBRAW_Kodak_M15();
    }
    public static  int LIBRAW_Kodak_M16() {
        return libraw_h_constants_0.LIBRAW_Kodak_M16();
    }
    public static  int LIBRAW_Kodak_M17() {
        return libraw_h_constants_0.LIBRAW_Kodak_M17();
    }
    public static  int LIBRAW_Kodak_M2() {
        return libraw_h_constants_0.LIBRAW_Kodak_M2();
    }
    public static  int LIBRAW_Kodak_M23() {
        return libraw_h_constants_0.LIBRAW_Kodak_M23();
    }
    public static  int LIBRAW_Kodak_M24() {
        return libraw_h_constants_0.LIBRAW_Kodak_M24();
    }
    public static  int LIBRAW_Kodak_M3() {
        return libraw_h_constants_0.LIBRAW_Kodak_M3();
    }
    public static  int LIBRAW_Kodak_M5() {
        return libraw_h_constants_0.LIBRAW_Kodak_M5();
    }
    public static  int LIBRAW_Kodak_M6() {
        return libraw_h_constants_0.LIBRAW_Kodak_M6();
    }
    public static  int LIBRAW_Kodak_C14() {
        return libraw_h_constants_0.LIBRAW_Kodak_C14();
    }
    public static  int LIBRAW_Kodak_X14() {
        return libraw_h_constants_0.LIBRAW_Kodak_X14();
    }
    public static  int LIBRAW_Kodak_M11() {
        return libraw_h_constants_0.LIBRAW_Kodak_M11();
    }
    public static  int LIBRAW_HF_Unknown() {
        return libraw_h_constants_0.LIBRAW_HF_Unknown();
    }
    public static  int LIBRAW_HF_3FR() {
        return libraw_h_constants_0.LIBRAW_HF_3FR();
    }
    public static  int LIBRAW_HF_FFF() {
        return libraw_h_constants_0.LIBRAW_HF_FFF();
    }
    public static  int LIBRAW_HF_Imacon() {
        return libraw_h_constants_0.LIBRAW_HF_Imacon();
    }
    public static  int LIBRAW_HF_HasselbladDNG() {
        return libraw_h_constants_0.LIBRAW_HF_HasselbladDNG();
    }
    public static  int LIBRAW_HF_AdobeDNG() {
        return libraw_h_constants_0.LIBRAW_HF_AdobeDNG();
    }
    public static  int LIBRAW_HF_AdobeDNG_fromPhocusDNG() {
        return libraw_h_constants_0.LIBRAW_HF_AdobeDNG_fromPhocusDNG();
    }
    public static  int LIBRAW_PROCESSING_SONYARW2_NONE() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_SONYARW2_NONE();
    }
    public static  int LIBRAW_PROCESSING_SONYARW2_BASEONLY() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_SONYARW2_BASEONLY();
    }
    public static  int LIBRAW_PROCESSING_SONYARW2_DELTAONLY() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_SONYARW2_DELTAONLY();
    }
    public static  int LIBRAW_PROCESSING_SONYARW2_DELTAZEROBASE() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_SONYARW2_DELTAZEROBASE();
    }
    public static  int LIBRAW_PROCESSING_SONYARW2_DELTATOVALUE() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_SONYARW2_DELTATOVALUE();
    }
    public static  int LIBRAW_PROCESSING_SONYARW2_ALLFLAGS() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_SONYARW2_ALLFLAGS();
    }
    public static  int LIBRAW_PROCESSING_DP2Q_INTERPOLATERG() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_DP2Q_INTERPOLATERG();
    }
    public static  int LIBRAW_PROCESSING_DP2Q_INTERPOLATEAF() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_DP2Q_INTERPOLATEAF();
    }
    public static  int LIBRAW_PROCESSING_PENTAX_PS_ALLFRAMES() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_PENTAX_PS_ALLFRAMES();
    }
    public static  int LIBRAW_PROCESSING_CONVERTFLOAT_TO_INT() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_CONVERTFLOAT_TO_INT();
    }
    public static  int LIBRAW_PROCESSING_SRAW_NO_RGB() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_SRAW_NO_RGB();
    }
    public static  int LIBRAW_PROCESSING_SRAW_NO_INTERPOLATE() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_SRAW_NO_INTERPOLATE();
    }
    public static  int LIBRAW_PROCESSING_ARQ_SKIP_CHANNEL_SWAP() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_ARQ_SKIP_CHANNEL_SWAP();
    }
    public static  int LIBRAW_PROCESSING_NO_ROTATE_FOR_KODAK_THUMBNAILS() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_NO_ROTATE_FOR_KODAK_THUMBNAILS();
    }
    public static  int LIBRAW_PROCESSING_USE_DNG_DEFAULT_CROP() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_USE_DNG_DEFAULT_CROP();
    }
    public static  int LIBRAW_PROCESSING_USE_PPM16_THUMBS() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_USE_PPM16_THUMBS();
    }
    public static  int LIBRAW_PROCESSING_SKIP_MAKERNOTES() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_SKIP_MAKERNOTES();
    }
    public static  int LIBRAW_PROCESSING_DONT_CHECK_DNG_ILLUMINANT() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_DONT_CHECK_DNG_ILLUMINANT();
    }
    public static  int LIBRAW_PROCESSING_DNGSDK_ZEROCOPY() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_DNGSDK_ZEROCOPY();
    }
    public static  int LIBRAW_PROCESSING_ZEROFILTERS_FOR_MONOCHROMETIFFS() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_ZEROFILTERS_FOR_MONOCHROMETIFFS();
    }
    public static  int LIBRAW_PROCESSING_DNG_ADD_ENHANCED() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_DNG_ADD_ENHANCED();
    }
    public static  int LIBRAW_PROCESSING_DNG_ADD_PREVIEWS() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_DNG_ADD_PREVIEWS();
    }
    public static  int LIBRAW_PROCESSING_DNG_PREFER_LARGEST_IMAGE() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_DNG_PREFER_LARGEST_IMAGE();
    }
    public static  int LIBRAW_PROCESSING_DNG_STAGE2() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_DNG_STAGE2();
    }
    public static  int LIBRAW_PROCESSING_DNG_STAGE3() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_DNG_STAGE3();
    }
    public static  int LIBRAW_PROCESSING_DNG_ALLOWSIZECHANGE() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_DNG_ALLOWSIZECHANGE();
    }
    public static  int LIBRAW_PROCESSING_DNG_DISABLEWBADJUST() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_DNG_DISABLEWBADJUST();
    }
    public static  int LIBRAW_PROCESSING_PROVIDE_NONSTANDARD_WB() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_PROVIDE_NONSTANDARD_WB();
    }
    public static  int LIBRAW_PROCESSING_CAMERAWB_FALLBACK_TO_DAYLIGHT() {
        return libraw_h_constants_0.LIBRAW_PROCESSING_CAMERAWB_FALLBACK_TO_DAYLIGHT();
    }
    public static  int LIBRAW_DECODER_HASCURVE() {
        return libraw_h_constants_0.LIBRAW_DECODER_HASCURVE();
    }
    public static  int LIBRAW_DECODER_SONYARW2() {
        return libraw_h_constants_0.LIBRAW_DECODER_SONYARW2();
    }
    public static  int LIBRAW_DECODER_TRYRAWSPEED() {
        return libraw_h_constants_0.LIBRAW_DECODER_TRYRAWSPEED();
    }
    public static  int LIBRAW_DECODER_OWNALLOC() {
        return libraw_h_constants_0.LIBRAW_DECODER_OWNALLOC();
    }
    public static  int LIBRAW_DECODER_FIXEDMAXC() {
        return libraw_h_constants_0.LIBRAW_DECODER_FIXEDMAXC();
    }
    public static  int LIBRAW_DECODER_ADOBECOPYPIXEL() {
        return libraw_h_constants_0.LIBRAW_DECODER_ADOBECOPYPIXEL();
    }
    public static  int LIBRAW_DECODER_LEGACY_WITH_MARGINS() {
        return libraw_h_constants_0.LIBRAW_DECODER_LEGACY_WITH_MARGINS();
    }
    public static  int LIBRAW_DECODER_3CHANNEL() {
        return libraw_h_constants_0.LIBRAW_DECODER_3CHANNEL();
    }
    public static  int LIBRAW_DECODER_SINAR4SHOT() {
        return libraw_h_constants_0.LIBRAW_DECODER_SINAR4SHOT();
    }
    public static  int LIBRAW_DECODER_FLATDATA() {
        return libraw_h_constants_0.LIBRAW_DECODER_FLATDATA();
    }
    public static  int LIBRAW_DECODER_FLAT_BG2_SWAPPED() {
        return libraw_h_constants_0.LIBRAW_DECODER_FLAT_BG2_SWAPPED();
    }
    public static  int LIBRAW_DECODER_NOTSET() {
        return libraw_h_constants_0.LIBRAW_DECODER_NOTSET();
    }
    public static  int LIBRAW_OPTIONS_NONE() {
        return libraw_h_constants_0.LIBRAW_OPTIONS_NONE();
    }
    public static  int LIBRAW_OPIONS_NO_MEMERR_CALLBACK() {
        return libraw_h_constants_0.LIBRAW_OPIONS_NO_MEMERR_CALLBACK();
    }
    public static  int LIBRAW_OPIONS_NO_DATAERR_CALLBACK() {
        return libraw_h_constants_0.LIBRAW_OPIONS_NO_DATAERR_CALLBACK();
    }
    public static  int LIBRAW_WARN_NONE() {
        return libraw_h_constants_0.LIBRAW_WARN_NONE();
    }
    public static  int LIBRAW_WARN_BAD_CAMERA_WB() {
        return libraw_h_constants_0.LIBRAW_WARN_BAD_CAMERA_WB();
    }
    public static  int LIBRAW_WARN_NO_METADATA() {
        return libraw_h_constants_0.LIBRAW_WARN_NO_METADATA();
    }
    public static  int LIBRAW_WARN_NO_JPEGLIB() {
        return libraw_h_constants_0.LIBRAW_WARN_NO_JPEGLIB();
    }
    public static  int LIBRAW_WARN_NO_EMBEDDED_PROFILE() {
        return libraw_h_constants_0.LIBRAW_WARN_NO_EMBEDDED_PROFILE();
    }
    public static  int LIBRAW_WARN_NO_INPUT_PROFILE() {
        return libraw_h_constants_0.LIBRAW_WARN_NO_INPUT_PROFILE();
    }
    public static  int LIBRAW_WARN_BAD_OUTPUT_PROFILE() {
        return libraw_h_constants_0.LIBRAW_WARN_BAD_OUTPUT_PROFILE();
    }
    public static  int LIBRAW_WARN_NO_BADPIXELMAP() {
        return libraw_h_constants_0.LIBRAW_WARN_NO_BADPIXELMAP();
    }
    public static  int LIBRAW_WARN_BAD_DARKFRAME_FILE() {
        return libraw_h_constants_0.LIBRAW_WARN_BAD_DARKFRAME_FILE();
    }
    public static  int LIBRAW_WARN_BAD_DARKFRAME_DIM() {
        return libraw_h_constants_0.LIBRAW_WARN_BAD_DARKFRAME_DIM();
    }
    public static  int LIBRAW_WARN_NO_JASPER() {
        return libraw_h_constants_0.LIBRAW_WARN_NO_JASPER();
    }
    public static  int LIBRAW_WARN_RAWSPEED_PROBLEM() {
        return libraw_h_constants_0.LIBRAW_WARN_RAWSPEED_PROBLEM();
    }
    public static  int LIBRAW_WARN_RAWSPEED_UNSUPPORTED() {
        return libraw_h_constants_0.LIBRAW_WARN_RAWSPEED_UNSUPPORTED();
    }
    public static  int LIBRAW_WARN_RAWSPEED_PROCESSED() {
        return libraw_h_constants_0.LIBRAW_WARN_RAWSPEED_PROCESSED();
    }
    public static  int LIBRAW_WARN_FALLBACK_TO_AHD() {
        return libraw_h_constants_0.LIBRAW_WARN_FALLBACK_TO_AHD();
    }
    public static  int LIBRAW_WARN_PARSEFUJI_PROCESSED() {
        return libraw_h_constants_0.LIBRAW_WARN_PARSEFUJI_PROCESSED();
    }
    public static  int LIBRAW_WARN_DNGSDK_PROCESSED() {
        return libraw_h_constants_0.LIBRAW_WARN_DNGSDK_PROCESSED();
    }
    public static  int LIBRAW_WARN_DNG_IMAGES_REORDERED() {
        return libraw_h_constants_0.LIBRAW_WARN_DNG_IMAGES_REORDERED();
    }
    public static  int LIBRAW_WARN_DNG_STAGE2_APPLIED() {
        return libraw_h_constants_0.LIBRAW_WARN_DNG_STAGE2_APPLIED();
    }
    public static  int LIBRAW_WARN_DNG_STAGE3_APPLIED() {
        return libraw_h_constants_0.LIBRAW_WARN_DNG_STAGE3_APPLIED();
    }
    public static  int LIBRAW_EXCEPTION_NONE() {
        return libraw_h_constants_0.LIBRAW_EXCEPTION_NONE();
    }
    public static  int LIBRAW_EXCEPTION_ALLOC() {
        return libraw_h_constants_0.LIBRAW_EXCEPTION_ALLOC();
    }
    public static  int LIBRAW_EXCEPTION_DECODE_RAW() {
        return libraw_h_constants_0.LIBRAW_EXCEPTION_DECODE_RAW();
    }
    public static  int LIBRAW_EXCEPTION_DECODE_JPEG() {
        return libraw_h_constants_0.LIBRAW_EXCEPTION_DECODE_JPEG();
    }
    public static  int LIBRAW_EXCEPTION_IO_EOF() {
        return libraw_h_constants_0.LIBRAW_EXCEPTION_IO_EOF();
    }
    public static  int LIBRAW_EXCEPTION_IO_CORRUPT() {
        return libraw_h_constants_0.LIBRAW_EXCEPTION_IO_CORRUPT();
    }
    public static  int LIBRAW_EXCEPTION_CANCELLED_BY_CALLBACK() {
        return libraw_h_constants_0.LIBRAW_EXCEPTION_CANCELLED_BY_CALLBACK();
    }
    public static  int LIBRAW_EXCEPTION_BAD_CROP() {
        return libraw_h_constants_0.LIBRAW_EXCEPTION_BAD_CROP();
    }
    public static  int LIBRAW_EXCEPTION_IO_BADFILE() {
        return libraw_h_constants_0.LIBRAW_EXCEPTION_IO_BADFILE();
    }
    public static  int LIBRAW_EXCEPTION_DECODE_JPEG2000() {
        return libraw_h_constants_0.LIBRAW_EXCEPTION_DECODE_JPEG2000();
    }
    public static  int LIBRAW_EXCEPTION_TOOBIG() {
        return libraw_h_constants_0.LIBRAW_EXCEPTION_TOOBIG();
    }
    public static  int LIBRAW_EXCEPTION_MEMPOOL() {
        return libraw_h_constants_0.LIBRAW_EXCEPTION_MEMPOOL();
    }
    public static  int LIBRAW_PROGRESS_START() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_START();
    }
    public static  int LIBRAW_PROGRESS_OPEN() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_OPEN();
    }
    public static  int LIBRAW_PROGRESS_IDENTIFY() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_IDENTIFY();
    }
    public static  int LIBRAW_PROGRESS_SIZE_ADJUST() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_SIZE_ADJUST();
    }
    public static  int LIBRAW_PROGRESS_LOAD_RAW() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_LOAD_RAW();
    }
    public static  int LIBRAW_PROGRESS_RAW2_IMAGE() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_RAW2_IMAGE();
    }
    public static  int LIBRAW_PROGRESS_REMOVE_ZEROES() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_REMOVE_ZEROES();
    }
    public static  int LIBRAW_PROGRESS_BAD_PIXELS() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_BAD_PIXELS();
    }
    public static  int LIBRAW_PROGRESS_DARK_FRAME() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_DARK_FRAME();
    }
    public static  int LIBRAW_PROGRESS_FOVEON_INTERPOLATE() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_FOVEON_INTERPOLATE();
    }
    public static  int LIBRAW_PROGRESS_SCALE_COLORS() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_SCALE_COLORS();
    }
    public static  int LIBRAW_PROGRESS_PRE_INTERPOLATE() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_PRE_INTERPOLATE();
    }
    public static  int LIBRAW_PROGRESS_INTERPOLATE() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_INTERPOLATE();
    }
    public static  int LIBRAW_PROGRESS_MIX_GREEN() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_MIX_GREEN();
    }
    public static  int LIBRAW_PROGRESS_MEDIAN_FILTER() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_MEDIAN_FILTER();
    }
    public static  int LIBRAW_PROGRESS_HIGHLIGHTS() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_HIGHLIGHTS();
    }
    public static  int LIBRAW_PROGRESS_FUJI_ROTATE() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_FUJI_ROTATE();
    }
    public static  int LIBRAW_PROGRESS_FLIP() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_FLIP();
    }
    public static  int LIBRAW_PROGRESS_APPLY_PROFILE() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_APPLY_PROFILE();
    }
    public static  int LIBRAW_PROGRESS_CONVERT_RGB() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_CONVERT_RGB();
    }
    public static  int LIBRAW_PROGRESS_STRETCH() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_STRETCH();
    }
    public static  int LIBRAW_PROGRESS_STAGE20() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_STAGE20();
    }
    public static  int LIBRAW_PROGRESS_STAGE21() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_STAGE21();
    }
    public static  int LIBRAW_PROGRESS_STAGE22() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_STAGE22();
    }
    public static  int LIBRAW_PROGRESS_STAGE23() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_STAGE23();
    }
    public static  int LIBRAW_PROGRESS_STAGE24() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_STAGE24();
    }
    public static  int LIBRAW_PROGRESS_STAGE25() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_STAGE25();
    }
    public static  int LIBRAW_PROGRESS_STAGE26() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_STAGE26();
    }
    public static  int LIBRAW_PROGRESS_STAGE27() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_STAGE27();
    }
    public static  int LIBRAW_PROGRESS_THUMB_LOAD() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_THUMB_LOAD();
    }
    public static  int LIBRAW_PROGRESS_TRESERVED1() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_TRESERVED1();
    }
    public static  int LIBRAW_PROGRESS_TRESERVED2() {
        return libraw_h_constants_0.LIBRAW_PROGRESS_TRESERVED2();
    }
    public static  int LIBRAW_SUCCESS() {
        return libraw_h_constants_0.LIBRAW_SUCCESS();
    }
    public static  int LIBRAW_UNSPECIFIED_ERROR() {
        return libraw_h_constants_0.LIBRAW_UNSPECIFIED_ERROR();
    }
    public static  int LIBRAW_FILE_UNSUPPORTED() {
        return libraw_h_constants_0.LIBRAW_FILE_UNSUPPORTED();
    }
    public static  int LIBRAW_REQUEST_FOR_NONEXISTENT_IMAGE() {
        return libraw_h_constants_0.LIBRAW_REQUEST_FOR_NONEXISTENT_IMAGE();
    }
    public static  int LIBRAW_OUT_OF_ORDER_CALL() {
        return libraw_h_constants_0.LIBRAW_OUT_OF_ORDER_CALL();
    }
    public static  int LIBRAW_NO_THUMBNAIL() {
        return libraw_h_constants_0.LIBRAW_NO_THUMBNAIL();
    }
    public static  int LIBRAW_UNSUPPORTED_THUMBNAIL() {
        return libraw_h_constants_0.LIBRAW_UNSUPPORTED_THUMBNAIL();
    }
    public static  int LIBRAW_INPUT_CLOSED() {
        return libraw_h_constants_0.LIBRAW_INPUT_CLOSED();
    }
    public static  int LIBRAW_NOT_IMPLEMENTED() {
        return libraw_h_constants_0.LIBRAW_NOT_IMPLEMENTED();
    }
    public static  int LIBRAW_UNSUFFICIENT_MEMORY() {
        return libraw_h_constants_0.LIBRAW_UNSUFFICIENT_MEMORY();
    }
    public static  int LIBRAW_DATA_ERROR() {
        return libraw_h_constants_0.LIBRAW_DATA_ERROR();
    }
    public static  int LIBRAW_IO_ERROR() {
        return libraw_h_constants_0.LIBRAW_IO_ERROR();
    }
    public static  int LIBRAW_CANCELLED_BY_CALLBACK() {
        return libraw_h_constants_0.LIBRAW_CANCELLED_BY_CALLBACK();
    }
    public static  int LIBRAW_BAD_CROP() {
        return libraw_h_constants_0.LIBRAW_BAD_CROP();
    }
    public static  int LIBRAW_TOO_BIG() {
        return libraw_h_constants_0.LIBRAW_TOO_BIG();
    }
    public static  int LIBRAW_MEMPOOL_OVERFLOW() {
        return libraw_h_constants_0.LIBRAW_MEMPOOL_OVERFLOW();
    }
    public static  int LIBRAW_THUMBNAIL_UNKNOWN() {
        return libraw_h_constants_0.LIBRAW_THUMBNAIL_UNKNOWN();
    }
    public static  int LIBRAW_THUMBNAIL_JPEG() {
        return libraw_h_constants_0.LIBRAW_THUMBNAIL_JPEG();
    }
    public static  int LIBRAW_THUMBNAIL_BITMAP() {
        return libraw_h_constants_0.LIBRAW_THUMBNAIL_BITMAP();
    }
    public static  int LIBRAW_THUMBNAIL_BITMAP16() {
        return libraw_h_constants_0.LIBRAW_THUMBNAIL_BITMAP16();
    }
    public static  int LIBRAW_THUMBNAIL_LAYER() {
        return libraw_h_constants_0.LIBRAW_THUMBNAIL_LAYER();
    }
    public static  int LIBRAW_THUMBNAIL_ROLLEI() {
        return libraw_h_constants_0.LIBRAW_THUMBNAIL_ROLLEI();
    }
    public static  int LIBRAW_IMAGE_JPEG() {
        return libraw_h_constants_0.LIBRAW_IMAGE_JPEG();
    }
    public static  int LIBRAW_IMAGE_BITMAP() {
        return libraw_h_constants_0.LIBRAW_IMAGE_BITMAP();
    }
    public static  ValueLayout INT64 = C_LONG_LONG;
    public static class libraw_decoder_info_t {

        /* package-private */ libraw_decoder_info_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_0.libraw_decoder_info_t$struct$LAYOUT();
        }
        public static VarHandle decoder_name$VH() {
            return libraw_h_constants_0.libraw_decoder_info_t$decoder_name$VH();
        }
        public static  MemoryAddress decoder_name$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_decoder_info_t$decoder_name$VH().get(seg);
        }
        public static  MemoryAddress decoder_name$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_decoder_info_t$decoder_name$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void decoder_name$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_0.libraw_decoder_info_t$decoder_name$VH().set(seg, x);
        }
        public static void decoder_name$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_0.libraw_decoder_info_t$decoder_name$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle decoder_flags$VH() {
            return libraw_h_constants_0.libraw_decoder_info_t$decoder_flags$VH();
        }
        public static  int decoder_flags$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_decoder_info_t$decoder_flags$VH().get(seg);
        }
        public static  int decoder_flags$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_decoder_info_t$decoder_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void decoder_flags$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_decoder_info_t$decoder_flags$VH().set(seg, x);
        }
        public static void decoder_flags$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_decoder_info_t$decoder_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_internal_output_params_t {

        /* package-private */ libraw_internal_output_params_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_0.libraw_internal_output_params_t$struct$LAYOUT();
        }
        public static VarHandle mix_green$VH() {
            return libraw_h_constants_0.libraw_internal_output_params_t$mix_green$VH();
        }
        public static  int mix_green$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_internal_output_params_t$mix_green$VH().get(seg);
        }
        public static  int mix_green$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_internal_output_params_t$mix_green$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mix_green$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_internal_output_params_t$mix_green$VH().set(seg, x);
        }
        public static void mix_green$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_internal_output_params_t$mix_green$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle raw_color$VH() {
            return libraw_h_constants_0.libraw_internal_output_params_t$raw_color$VH();
        }
        public static  int raw_color$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_internal_output_params_t$raw_color$VH().get(seg);
        }
        public static  int raw_color$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_internal_output_params_t$raw_color$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void raw_color$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_internal_output_params_t$raw_color$VH().set(seg, x);
        }
        public static void raw_color$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_internal_output_params_t$raw_color$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle zero_is_bad$VH() {
            return libraw_h_constants_0.libraw_internal_output_params_t$zero_is_bad$VH();
        }
        public static  int zero_is_bad$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_internal_output_params_t$zero_is_bad$VH().get(seg);
        }
        public static  int zero_is_bad$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_internal_output_params_t$zero_is_bad$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void zero_is_bad$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_internal_output_params_t$zero_is_bad$VH().set(seg, x);
        }
        public static void zero_is_bad$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_internal_output_params_t$zero_is_bad$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle shrink$VH() {
            return libraw_h_constants_0.libraw_internal_output_params_t$shrink$VH();
        }
        public static  short shrink$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_internal_output_params_t$shrink$VH().get(seg);
        }
        public static  short shrink$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_internal_output_params_t$shrink$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void shrink$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_internal_output_params_t$shrink$VH().set(seg, x);
        }
        public static void shrink$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_internal_output_params_t$shrink$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fuji_width$VH() {
            return libraw_h_constants_0.libraw_internal_output_params_t$fuji_width$VH();
        }
        public static  short fuji_width$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_internal_output_params_t$fuji_width$VH().get(seg);
        }
        public static  short fuji_width$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_internal_output_params_t$fuji_width$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fuji_width$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_internal_output_params_t$fuji_width$VH().set(seg, x);
        }
        public static void fuji_width$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_internal_output_params_t$fuji_width$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static interface memory_callback {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        public static  MemorySegment allocate(memory_callback fi) {
            return RuntimeHelper.upcallStub(memory_callback.class, fi, libraw_h_constants_0.memory_callback$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(memory_callback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface exif_parser_callback {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, int x3, int x4, jdk.incubator.foreign.MemoryAddress x5, long x6);
        public static  MemorySegment allocate(exif_parser_callback fi) {
            return RuntimeHelper.upcallStub(exif_parser_callback.class, fi, libraw_h_constants_0.exif_parser_callback$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;IIIILjdk/incubator/foreign/MemoryAddress;J)V");
        }
        public static  MemorySegment allocate(exif_parser_callback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static  MethodHandle default_memory_callback$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_0.default_memory_callback$MH(),"unresolved symbol: default_memory_callback");
    }
    public static void default_memory_callback ( Addressable data,  Addressable file,  Addressable where) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_0.default_memory_callback$MH(), "unresolved symbol: default_memory_callback");
        try {
            mh$.invokeExact(data.address(), file.address(), where.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static interface data_callback {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
        public static  MemorySegment allocate(data_callback fi) {
            return RuntimeHelper.upcallStub(data_callback.class, fi, libraw_h_constants_0.data_callback$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V");
        }
        public static  MemorySegment allocate(data_callback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static  MethodHandle default_data_callback$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_0.default_data_callback$MH(),"unresolved symbol: default_data_callback");
    }
    public static void default_data_callback ( Addressable data,  Addressable file,  int offset) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_0.default_data_callback$MH(), "unresolved symbol: default_data_callback");
        try {
            mh$.invokeExact(data.address(), file.address(), offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static interface progress_callback {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, int x3);
        public static  MemorySegment allocate(progress_callback fi) {
            return RuntimeHelper.upcallStub(progress_callback.class, fi, libraw_h_constants_0.progress_callback$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;III)I");
        }
        public static  MemorySegment allocate(progress_callback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface pre_identify_callback {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  MemorySegment allocate(pre_identify_callback fi) {
            return RuntimeHelper.upcallStub(pre_identify_callback.class, fi, libraw_h_constants_0.pre_identify_callback$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        public static  MemorySegment allocate(pre_identify_callback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface post_identify_callback {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  MemorySegment allocate(post_identify_callback fi) {
            return RuntimeHelper.upcallStub(post_identify_callback.class, fi, libraw_h_constants_0.post_identify_callback$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(post_identify_callback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface process_step_callback {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  MemorySegment allocate(process_step_callback fi) {
            return RuntimeHelper.upcallStub(process_step_callback.class, fi, libraw_h_constants_0.process_step_callback$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  MemorySegment allocate(process_step_callback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static class libraw_callbacks_t {

        /* package-private */ libraw_callbacks_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_0.libraw_callbacks_t$struct$LAYOUT();
        }
        public static VarHandle mem_cb$VH() {
            return libraw_h_constants_0.libraw_callbacks_t$mem_cb$VH();
        }
        public static  MemoryAddress mem_cb$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$mem_cb$VH().get(seg);
        }
        public static  MemoryAddress mem_cb$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$mem_cb$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mem_cb$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$mem_cb$VH().set(seg, x);
        }
        public static void mem_cb$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$mem_cb$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle memcb_data$VH() {
            return libraw_h_constants_0.libraw_callbacks_t$memcb_data$VH();
        }
        public static  MemoryAddress memcb_data$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$memcb_data$VH().get(seg);
        }
        public static  MemoryAddress memcb_data$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$memcb_data$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void memcb_data$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$memcb_data$VH().set(seg, x);
        }
        public static void memcb_data$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$memcb_data$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle data_cb$VH() {
            return libraw_h_constants_0.libraw_callbacks_t$data_cb$VH();
        }
        public static  MemoryAddress data_cb$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$data_cb$VH().get(seg);
        }
        public static  MemoryAddress data_cb$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$data_cb$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void data_cb$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$data_cb$VH().set(seg, x);
        }
        public static void data_cb$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$data_cb$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle datacb_data$VH() {
            return libraw_h_constants_0.libraw_callbacks_t$datacb_data$VH();
        }
        public static  MemoryAddress datacb_data$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$datacb_data$VH().get(seg);
        }
        public static  MemoryAddress datacb_data$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$datacb_data$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void datacb_data$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$datacb_data$VH().set(seg, x);
        }
        public static void datacb_data$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$datacb_data$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle progress_cb$VH() {
            return libraw_h_constants_0.libraw_callbacks_t$progress_cb$VH();
        }
        public static  MemoryAddress progress_cb$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$progress_cb$VH().get(seg);
        }
        public static  MemoryAddress progress_cb$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$progress_cb$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void progress_cb$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$progress_cb$VH().set(seg, x);
        }
        public static void progress_cb$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$progress_cb$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle progresscb_data$VH() {
            return libraw_h_constants_0.libraw_callbacks_t$progresscb_data$VH();
        }
        public static  MemoryAddress progresscb_data$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$progresscb_data$VH().get(seg);
        }
        public static  MemoryAddress progresscb_data$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$progresscb_data$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void progresscb_data$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$progresscb_data$VH().set(seg, x);
        }
        public static void progresscb_data$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$progresscb_data$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle exif_cb$VH() {
            return libraw_h_constants_0.libraw_callbacks_t$exif_cb$VH();
        }
        public static  MemoryAddress exif_cb$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$exif_cb$VH().get(seg);
        }
        public static  MemoryAddress exif_cb$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$exif_cb$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void exif_cb$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$exif_cb$VH().set(seg, x);
        }
        public static void exif_cb$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$exif_cb$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle exifparser_data$VH() {
            return libraw_h_constants_0.libraw_callbacks_t$exifparser_data$VH();
        }
        public static  MemoryAddress exifparser_data$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$exifparser_data$VH().get(seg);
        }
        public static  MemoryAddress exifparser_data$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$exifparser_data$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void exifparser_data$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$exifparser_data$VH().set(seg, x);
        }
        public static void exifparser_data$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$exifparser_data$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pre_identify_cb$VH() {
            return libraw_h_constants_0.libraw_callbacks_t$pre_identify_cb$VH();
        }
        public static  MemoryAddress pre_identify_cb$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$pre_identify_cb$VH().get(seg);
        }
        public static  MemoryAddress pre_identify_cb$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$pre_identify_cb$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void pre_identify_cb$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$pre_identify_cb$VH().set(seg, x);
        }
        public static void pre_identify_cb$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$pre_identify_cb$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle post_identify_cb$VH() {
            return libraw_h_constants_0.libraw_callbacks_t$post_identify_cb$VH();
        }
        public static  MemoryAddress post_identify_cb$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$post_identify_cb$VH().get(seg);
        }
        public static  MemoryAddress post_identify_cb$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$post_identify_cb$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void post_identify_cb$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$post_identify_cb$VH().set(seg, x);
        }
        public static void post_identify_cb$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$post_identify_cb$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pre_subtractblack_cb$VH() {
            return libraw_h_constants_0.libraw_callbacks_t$pre_subtractblack_cb$VH();
        }
        public static  MemoryAddress pre_subtractblack_cb$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$pre_subtractblack_cb$VH().get(seg);
        }
        public static  MemoryAddress pre_subtractblack_cb$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$pre_subtractblack_cb$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void pre_subtractblack_cb$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$pre_subtractblack_cb$VH().set(seg, x);
        }
        public static void pre_subtractblack_cb$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$pre_subtractblack_cb$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pre_scalecolors_cb$VH() {
            return libraw_h_constants_0.libraw_callbacks_t$pre_scalecolors_cb$VH();
        }
        public static  MemoryAddress pre_scalecolors_cb$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$pre_scalecolors_cb$VH().get(seg);
        }
        public static  MemoryAddress pre_scalecolors_cb$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$pre_scalecolors_cb$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void pre_scalecolors_cb$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$pre_scalecolors_cb$VH().set(seg, x);
        }
        public static void pre_scalecolors_cb$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$pre_scalecolors_cb$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pre_preinterpolate_cb$VH() {
            return libraw_h_constants_0.libraw_callbacks_t$pre_preinterpolate_cb$VH();
        }
        public static  MemoryAddress pre_preinterpolate_cb$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$pre_preinterpolate_cb$VH().get(seg);
        }
        public static  MemoryAddress pre_preinterpolate_cb$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$pre_preinterpolate_cb$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void pre_preinterpolate_cb$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$pre_preinterpolate_cb$VH().set(seg, x);
        }
        public static void pre_preinterpolate_cb$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$pre_preinterpolate_cb$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pre_interpolate_cb$VH() {
            return libraw_h_constants_0.libraw_callbacks_t$pre_interpolate_cb$VH();
        }
        public static  MemoryAddress pre_interpolate_cb$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$pre_interpolate_cb$VH().get(seg);
        }
        public static  MemoryAddress pre_interpolate_cb$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$pre_interpolate_cb$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void pre_interpolate_cb$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$pre_interpolate_cb$VH().set(seg, x);
        }
        public static void pre_interpolate_cb$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$pre_interpolate_cb$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle interpolate_bayer_cb$VH() {
            return libraw_h_constants_0.libraw_callbacks_t$interpolate_bayer_cb$VH();
        }
        public static  MemoryAddress interpolate_bayer_cb$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$interpolate_bayer_cb$VH().get(seg);
        }
        public static  MemoryAddress interpolate_bayer_cb$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$interpolate_bayer_cb$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void interpolate_bayer_cb$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$interpolate_bayer_cb$VH().set(seg, x);
        }
        public static void interpolate_bayer_cb$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$interpolate_bayer_cb$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle interpolate_xtrans_cb$VH() {
            return libraw_h_constants_0.libraw_callbacks_t$interpolate_xtrans_cb$VH();
        }
        public static  MemoryAddress interpolate_xtrans_cb$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$interpolate_xtrans_cb$VH().get(seg);
        }
        public static  MemoryAddress interpolate_xtrans_cb$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$interpolate_xtrans_cb$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void interpolate_xtrans_cb$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$interpolate_xtrans_cb$VH().set(seg, x);
        }
        public static void interpolate_xtrans_cb$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$interpolate_xtrans_cb$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle post_interpolate_cb$VH() {
            return libraw_h_constants_0.libraw_callbacks_t$post_interpolate_cb$VH();
        }
        public static  MemoryAddress post_interpolate_cb$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$post_interpolate_cb$VH().get(seg);
        }
        public static  MemoryAddress post_interpolate_cb$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$post_interpolate_cb$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void post_interpolate_cb$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$post_interpolate_cb$VH().set(seg, x);
        }
        public static void post_interpolate_cb$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$post_interpolate_cb$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pre_converttorgb_cb$VH() {
            return libraw_h_constants_0.libraw_callbacks_t$pre_converttorgb_cb$VH();
        }
        public static  MemoryAddress pre_converttorgb_cb$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$pre_converttorgb_cb$VH().get(seg);
        }
        public static  MemoryAddress pre_converttorgb_cb$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$pre_converttorgb_cb$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void pre_converttorgb_cb$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$pre_converttorgb_cb$VH().set(seg, x);
        }
        public static void pre_converttorgb_cb$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$pre_converttorgb_cb$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle post_converttorgb_cb$VH() {
            return libraw_h_constants_0.libraw_callbacks_t$post_converttorgb_cb$VH();
        }
        public static  MemoryAddress post_converttorgb_cb$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$post_converttorgb_cb$VH().get(seg);
        }
        public static  MemoryAddress post_converttorgb_cb$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_callbacks_t$post_converttorgb_cb$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void post_converttorgb_cb$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$post_converttorgb_cb$VH().set(seg, x);
        }
        public static void post_converttorgb_cb$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_0.libraw_callbacks_t$post_converttorgb_cb$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_processed_image_t {

        /* package-private */ libraw_processed_image_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_0.libraw_processed_image_t$struct$LAYOUT();
        }
        public static VarHandle type$VH() {
            return libraw_h_constants_0.libraw_processed_image_t$type$VH();
        }
        public static  int type$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_processed_image_t$type$VH().get(seg);
        }
        public static  int type$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_processed_image_t$type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void type$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_processed_image_t$type$VH().set(seg, x);
        }
        public static void type$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_processed_image_t$type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle height$VH() {
            return libraw_h_constants_0.libraw_processed_image_t$height$VH();
        }
        public static  short height$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_processed_image_t$height$VH().get(seg);
        }
        public static  short height$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_processed_image_t$height$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void height$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_processed_image_t$height$VH().set(seg, x);
        }
        public static void height$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_processed_image_t$height$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle width$VH() {
            return libraw_h_constants_0.libraw_processed_image_t$width$VH();
        }
        public static  short width$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_processed_image_t$width$VH().get(seg);
        }
        public static  short width$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_processed_image_t$width$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void width$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_processed_image_t$width$VH().set(seg, x);
        }
        public static void width$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_processed_image_t$width$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle colors$VH() {
            return libraw_h_constants_0.libraw_processed_image_t$colors$VH();
        }
        public static  short colors$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_processed_image_t$colors$VH().get(seg);
        }
        public static  short colors$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_processed_image_t$colors$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void colors$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_processed_image_t$colors$VH().set(seg, x);
        }
        public static void colors$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_processed_image_t$colors$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle bits$VH() {
            return libraw_h_constants_0.libraw_processed_image_t$bits$VH();
        }
        public static  short bits$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_processed_image_t$bits$VH().get(seg);
        }
        public static  short bits$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_processed_image_t$bits$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void bits$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_processed_image_t$bits$VH().set(seg, x);
        }
        public static void bits$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_processed_image_t$bits$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle data_size$VH() {
            return libraw_h_constants_0.libraw_processed_image_t$data_size$VH();
        }
        public static  int data_size$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_processed_image_t$data_size$VH().get(seg);
        }
        public static  int data_size$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_processed_image_t$data_size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void data_size$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_processed_image_t$data_size$VH().set(seg, x);
        }
        public static void data_size$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_processed_image_t$data_size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment data$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 1));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_iparams_t {

        /* package-private */ libraw_iparams_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_0.libraw_iparams_t$struct$LAYOUT();
        }
        public static MemorySegment guard$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static MemorySegment make$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 64));
        }
        public static MemorySegment model$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(68, 64));
        }
        public static MemorySegment software$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(132, 64));
        }
        public static MemorySegment normalized_make$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(196, 64));
        }
        public static MemorySegment normalized_model$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(260, 64));
        }
        public static VarHandle maker_index$VH() {
            return libraw_h_constants_0.libraw_iparams_t$maker_index$VH();
        }
        public static  int maker_index$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_iparams_t$maker_index$VH().get(seg);
        }
        public static  int maker_index$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_iparams_t$maker_index$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void maker_index$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_iparams_t$maker_index$VH().set(seg, x);
        }
        public static void maker_index$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_iparams_t$maker_index$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle raw_count$VH() {
            return libraw_h_constants_0.libraw_iparams_t$raw_count$VH();
        }
        public static  int raw_count$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_iparams_t$raw_count$VH().get(seg);
        }
        public static  int raw_count$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_iparams_t$raw_count$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void raw_count$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_iparams_t$raw_count$VH().set(seg, x);
        }
        public static void raw_count$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_iparams_t$raw_count$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dng_version$VH() {
            return libraw_h_constants_0.libraw_iparams_t$dng_version$VH();
        }
        public static  int dng_version$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_iparams_t$dng_version$VH().get(seg);
        }
        public static  int dng_version$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_iparams_t$dng_version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dng_version$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_iparams_t$dng_version$VH().set(seg, x);
        }
        public static void dng_version$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_iparams_t$dng_version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle is_foveon$VH() {
            return libraw_h_constants_0.libraw_iparams_t$is_foveon$VH();
        }
        public static  int is_foveon$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_iparams_t$is_foveon$VH().get(seg);
        }
        public static  int is_foveon$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_iparams_t$is_foveon$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void is_foveon$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_iparams_t$is_foveon$VH().set(seg, x);
        }
        public static void is_foveon$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_iparams_t$is_foveon$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle colors$VH() {
            return libraw_h_constants_0.libraw_iparams_t$colors$VH();
        }
        public static  int colors$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_iparams_t$colors$VH().get(seg);
        }
        public static  int colors$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_iparams_t$colors$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void colors$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_iparams_t$colors$VH().set(seg, x);
        }
        public static void colors$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_iparams_t$colors$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle filters$VH() {
            return libraw_h_constants_0.libraw_iparams_t$filters$VH();
        }
        public static  int filters$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_iparams_t$filters$VH().get(seg);
        }
        public static  int filters$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_iparams_t$filters$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void filters$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_iparams_t$filters$VH().set(seg, x);
        }
        public static void filters$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_iparams_t$filters$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment xtrans$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(348, 36));
        }
        public static MemorySegment xtrans_abs$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(384, 36));
        }
        public static MemorySegment cdesc$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(420, 5));
        }
        public static VarHandle xmplen$VH() {
            return libraw_h_constants_0.libraw_iparams_t$xmplen$VH();
        }
        public static  int xmplen$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_iparams_t$xmplen$VH().get(seg);
        }
        public static  int xmplen$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_iparams_t$xmplen$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void xmplen$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_iparams_t$xmplen$VH().set(seg, x);
        }
        public static void xmplen$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_iparams_t$xmplen$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle xmpdata$VH() {
            return libraw_h_constants_0.libraw_iparams_t$xmpdata$VH();
        }
        public static  MemoryAddress xmpdata$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_iparams_t$xmpdata$VH().get(seg);
        }
        public static  MemoryAddress xmpdata$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_0.libraw_iparams_t$xmpdata$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void xmpdata$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_0.libraw_iparams_t$xmpdata$VH().set(seg, x);
        }
        public static void xmpdata$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_0.libraw_iparams_t$xmpdata$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_raw_inset_crop_t {

        /* package-private */ libraw_raw_inset_crop_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_0.libraw_raw_inset_crop_t$struct$LAYOUT();
        }
        public static VarHandle cleft$VH() {
            return libraw_h_constants_0.libraw_raw_inset_crop_t$cleft$VH();
        }
        public static  short cleft$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_raw_inset_crop_t$cleft$VH().get(seg);
        }
        public static  short cleft$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_raw_inset_crop_t$cleft$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void cleft$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_raw_inset_crop_t$cleft$VH().set(seg, x);
        }
        public static void cleft$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_raw_inset_crop_t$cleft$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ctop$VH() {
            return libraw_h_constants_0.libraw_raw_inset_crop_t$ctop$VH();
        }
        public static  short ctop$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_raw_inset_crop_t$ctop$VH().get(seg);
        }
        public static  short ctop$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_raw_inset_crop_t$ctop$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ctop$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_raw_inset_crop_t$ctop$VH().set(seg, x);
        }
        public static void ctop$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_raw_inset_crop_t$ctop$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle cwidth$VH() {
            return libraw_h_constants_0.libraw_raw_inset_crop_t$cwidth$VH();
        }
        public static  short cwidth$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_raw_inset_crop_t$cwidth$VH().get(seg);
        }
        public static  short cwidth$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_raw_inset_crop_t$cwidth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void cwidth$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_raw_inset_crop_t$cwidth$VH().set(seg, x);
        }
        public static void cwidth$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_raw_inset_crop_t$cwidth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle cheight$VH() {
            return libraw_h_constants_0.libraw_raw_inset_crop_t$cheight$VH();
        }
        public static  short cheight$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_raw_inset_crop_t$cheight$VH().get(seg);
        }
        public static  short cheight$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_raw_inset_crop_t$cheight$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void cheight$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_raw_inset_crop_t$cheight$VH().set(seg, x);
        }
        public static void cheight$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_raw_inset_crop_t$cheight$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle aspect$VH() {
            return libraw_h_constants_0.libraw_raw_inset_crop_t$aspect$VH();
        }
        public static  short aspect$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_raw_inset_crop_t$aspect$VH().get(seg);
        }
        public static  short aspect$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_raw_inset_crop_t$aspect$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void aspect$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_raw_inset_crop_t$aspect$VH().set(seg, x);
        }
        public static void aspect$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_raw_inset_crop_t$aspect$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_image_sizes_t {

        /* package-private */ libraw_image_sizes_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_0.libraw_image_sizes_t$struct$LAYOUT();
        }
        public static VarHandle raw_height$VH() {
            return libraw_h_constants_0.libraw_image_sizes_t$raw_height$VH();
        }
        public static  short raw_height$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_image_sizes_t$raw_height$VH().get(seg);
        }
        public static  short raw_height$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_image_sizes_t$raw_height$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void raw_height$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_image_sizes_t$raw_height$VH().set(seg, x);
        }
        public static void raw_height$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_image_sizes_t$raw_height$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle raw_width$VH() {
            return libraw_h_constants_0.libraw_image_sizes_t$raw_width$VH();
        }
        public static  short raw_width$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_image_sizes_t$raw_width$VH().get(seg);
        }
        public static  short raw_width$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_image_sizes_t$raw_width$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void raw_width$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_image_sizes_t$raw_width$VH().set(seg, x);
        }
        public static void raw_width$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_image_sizes_t$raw_width$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle height$VH() {
            return libraw_h_constants_0.libraw_image_sizes_t$height$VH();
        }
        public static  short height$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_image_sizes_t$height$VH().get(seg);
        }
        public static  short height$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_image_sizes_t$height$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void height$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_image_sizes_t$height$VH().set(seg, x);
        }
        public static void height$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_image_sizes_t$height$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle width$VH() {
            return libraw_h_constants_0.libraw_image_sizes_t$width$VH();
        }
        public static  short width$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_image_sizes_t$width$VH().get(seg);
        }
        public static  short width$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_image_sizes_t$width$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void width$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_image_sizes_t$width$VH().set(seg, x);
        }
        public static void width$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_image_sizes_t$width$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle top_margin$VH() {
            return libraw_h_constants_0.libraw_image_sizes_t$top_margin$VH();
        }
        public static  short top_margin$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_image_sizes_t$top_margin$VH().get(seg);
        }
        public static  short top_margin$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_image_sizes_t$top_margin$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void top_margin$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_image_sizes_t$top_margin$VH().set(seg, x);
        }
        public static void top_margin$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_image_sizes_t$top_margin$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle left_margin$VH() {
            return libraw_h_constants_0.libraw_image_sizes_t$left_margin$VH();
        }
        public static  short left_margin$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_image_sizes_t$left_margin$VH().get(seg);
        }
        public static  short left_margin$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_image_sizes_t$left_margin$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void left_margin$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_image_sizes_t$left_margin$VH().set(seg, x);
        }
        public static void left_margin$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_image_sizes_t$left_margin$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle iheight$VH() {
            return libraw_h_constants_0.libraw_image_sizes_t$iheight$VH();
        }
        public static  short iheight$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_image_sizes_t$iheight$VH().get(seg);
        }
        public static  short iheight$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_image_sizes_t$iheight$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void iheight$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_image_sizes_t$iheight$VH().set(seg, x);
        }
        public static void iheight$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_image_sizes_t$iheight$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle iwidth$VH() {
            return libraw_h_constants_0.libraw_image_sizes_t$iwidth$VH();
        }
        public static  short iwidth$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_image_sizes_t$iwidth$VH().get(seg);
        }
        public static  short iwidth$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_image_sizes_t$iwidth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void iwidth$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_image_sizes_t$iwidth$VH().set(seg, x);
        }
        public static void iwidth$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_image_sizes_t$iwidth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle raw_pitch$VH() {
            return libraw_h_constants_0.libraw_image_sizes_t$raw_pitch$VH();
        }
        public static  int raw_pitch$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_image_sizes_t$raw_pitch$VH().get(seg);
        }
        public static  int raw_pitch$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_image_sizes_t$raw_pitch$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void raw_pitch$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_image_sizes_t$raw_pitch$VH().set(seg, x);
        }
        public static void raw_pitch$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_image_sizes_t$raw_pitch$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pixel_aspect$VH() {
            return libraw_h_constants_0.libraw_image_sizes_t$pixel_aspect$VH();
        }
        public static  double pixel_aspect$get(MemorySegment seg) {
            return (double)libraw_h_constants_0.libraw_image_sizes_t$pixel_aspect$VH().get(seg);
        }
        public static  double pixel_aspect$get(MemorySegment seg, long index) {
            return (double)libraw_h_constants_0.libraw_image_sizes_t$pixel_aspect$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void pixel_aspect$set( MemorySegment seg, double x) {
            libraw_h_constants_0.libraw_image_sizes_t$pixel_aspect$VH().set(seg, x);
        }
        public static void pixel_aspect$set(MemorySegment seg, long index, double x) {
            libraw_h_constants_0.libraw_image_sizes_t$pixel_aspect$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle flip$VH() {
            return libraw_h_constants_0.libraw_image_sizes_t$flip$VH();
        }
        public static  int flip$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_image_sizes_t$flip$VH().get(seg);
        }
        public static  int flip$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_image_sizes_t$flip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void flip$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_image_sizes_t$flip$VH().set(seg, x);
        }
        public static void flip$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_image_sizes_t$flip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment mask$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(36, 128));
        }
        public static MemorySegment raw_inset_crop$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(164, 10));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class ph1_t {

        /* package-private */ ph1_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_0.ph1_t$struct$LAYOUT();
        }
        public static VarHandle format$VH() {
            return libraw_h_constants_0.ph1_t$format$VH();
        }
        public static  int format$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.ph1_t$format$VH().get(seg);
        }
        public static  int format$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.ph1_t$format$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void format$set( MemorySegment seg, int x) {
            libraw_h_constants_0.ph1_t$format$VH().set(seg, x);
        }
        public static void format$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.ph1_t$format$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle key_off$VH() {
            return libraw_h_constants_0.ph1_t$key_off$VH();
        }
        public static  int key_off$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.ph1_t$key_off$VH().get(seg);
        }
        public static  int key_off$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.ph1_t$key_off$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void key_off$set( MemorySegment seg, int x) {
            libraw_h_constants_0.ph1_t$key_off$VH().set(seg, x);
        }
        public static void key_off$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.ph1_t$key_off$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tag_21a$VH() {
            return libraw_h_constants_0.ph1_t$tag_21a$VH();
        }
        public static  int tag_21a$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.ph1_t$tag_21a$VH().get(seg);
        }
        public static  int tag_21a$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.ph1_t$tag_21a$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tag_21a$set( MemorySegment seg, int x) {
            libraw_h_constants_0.ph1_t$tag_21a$VH().set(seg, x);
        }
        public static void tag_21a$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.ph1_t$tag_21a$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle t_black$VH() {
            return libraw_h_constants_0.ph1_t$t_black$VH();
        }
        public static  int t_black$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.ph1_t$t_black$VH().get(seg);
        }
        public static  int t_black$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.ph1_t$t_black$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void t_black$set( MemorySegment seg, int x) {
            libraw_h_constants_0.ph1_t$t_black$VH().set(seg, x);
        }
        public static void t_black$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.ph1_t$t_black$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle split_col$VH() {
            return libraw_h_constants_0.ph1_t$split_col$VH();
        }
        public static  int split_col$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.ph1_t$split_col$VH().get(seg);
        }
        public static  int split_col$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.ph1_t$split_col$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void split_col$set( MemorySegment seg, int x) {
            libraw_h_constants_0.ph1_t$split_col$VH().set(seg, x);
        }
        public static void split_col$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.ph1_t$split_col$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle black_col$VH() {
            return libraw_h_constants_0.ph1_t$black_col$VH();
        }
        public static  int black_col$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.ph1_t$black_col$VH().get(seg);
        }
        public static  int black_col$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.ph1_t$black_col$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void black_col$set( MemorySegment seg, int x) {
            libraw_h_constants_0.ph1_t$black_col$VH().set(seg, x);
        }
        public static void black_col$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.ph1_t$black_col$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle split_row$VH() {
            return libraw_h_constants_0.ph1_t$split_row$VH();
        }
        public static  int split_row$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.ph1_t$split_row$VH().get(seg);
        }
        public static  int split_row$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.ph1_t$split_row$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void split_row$set( MemorySegment seg, int x) {
            libraw_h_constants_0.ph1_t$split_row$VH().set(seg, x);
        }
        public static void split_row$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.ph1_t$split_row$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle black_row$VH() {
            return libraw_h_constants_0.ph1_t$black_row$VH();
        }
        public static  int black_row$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.ph1_t$black_row$VH().get(seg);
        }
        public static  int black_row$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.ph1_t$black_row$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void black_row$set( MemorySegment seg, int x) {
            libraw_h_constants_0.ph1_t$black_row$VH().set(seg, x);
        }
        public static void black_row$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.ph1_t$black_row$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tag_210$VH() {
            return libraw_h_constants_0.ph1_t$tag_210$VH();
        }
        public static  float tag_210$get(MemorySegment seg) {
            return (float)libraw_h_constants_0.ph1_t$tag_210$VH().get(seg);
        }
        public static  float tag_210$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_0.ph1_t$tag_210$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tag_210$set( MemorySegment seg, float x) {
            libraw_h_constants_0.ph1_t$tag_210$VH().set(seg, x);
        }
        public static void tag_210$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_0.ph1_t$tag_210$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_dng_color_t {

        /* package-private */ libraw_dng_color_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_0.libraw_dng_color_t$struct$LAYOUT();
        }
        public static VarHandle parsedfields$VH() {
            return libraw_h_constants_0.libraw_dng_color_t$parsedfields$VH();
        }
        public static  int parsedfields$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_dng_color_t$parsedfields$VH().get(seg);
        }
        public static  int parsedfields$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_dng_color_t$parsedfields$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void parsedfields$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_dng_color_t$parsedfields$VH().set(seg, x);
        }
        public static void parsedfields$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_dng_color_t$parsedfields$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle illuminant$VH() {
            return libraw_h_constants_0.libraw_dng_color_t$illuminant$VH();
        }
        public static  short illuminant$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_dng_color_t$illuminant$VH().get(seg);
        }
        public static  short illuminant$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_dng_color_t$illuminant$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void illuminant$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_dng_color_t$illuminant$VH().set(seg, x);
        }
        public static void illuminant$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_dng_color_t$illuminant$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment calibration$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 64));
        }
        public static MemorySegment colormatrix$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(72, 48));
        }
        public static MemorySegment forwardmatrix$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(120, 48));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_dng_levels_t {

        /* package-private */ libraw_dng_levels_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_0.libraw_dng_levels_t$struct$LAYOUT();
        }
        public static VarHandle parsedfields$VH() {
            return libraw_h_constants_0.libraw_dng_levels_t$parsedfields$VH();
        }
        public static  int parsedfields$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_dng_levels_t$parsedfields$VH().get(seg);
        }
        public static  int parsedfields$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_dng_levels_t$parsedfields$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void parsedfields$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_dng_levels_t$parsedfields$VH().set(seg, x);
        }
        public static void parsedfields$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_dng_levels_t$parsedfields$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment dng_cblack$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 16416));
        }
        public static VarHandle dng_black$VH() {
            return libraw_h_constants_0.libraw_dng_levels_t$dng_black$VH();
        }
        public static  int dng_black$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_dng_levels_t$dng_black$VH().get(seg);
        }
        public static  int dng_black$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_dng_levels_t$dng_black$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dng_black$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_dng_levels_t$dng_black$VH().set(seg, x);
        }
        public static void dng_black$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_dng_levels_t$dng_black$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment dng_fcblack$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16424, 16416));
        }
        public static VarHandle dng_fblack$VH() {
            return libraw_h_constants_0.libraw_dng_levels_t$dng_fblack$VH();
        }
        public static  float dng_fblack$get(MemorySegment seg) {
            return (float)libraw_h_constants_0.libraw_dng_levels_t$dng_fblack$VH().get(seg);
        }
        public static  float dng_fblack$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_0.libraw_dng_levels_t$dng_fblack$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dng_fblack$set( MemorySegment seg, float x) {
            libraw_h_constants_0.libraw_dng_levels_t$dng_fblack$VH().set(seg, x);
        }
        public static void dng_fblack$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_0.libraw_dng_levels_t$dng_fblack$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment dng_whitelevel$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32844, 16));
        }
        public static MemorySegment default_crop$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32860, 16));
        }
        public static VarHandle preview_colorspace$VH() {
            return libraw_h_constants_0.libraw_dng_levels_t$preview_colorspace$VH();
        }
        public static  int preview_colorspace$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_dng_levels_t$preview_colorspace$VH().get(seg);
        }
        public static  int preview_colorspace$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_dng_levels_t$preview_colorspace$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void preview_colorspace$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_dng_levels_t$preview_colorspace$VH().set(seg, x);
        }
        public static void preview_colorspace$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_dng_levels_t$preview_colorspace$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment analogbalance$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32880, 16));
        }
        public static MemorySegment asshotneutral$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32896, 16));
        }
        public static VarHandle baseline_exposure$VH() {
            return libraw_h_constants_0.libraw_dng_levels_t$baseline_exposure$VH();
        }
        public static  float baseline_exposure$get(MemorySegment seg) {
            return (float)libraw_h_constants_0.libraw_dng_levels_t$baseline_exposure$VH().get(seg);
        }
        public static  float baseline_exposure$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_0.libraw_dng_levels_t$baseline_exposure$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void baseline_exposure$set( MemorySegment seg, float x) {
            libraw_h_constants_0.libraw_dng_levels_t$baseline_exposure$VH().set(seg, x);
        }
        public static void baseline_exposure$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_0.libraw_dng_levels_t$baseline_exposure$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LinearResponseLimit$VH() {
            return libraw_h_constants_0.libraw_dng_levels_t$LinearResponseLimit$VH();
        }
        public static  float LinearResponseLimit$get(MemorySegment seg) {
            return (float)libraw_h_constants_0.libraw_dng_levels_t$LinearResponseLimit$VH().get(seg);
        }
        public static  float LinearResponseLimit$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_0.libraw_dng_levels_t$LinearResponseLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LinearResponseLimit$set( MemorySegment seg, float x) {
            libraw_h_constants_0.libraw_dng_levels_t$LinearResponseLimit$VH().set(seg, x);
        }
        public static void LinearResponseLimit$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_0.libraw_dng_levels_t$LinearResponseLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_P1_color_t {

        /* package-private */ libraw_P1_color_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_0.libraw_P1_color_t$struct$LAYOUT();
        }
        public static MemorySegment romm_cam$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 36));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_canon_makernotes_t {

        /* package-private */ libraw_canon_makernotes_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$struct$LAYOUT();
        }
        public static VarHandle ColorDataVer$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$ColorDataVer$VH();
        }
        public static  int ColorDataVer$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_canon_makernotes_t$ColorDataVer$VH().get(seg);
        }
        public static  int ColorDataVer$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_canon_makernotes_t$ColorDataVer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ColorDataVer$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$ColorDataVer$VH().set(seg, x);
        }
        public static void ColorDataVer$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$ColorDataVer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ColorDataSubVer$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$ColorDataSubVer$VH();
        }
        public static  int ColorDataSubVer$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_canon_makernotes_t$ColorDataSubVer$VH().get(seg);
        }
        public static  int ColorDataSubVer$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_canon_makernotes_t$ColorDataSubVer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ColorDataSubVer$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$ColorDataSubVer$VH().set(seg, x);
        }
        public static void ColorDataSubVer$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$ColorDataSubVer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SpecularWhiteLevel$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$SpecularWhiteLevel$VH();
        }
        public static  int SpecularWhiteLevel$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_canon_makernotes_t$SpecularWhiteLevel$VH().get(seg);
        }
        public static  int SpecularWhiteLevel$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_canon_makernotes_t$SpecularWhiteLevel$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SpecularWhiteLevel$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$SpecularWhiteLevel$VH().set(seg, x);
        }
        public static void SpecularWhiteLevel$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$SpecularWhiteLevel$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NormalWhiteLevel$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$NormalWhiteLevel$VH();
        }
        public static  int NormalWhiteLevel$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_canon_makernotes_t$NormalWhiteLevel$VH().get(seg);
        }
        public static  int NormalWhiteLevel$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_canon_makernotes_t$NormalWhiteLevel$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NormalWhiteLevel$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$NormalWhiteLevel$VH().set(seg, x);
        }
        public static void NormalWhiteLevel$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$NormalWhiteLevel$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ChannelBlackLevel$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 16));
        }
        public static VarHandle AverageBlackLevel$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$AverageBlackLevel$VH();
        }
        public static  int AverageBlackLevel$get(MemorySegment seg) {
            return (int)libraw_h_constants_0.libraw_canon_makernotes_t$AverageBlackLevel$VH().get(seg);
        }
        public static  int AverageBlackLevel$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_0.libraw_canon_makernotes_t$AverageBlackLevel$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AverageBlackLevel$set( MemorySegment seg, int x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$AverageBlackLevel$VH().set(seg, x);
        }
        public static void AverageBlackLevel$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$AverageBlackLevel$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment multishot$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(36, 16));
        }
        public static VarHandle MeteringMode$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$MeteringMode$VH();
        }
        public static  short MeteringMode$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$MeteringMode$VH().get(seg);
        }
        public static  short MeteringMode$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$MeteringMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MeteringMode$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$MeteringMode$VH().set(seg, x);
        }
        public static void MeteringMode$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$MeteringMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SpotMeteringMode$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$SpotMeteringMode$VH();
        }
        public static  short SpotMeteringMode$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$SpotMeteringMode$VH().get(seg);
        }
        public static  short SpotMeteringMode$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$SpotMeteringMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SpotMeteringMode$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$SpotMeteringMode$VH().set(seg, x);
        }
        public static void SpotMeteringMode$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$SpotMeteringMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FlashMeteringMode$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$FlashMeteringMode$VH();
        }
        public static  byte FlashMeteringMode$get(MemorySegment seg) {
            return (byte)libraw_h_constants_0.libraw_canon_makernotes_t$FlashMeteringMode$VH().get(seg);
        }
        public static  byte FlashMeteringMode$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_0.libraw_canon_makernotes_t$FlashMeteringMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FlashMeteringMode$set( MemorySegment seg, byte x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$FlashMeteringMode$VH().set(seg, x);
        }
        public static void FlashMeteringMode$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$FlashMeteringMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FlashExposureLock$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$FlashExposureLock$VH();
        }
        public static  short FlashExposureLock$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$FlashExposureLock$VH().get(seg);
        }
        public static  short FlashExposureLock$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$FlashExposureLock$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FlashExposureLock$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$FlashExposureLock$VH().set(seg, x);
        }
        public static void FlashExposureLock$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$FlashExposureLock$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ExposureMode$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$ExposureMode$VH();
        }
        public static  short ExposureMode$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$ExposureMode$VH().get(seg);
        }
        public static  short ExposureMode$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$ExposureMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExposureMode$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$ExposureMode$VH().set(seg, x);
        }
        public static void ExposureMode$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$ExposureMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AESetting$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$AESetting$VH();
        }
        public static  short AESetting$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$AESetting$VH().get(seg);
        }
        public static  short AESetting$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$AESetting$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AESetting$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$AESetting$VH().set(seg, x);
        }
        public static void AESetting$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$AESetting$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HighlightTonePriority$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$HighlightTonePriority$VH();
        }
        public static  byte HighlightTonePriority$get(MemorySegment seg) {
            return (byte)libraw_h_constants_0.libraw_canon_makernotes_t$HighlightTonePriority$VH().get(seg);
        }
        public static  byte HighlightTonePriority$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_0.libraw_canon_makernotes_t$HighlightTonePriority$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HighlightTonePriority$set( MemorySegment seg, byte x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$HighlightTonePriority$VH().set(seg, x);
        }
        public static void HighlightTonePriority$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$HighlightTonePriority$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ImageStabilization$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$ImageStabilization$VH();
        }
        public static  short ImageStabilization$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$ImageStabilization$VH().get(seg);
        }
        public static  short ImageStabilization$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$ImageStabilization$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ImageStabilization$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$ImageStabilization$VH().set(seg, x);
        }
        public static void ImageStabilization$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$ImageStabilization$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FocusMode$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$FocusMode$VH();
        }
        public static  short FocusMode$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$FocusMode$VH().get(seg);
        }
        public static  short FocusMode$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$FocusMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FocusMode$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$FocusMode$VH().set(seg, x);
        }
        public static void FocusMode$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$FocusMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFPoint$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$AFPoint$VH();
        }
        public static  short AFPoint$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$AFPoint$VH().get(seg);
        }
        public static  short AFPoint$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$AFPoint$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFPoint$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$AFPoint$VH().set(seg, x);
        }
        public static void AFPoint$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$AFPoint$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FocusContinuous$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$FocusContinuous$VH();
        }
        public static  short FocusContinuous$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$FocusContinuous$VH().get(seg);
        }
        public static  short FocusContinuous$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$FocusContinuous$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FocusContinuous$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$FocusContinuous$VH().set(seg, x);
        }
        public static void FocusContinuous$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$FocusContinuous$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFPointsInFocus30D$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$AFPointsInFocus30D$VH();
        }
        public static  short AFPointsInFocus30D$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$AFPointsInFocus30D$VH().get(seg);
        }
        public static  short AFPointsInFocus30D$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$AFPointsInFocus30D$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFPointsInFocus30D$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$AFPointsInFocus30D$VH().set(seg, x);
        }
        public static void AFPointsInFocus30D$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$AFPointsInFocus30D$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment AFPointsInFocus1D$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(76, 8));
        }
        public static VarHandle AFPointsInFocus5D$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$AFPointsInFocus5D$VH();
        }
        public static  short AFPointsInFocus5D$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$AFPointsInFocus5D$VH().get(seg);
        }
        public static  short AFPointsInFocus5D$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$AFPointsInFocus5D$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFPointsInFocus5D$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$AFPointsInFocus5D$VH().set(seg, x);
        }
        public static void AFPointsInFocus5D$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$AFPointsInFocus5D$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFAreaMode$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$AFAreaMode$VH();
        }
        public static  short AFAreaMode$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$AFAreaMode$VH().get(seg);
        }
        public static  short AFAreaMode$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$AFAreaMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFAreaMode$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$AFAreaMode$VH().set(seg, x);
        }
        public static void AFAreaMode$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$AFAreaMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumAFPoints$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$NumAFPoints$VH();
        }
        public static  short NumAFPoints$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$NumAFPoints$VH().get(seg);
        }
        public static  short NumAFPoints$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$NumAFPoints$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumAFPoints$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$NumAFPoints$VH().set(seg, x);
        }
        public static void NumAFPoints$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$NumAFPoints$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ValidAFPoints$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$ValidAFPoints$VH();
        }
        public static  short ValidAFPoints$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$ValidAFPoints$VH().get(seg);
        }
        public static  short ValidAFPoints$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$ValidAFPoints$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ValidAFPoints$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$ValidAFPoints$VH().set(seg, x);
        }
        public static void ValidAFPoints$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$ValidAFPoints$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFImageWidth$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$AFImageWidth$VH();
        }
        public static  short AFImageWidth$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$AFImageWidth$VH().get(seg);
        }
        public static  short AFImageWidth$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$AFImageWidth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFImageWidth$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$AFImageWidth$VH().set(seg, x);
        }
        public static void AFImageWidth$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$AFImageWidth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFImageHeight$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$AFImageHeight$VH();
        }
        public static  short AFImageHeight$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$AFImageHeight$VH().get(seg);
        }
        public static  short AFImageHeight$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$AFImageHeight$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFImageHeight$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$AFImageHeight$VH().set(seg, x);
        }
        public static void AFImageHeight$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$AFImageHeight$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment AFAreaWidths$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(96, 122));
        }
        public static MemorySegment AFAreaHeights$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(218, 122));
        }
        public static MemorySegment AFAreaXPositions$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(340, 122));
        }
        public static MemorySegment AFAreaYPositions$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(462, 122));
        }
        public static MemorySegment AFPointsInFocus$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(584, 8));
        }
        public static MemorySegment AFPointsSelected$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(592, 8));
        }
        public static VarHandle PrimaryAFPoint$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$PrimaryAFPoint$VH();
        }
        public static  short PrimaryAFPoint$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$PrimaryAFPoint$VH().get(seg);
        }
        public static  short PrimaryAFPoint$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$PrimaryAFPoint$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PrimaryAFPoint$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$PrimaryAFPoint$VH().set(seg, x);
        }
        public static void PrimaryAFPoint$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$PrimaryAFPoint$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FlashMode$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$FlashMode$VH();
        }
        public static  short FlashMode$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$FlashMode$VH().get(seg);
        }
        public static  short FlashMode$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$FlashMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FlashMode$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$FlashMode$VH().set(seg, x);
        }
        public static void FlashMode$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$FlashMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FlashActivity$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$FlashActivity$VH();
        }
        public static  short FlashActivity$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$FlashActivity$VH().get(seg);
        }
        public static  short FlashActivity$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$FlashActivity$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FlashActivity$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$FlashActivity$VH().set(seg, x);
        }
        public static void FlashActivity$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$FlashActivity$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FlashBits$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$FlashBits$VH();
        }
        public static  short FlashBits$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$FlashBits$VH().get(seg);
        }
        public static  short FlashBits$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$FlashBits$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FlashBits$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$FlashBits$VH().set(seg, x);
        }
        public static void FlashBits$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$FlashBits$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ManualFlashOutput$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$ManualFlashOutput$VH();
        }
        public static  short ManualFlashOutput$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$ManualFlashOutput$VH().get(seg);
        }
        public static  short ManualFlashOutput$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$ManualFlashOutput$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ManualFlashOutput$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$ManualFlashOutput$VH().set(seg, x);
        }
        public static void ManualFlashOutput$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$ManualFlashOutput$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FlashOutput$VH() {
            return libraw_h_constants_0.libraw_canon_makernotes_t$FlashOutput$VH();
        }
        public static  short FlashOutput$get(MemorySegment seg) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$FlashOutput$VH().get(seg);
        }
        public static  short FlashOutput$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_0.libraw_canon_makernotes_t$FlashOutput$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FlashOutput$set( MemorySegment seg, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$FlashOutput$VH().set(seg, x);
        }
        public static void FlashOutput$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_0.libraw_canon_makernotes_t$FlashOutput$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FlashGuideNumber$VH() {
            return libraw_h_constants_1.libraw_canon_makernotes_t$FlashGuideNumber$VH();
        }
        public static  short FlashGuideNumber$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$FlashGuideNumber$VH().get(seg);
        }
        public static  short FlashGuideNumber$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$FlashGuideNumber$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FlashGuideNumber$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$FlashGuideNumber$VH().set(seg, x);
        }
        public static void FlashGuideNumber$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$FlashGuideNumber$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ContinuousDrive$VH() {
            return libraw_h_constants_1.libraw_canon_makernotes_t$ContinuousDrive$VH();
        }
        public static  short ContinuousDrive$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$ContinuousDrive$VH().get(seg);
        }
        public static  short ContinuousDrive$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$ContinuousDrive$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ContinuousDrive$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$ContinuousDrive$VH().set(seg, x);
        }
        public static void ContinuousDrive$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$ContinuousDrive$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SensorWidth$VH() {
            return libraw_h_constants_1.libraw_canon_makernotes_t$SensorWidth$VH();
        }
        public static  short SensorWidth$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$SensorWidth$VH().get(seg);
        }
        public static  short SensorWidth$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$SensorWidth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SensorWidth$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$SensorWidth$VH().set(seg, x);
        }
        public static void SensorWidth$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$SensorWidth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SensorHeight$VH() {
            return libraw_h_constants_1.libraw_canon_makernotes_t$SensorHeight$VH();
        }
        public static  short SensorHeight$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$SensorHeight$VH().get(seg);
        }
        public static  short SensorHeight$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$SensorHeight$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SensorHeight$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$SensorHeight$VH().set(seg, x);
        }
        public static void SensorHeight$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$SensorHeight$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SensorLeftBorder$VH() {
            return libraw_h_constants_1.libraw_canon_makernotes_t$SensorLeftBorder$VH();
        }
        public static  short SensorLeftBorder$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$SensorLeftBorder$VH().get(seg);
        }
        public static  short SensorLeftBorder$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$SensorLeftBorder$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SensorLeftBorder$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$SensorLeftBorder$VH().set(seg, x);
        }
        public static void SensorLeftBorder$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$SensorLeftBorder$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SensorTopBorder$VH() {
            return libraw_h_constants_1.libraw_canon_makernotes_t$SensorTopBorder$VH();
        }
        public static  short SensorTopBorder$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$SensorTopBorder$VH().get(seg);
        }
        public static  short SensorTopBorder$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$SensorTopBorder$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SensorTopBorder$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$SensorTopBorder$VH().set(seg, x);
        }
        public static void SensorTopBorder$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$SensorTopBorder$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SensorRightBorder$VH() {
            return libraw_h_constants_1.libraw_canon_makernotes_t$SensorRightBorder$VH();
        }
        public static  short SensorRightBorder$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$SensorRightBorder$VH().get(seg);
        }
        public static  short SensorRightBorder$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$SensorRightBorder$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SensorRightBorder$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$SensorRightBorder$VH().set(seg, x);
        }
        public static void SensorRightBorder$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$SensorRightBorder$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SensorBottomBorder$VH() {
            return libraw_h_constants_1.libraw_canon_makernotes_t$SensorBottomBorder$VH();
        }
        public static  short SensorBottomBorder$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$SensorBottomBorder$VH().get(seg);
        }
        public static  short SensorBottomBorder$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$SensorBottomBorder$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SensorBottomBorder$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$SensorBottomBorder$VH().set(seg, x);
        }
        public static void SensorBottomBorder$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$SensorBottomBorder$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BlackMaskLeftBorder$VH() {
            return libraw_h_constants_1.libraw_canon_makernotes_t$BlackMaskLeftBorder$VH();
        }
        public static  short BlackMaskLeftBorder$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$BlackMaskLeftBorder$VH().get(seg);
        }
        public static  short BlackMaskLeftBorder$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$BlackMaskLeftBorder$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BlackMaskLeftBorder$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$BlackMaskLeftBorder$VH().set(seg, x);
        }
        public static void BlackMaskLeftBorder$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$BlackMaskLeftBorder$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BlackMaskTopBorder$VH() {
            return libraw_h_constants_1.libraw_canon_makernotes_t$BlackMaskTopBorder$VH();
        }
        public static  short BlackMaskTopBorder$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$BlackMaskTopBorder$VH().get(seg);
        }
        public static  short BlackMaskTopBorder$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$BlackMaskTopBorder$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BlackMaskTopBorder$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$BlackMaskTopBorder$VH().set(seg, x);
        }
        public static void BlackMaskTopBorder$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$BlackMaskTopBorder$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BlackMaskRightBorder$VH() {
            return libraw_h_constants_1.libraw_canon_makernotes_t$BlackMaskRightBorder$VH();
        }
        public static  short BlackMaskRightBorder$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$BlackMaskRightBorder$VH().get(seg);
        }
        public static  short BlackMaskRightBorder$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$BlackMaskRightBorder$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BlackMaskRightBorder$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$BlackMaskRightBorder$VH().set(seg, x);
        }
        public static void BlackMaskRightBorder$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$BlackMaskRightBorder$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BlackMaskBottomBorder$VH() {
            return libraw_h_constants_1.libraw_canon_makernotes_t$BlackMaskBottomBorder$VH();
        }
        public static  short BlackMaskBottomBorder$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$BlackMaskBottomBorder$VH().get(seg);
        }
        public static  short BlackMaskBottomBorder$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$BlackMaskBottomBorder$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BlackMaskBottomBorder$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$BlackMaskBottomBorder$VH().set(seg, x);
        }
        public static void BlackMaskBottomBorder$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$BlackMaskBottomBorder$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFMicroAdjMode$VH() {
            return libraw_h_constants_1.libraw_canon_makernotes_t$AFMicroAdjMode$VH();
        }
        public static  int AFMicroAdjMode$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_canon_makernotes_t$AFMicroAdjMode$VH().get(seg);
        }
        public static  int AFMicroAdjMode$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_canon_makernotes_t$AFMicroAdjMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFMicroAdjMode$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$AFMicroAdjMode$VH().set(seg, x);
        }
        public static void AFMicroAdjMode$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$AFMicroAdjMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFMicroAdjValue$VH() {
            return libraw_h_constants_1.libraw_canon_makernotes_t$AFMicroAdjValue$VH();
        }
        public static  float AFMicroAdjValue$get(MemorySegment seg) {
            return (float)libraw_h_constants_1.libraw_canon_makernotes_t$AFMicroAdjValue$VH().get(seg);
        }
        public static  float AFMicroAdjValue$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_1.libraw_canon_makernotes_t$AFMicroAdjValue$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFMicroAdjValue$set( MemorySegment seg, float x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$AFMicroAdjValue$VH().set(seg, x);
        }
        public static void AFMicroAdjValue$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$AFMicroAdjValue$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MakernotesFlip$VH() {
            return libraw_h_constants_1.libraw_canon_makernotes_t$MakernotesFlip$VH();
        }
        public static  short MakernotesFlip$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$MakernotesFlip$VH().get(seg);
        }
        public static  short MakernotesFlip$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$MakernotesFlip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MakernotesFlip$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$MakernotesFlip$VH().set(seg, x);
        }
        public static void MakernotesFlip$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$MakernotesFlip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RecordMode$VH() {
            return libraw_h_constants_1.libraw_canon_makernotes_t$RecordMode$VH();
        }
        public static  short RecordMode$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$RecordMode$VH().get(seg);
        }
        public static  short RecordMode$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$RecordMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RecordMode$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$RecordMode$VH().set(seg, x);
        }
        public static void RecordMode$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$RecordMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SRAWQuality$VH() {
            return libraw_h_constants_1.libraw_canon_makernotes_t$SRAWQuality$VH();
        }
        public static  short SRAWQuality$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$SRAWQuality$VH().get(seg);
        }
        public static  short SRAWQuality$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$SRAWQuality$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SRAWQuality$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$SRAWQuality$VH().set(seg, x);
        }
        public static void SRAWQuality$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$SRAWQuality$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle wbi$VH() {
            return libraw_h_constants_1.libraw_canon_makernotes_t$wbi$VH();
        }
        public static  int wbi$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_canon_makernotes_t$wbi$VH().get(seg);
        }
        public static  int wbi$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_canon_makernotes_t$wbi$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wbi$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$wbi$VH().set(seg, x);
        }
        public static void wbi$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$wbi$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle firmware$VH() {
            return libraw_h_constants_1.libraw_canon_makernotes_t$firmware$VH();
        }
        public static  float firmware$get(MemorySegment seg) {
            return (float)libraw_h_constants_1.libraw_canon_makernotes_t$firmware$VH().get(seg);
        }
        public static  float firmware$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_1.libraw_canon_makernotes_t$firmware$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void firmware$set( MemorySegment seg, float x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$firmware$VH().set(seg, x);
        }
        public static void firmware$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$firmware$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RF_lensID$VH() {
            return libraw_h_constants_1.libraw_canon_makernotes_t$RF_lensID$VH();
        }
        public static  short RF_lensID$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$RF_lensID$VH().get(seg);
        }
        public static  short RF_lensID$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_canon_makernotes_t$RF_lensID$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RF_lensID$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$RF_lensID$VH().set(seg, x);
        }
        public static void RF_lensID$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_canon_makernotes_t$RF_lensID$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_hasselblad_makernotes_t {

        /* package-private */ libraw_hasselblad_makernotes_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_1.libraw_hasselblad_makernotes_t$struct$LAYOUT();
        }
        public static VarHandle BaseISO$VH() {
            return libraw_h_constants_1.libraw_hasselblad_makernotes_t$BaseISO$VH();
        }
        public static  int BaseISO$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_hasselblad_makernotes_t$BaseISO$VH().get(seg);
        }
        public static  int BaseISO$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_hasselblad_makernotes_t$BaseISO$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BaseISO$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_hasselblad_makernotes_t$BaseISO$VH().set(seg, x);
        }
        public static void BaseISO$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_hasselblad_makernotes_t$BaseISO$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Gain$VH() {
            return libraw_h_constants_1.libraw_hasselblad_makernotes_t$Gain$VH();
        }
        public static  double Gain$get(MemorySegment seg) {
            return (double)libraw_h_constants_1.libraw_hasselblad_makernotes_t$Gain$VH().get(seg);
        }
        public static  double Gain$get(MemorySegment seg, long index) {
            return (double)libraw_h_constants_1.libraw_hasselblad_makernotes_t$Gain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Gain$set( MemorySegment seg, double x) {
            libraw_h_constants_1.libraw_hasselblad_makernotes_t$Gain$VH().set(seg, x);
        }
        public static void Gain$set(MemorySegment seg, long index, double x) {
            libraw_h_constants_1.libraw_hasselblad_makernotes_t$Gain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Sensor$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
        }
        public static MemorySegment SensorUnit$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 64));
        }
        public static MemorySegment HostBody$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(88, 64));
        }
        public static VarHandle SensorCode$VH() {
            return libraw_h_constants_1.libraw_hasselblad_makernotes_t$SensorCode$VH();
        }
        public static  int SensorCode$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_hasselblad_makernotes_t$SensorCode$VH().get(seg);
        }
        public static  int SensorCode$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_hasselblad_makernotes_t$SensorCode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SensorCode$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_hasselblad_makernotes_t$SensorCode$VH().set(seg, x);
        }
        public static void SensorCode$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_hasselblad_makernotes_t$SensorCode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SensorSubCode$VH() {
            return libraw_h_constants_1.libraw_hasselblad_makernotes_t$SensorSubCode$VH();
        }
        public static  int SensorSubCode$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_hasselblad_makernotes_t$SensorSubCode$VH().get(seg);
        }
        public static  int SensorSubCode$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_hasselblad_makernotes_t$SensorSubCode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SensorSubCode$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_hasselblad_makernotes_t$SensorSubCode$VH().set(seg, x);
        }
        public static void SensorSubCode$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_hasselblad_makernotes_t$SensorSubCode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CoatingCode$VH() {
            return libraw_h_constants_1.libraw_hasselblad_makernotes_t$CoatingCode$VH();
        }
        public static  int CoatingCode$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_hasselblad_makernotes_t$CoatingCode$VH().get(seg);
        }
        public static  int CoatingCode$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_hasselblad_makernotes_t$CoatingCode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CoatingCode$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_hasselblad_makernotes_t$CoatingCode$VH().set(seg, x);
        }
        public static void CoatingCode$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_hasselblad_makernotes_t$CoatingCode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle uncropped$VH() {
            return libraw_h_constants_1.libraw_hasselblad_makernotes_t$uncropped$VH();
        }
        public static  int uncropped$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_hasselblad_makernotes_t$uncropped$VH().get(seg);
        }
        public static  int uncropped$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_hasselblad_makernotes_t$uncropped$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void uncropped$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_hasselblad_makernotes_t$uncropped$VH().set(seg, x);
        }
        public static void uncropped$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_hasselblad_makernotes_t$uncropped$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment CaptureSequenceInitiator$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(168, 32));
        }
        public static MemorySegment SensorUnitConnector$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(200, 64));
        }
        public static VarHandle format$VH() {
            return libraw_h_constants_1.libraw_hasselblad_makernotes_t$format$VH();
        }
        public static  int format$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_hasselblad_makernotes_t$format$VH().get(seg);
        }
        public static  int format$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_hasselblad_makernotes_t$format$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void format$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_hasselblad_makernotes_t$format$VH().set(seg, x);
        }
        public static void format$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_hasselblad_makernotes_t$format$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment nIFD_CM$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(268, 8));
        }
        public static MemorySegment RecommendedCrop$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(276, 8));
        }
        public static MemorySegment mnColorMatrix$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(288, 96));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_fuji_info_t {

        /* package-private */ libraw_fuji_info_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_1.libraw_fuji_info_t$struct$LAYOUT();
        }
        public static VarHandle ExpoMidPointShift$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$ExpoMidPointShift$VH();
        }
        public static  float ExpoMidPointShift$get(MemorySegment seg) {
            return (float)libraw_h_constants_1.libraw_fuji_info_t$ExpoMidPointShift$VH().get(seg);
        }
        public static  float ExpoMidPointShift$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_1.libraw_fuji_info_t$ExpoMidPointShift$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExpoMidPointShift$set( MemorySegment seg, float x) {
            libraw_h_constants_1.libraw_fuji_info_t$ExpoMidPointShift$VH().set(seg, x);
        }
        public static void ExpoMidPointShift$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_1.libraw_fuji_info_t$ExpoMidPointShift$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DynamicRange$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$DynamicRange$VH();
        }
        public static  short DynamicRange$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$DynamicRange$VH().get(seg);
        }
        public static  short DynamicRange$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$DynamicRange$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DynamicRange$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$DynamicRange$VH().set(seg, x);
        }
        public static void DynamicRange$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$DynamicRange$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FilmMode$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$FilmMode$VH();
        }
        public static  short FilmMode$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$FilmMode$VH().get(seg);
        }
        public static  short FilmMode$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$FilmMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FilmMode$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$FilmMode$VH().set(seg, x);
        }
        public static void FilmMode$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$FilmMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DynamicRangeSetting$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$DynamicRangeSetting$VH();
        }
        public static  short DynamicRangeSetting$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$DynamicRangeSetting$VH().get(seg);
        }
        public static  short DynamicRangeSetting$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$DynamicRangeSetting$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DynamicRangeSetting$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$DynamicRangeSetting$VH().set(seg, x);
        }
        public static void DynamicRangeSetting$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$DynamicRangeSetting$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DevelopmentDynamicRange$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$DevelopmentDynamicRange$VH();
        }
        public static  short DevelopmentDynamicRange$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$DevelopmentDynamicRange$VH().get(seg);
        }
        public static  short DevelopmentDynamicRange$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$DevelopmentDynamicRange$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DevelopmentDynamicRange$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$DevelopmentDynamicRange$VH().set(seg, x);
        }
        public static void DevelopmentDynamicRange$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$DevelopmentDynamicRange$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AutoDynamicRange$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$AutoDynamicRange$VH();
        }
        public static  short AutoDynamicRange$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$AutoDynamicRange$VH().get(seg);
        }
        public static  short AutoDynamicRange$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$AutoDynamicRange$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AutoDynamicRange$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$AutoDynamicRange$VH().set(seg, x);
        }
        public static void AutoDynamicRange$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$AutoDynamicRange$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DRangePriority$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$DRangePriority$VH();
        }
        public static  short DRangePriority$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$DRangePriority$VH().get(seg);
        }
        public static  short DRangePriority$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$DRangePriority$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DRangePriority$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$DRangePriority$VH().set(seg, x);
        }
        public static void DRangePriority$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$DRangePriority$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DRangePriorityAuto$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$DRangePriorityAuto$VH();
        }
        public static  short DRangePriorityAuto$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$DRangePriorityAuto$VH().get(seg);
        }
        public static  short DRangePriorityAuto$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$DRangePriorityAuto$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DRangePriorityAuto$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$DRangePriorityAuto$VH().set(seg, x);
        }
        public static void DRangePriorityAuto$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$DRangePriorityAuto$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DRangePriorityFixed$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$DRangePriorityFixed$VH();
        }
        public static  short DRangePriorityFixed$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$DRangePriorityFixed$VH().get(seg);
        }
        public static  short DRangePriorityFixed$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$DRangePriorityFixed$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DRangePriorityFixed$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$DRangePriorityFixed$VH().set(seg, x);
        }
        public static void DRangePriorityFixed$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$DRangePriorityFixed$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BrightnessCompensation$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$BrightnessCompensation$VH();
        }
        public static  float BrightnessCompensation$get(MemorySegment seg) {
            return (float)libraw_h_constants_1.libraw_fuji_info_t$BrightnessCompensation$VH().get(seg);
        }
        public static  float BrightnessCompensation$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_1.libraw_fuji_info_t$BrightnessCompensation$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BrightnessCompensation$set( MemorySegment seg, float x) {
            libraw_h_constants_1.libraw_fuji_info_t$BrightnessCompensation$VH().set(seg, x);
        }
        public static void BrightnessCompensation$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_1.libraw_fuji_info_t$BrightnessCompensation$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FocusMode$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$FocusMode$VH();
        }
        public static  short FocusMode$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$FocusMode$VH().get(seg);
        }
        public static  short FocusMode$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$FocusMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FocusMode$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$FocusMode$VH().set(seg, x);
        }
        public static void FocusMode$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$FocusMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFMode$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$AFMode$VH();
        }
        public static  short AFMode$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$AFMode$VH().get(seg);
        }
        public static  short AFMode$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$AFMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFMode$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$AFMode$VH().set(seg, x);
        }
        public static void AFMode$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$AFMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FocusPixel$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(28, 4));
        }
        public static MemorySegment ImageStabilization$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 6));
        }
        public static VarHandle FlashMode$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$FlashMode$VH();
        }
        public static  short FlashMode$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$FlashMode$VH().get(seg);
        }
        public static  short FlashMode$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$FlashMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FlashMode$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$FlashMode$VH().set(seg, x);
        }
        public static void FlashMode$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$FlashMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle WB_Preset$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$WB_Preset$VH();
        }
        public static  short WB_Preset$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$WB_Preset$VH().get(seg);
        }
        public static  short WB_Preset$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$WB_Preset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void WB_Preset$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$WB_Preset$VH().set(seg, x);
        }
        public static void WB_Preset$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$WB_Preset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ShutterType$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$ShutterType$VH();
        }
        public static  short ShutterType$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$ShutterType$VH().get(seg);
        }
        public static  short ShutterType$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$ShutterType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ShutterType$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$ShutterType$VH().set(seg, x);
        }
        public static void ShutterType$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$ShutterType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ExrMode$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$ExrMode$VH();
        }
        public static  short ExrMode$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$ExrMode$VH().get(seg);
        }
        public static  short ExrMode$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$ExrMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExrMode$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$ExrMode$VH().set(seg, x);
        }
        public static void ExrMode$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$ExrMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Macro$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$Macro$VH();
        }
        public static  short Macro$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$Macro$VH().get(seg);
        }
        public static  short Macro$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$Macro$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Macro$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$Macro$VH().set(seg, x);
        }
        public static void Macro$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$Macro$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Rating$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$Rating$VH();
        }
        public static  int Rating$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_fuji_info_t$Rating$VH().get(seg);
        }
        public static  int Rating$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_fuji_info_t$Rating$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Rating$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_fuji_info_t$Rating$VH().set(seg, x);
        }
        public static void Rating$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_fuji_info_t$Rating$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CropMode$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$CropMode$VH();
        }
        public static  short CropMode$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$CropMode$VH().get(seg);
        }
        public static  short CropMode$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$CropMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CropMode$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$CropMode$VH().set(seg, x);
        }
        public static void CropMode$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$CropMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FrameRate$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$FrameRate$VH();
        }
        public static  short FrameRate$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$FrameRate$VH().get(seg);
        }
        public static  short FrameRate$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$FrameRate$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FrameRate$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$FrameRate$VH().set(seg, x);
        }
        public static void FrameRate$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$FrameRate$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FrameWidth$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$FrameWidth$VH();
        }
        public static  short FrameWidth$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$FrameWidth$VH().get(seg);
        }
        public static  short FrameWidth$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$FrameWidth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FrameWidth$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$FrameWidth$VH().set(seg, x);
        }
        public static void FrameWidth$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$FrameWidth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FrameHeight$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$FrameHeight$VH();
        }
        public static  short FrameHeight$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$FrameHeight$VH().get(seg);
        }
        public static  short FrameHeight$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$FrameHeight$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FrameHeight$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$FrameHeight$VH().set(seg, x);
        }
        public static void FrameHeight$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$FrameHeight$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment SerialSignature$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(60, 13));
        }
        public static MemorySegment RAFVersion$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(73, 5));
        }
        public static VarHandle RAFDataVersion$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$RAFDataVersion$VH();
        }
        public static  short RAFDataVersion$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$RAFDataVersion$VH().get(seg);
        }
        public static  short RAFDataVersion$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$RAFDataVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RAFDataVersion$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$RAFDataVersion$VH().set(seg, x);
        }
        public static void RAFDataVersion$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$RAFDataVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle isTSNERDTS$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$isTSNERDTS$VH();
        }
        public static  int isTSNERDTS$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_fuji_info_t$isTSNERDTS$VH().get(seg);
        }
        public static  int isTSNERDTS$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_fuji_info_t$isTSNERDTS$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void isTSNERDTS$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_fuji_info_t$isTSNERDTS$VH().set(seg, x);
        }
        public static void isTSNERDTS$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_fuji_info_t$isTSNERDTS$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DriveMode$VH() {
            return libraw_h_constants_1.libraw_fuji_info_t$DriveMode$VH();
        }
        public static  short DriveMode$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$DriveMode$VH().get(seg);
        }
        public static  short DriveMode$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_fuji_info_t$DriveMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DriveMode$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$DriveMode$VH().set(seg, x);
        }
        public static void DriveMode$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_fuji_info_t$DriveMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_sensor_highspeed_crop_t {

        /* package-private */ libraw_sensor_highspeed_crop_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_1.libraw_sensor_highspeed_crop_t$struct$LAYOUT();
        }
        public static VarHandle cleft$VH() {
            return libraw_h_constants_1.libraw_sensor_highspeed_crop_t$cleft$VH();
        }
        public static  short cleft$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_sensor_highspeed_crop_t$cleft$VH().get(seg);
        }
        public static  short cleft$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_sensor_highspeed_crop_t$cleft$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void cleft$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_sensor_highspeed_crop_t$cleft$VH().set(seg, x);
        }
        public static void cleft$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_sensor_highspeed_crop_t$cleft$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ctop$VH() {
            return libraw_h_constants_1.libraw_sensor_highspeed_crop_t$ctop$VH();
        }
        public static  short ctop$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_sensor_highspeed_crop_t$ctop$VH().get(seg);
        }
        public static  short ctop$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_sensor_highspeed_crop_t$ctop$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ctop$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_sensor_highspeed_crop_t$ctop$VH().set(seg, x);
        }
        public static void ctop$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_sensor_highspeed_crop_t$ctop$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle cwidth$VH() {
            return libraw_h_constants_1.libraw_sensor_highspeed_crop_t$cwidth$VH();
        }
        public static  short cwidth$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_sensor_highspeed_crop_t$cwidth$VH().get(seg);
        }
        public static  short cwidth$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_sensor_highspeed_crop_t$cwidth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void cwidth$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_sensor_highspeed_crop_t$cwidth$VH().set(seg, x);
        }
        public static void cwidth$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_sensor_highspeed_crop_t$cwidth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle cheight$VH() {
            return libraw_h_constants_1.libraw_sensor_highspeed_crop_t$cheight$VH();
        }
        public static  short cheight$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_sensor_highspeed_crop_t$cheight$VH().get(seg);
        }
        public static  short cheight$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_sensor_highspeed_crop_t$cheight$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void cheight$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_sensor_highspeed_crop_t$cheight$VH().set(seg, x);
        }
        public static void cheight$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_sensor_highspeed_crop_t$cheight$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_nikon_makernotes_t {

        /* package-private */ libraw_nikon_makernotes_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$struct$LAYOUT();
        }
        public static VarHandle ExposureBracketValue$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$ExposureBracketValue$VH();
        }
        public static  double ExposureBracketValue$get(MemorySegment seg) {
            return (double)libraw_h_constants_1.libraw_nikon_makernotes_t$ExposureBracketValue$VH().get(seg);
        }
        public static  double ExposureBracketValue$get(MemorySegment seg, long index) {
            return (double)libraw_h_constants_1.libraw_nikon_makernotes_t$ExposureBracketValue$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExposureBracketValue$set( MemorySegment seg, double x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$ExposureBracketValue$VH().set(seg, x);
        }
        public static void ExposureBracketValue$set(MemorySegment seg, long index, double x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$ExposureBracketValue$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ActiveDLighting$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$ActiveDLighting$VH();
        }
        public static  short ActiveDLighting$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$ActiveDLighting$VH().get(seg);
        }
        public static  short ActiveDLighting$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$ActiveDLighting$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ActiveDLighting$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$ActiveDLighting$VH().set(seg, x);
        }
        public static void ActiveDLighting$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$ActiveDLighting$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ShootingMode$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$ShootingMode$VH();
        }
        public static  short ShootingMode$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$ShootingMode$VH().get(seg);
        }
        public static  short ShootingMode$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$ShootingMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ShootingMode$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$ShootingMode$VH().set(seg, x);
        }
        public static void ShootingMode$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$ShootingMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ImageStabilization$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 7));
        }
        public static VarHandle VibrationReduction$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$VibrationReduction$VH();
        }
        public static  byte VibrationReduction$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$VibrationReduction$VH().get(seg);
        }
        public static  byte VibrationReduction$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$VibrationReduction$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VibrationReduction$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$VibrationReduction$VH().set(seg, x);
        }
        public static void VibrationReduction$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$VibrationReduction$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle VRMode$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$VRMode$VH();
        }
        public static  byte VRMode$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$VRMode$VH().get(seg);
        }
        public static  byte VRMode$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$VRMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VRMode$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$VRMode$VH().set(seg, x);
        }
        public static void VRMode$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$VRMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FocusMode$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(21, 7));
        }
        public static VarHandle AFPoint$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$AFPoint$VH();
        }
        public static  byte AFPoint$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$AFPoint$VH().get(seg);
        }
        public static  byte AFPoint$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$AFPoint$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFPoint$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFPoint$VH().set(seg, x);
        }
        public static void AFPoint$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFPoint$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFPointsInFocus$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$AFPointsInFocus$VH();
        }
        public static  short AFPointsInFocus$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$AFPointsInFocus$VH().get(seg);
        }
        public static  short AFPointsInFocus$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$AFPointsInFocus$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFPointsInFocus$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFPointsInFocus$VH().set(seg, x);
        }
        public static void AFPointsInFocus$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFPointsInFocus$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ContrastDetectAF$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$ContrastDetectAF$VH();
        }
        public static  byte ContrastDetectAF$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$ContrastDetectAF$VH().get(seg);
        }
        public static  byte ContrastDetectAF$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$ContrastDetectAF$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ContrastDetectAF$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$ContrastDetectAF$VH().set(seg, x);
        }
        public static void ContrastDetectAF$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$ContrastDetectAF$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFAreaMode$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaMode$VH();
        }
        public static  byte AFAreaMode$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaMode$VH().get(seg);
        }
        public static  byte AFAreaMode$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFAreaMode$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaMode$VH().set(seg, x);
        }
        public static void AFAreaMode$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PhaseDetectAF$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$PhaseDetectAF$VH();
        }
        public static  byte PhaseDetectAF$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$PhaseDetectAF$VH().get(seg);
        }
        public static  byte PhaseDetectAF$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$PhaseDetectAF$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PhaseDetectAF$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$PhaseDetectAF$VH().set(seg, x);
        }
        public static void PhaseDetectAF$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$PhaseDetectAF$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PrimaryAFPoint$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$PrimaryAFPoint$VH();
        }
        public static  byte PrimaryAFPoint$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$PrimaryAFPoint$VH().get(seg);
        }
        public static  byte PrimaryAFPoint$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$PrimaryAFPoint$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PrimaryAFPoint$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$PrimaryAFPoint$VH().set(seg, x);
        }
        public static void PrimaryAFPoint$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$PrimaryAFPoint$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment AFPointsUsed$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(36, 29));
        }
        public static VarHandle AFImageWidth$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$AFImageWidth$VH();
        }
        public static  short AFImageWidth$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$AFImageWidth$VH().get(seg);
        }
        public static  short AFImageWidth$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$AFImageWidth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFImageWidth$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFImageWidth$VH().set(seg, x);
        }
        public static void AFImageWidth$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFImageWidth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFImageHeight$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$AFImageHeight$VH();
        }
        public static  short AFImageHeight$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$AFImageHeight$VH().get(seg);
        }
        public static  short AFImageHeight$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$AFImageHeight$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFImageHeight$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFImageHeight$VH().set(seg, x);
        }
        public static void AFImageHeight$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFImageHeight$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFAreaXPposition$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaXPposition$VH();
        }
        public static  short AFAreaXPposition$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaXPposition$VH().get(seg);
        }
        public static  short AFAreaXPposition$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaXPposition$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFAreaXPposition$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaXPposition$VH().set(seg, x);
        }
        public static void AFAreaXPposition$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaXPposition$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFAreaYPosition$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaYPosition$VH();
        }
        public static  short AFAreaYPosition$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaYPosition$VH().get(seg);
        }
        public static  short AFAreaYPosition$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaYPosition$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFAreaYPosition$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaYPosition$VH().set(seg, x);
        }
        public static void AFAreaYPosition$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaYPosition$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFAreaWidth$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaWidth$VH();
        }
        public static  short AFAreaWidth$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaWidth$VH().get(seg);
        }
        public static  short AFAreaWidth$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaWidth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFAreaWidth$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaWidth$VH().set(seg, x);
        }
        public static void AFAreaWidth$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaWidth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFAreaHeight$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaHeight$VH();
        }
        public static  short AFAreaHeight$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaHeight$VH().get(seg);
        }
        public static  short AFAreaHeight$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaHeight$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFAreaHeight$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaHeight$VH().set(seg, x);
        }
        public static void AFAreaHeight$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFAreaHeight$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ContrastDetectAFInFocus$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$ContrastDetectAFInFocus$VH();
        }
        public static  byte ContrastDetectAFInFocus$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$ContrastDetectAFInFocus$VH().get(seg);
        }
        public static  byte ContrastDetectAFInFocus$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$ContrastDetectAFInFocus$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ContrastDetectAFInFocus$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$ContrastDetectAFInFocus$VH().set(seg, x);
        }
        public static void ContrastDetectAFInFocus$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$ContrastDetectAFInFocus$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FlashSetting$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(79, 13));
        }
        public static MemorySegment FlashType$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(92, 20));
        }
        public static MemorySegment FlashExposureCompensation$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(112, 4));
        }
        public static MemorySegment ExternalFlashExposureComp$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(116, 4));
        }
        public static MemorySegment FlashExposureBracketValue$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(120, 4));
        }
        public static VarHandle FlashMode$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$FlashMode$VH();
        }
        public static  byte FlashMode$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$FlashMode$VH().get(seg);
        }
        public static  byte FlashMode$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$FlashMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FlashMode$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$FlashMode$VH().set(seg, x);
        }
        public static void FlashMode$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$FlashMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FlashExposureCompensation2$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$FlashExposureCompensation2$VH();
        }
        public static  byte FlashExposureCompensation2$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$FlashExposureCompensation2$VH().get(seg);
        }
        public static  byte FlashExposureCompensation2$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$FlashExposureCompensation2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FlashExposureCompensation2$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$FlashExposureCompensation2$VH().set(seg, x);
        }
        public static void FlashExposureCompensation2$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$FlashExposureCompensation2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FlashExposureCompensation3$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$FlashExposureCompensation3$VH();
        }
        public static  byte FlashExposureCompensation3$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$FlashExposureCompensation3$VH().get(seg);
        }
        public static  byte FlashExposureCompensation3$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$FlashExposureCompensation3$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FlashExposureCompensation3$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$FlashExposureCompensation3$VH().set(seg, x);
        }
        public static void FlashExposureCompensation3$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$FlashExposureCompensation3$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FlashExposureCompensation4$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$FlashExposureCompensation4$VH();
        }
        public static  byte FlashExposureCompensation4$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$FlashExposureCompensation4$VH().get(seg);
        }
        public static  byte FlashExposureCompensation4$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$FlashExposureCompensation4$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FlashExposureCompensation4$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$FlashExposureCompensation4$VH().set(seg, x);
        }
        public static void FlashExposureCompensation4$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$FlashExposureCompensation4$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FlashSource$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$FlashSource$VH();
        }
        public static  byte FlashSource$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$FlashSource$VH().get(seg);
        }
        public static  byte FlashSource$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$FlashSource$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FlashSource$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$FlashSource$VH().set(seg, x);
        }
        public static void FlashSource$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$FlashSource$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FlashFirmware$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(129, 2));
        }
        public static VarHandle ExternalFlashFlags$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$ExternalFlashFlags$VH();
        }
        public static  byte ExternalFlashFlags$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$ExternalFlashFlags$VH().get(seg);
        }
        public static  byte ExternalFlashFlags$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$ExternalFlashFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExternalFlashFlags$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$ExternalFlashFlags$VH().set(seg, x);
        }
        public static void ExternalFlashFlags$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$ExternalFlashFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FlashControlCommanderMode$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$FlashControlCommanderMode$VH();
        }
        public static  byte FlashControlCommanderMode$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$FlashControlCommanderMode$VH().get(seg);
        }
        public static  byte FlashControlCommanderMode$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$FlashControlCommanderMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FlashControlCommanderMode$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$FlashControlCommanderMode$VH().set(seg, x);
        }
        public static void FlashControlCommanderMode$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$FlashControlCommanderMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FlashOutputAndCompensation$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$FlashOutputAndCompensation$VH();
        }
        public static  byte FlashOutputAndCompensation$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$FlashOutputAndCompensation$VH().get(seg);
        }
        public static  byte FlashOutputAndCompensation$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$FlashOutputAndCompensation$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FlashOutputAndCompensation$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$FlashOutputAndCompensation$VH().set(seg, x);
        }
        public static void FlashOutputAndCompensation$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$FlashOutputAndCompensation$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FlashFocalLength$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$FlashFocalLength$VH();
        }
        public static  byte FlashFocalLength$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$FlashFocalLength$VH().get(seg);
        }
        public static  byte FlashFocalLength$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$FlashFocalLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FlashFocalLength$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$FlashFocalLength$VH().set(seg, x);
        }
        public static void FlashFocalLength$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$FlashFocalLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FlashGNDistance$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$FlashGNDistance$VH();
        }
        public static  byte FlashGNDistance$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$FlashGNDistance$VH().get(seg);
        }
        public static  byte FlashGNDistance$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$FlashGNDistance$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FlashGNDistance$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$FlashGNDistance$VH().set(seg, x);
        }
        public static void FlashGNDistance$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$FlashGNDistance$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FlashGroupControlMode$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(136, 4));
        }
        public static MemorySegment FlashGroupOutputAndCompensation$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(140, 4));
        }
        public static VarHandle FlashColorFilter$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$FlashColorFilter$VH();
        }
        public static  byte FlashColorFilter$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$FlashColorFilter$VH().get(seg);
        }
        public static  byte FlashColorFilter$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$FlashColorFilter$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FlashColorFilter$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$FlashColorFilter$VH().set(seg, x);
        }
        public static void FlashColorFilter$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$FlashColorFilter$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NEFCompression$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$NEFCompression$VH();
        }
        public static  short NEFCompression$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$NEFCompression$VH().get(seg);
        }
        public static  short NEFCompression$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$NEFCompression$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NEFCompression$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$NEFCompression$VH().set(seg, x);
        }
        public static void NEFCompression$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$NEFCompression$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ExposureMode$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$ExposureMode$VH();
        }
        public static  int ExposureMode$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_nikon_makernotes_t$ExposureMode$VH().get(seg);
        }
        public static  int ExposureMode$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_nikon_makernotes_t$ExposureMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExposureMode$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$ExposureMode$VH().set(seg, x);
        }
        public static void ExposureMode$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$ExposureMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ExposureProgram$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$ExposureProgram$VH();
        }
        public static  int ExposureProgram$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_nikon_makernotes_t$ExposureProgram$VH().get(seg);
        }
        public static  int ExposureProgram$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_nikon_makernotes_t$ExposureProgram$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExposureProgram$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$ExposureProgram$VH().set(seg, x);
        }
        public static void ExposureProgram$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$ExposureProgram$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle nMEshots$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$nMEshots$VH();
        }
        public static  int nMEshots$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_nikon_makernotes_t$nMEshots$VH().get(seg);
        }
        public static  int nMEshots$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_nikon_makernotes_t$nMEshots$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nMEshots$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$nMEshots$VH().set(seg, x);
        }
        public static void nMEshots$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$nMEshots$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MEgainOn$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$MEgainOn$VH();
        }
        public static  int MEgainOn$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_nikon_makernotes_t$MEgainOn$VH().get(seg);
        }
        public static  int MEgainOn$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_nikon_makernotes_t$MEgainOn$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MEgainOn$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$MEgainOn$VH().set(seg, x);
        }
        public static void MEgainOn$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$MEgainOn$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ME_WB$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(168, 32));
        }
        public static VarHandle AFFineTune$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$AFFineTune$VH();
        }
        public static  byte AFFineTune$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$AFFineTune$VH().get(seg);
        }
        public static  byte AFFineTune$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$AFFineTune$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFFineTune$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFFineTune$VH().set(seg, x);
        }
        public static void AFFineTune$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFFineTune$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFFineTuneIndex$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$AFFineTuneIndex$VH();
        }
        public static  byte AFFineTuneIndex$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$AFFineTuneIndex$VH().get(seg);
        }
        public static  byte AFFineTuneIndex$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$AFFineTuneIndex$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFFineTuneIndex$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFFineTuneIndex$VH().set(seg, x);
        }
        public static void AFFineTuneIndex$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFFineTuneIndex$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFFineTuneAdj$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$AFFineTuneAdj$VH();
        }
        public static  byte AFFineTuneAdj$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$AFFineTuneAdj$VH().get(seg);
        }
        public static  byte AFFineTuneAdj$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$AFFineTuneAdj$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFFineTuneAdj$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFFineTuneAdj$VH().set(seg, x);
        }
        public static void AFFineTuneAdj$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$AFFineTuneAdj$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LensDataVersion$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$LensDataVersion$VH();
        }
        public static  int LensDataVersion$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_nikon_makernotes_t$LensDataVersion$VH().get(seg);
        }
        public static  int LensDataVersion$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_nikon_makernotes_t$LensDataVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LensDataVersion$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$LensDataVersion$VH().set(seg, x);
        }
        public static void LensDataVersion$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$LensDataVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FlashInfoVersion$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$FlashInfoVersion$VH();
        }
        public static  int FlashInfoVersion$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_nikon_makernotes_t$FlashInfoVersion$VH().get(seg);
        }
        public static  int FlashInfoVersion$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_nikon_makernotes_t$FlashInfoVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FlashInfoVersion$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$FlashInfoVersion$VH().set(seg, x);
        }
        public static void FlashInfoVersion$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$FlashInfoVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ColorBalanceVersion$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$ColorBalanceVersion$VH();
        }
        public static  int ColorBalanceVersion$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_nikon_makernotes_t$ColorBalanceVersion$VH().get(seg);
        }
        public static  int ColorBalanceVersion$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_nikon_makernotes_t$ColorBalanceVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ColorBalanceVersion$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$ColorBalanceVersion$VH().set(seg, x);
        }
        public static void ColorBalanceVersion$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$ColorBalanceVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle key$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$key$VH();
        }
        public static  byte key$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$key$VH().get(seg);
        }
        public static  byte key$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_nikon_makernotes_t$key$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void key$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$key$VH().set(seg, x);
        }
        public static void key$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$key$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment NEFBitDepth$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(218, 8));
        }
        public static VarHandle HighSpeedCropFormat$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$HighSpeedCropFormat$VH();
        }
        public static  short HighSpeedCropFormat$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$HighSpeedCropFormat$VH().get(seg);
        }
        public static  short HighSpeedCropFormat$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$HighSpeedCropFormat$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HighSpeedCropFormat$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$HighSpeedCropFormat$VH().set(seg, x);
        }
        public static void HighSpeedCropFormat$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$HighSpeedCropFormat$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment SensorHighSpeedCrop$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(228, 8));
        }
        public static VarHandle SensorWidth$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$SensorWidth$VH();
        }
        public static  short SensorWidth$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$SensorWidth$VH().get(seg);
        }
        public static  short SensorWidth$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$SensorWidth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SensorWidth$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$SensorWidth$VH().set(seg, x);
        }
        public static void SensorWidth$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$SensorWidth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SensorHeight$VH() {
            return libraw_h_constants_1.libraw_nikon_makernotes_t$SensorHeight$VH();
        }
        public static  short SensorHeight$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$SensorHeight$VH().get(seg);
        }
        public static  short SensorHeight$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_nikon_makernotes_t$SensorHeight$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SensorHeight$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$SensorHeight$VH().set(seg, x);
        }
        public static void SensorHeight$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_nikon_makernotes_t$SensorHeight$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_olympus_makernotes_t {

        /* package-private */ libraw_olympus_makernotes_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_1.libraw_olympus_makernotes_t$struct$LAYOUT();
        }
        public static MemorySegment SensorCalibration$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static MemorySegment FocusMode$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 4));
        }
        public static VarHandle AutoFocus$VH() {
            return libraw_h_constants_1.libraw_olympus_makernotes_t$AutoFocus$VH();
        }
        public static  short AutoFocus$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_olympus_makernotes_t$AutoFocus$VH().get(seg);
        }
        public static  short AutoFocus$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_olympus_makernotes_t$AutoFocus$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AutoFocus$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_olympus_makernotes_t$AutoFocus$VH().set(seg, x);
        }
        public static void AutoFocus$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_olympus_makernotes_t$AutoFocus$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFPoint$VH() {
            return libraw_h_constants_1.libraw_olympus_makernotes_t$AFPoint$VH();
        }
        public static  short AFPoint$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_olympus_makernotes_t$AFPoint$VH().get(seg);
        }
        public static  short AFPoint$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_olympus_makernotes_t$AFPoint$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFPoint$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_olympus_makernotes_t$AFPoint$VH().set(seg, x);
        }
        public static void AFPoint$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_olympus_makernotes_t$AFPoint$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment AFAreas$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 256));
        }
        public static MemorySegment AFPointSelected$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(272, 40));
        }
        public static VarHandle AFResult$VH() {
            return libraw_h_constants_1.libraw_olympus_makernotes_t$AFResult$VH();
        }
        public static  short AFResult$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_olympus_makernotes_t$AFResult$VH().get(seg);
        }
        public static  short AFResult$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_olympus_makernotes_t$AFResult$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFResult$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_olympus_makernotes_t$AFResult$VH().set(seg, x);
        }
        public static void AFResult$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_olympus_makernotes_t$AFResult$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment DriveMode$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(314, 10));
        }
        public static VarHandle ColorSpace$VH() {
            return libraw_h_constants_1.libraw_olympus_makernotes_t$ColorSpace$VH();
        }
        public static  short ColorSpace$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_olympus_makernotes_t$ColorSpace$VH().get(seg);
        }
        public static  short ColorSpace$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_olympus_makernotes_t$ColorSpace$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ColorSpace$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_olympus_makernotes_t$ColorSpace$VH().set(seg, x);
        }
        public static void ColorSpace$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_olympus_makernotes_t$ColorSpace$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFFineTune$VH() {
            return libraw_h_constants_1.libraw_olympus_makernotes_t$AFFineTune$VH();
        }
        public static  byte AFFineTune$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_olympus_makernotes_t$AFFineTune$VH().get(seg);
        }
        public static  byte AFFineTune$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_olympus_makernotes_t$AFFineTune$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFFineTune$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_olympus_makernotes_t$AFFineTune$VH().set(seg, x);
        }
        public static void AFFineTune$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_olympus_makernotes_t$AFFineTune$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment AFFineTuneAdj$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(328, 6));
        }
        public static MemorySegment CameraType2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(334, 6));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_panasonic_makernotes_t {

        /* package-private */ libraw_panasonic_makernotes_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_1.libraw_panasonic_makernotes_t$struct$LAYOUT();
        }
        public static VarHandle Compression$VH() {
            return libraw_h_constants_1.libraw_panasonic_makernotes_t$Compression$VH();
        }
        public static  short Compression$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_panasonic_makernotes_t$Compression$VH().get(seg);
        }
        public static  short Compression$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_panasonic_makernotes_t$Compression$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Compression$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_panasonic_makernotes_t$Compression$VH().set(seg, x);
        }
        public static void Compression$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_panasonic_makernotes_t$Compression$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BlackLevelDim$VH() {
            return libraw_h_constants_1.libraw_panasonic_makernotes_t$BlackLevelDim$VH();
        }
        public static  short BlackLevelDim$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_panasonic_makernotes_t$BlackLevelDim$VH().get(seg);
        }
        public static  short BlackLevelDim$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_panasonic_makernotes_t$BlackLevelDim$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BlackLevelDim$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_panasonic_makernotes_t$BlackLevelDim$VH().set(seg, x);
        }
        public static void BlackLevelDim$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_panasonic_makernotes_t$BlackLevelDim$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment BlackLevel$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 32));
        }
        public static VarHandle Multishot$VH() {
            return libraw_h_constants_1.libraw_panasonic_makernotes_t$Multishot$VH();
        }
        public static  int Multishot$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_panasonic_makernotes_t$Multishot$VH().get(seg);
        }
        public static  int Multishot$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_panasonic_makernotes_t$Multishot$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Multishot$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_panasonic_makernotes_t$Multishot$VH().set(seg, x);
        }
        public static void Multishot$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_panasonic_makernotes_t$Multishot$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle gamma$VH() {
            return libraw_h_constants_1.libraw_panasonic_makernotes_t$gamma$VH();
        }
        public static  float gamma$get(MemorySegment seg) {
            return (float)libraw_h_constants_1.libraw_panasonic_makernotes_t$gamma$VH().get(seg);
        }
        public static  float gamma$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_1.libraw_panasonic_makernotes_t$gamma$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void gamma$set( MemorySegment seg, float x) {
            libraw_h_constants_1.libraw_panasonic_makernotes_t$gamma$VH().set(seg, x);
        }
        public static void gamma$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_1.libraw_panasonic_makernotes_t$gamma$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment HighISOMultiplier$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(44, 12));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_pentax_makernotes_t {

        /* package-private */ libraw_pentax_makernotes_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_1.libraw_pentax_makernotes_t$struct$LAYOUT();
        }
        public static VarHandle FocusMode$VH() {
            return libraw_h_constants_1.libraw_pentax_makernotes_t$FocusMode$VH();
        }
        public static  short FocusMode$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_pentax_makernotes_t$FocusMode$VH().get(seg);
        }
        public static  short FocusMode$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_pentax_makernotes_t$FocusMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FocusMode$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_pentax_makernotes_t$FocusMode$VH().set(seg, x);
        }
        public static void FocusMode$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_pentax_makernotes_t$FocusMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFPointSelected$VH() {
            return libraw_h_constants_1.libraw_pentax_makernotes_t$AFPointSelected$VH();
        }
        public static  short AFPointSelected$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_pentax_makernotes_t$AFPointSelected$VH().get(seg);
        }
        public static  short AFPointSelected$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_pentax_makernotes_t$AFPointSelected$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFPointSelected$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_pentax_makernotes_t$AFPointSelected$VH().set(seg, x);
        }
        public static void AFPointSelected$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_pentax_makernotes_t$AFPointSelected$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFPointsInFocus$VH() {
            return libraw_h_constants_1.libraw_pentax_makernotes_t$AFPointsInFocus$VH();
        }
        public static  int AFPointsInFocus$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_pentax_makernotes_t$AFPointsInFocus$VH().get(seg);
        }
        public static  int AFPointsInFocus$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_pentax_makernotes_t$AFPointsInFocus$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFPointsInFocus$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_pentax_makernotes_t$AFPointsInFocus$VH().set(seg, x);
        }
        public static void AFPointsInFocus$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_pentax_makernotes_t$AFPointsInFocus$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FocusPosition$VH() {
            return libraw_h_constants_1.libraw_pentax_makernotes_t$FocusPosition$VH();
        }
        public static  short FocusPosition$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_pentax_makernotes_t$FocusPosition$VH().get(seg);
        }
        public static  short FocusPosition$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_pentax_makernotes_t$FocusPosition$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FocusPosition$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_pentax_makernotes_t$FocusPosition$VH().set(seg, x);
        }
        public static void FocusPosition$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_pentax_makernotes_t$FocusPosition$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment DriveMode$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(10, 4));
        }
        public static VarHandle AFAdjustment$VH() {
            return libraw_h_constants_1.libraw_pentax_makernotes_t$AFAdjustment$VH();
        }
        public static  short AFAdjustment$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_pentax_makernotes_t$AFAdjustment$VH().get(seg);
        }
        public static  short AFAdjustment$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_pentax_makernotes_t$AFAdjustment$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFAdjustment$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_pentax_makernotes_t$AFAdjustment$VH().set(seg, x);
        }
        public static void AFAdjustment$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_pentax_makernotes_t$AFAdjustment$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MultiExposure$VH() {
            return libraw_h_constants_1.libraw_pentax_makernotes_t$MultiExposure$VH();
        }
        public static  byte MultiExposure$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_pentax_makernotes_t$MultiExposure$VH().get(seg);
        }
        public static  byte MultiExposure$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_pentax_makernotes_t$MultiExposure$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MultiExposure$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_pentax_makernotes_t$MultiExposure$VH().set(seg, x);
        }
        public static void MultiExposure$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_pentax_makernotes_t$MultiExposure$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Quality$VH() {
            return libraw_h_constants_1.libraw_pentax_makernotes_t$Quality$VH();
        }
        public static  short Quality$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_pentax_makernotes_t$Quality$VH().get(seg);
        }
        public static  short Quality$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_pentax_makernotes_t$Quality$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Quality$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_pentax_makernotes_t$Quality$VH().set(seg, x);
        }
        public static void Quality$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_pentax_makernotes_t$Quality$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_samsung_makernotes_t {

        /* package-private */ libraw_samsung_makernotes_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_1.libraw_samsung_makernotes_t$struct$LAYOUT();
        }
        public static MemorySegment ImageSizeFull$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static MemorySegment ImageSizeCrop$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 16));
        }
        public static MemorySegment ColorSpace$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 8));
        }
        public static MemorySegment key$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 44));
        }
        public static VarHandle DigitalGain$VH() {
            return libraw_h_constants_1.libraw_samsung_makernotes_t$DigitalGain$VH();
        }
        public static  double DigitalGain$get(MemorySegment seg) {
            return (double)libraw_h_constants_1.libraw_samsung_makernotes_t$DigitalGain$VH().get(seg);
        }
        public static  double DigitalGain$get(MemorySegment seg, long index) {
            return (double)libraw_h_constants_1.libraw_samsung_makernotes_t$DigitalGain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DigitalGain$set( MemorySegment seg, double x) {
            libraw_h_constants_1.libraw_samsung_makernotes_t$DigitalGain$VH().set(seg, x);
        }
        public static void DigitalGain$set(MemorySegment seg, long index, double x) {
            libraw_h_constants_1.libraw_samsung_makernotes_t$DigitalGain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DeviceType$VH() {
            return libraw_h_constants_1.libraw_samsung_makernotes_t$DeviceType$VH();
        }
        public static  int DeviceType$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_samsung_makernotes_t$DeviceType$VH().get(seg);
        }
        public static  int DeviceType$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_samsung_makernotes_t$DeviceType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DeviceType$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_samsung_makernotes_t$DeviceType$VH().set(seg, x);
        }
        public static void DeviceType$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_samsung_makernotes_t$DeviceType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment LensFirmware$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(100, 32));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_kodak_makernotes_t {

        /* package-private */ libraw_kodak_makernotes_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_1.libraw_kodak_makernotes_t$struct$LAYOUT();
        }
        public static VarHandle BlackLevelTop$VH() {
            return libraw_h_constants_1.libraw_kodak_makernotes_t$BlackLevelTop$VH();
        }
        public static  short BlackLevelTop$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_kodak_makernotes_t$BlackLevelTop$VH().get(seg);
        }
        public static  short BlackLevelTop$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_kodak_makernotes_t$BlackLevelTop$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BlackLevelTop$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$BlackLevelTop$VH().set(seg, x);
        }
        public static void BlackLevelTop$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$BlackLevelTop$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BlackLevelBottom$VH() {
            return libraw_h_constants_1.libraw_kodak_makernotes_t$BlackLevelBottom$VH();
        }
        public static  short BlackLevelBottom$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_kodak_makernotes_t$BlackLevelBottom$VH().get(seg);
        }
        public static  short BlackLevelBottom$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_kodak_makernotes_t$BlackLevelBottom$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BlackLevelBottom$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$BlackLevelBottom$VH().set(seg, x);
        }
        public static void BlackLevelBottom$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$BlackLevelBottom$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle offset_left$VH() {
            return libraw_h_constants_1.libraw_kodak_makernotes_t$offset_left$VH();
        }
        public static  short offset_left$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_kodak_makernotes_t$offset_left$VH().get(seg);
        }
        public static  short offset_left$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_kodak_makernotes_t$offset_left$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void offset_left$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$offset_left$VH().set(seg, x);
        }
        public static void offset_left$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$offset_left$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle offset_top$VH() {
            return libraw_h_constants_1.libraw_kodak_makernotes_t$offset_top$VH();
        }
        public static  short offset_top$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_kodak_makernotes_t$offset_top$VH().get(seg);
        }
        public static  short offset_top$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_kodak_makernotes_t$offset_top$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void offset_top$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$offset_top$VH().set(seg, x);
        }
        public static void offset_top$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$offset_top$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle clipBlack$VH() {
            return libraw_h_constants_1.libraw_kodak_makernotes_t$clipBlack$VH();
        }
        public static  short clipBlack$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_kodak_makernotes_t$clipBlack$VH().get(seg);
        }
        public static  short clipBlack$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_kodak_makernotes_t$clipBlack$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void clipBlack$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$clipBlack$VH().set(seg, x);
        }
        public static void clipBlack$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$clipBlack$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle clipWhite$VH() {
            return libraw_h_constants_1.libraw_kodak_makernotes_t$clipWhite$VH();
        }
        public static  short clipWhite$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_kodak_makernotes_t$clipWhite$VH().get(seg);
        }
        public static  short clipWhite$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_kodak_makernotes_t$clipWhite$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void clipWhite$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$clipWhite$VH().set(seg, x);
        }
        public static void clipWhite$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$clipWhite$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment romm_camDaylight$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 36));
        }
        public static MemorySegment romm_camTungsten$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 36));
        }
        public static MemorySegment romm_camFluorescent$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(84, 36));
        }
        public static MemorySegment romm_camFlash$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(120, 36));
        }
        public static MemorySegment romm_camCustom$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(156, 36));
        }
        public static MemorySegment romm_camAuto$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(192, 36));
        }
        public static VarHandle val018percent$VH() {
            return libraw_h_constants_1.libraw_kodak_makernotes_t$val018percent$VH();
        }
        public static  short val018percent$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_kodak_makernotes_t$val018percent$VH().get(seg);
        }
        public static  short val018percent$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_kodak_makernotes_t$val018percent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void val018percent$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$val018percent$VH().set(seg, x);
        }
        public static void val018percent$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$val018percent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle val100percent$VH() {
            return libraw_h_constants_1.libraw_kodak_makernotes_t$val100percent$VH();
        }
        public static  short val100percent$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_kodak_makernotes_t$val100percent$VH().get(seg);
        }
        public static  short val100percent$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_kodak_makernotes_t$val100percent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void val100percent$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$val100percent$VH().set(seg, x);
        }
        public static void val100percent$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$val100percent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle val170percent$VH() {
            return libraw_h_constants_1.libraw_kodak_makernotes_t$val170percent$VH();
        }
        public static  short val170percent$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_kodak_makernotes_t$val170percent$VH().get(seg);
        }
        public static  short val170percent$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_kodak_makernotes_t$val170percent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void val170percent$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$val170percent$VH().set(seg, x);
        }
        public static void val170percent$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$val170percent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MakerNoteKodak8a$VH() {
            return libraw_h_constants_1.libraw_kodak_makernotes_t$MakerNoteKodak8a$VH();
        }
        public static  short MakerNoteKodak8a$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_kodak_makernotes_t$MakerNoteKodak8a$VH().get(seg);
        }
        public static  short MakerNoteKodak8a$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_kodak_makernotes_t$MakerNoteKodak8a$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MakerNoteKodak8a$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$MakerNoteKodak8a$VH().set(seg, x);
        }
        public static void MakerNoteKodak8a$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$MakerNoteKodak8a$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ISOCalibrationGain$VH() {
            return libraw_h_constants_1.libraw_kodak_makernotes_t$ISOCalibrationGain$VH();
        }
        public static  float ISOCalibrationGain$get(MemorySegment seg) {
            return (float)libraw_h_constants_1.libraw_kodak_makernotes_t$ISOCalibrationGain$VH().get(seg);
        }
        public static  float ISOCalibrationGain$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_1.libraw_kodak_makernotes_t$ISOCalibrationGain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ISOCalibrationGain$set( MemorySegment seg, float x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$ISOCalibrationGain$VH().set(seg, x);
        }
        public static void ISOCalibrationGain$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$ISOCalibrationGain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AnalogISO$VH() {
            return libraw_h_constants_1.libraw_kodak_makernotes_t$AnalogISO$VH();
        }
        public static  float AnalogISO$get(MemorySegment seg) {
            return (float)libraw_h_constants_1.libraw_kodak_makernotes_t$AnalogISO$VH().get(seg);
        }
        public static  float AnalogISO$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_1.libraw_kodak_makernotes_t$AnalogISO$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AnalogISO$set( MemorySegment seg, float x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$AnalogISO$VH().set(seg, x);
        }
        public static void AnalogISO$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_1.libraw_kodak_makernotes_t$AnalogISO$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_p1_makernotes_t {

        /* package-private */ libraw_p1_makernotes_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_1.libraw_p1_makernotes_t$struct$LAYOUT();
        }
        public static MemorySegment Software$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 64));
        }
        public static MemorySegment SystemType$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(64, 64));
        }
        public static MemorySegment FirmwareString$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(128, 256));
        }
        public static MemorySegment SystemModel$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(384, 64));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_sony_info_t {

        /* package-private */ libraw_sony_info_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_1.libraw_sony_info_t$struct$LAYOUT();
        }
        public static VarHandle CameraType$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$CameraType$VH();
        }
        public static  short CameraType$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$CameraType$VH().get(seg);
        }
        public static  short CameraType$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$CameraType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CameraType$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_sony_info_t$CameraType$VH().set(seg, x);
        }
        public static void CameraType$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_sony_info_t$CameraType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Sony0x9400_version$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_version$VH();
        }
        public static  byte Sony0x9400_version$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_version$VH().get(seg);
        }
        public static  byte Sony0x9400_version$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sony0x9400_version$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_version$VH().set(seg, x);
        }
        public static void Sony0x9400_version$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Sony0x9400_ReleaseMode2$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_ReleaseMode2$VH();
        }
        public static  byte Sony0x9400_ReleaseMode2$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_ReleaseMode2$VH().get(seg);
        }
        public static  byte Sony0x9400_ReleaseMode2$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_ReleaseMode2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sony0x9400_ReleaseMode2$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_ReleaseMode2$VH().set(seg, x);
        }
        public static void Sony0x9400_ReleaseMode2$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_ReleaseMode2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Sony0x9400_SequenceImageNumber$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_SequenceImageNumber$VH();
        }
        public static  int Sony0x9400_SequenceImageNumber$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_SequenceImageNumber$VH().get(seg);
        }
        public static  int Sony0x9400_SequenceImageNumber$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_SequenceImageNumber$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sony0x9400_SequenceImageNumber$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_SequenceImageNumber$VH().set(seg, x);
        }
        public static void Sony0x9400_SequenceImageNumber$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_SequenceImageNumber$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Sony0x9400_SequenceLength1$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_SequenceLength1$VH();
        }
        public static  byte Sony0x9400_SequenceLength1$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_SequenceLength1$VH().get(seg);
        }
        public static  byte Sony0x9400_SequenceLength1$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_SequenceLength1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sony0x9400_SequenceLength1$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_SequenceLength1$VH().set(seg, x);
        }
        public static void Sony0x9400_SequenceLength1$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_SequenceLength1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Sony0x9400_SequenceFileNumber$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_SequenceFileNumber$VH();
        }
        public static  int Sony0x9400_SequenceFileNumber$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_SequenceFileNumber$VH().get(seg);
        }
        public static  int Sony0x9400_SequenceFileNumber$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_SequenceFileNumber$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sony0x9400_SequenceFileNumber$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_SequenceFileNumber$VH().set(seg, x);
        }
        public static void Sony0x9400_SequenceFileNumber$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_SequenceFileNumber$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Sony0x9400_SequenceLength2$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_SequenceLength2$VH();
        }
        public static  byte Sony0x9400_SequenceLength2$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_SequenceLength2$VH().get(seg);
        }
        public static  byte Sony0x9400_SequenceLength2$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_SequenceLength2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sony0x9400_SequenceLength2$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_SequenceLength2$VH().set(seg, x);
        }
        public static void Sony0x9400_SequenceLength2$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$Sony0x9400_SequenceLength2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFAreaModeSetting$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$AFAreaModeSetting$VH();
        }
        public static  byte AFAreaModeSetting$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$AFAreaModeSetting$VH().get(seg);
        }
        public static  byte AFAreaModeSetting$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$AFAreaModeSetting$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFAreaModeSetting$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$AFAreaModeSetting$VH().set(seg, x);
        }
        public static void AFAreaModeSetting$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$AFAreaModeSetting$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FlexibleSpotPosition$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(18, 4));
        }
        public static VarHandle AFPointSelected$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$AFPointSelected$VH();
        }
        public static  byte AFPointSelected$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$AFPointSelected$VH().get(seg);
        }
        public static  byte AFPointSelected$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$AFPointSelected$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFPointSelected$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$AFPointSelected$VH().set(seg, x);
        }
        public static void AFPointSelected$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$AFPointSelected$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment AFPointsUsed$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(23, 10));
        }
        public static VarHandle AFTracking$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$AFTracking$VH();
        }
        public static  byte AFTracking$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$AFTracking$VH().get(seg);
        }
        public static  byte AFTracking$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$AFTracking$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFTracking$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$AFTracking$VH().set(seg, x);
        }
        public static void AFTracking$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$AFTracking$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFType$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$AFType$VH();
        }
        public static  byte AFType$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$AFType$VH().get(seg);
        }
        public static  byte AFType$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$AFType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFType$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$AFType$VH().set(seg, x);
        }
        public static void AFType$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$AFType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FocusLocation$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(36, 8));
        }
        public static VarHandle AFMicroAdjValue$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$AFMicroAdjValue$VH();
        }
        public static  byte AFMicroAdjValue$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$AFMicroAdjValue$VH().get(seg);
        }
        public static  byte AFMicroAdjValue$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$AFMicroAdjValue$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFMicroAdjValue$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$AFMicroAdjValue$VH().set(seg, x);
        }
        public static void AFMicroAdjValue$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$AFMicroAdjValue$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFMicroAdjOn$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$AFMicroAdjOn$VH();
        }
        public static  byte AFMicroAdjOn$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$AFMicroAdjOn$VH().get(seg);
        }
        public static  byte AFMicroAdjOn$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$AFMicroAdjOn$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFMicroAdjOn$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$AFMicroAdjOn$VH().set(seg, x);
        }
        public static void AFMicroAdjOn$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$AFMicroAdjOn$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFMicroAdjRegisteredLenses$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$AFMicroAdjRegisteredLenses$VH();
        }
        public static  byte AFMicroAdjRegisteredLenses$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$AFMicroAdjRegisteredLenses$VH().get(seg);
        }
        public static  byte AFMicroAdjRegisteredLenses$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$AFMicroAdjRegisteredLenses$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFMicroAdjRegisteredLenses$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$AFMicroAdjRegisteredLenses$VH().set(seg, x);
        }
        public static void AFMicroAdjRegisteredLenses$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$AFMicroAdjRegisteredLenses$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle VariableLowPassFilter$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$VariableLowPassFilter$VH();
        }
        public static  short VariableLowPassFilter$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$VariableLowPassFilter$VH().get(seg);
        }
        public static  short VariableLowPassFilter$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$VariableLowPassFilter$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VariableLowPassFilter$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_sony_info_t$VariableLowPassFilter$VH().set(seg, x);
        }
        public static void VariableLowPassFilter$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_sony_info_t$VariableLowPassFilter$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LongExposureNoiseReduction$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$LongExposureNoiseReduction$VH();
        }
        public static  int LongExposureNoiseReduction$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_sony_info_t$LongExposureNoiseReduction$VH().get(seg);
        }
        public static  int LongExposureNoiseReduction$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_sony_info_t$LongExposureNoiseReduction$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LongExposureNoiseReduction$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_sony_info_t$LongExposureNoiseReduction$VH().set(seg, x);
        }
        public static void LongExposureNoiseReduction$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_sony_info_t$LongExposureNoiseReduction$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HighISONoiseReduction$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$HighISONoiseReduction$VH();
        }
        public static  short HighISONoiseReduction$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$HighISONoiseReduction$VH().get(seg);
        }
        public static  short HighISONoiseReduction$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$HighISONoiseReduction$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HighISONoiseReduction$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_sony_info_t$HighISONoiseReduction$VH().set(seg, x);
        }
        public static void HighISONoiseReduction$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_sony_info_t$HighISONoiseReduction$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment HDR$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(58, 4));
        }
        public static VarHandle group2010$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$group2010$VH();
        }
        public static  short group2010$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$group2010$VH().get(seg);
        }
        public static  short group2010$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$group2010$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void group2010$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_sony_info_t$group2010$VH().set(seg, x);
        }
        public static void group2010$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_sony_info_t$group2010$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle real_iso_offset$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$real_iso_offset$VH();
        }
        public static  short real_iso_offset$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$real_iso_offset$VH().get(seg);
        }
        public static  short real_iso_offset$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$real_iso_offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void real_iso_offset$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_sony_info_t$real_iso_offset$VH().set(seg, x);
        }
        public static void real_iso_offset$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_sony_info_t$real_iso_offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MeteringMode_offset$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$MeteringMode_offset$VH();
        }
        public static  short MeteringMode_offset$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$MeteringMode_offset$VH().get(seg);
        }
        public static  short MeteringMode_offset$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$MeteringMode_offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MeteringMode_offset$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_sony_info_t$MeteringMode_offset$VH().set(seg, x);
        }
        public static void MeteringMode_offset$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_sony_info_t$MeteringMode_offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ExposureProgram_offset$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$ExposureProgram_offset$VH();
        }
        public static  short ExposureProgram_offset$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$ExposureProgram_offset$VH().get(seg);
        }
        public static  short ExposureProgram_offset$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$ExposureProgram_offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExposureProgram_offset$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_sony_info_t$ExposureProgram_offset$VH().set(seg, x);
        }
        public static void ExposureProgram_offset$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_sony_info_t$ExposureProgram_offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ReleaseMode2_offset$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$ReleaseMode2_offset$VH();
        }
        public static  short ReleaseMode2_offset$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$ReleaseMode2_offset$VH().get(seg);
        }
        public static  short ReleaseMode2_offset$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$ReleaseMode2_offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ReleaseMode2_offset$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_sony_info_t$ReleaseMode2_offset$VH().set(seg, x);
        }
        public static void ReleaseMode2_offset$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_sony_info_t$ReleaseMode2_offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinoltaCamID$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$MinoltaCamID$VH();
        }
        public static  int MinoltaCamID$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_sony_info_t$MinoltaCamID$VH().get(seg);
        }
        public static  int MinoltaCamID$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_sony_info_t$MinoltaCamID$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinoltaCamID$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_sony_info_t$MinoltaCamID$VH().set(seg, x);
        }
        public static void MinoltaCamID$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_sony_info_t$MinoltaCamID$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle firmware$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$firmware$VH();
        }
        public static  float firmware$get(MemorySegment seg) {
            return (float)libraw_h_constants_1.libraw_sony_info_t$firmware$VH().get(seg);
        }
        public static  float firmware$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_1.libraw_sony_info_t$firmware$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void firmware$set( MemorySegment seg, float x) {
            libraw_h_constants_1.libraw_sony_info_t$firmware$VH().set(seg, x);
        }
        public static void firmware$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_1.libraw_sony_info_t$firmware$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ImageCount3_offset$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$ImageCount3_offset$VH();
        }
        public static  short ImageCount3_offset$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$ImageCount3_offset$VH().get(seg);
        }
        public static  short ImageCount3_offset$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$ImageCount3_offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ImageCount3_offset$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_sony_info_t$ImageCount3_offset$VH().set(seg, x);
        }
        public static void ImageCount3_offset$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_sony_info_t$ImageCount3_offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ImageCount3$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$ImageCount3$VH();
        }
        public static  int ImageCount3$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_sony_info_t$ImageCount3$VH().get(seg);
        }
        public static  int ImageCount3$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_sony_info_t$ImageCount3$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ImageCount3$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_sony_info_t$ImageCount3$VH().set(seg, x);
        }
        public static void ImageCount3$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_sony_info_t$ImageCount3$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ElectronicFrontCurtainShutter$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$ElectronicFrontCurtainShutter$VH();
        }
        public static  int ElectronicFrontCurtainShutter$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_sony_info_t$ElectronicFrontCurtainShutter$VH().get(seg);
        }
        public static  int ElectronicFrontCurtainShutter$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_sony_info_t$ElectronicFrontCurtainShutter$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ElectronicFrontCurtainShutter$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_sony_info_t$ElectronicFrontCurtainShutter$VH().set(seg, x);
        }
        public static void ElectronicFrontCurtainShutter$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_sony_info_t$ElectronicFrontCurtainShutter$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MeteringMode2$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$MeteringMode2$VH();
        }
        public static  short MeteringMode2$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$MeteringMode2$VH().get(seg);
        }
        public static  short MeteringMode2$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$MeteringMode2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MeteringMode2$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_sony_info_t$MeteringMode2$VH().set(seg, x);
        }
        public static void MeteringMode2$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_sony_info_t$MeteringMode2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment SonyDateTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(94, 20));
        }
        public static VarHandle ShotNumberSincePowerUp$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$ShotNumberSincePowerUp$VH();
        }
        public static  int ShotNumberSincePowerUp$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_sony_info_t$ShotNumberSincePowerUp$VH().get(seg);
        }
        public static  int ShotNumberSincePowerUp$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_sony_info_t$ShotNumberSincePowerUp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ShotNumberSincePowerUp$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_sony_info_t$ShotNumberSincePowerUp$VH().set(seg, x);
        }
        public static void ShotNumberSincePowerUp$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_sony_info_t$ShotNumberSincePowerUp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PixelShiftGroupPrefix$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$PixelShiftGroupPrefix$VH();
        }
        public static  short PixelShiftGroupPrefix$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$PixelShiftGroupPrefix$VH().get(seg);
        }
        public static  short PixelShiftGroupPrefix$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$PixelShiftGroupPrefix$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PixelShiftGroupPrefix$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_sony_info_t$PixelShiftGroupPrefix$VH().set(seg, x);
        }
        public static void PixelShiftGroupPrefix$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_sony_info_t$PixelShiftGroupPrefix$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PixelShiftGroupID$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$PixelShiftGroupID$VH();
        }
        public static  int PixelShiftGroupID$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_sony_info_t$PixelShiftGroupID$VH().get(seg);
        }
        public static  int PixelShiftGroupID$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_sony_info_t$PixelShiftGroupID$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PixelShiftGroupID$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_sony_info_t$PixelShiftGroupID$VH().set(seg, x);
        }
        public static void PixelShiftGroupID$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_sony_info_t$PixelShiftGroupID$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle nShotsInPixelShiftGroup$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$nShotsInPixelShiftGroup$VH();
        }
        public static  byte nShotsInPixelShiftGroup$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$nShotsInPixelShiftGroup$VH().get(seg);
        }
        public static  byte nShotsInPixelShiftGroup$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$nShotsInPixelShiftGroup$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nShotsInPixelShiftGroup$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$nShotsInPixelShiftGroup$VH().set(seg, x);
        }
        public static void nShotsInPixelShiftGroup$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$nShotsInPixelShiftGroup$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle numInPixelShiftGroup$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$numInPixelShiftGroup$VH();
        }
        public static  byte numInPixelShiftGroup$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$numInPixelShiftGroup$VH().get(seg);
        }
        public static  byte numInPixelShiftGroup$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_sony_info_t$numInPixelShiftGroup$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void numInPixelShiftGroup$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$numInPixelShiftGroup$VH().set(seg, x);
        }
        public static void numInPixelShiftGroup$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_sony_info_t$numInPixelShiftGroup$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle prd_ImageHeight$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$prd_ImageHeight$VH();
        }
        public static  short prd_ImageHeight$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$prd_ImageHeight$VH().get(seg);
        }
        public static  short prd_ImageHeight$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$prd_ImageHeight$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void prd_ImageHeight$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_sony_info_t$prd_ImageHeight$VH().set(seg, x);
        }
        public static void prd_ImageHeight$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_sony_info_t$prd_ImageHeight$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle prd_ImageWidth$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$prd_ImageWidth$VH();
        }
        public static  short prd_ImageWidth$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$prd_ImageWidth$VH().get(seg);
        }
        public static  short prd_ImageWidth$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$prd_ImageWidth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void prd_ImageWidth$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_sony_info_t$prd_ImageWidth$VH().set(seg, x);
        }
        public static void prd_ImageWidth$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_sony_info_t$prd_ImageWidth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle prd_RawBitDepth$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$prd_RawBitDepth$VH();
        }
        public static  short prd_RawBitDepth$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$prd_RawBitDepth$VH().get(seg);
        }
        public static  short prd_RawBitDepth$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$prd_RawBitDepth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void prd_RawBitDepth$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_sony_info_t$prd_RawBitDepth$VH().set(seg, x);
        }
        public static void prd_RawBitDepth$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_sony_info_t$prd_RawBitDepth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle prd_StorageMethod$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$prd_StorageMethod$VH();
        }
        public static  short prd_StorageMethod$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$prd_StorageMethod$VH().get(seg);
        }
        public static  short prd_StorageMethod$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$prd_StorageMethod$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void prd_StorageMethod$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_sony_info_t$prd_StorageMethod$VH().set(seg, x);
        }
        public static void prd_StorageMethod$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_sony_info_t$prd_StorageMethod$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle prd_BayerPattern$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$prd_BayerPattern$VH();
        }
        public static  short prd_BayerPattern$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$prd_BayerPattern$VH().get(seg);
        }
        public static  short prd_BayerPattern$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$prd_BayerPattern$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void prd_BayerPattern$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_sony_info_t$prd_BayerPattern$VH().set(seg, x);
        }
        public static void prd_BayerPattern$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_sony_info_t$prd_BayerPattern$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SonyRawFileType$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$SonyRawFileType$VH();
        }
        public static  short SonyRawFileType$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$SonyRawFileType$VH().get(seg);
        }
        public static  short SonyRawFileType$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$SonyRawFileType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SonyRawFileType$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_sony_info_t$SonyRawFileType$VH().set(seg, x);
        }
        public static void SonyRawFileType$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_sony_info_t$SonyRawFileType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RAWFileType$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$RAWFileType$VH();
        }
        public static  short RAWFileType$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$RAWFileType$VH().get(seg);
        }
        public static  short RAWFileType$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$RAWFileType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RAWFileType$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_sony_info_t$RAWFileType$VH().set(seg, x);
        }
        public static void RAWFileType$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_sony_info_t$RAWFileType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Quality$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$Quality$VH();
        }
        public static  int Quality$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_sony_info_t$Quality$VH().get(seg);
        }
        public static  int Quality$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_sony_info_t$Quality$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Quality$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_sony_info_t$Quality$VH().set(seg, x);
        }
        public static void Quality$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_sony_info_t$Quality$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FileFormat$VH() {
            return libraw_h_constants_1.libraw_sony_info_t$FileFormat$VH();
        }
        public static  short FileFormat$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$FileFormat$VH().get(seg);
        }
        public static  short FileFormat$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_sony_info_t$FileFormat$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileFormat$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_sony_info_t$FileFormat$VH().set(seg, x);
        }
        public static void FileFormat$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_sony_info_t$FileFormat$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_colordata_t {

        /* package-private */ libraw_colordata_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_1.libraw_colordata_t$struct$LAYOUT();
        }
        public static MemorySegment curve$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 131072));
        }
        public static MemorySegment cblack$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(131072, 16416));
        }
        public static VarHandle black$VH() {
            return libraw_h_constants_1.libraw_colordata_t$black$VH();
        }
        public static  int black$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_colordata_t$black$VH().get(seg);
        }
        public static  int black$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_colordata_t$black$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void black$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_colordata_t$black$VH().set(seg, x);
        }
        public static void black$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_colordata_t$black$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle data_maximum$VH() {
            return libraw_h_constants_1.libraw_colordata_t$data_maximum$VH();
        }
        public static  int data_maximum$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_colordata_t$data_maximum$VH().get(seg);
        }
        public static  int data_maximum$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_colordata_t$data_maximum$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void data_maximum$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_colordata_t$data_maximum$VH().set(seg, x);
        }
        public static void data_maximum$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_colordata_t$data_maximum$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle maximum$VH() {
            return libraw_h_constants_1.libraw_colordata_t$maximum$VH();
        }
        public static  int maximum$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_colordata_t$maximum$VH().get(seg);
        }
        public static  int maximum$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_colordata_t$maximum$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void maximum$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_colordata_t$maximum$VH().set(seg, x);
        }
        public static void maximum$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_colordata_t$maximum$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment linear_max$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(147504, 32));
        }
        public static VarHandle fmaximum$VH() {
            return libraw_h_constants_1.libraw_colordata_t$fmaximum$VH();
        }
        public static  float fmaximum$get(MemorySegment seg) {
            return (float)libraw_h_constants_1.libraw_colordata_t$fmaximum$VH().get(seg);
        }
        public static  float fmaximum$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_1.libraw_colordata_t$fmaximum$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fmaximum$set( MemorySegment seg, float x) {
            libraw_h_constants_1.libraw_colordata_t$fmaximum$VH().set(seg, x);
        }
        public static void fmaximum$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_1.libraw_colordata_t$fmaximum$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fnorm$VH() {
            return libraw_h_constants_1.libraw_colordata_t$fnorm$VH();
        }
        public static  float fnorm$get(MemorySegment seg) {
            return (float)libraw_h_constants_1.libraw_colordata_t$fnorm$VH().get(seg);
        }
        public static  float fnorm$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_1.libraw_colordata_t$fnorm$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fnorm$set( MemorySegment seg, float x) {
            libraw_h_constants_1.libraw_colordata_t$fnorm$VH().set(seg, x);
        }
        public static void fnorm$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_1.libraw_colordata_t$fnorm$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment white$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(147544, 128));
        }
        public static MemorySegment cam_mul$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(147672, 16));
        }
        public static MemorySegment pre_mul$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(147688, 16));
        }
        public static MemorySegment cmatrix$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(147704, 48));
        }
        public static MemorySegment ccm$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(147752, 48));
        }
        public static MemorySegment rgb_cam$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(147800, 48));
        }
        public static MemorySegment cam_xyz$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(147848, 48));
        }
        public static MemorySegment phase_one_data$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(147896, 36));
        }
        public static VarHandle flash_used$VH() {
            return libraw_h_constants_1.libraw_colordata_t$flash_used$VH();
        }
        public static  float flash_used$get(MemorySegment seg) {
            return (float)libraw_h_constants_1.libraw_colordata_t$flash_used$VH().get(seg);
        }
        public static  float flash_used$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_1.libraw_colordata_t$flash_used$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void flash_used$set( MemorySegment seg, float x) {
            libraw_h_constants_1.libraw_colordata_t$flash_used$VH().set(seg, x);
        }
        public static void flash_used$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_1.libraw_colordata_t$flash_used$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle canon_ev$VH() {
            return libraw_h_constants_1.libraw_colordata_t$canon_ev$VH();
        }
        public static  float canon_ev$get(MemorySegment seg) {
            return (float)libraw_h_constants_1.libraw_colordata_t$canon_ev$VH().get(seg);
        }
        public static  float canon_ev$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_1.libraw_colordata_t$canon_ev$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void canon_ev$set( MemorySegment seg, float x) {
            libraw_h_constants_1.libraw_colordata_t$canon_ev$VH().set(seg, x);
        }
        public static void canon_ev$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_1.libraw_colordata_t$canon_ev$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment model2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(147940, 64));
        }
        public static MemorySegment UniqueCameraModel$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(148004, 64));
        }
        public static MemorySegment LocalizedCameraModel$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(148068, 64));
        }
        public static MemorySegment ImageUniqueID$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(148132, 64));
        }
        public static MemorySegment RawDataUniqueID$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(148196, 17));
        }
        public static MemorySegment OriginalRawFileName$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(148213, 64));
        }
        public static VarHandle profile$VH() {
            return libraw_h_constants_1.libraw_colordata_t$profile$VH();
        }
        public static  MemoryAddress profile$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_1.libraw_colordata_t$profile$VH().get(seg);
        }
        public static  MemoryAddress profile$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_1.libraw_colordata_t$profile$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void profile$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_1.libraw_colordata_t$profile$VH().set(seg, x);
        }
        public static void profile$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_1.libraw_colordata_t$profile$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle profile_length$VH() {
            return libraw_h_constants_1.libraw_colordata_t$profile_length$VH();
        }
        public static  int profile_length$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_colordata_t$profile_length$VH().get(seg);
        }
        public static  int profile_length$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_colordata_t$profile_length$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void profile_length$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_colordata_t$profile_length$VH().set(seg, x);
        }
        public static void profile_length$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_colordata_t$profile_length$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment black_stat$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(148292, 32));
        }
        public static MemorySegment dng_color$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(148324, 336));
        }
        public static MemorySegment dng_levels$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(148660, 32920));
        }
        public static MemorySegment WB_Coeffs$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(181580, 4096));
        }
        public static MemorySegment WBCT_Coeffs$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(185676, 1280));
        }
        public static VarHandle as_shot_wb_applied$VH() {
            return libraw_h_constants_1.libraw_colordata_t$as_shot_wb_applied$VH();
        }
        public static  int as_shot_wb_applied$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_colordata_t$as_shot_wb_applied$VH().get(seg);
        }
        public static  int as_shot_wb_applied$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_colordata_t$as_shot_wb_applied$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void as_shot_wb_applied$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_colordata_t$as_shot_wb_applied$VH().set(seg, x);
        }
        public static void as_shot_wb_applied$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_colordata_t$as_shot_wb_applied$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment P1_color$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(186960, 72));
        }
        public static VarHandle raw_bps$VH() {
            return libraw_h_constants_1.libraw_colordata_t$raw_bps$VH();
        }
        public static  int raw_bps$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_colordata_t$raw_bps$VH().get(seg);
        }
        public static  int raw_bps$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_colordata_t$raw_bps$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void raw_bps$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_colordata_t$raw_bps$VH().set(seg, x);
        }
        public static void raw_bps$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_colordata_t$raw_bps$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ExifColorSpace$VH() {
            return libraw_h_constants_1.libraw_colordata_t$ExifColorSpace$VH();
        }
        public static  int ExifColorSpace$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_colordata_t$ExifColorSpace$VH().get(seg);
        }
        public static  int ExifColorSpace$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_colordata_t$ExifColorSpace$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExifColorSpace$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_colordata_t$ExifColorSpace$VH().set(seg, x);
        }
        public static void ExifColorSpace$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_colordata_t$ExifColorSpace$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_thumbnail_t {

        /* package-private */ libraw_thumbnail_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_1.libraw_thumbnail_t$struct$LAYOUT();
        }
        public static VarHandle tformat$VH() {
            return libraw_h_constants_1.libraw_thumbnail_t$tformat$VH();
        }
        public static  int tformat$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_thumbnail_t$tformat$VH().get(seg);
        }
        public static  int tformat$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_thumbnail_t$tformat$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tformat$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_thumbnail_t$tformat$VH().set(seg, x);
        }
        public static void tformat$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_thumbnail_t$tformat$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle twidth$VH() {
            return libraw_h_constants_1.libraw_thumbnail_t$twidth$VH();
        }
        public static  short twidth$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_thumbnail_t$twidth$VH().get(seg);
        }
        public static  short twidth$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_thumbnail_t$twidth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void twidth$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_thumbnail_t$twidth$VH().set(seg, x);
        }
        public static void twidth$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_thumbnail_t$twidth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle theight$VH() {
            return libraw_h_constants_1.libraw_thumbnail_t$theight$VH();
        }
        public static  short theight$get(MemorySegment seg) {
            return (short)libraw_h_constants_1.libraw_thumbnail_t$theight$VH().get(seg);
        }
        public static  short theight$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_1.libraw_thumbnail_t$theight$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void theight$set( MemorySegment seg, short x) {
            libraw_h_constants_1.libraw_thumbnail_t$theight$VH().set(seg, x);
        }
        public static void theight$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_1.libraw_thumbnail_t$theight$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tlength$VH() {
            return libraw_h_constants_1.libraw_thumbnail_t$tlength$VH();
        }
        public static  int tlength$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_thumbnail_t$tlength$VH().get(seg);
        }
        public static  int tlength$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_thumbnail_t$tlength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tlength$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_thumbnail_t$tlength$VH().set(seg, x);
        }
        public static void tlength$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_thumbnail_t$tlength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tcolors$VH() {
            return libraw_h_constants_1.libraw_thumbnail_t$tcolors$VH();
        }
        public static  int tcolors$get(MemorySegment seg) {
            return (int)libraw_h_constants_1.libraw_thumbnail_t$tcolors$VH().get(seg);
        }
        public static  int tcolors$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_1.libraw_thumbnail_t$tcolors$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tcolors$set( MemorySegment seg, int x) {
            libraw_h_constants_1.libraw_thumbnail_t$tcolors$VH().set(seg, x);
        }
        public static void tcolors$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_1.libraw_thumbnail_t$tcolors$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle thumb$VH() {
            return libraw_h_constants_1.libraw_thumbnail_t$thumb$VH();
        }
        public static  MemoryAddress thumb$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_1.libraw_thumbnail_t$thumb$VH().get(seg);
        }
        public static  MemoryAddress thumb$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_1.libraw_thumbnail_t$thumb$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void thumb$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_1.libraw_thumbnail_t$thumb$VH().set(seg, x);
        }
        public static void thumb$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_1.libraw_thumbnail_t$thumb$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_gps_info_t {

        /* package-private */ libraw_gps_info_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_1.libraw_gps_info_t$struct$LAYOUT();
        }
        public static MemorySegment latitude$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 12));
        }
        public static MemorySegment longitude$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 12));
        }
        public static MemorySegment gpstimestamp$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 12));
        }
        public static VarHandle altitude$VH() {
            return libraw_h_constants_1.libraw_gps_info_t$altitude$VH();
        }
        public static  float altitude$get(MemorySegment seg) {
            return (float)libraw_h_constants_1.libraw_gps_info_t$altitude$VH().get(seg);
        }
        public static  float altitude$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_1.libraw_gps_info_t$altitude$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void altitude$set( MemorySegment seg, float x) {
            libraw_h_constants_1.libraw_gps_info_t$altitude$VH().set(seg, x);
        }
        public static void altitude$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_1.libraw_gps_info_t$altitude$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle altref$VH() {
            return libraw_h_constants_1.libraw_gps_info_t$altref$VH();
        }
        public static  byte altref$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_gps_info_t$altref$VH().get(seg);
        }
        public static  byte altref$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_gps_info_t$altref$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void altref$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_gps_info_t$altref$VH().set(seg, x);
        }
        public static void altref$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_gps_info_t$altref$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle latref$VH() {
            return libraw_h_constants_1.libraw_gps_info_t$latref$VH();
        }
        public static  byte latref$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_gps_info_t$latref$VH().get(seg);
        }
        public static  byte latref$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_gps_info_t$latref$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void latref$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_gps_info_t$latref$VH().set(seg, x);
        }
        public static void latref$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_gps_info_t$latref$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle longref$VH() {
            return libraw_h_constants_1.libraw_gps_info_t$longref$VH();
        }
        public static  byte longref$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_gps_info_t$longref$VH().get(seg);
        }
        public static  byte longref$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_gps_info_t$longref$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void longref$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_gps_info_t$longref$VH().set(seg, x);
        }
        public static void longref$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_gps_info_t$longref$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle gpsstatus$VH() {
            return libraw_h_constants_1.libraw_gps_info_t$gpsstatus$VH();
        }
        public static  byte gpsstatus$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_gps_info_t$gpsstatus$VH().get(seg);
        }
        public static  byte gpsstatus$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_gps_info_t$gpsstatus$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void gpsstatus$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_gps_info_t$gpsstatus$VH().set(seg, x);
        }
        public static void gpsstatus$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_gps_info_t$gpsstatus$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle gpsparsed$VH() {
            return libraw_h_constants_1.libraw_gps_info_t$gpsparsed$VH();
        }
        public static  byte gpsparsed$get(MemorySegment seg) {
            return (byte)libraw_h_constants_1.libraw_gps_info_t$gpsparsed$VH().get(seg);
        }
        public static  byte gpsparsed$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_1.libraw_gps_info_t$gpsparsed$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void gpsparsed$set( MemorySegment seg, byte x) {
            libraw_h_constants_1.libraw_gps_info_t$gpsparsed$VH().set(seg, x);
        }
        public static void gpsparsed$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_1.libraw_gps_info_t$gpsparsed$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_imgother_t {

        /* package-private */ libraw_imgother_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_1.libraw_imgother_t$struct$LAYOUT();
        }
        public static VarHandle iso_speed$VH() {
            return libraw_h_constants_1.libraw_imgother_t$iso_speed$VH();
        }
        public static  float iso_speed$get(MemorySegment seg) {
            return (float)libraw_h_constants_1.libraw_imgother_t$iso_speed$VH().get(seg);
        }
        public static  float iso_speed$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_1.libraw_imgother_t$iso_speed$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void iso_speed$set( MemorySegment seg, float x) {
            libraw_h_constants_1.libraw_imgother_t$iso_speed$VH().set(seg, x);
        }
        public static void iso_speed$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_1.libraw_imgother_t$iso_speed$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle shutter$VH() {
            return libraw_h_constants_1.libraw_imgother_t$shutter$VH();
        }
        public static  float shutter$get(MemorySegment seg) {
            return (float)libraw_h_constants_1.libraw_imgother_t$shutter$VH().get(seg);
        }
        public static  float shutter$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_1.libraw_imgother_t$shutter$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void shutter$set( MemorySegment seg, float x) {
            libraw_h_constants_1.libraw_imgother_t$shutter$VH().set(seg, x);
        }
        public static void shutter$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_1.libraw_imgother_t$shutter$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle aperture$VH() {
            return libraw_h_constants_2.libraw_imgother_t$aperture$VH();
        }
        public static  float aperture$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_imgother_t$aperture$VH().get(seg);
        }
        public static  float aperture$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_imgother_t$aperture$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void aperture$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_imgother_t$aperture$VH().set(seg, x);
        }
        public static void aperture$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_imgother_t$aperture$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle focal_len$VH() {
            return libraw_h_constants_2.libraw_imgother_t$focal_len$VH();
        }
        public static  float focal_len$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_imgother_t$focal_len$VH().get(seg);
        }
        public static  float focal_len$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_imgother_t$focal_len$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void focal_len$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_imgother_t$focal_len$VH().set(seg, x);
        }
        public static void focal_len$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_imgother_t$focal_len$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle timestamp$VH() {
            return libraw_h_constants_2.libraw_imgother_t$timestamp$VH();
        }
        public static  long timestamp$get(MemorySegment seg) {
            return (long)libraw_h_constants_2.libraw_imgother_t$timestamp$VH().get(seg);
        }
        public static  long timestamp$get(MemorySegment seg, long index) {
            return (long)libraw_h_constants_2.libraw_imgother_t$timestamp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void timestamp$set( MemorySegment seg, long x) {
            libraw_h_constants_2.libraw_imgother_t$timestamp$VH().set(seg, x);
        }
        public static void timestamp$set(MemorySegment seg, long index, long x) {
            libraw_h_constants_2.libraw_imgother_t$timestamp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle shot_order$VH() {
            return libraw_h_constants_2.libraw_imgother_t$shot_order$VH();
        }
        public static  int shot_order$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_imgother_t$shot_order$VH().get(seg);
        }
        public static  int shot_order$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_imgother_t$shot_order$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void shot_order$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_imgother_t$shot_order$VH().set(seg, x);
        }
        public static void shot_order$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_imgother_t$shot_order$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment gpsdata$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(28, 128));
        }
        public static MemorySegment parsed_gps$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(156, 48));
        }
        public static MemorySegment desc$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(204, 512));
        }
        public static MemorySegment artist$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(716, 64));
        }
        public static MemorySegment analogbalance$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(780, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_metadata_common_t {

        /* package-private */ libraw_metadata_common_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_2.libraw_metadata_common_t$struct$LAYOUT();
        }
        public static VarHandle FlashEC$VH() {
            return libraw_h_constants_2.libraw_metadata_common_t$FlashEC$VH();
        }
        public static  float FlashEC$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$FlashEC$VH().get(seg);
        }
        public static  float FlashEC$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$FlashEC$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FlashEC$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$FlashEC$VH().set(seg, x);
        }
        public static void FlashEC$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$FlashEC$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FlashGN$VH() {
            return libraw_h_constants_2.libraw_metadata_common_t$FlashGN$VH();
        }
        public static  float FlashGN$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$FlashGN$VH().get(seg);
        }
        public static  float FlashGN$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$FlashGN$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FlashGN$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$FlashGN$VH().set(seg, x);
        }
        public static void FlashGN$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$FlashGN$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CameraTemperature$VH() {
            return libraw_h_constants_2.libraw_metadata_common_t$CameraTemperature$VH();
        }
        public static  float CameraTemperature$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$CameraTemperature$VH().get(seg);
        }
        public static  float CameraTemperature$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$CameraTemperature$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CameraTemperature$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$CameraTemperature$VH().set(seg, x);
        }
        public static void CameraTemperature$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$CameraTemperature$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SensorTemperature$VH() {
            return libraw_h_constants_2.libraw_metadata_common_t$SensorTemperature$VH();
        }
        public static  float SensorTemperature$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$SensorTemperature$VH().get(seg);
        }
        public static  float SensorTemperature$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$SensorTemperature$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SensorTemperature$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$SensorTemperature$VH().set(seg, x);
        }
        public static void SensorTemperature$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$SensorTemperature$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SensorTemperature2$VH() {
            return libraw_h_constants_2.libraw_metadata_common_t$SensorTemperature2$VH();
        }
        public static  float SensorTemperature2$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$SensorTemperature2$VH().get(seg);
        }
        public static  float SensorTemperature2$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$SensorTemperature2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SensorTemperature2$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$SensorTemperature2$VH().set(seg, x);
        }
        public static void SensorTemperature2$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$SensorTemperature2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LensTemperature$VH() {
            return libraw_h_constants_2.libraw_metadata_common_t$LensTemperature$VH();
        }
        public static  float LensTemperature$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$LensTemperature$VH().get(seg);
        }
        public static  float LensTemperature$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$LensTemperature$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LensTemperature$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$LensTemperature$VH().set(seg, x);
        }
        public static void LensTemperature$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$LensTemperature$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AmbientTemperature$VH() {
            return libraw_h_constants_2.libraw_metadata_common_t$AmbientTemperature$VH();
        }
        public static  float AmbientTemperature$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$AmbientTemperature$VH().get(seg);
        }
        public static  float AmbientTemperature$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$AmbientTemperature$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AmbientTemperature$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$AmbientTemperature$VH().set(seg, x);
        }
        public static void AmbientTemperature$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$AmbientTemperature$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BatteryTemperature$VH() {
            return libraw_h_constants_2.libraw_metadata_common_t$BatteryTemperature$VH();
        }
        public static  float BatteryTemperature$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$BatteryTemperature$VH().get(seg);
        }
        public static  float BatteryTemperature$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$BatteryTemperature$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BatteryTemperature$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$BatteryTemperature$VH().set(seg, x);
        }
        public static void BatteryTemperature$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$BatteryTemperature$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle exifAmbientTemperature$VH() {
            return libraw_h_constants_2.libraw_metadata_common_t$exifAmbientTemperature$VH();
        }
        public static  float exifAmbientTemperature$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$exifAmbientTemperature$VH().get(seg);
        }
        public static  float exifAmbientTemperature$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$exifAmbientTemperature$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void exifAmbientTemperature$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$exifAmbientTemperature$VH().set(seg, x);
        }
        public static void exifAmbientTemperature$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$exifAmbientTemperature$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle exifHumidity$VH() {
            return libraw_h_constants_2.libraw_metadata_common_t$exifHumidity$VH();
        }
        public static  float exifHumidity$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$exifHumidity$VH().get(seg);
        }
        public static  float exifHumidity$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$exifHumidity$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void exifHumidity$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$exifHumidity$VH().set(seg, x);
        }
        public static void exifHumidity$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$exifHumidity$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle exifPressure$VH() {
            return libraw_h_constants_2.libraw_metadata_common_t$exifPressure$VH();
        }
        public static  float exifPressure$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$exifPressure$VH().get(seg);
        }
        public static  float exifPressure$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$exifPressure$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void exifPressure$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$exifPressure$VH().set(seg, x);
        }
        public static void exifPressure$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$exifPressure$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle exifWaterDepth$VH() {
            return libraw_h_constants_2.libraw_metadata_common_t$exifWaterDepth$VH();
        }
        public static  float exifWaterDepth$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$exifWaterDepth$VH().get(seg);
        }
        public static  float exifWaterDepth$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$exifWaterDepth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void exifWaterDepth$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$exifWaterDepth$VH().set(seg, x);
        }
        public static void exifWaterDepth$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$exifWaterDepth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle exifAcceleration$VH() {
            return libraw_h_constants_2.libraw_metadata_common_t$exifAcceleration$VH();
        }
        public static  float exifAcceleration$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$exifAcceleration$VH().get(seg);
        }
        public static  float exifAcceleration$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$exifAcceleration$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void exifAcceleration$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$exifAcceleration$VH().set(seg, x);
        }
        public static void exifAcceleration$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$exifAcceleration$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle exifCameraElevationAngle$VH() {
            return libraw_h_constants_2.libraw_metadata_common_t$exifCameraElevationAngle$VH();
        }
        public static  float exifCameraElevationAngle$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$exifCameraElevationAngle$VH().get(seg);
        }
        public static  float exifCameraElevationAngle$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$exifCameraElevationAngle$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void exifCameraElevationAngle$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$exifCameraElevationAngle$VH().set(seg, x);
        }
        public static void exifCameraElevationAngle$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$exifCameraElevationAngle$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle real_ISO$VH() {
            return libraw_h_constants_2.libraw_metadata_common_t$real_ISO$VH();
        }
        public static  float real_ISO$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$real_ISO$VH().get(seg);
        }
        public static  float real_ISO$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$real_ISO$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void real_ISO$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$real_ISO$VH().set(seg, x);
        }
        public static void real_ISO$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$real_ISO$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle exifExposureIndex$VH() {
            return libraw_h_constants_2.libraw_metadata_common_t$exifExposureIndex$VH();
        }
        public static  float exifExposureIndex$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$exifExposureIndex$VH().get(seg);
        }
        public static  float exifExposureIndex$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_metadata_common_t$exifExposureIndex$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void exifExposureIndex$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$exifExposureIndex$VH().set(seg, x);
        }
        public static void exifExposureIndex$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_metadata_common_t$exifExposureIndex$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ColorSpace$VH() {
            return libraw_h_constants_2.libraw_metadata_common_t$ColorSpace$VH();
        }
        public static  short ColorSpace$get(MemorySegment seg) {
            return (short)libraw_h_constants_2.libraw_metadata_common_t$ColorSpace$VH().get(seg);
        }
        public static  short ColorSpace$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_2.libraw_metadata_common_t$ColorSpace$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ColorSpace$set( MemorySegment seg, short x) {
            libraw_h_constants_2.libraw_metadata_common_t$ColorSpace$VH().set(seg, x);
        }
        public static void ColorSpace$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_2.libraw_metadata_common_t$ColorSpace$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment firmware$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(66, 128));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_output_params_t {

        /* package-private */ libraw_output_params_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_2.libraw_output_params_t$struct$LAYOUT();
        }
        public static MemorySegment greybox$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static MemorySegment cropbox$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 16));
        }
        public static MemorySegment aber$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 32));
        }
        public static MemorySegment gamm$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(64, 48));
        }
        public static MemorySegment user_mul$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(112, 16));
        }
        public static VarHandle shot_select$VH() {
            return libraw_h_constants_2.libraw_output_params_t$shot_select$VH();
        }
        public static  int shot_select$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$shot_select$VH().get(seg);
        }
        public static  int shot_select$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$shot_select$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void shot_select$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$shot_select$VH().set(seg, x);
        }
        public static void shot_select$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$shot_select$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle bright$VH() {
            return libraw_h_constants_2.libraw_output_params_t$bright$VH();
        }
        public static  float bright$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_output_params_t$bright$VH().get(seg);
        }
        public static  float bright$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_output_params_t$bright$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void bright$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_output_params_t$bright$VH().set(seg, x);
        }
        public static void bright$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_output_params_t$bright$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle threshold$VH() {
            return libraw_h_constants_2.libraw_output_params_t$threshold$VH();
        }
        public static  float threshold$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_output_params_t$threshold$VH().get(seg);
        }
        public static  float threshold$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_output_params_t$threshold$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void threshold$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_output_params_t$threshold$VH().set(seg, x);
        }
        public static void threshold$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_output_params_t$threshold$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle half_size$VH() {
            return libraw_h_constants_2.libraw_output_params_t$half_size$VH();
        }
        public static  int half_size$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$half_size$VH().get(seg);
        }
        public static  int half_size$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$half_size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void half_size$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$half_size$VH().set(seg, x);
        }
        public static void half_size$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$half_size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle four_color_rgb$VH() {
            return libraw_h_constants_2.libraw_output_params_t$four_color_rgb$VH();
        }
        public static  int four_color_rgb$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$four_color_rgb$VH().get(seg);
        }
        public static  int four_color_rgb$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$four_color_rgb$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void four_color_rgb$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$four_color_rgb$VH().set(seg, x);
        }
        public static void four_color_rgb$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$four_color_rgb$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle highlight$VH() {
            return libraw_h_constants_2.libraw_output_params_t$highlight$VH();
        }
        public static  int highlight$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$highlight$VH().get(seg);
        }
        public static  int highlight$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$highlight$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void highlight$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$highlight$VH().set(seg, x);
        }
        public static void highlight$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$highlight$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle use_auto_wb$VH() {
            return libraw_h_constants_2.libraw_output_params_t$use_auto_wb$VH();
        }
        public static  int use_auto_wb$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$use_auto_wb$VH().get(seg);
        }
        public static  int use_auto_wb$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$use_auto_wb$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void use_auto_wb$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$use_auto_wb$VH().set(seg, x);
        }
        public static void use_auto_wb$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$use_auto_wb$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle use_camera_wb$VH() {
            return libraw_h_constants_2.libraw_output_params_t$use_camera_wb$VH();
        }
        public static  int use_camera_wb$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$use_camera_wb$VH().get(seg);
        }
        public static  int use_camera_wb$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$use_camera_wb$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void use_camera_wb$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$use_camera_wb$VH().set(seg, x);
        }
        public static void use_camera_wb$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$use_camera_wb$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle use_camera_matrix$VH() {
            return libraw_h_constants_2.libraw_output_params_t$use_camera_matrix$VH();
        }
        public static  int use_camera_matrix$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$use_camera_matrix$VH().get(seg);
        }
        public static  int use_camera_matrix$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$use_camera_matrix$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void use_camera_matrix$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$use_camera_matrix$VH().set(seg, x);
        }
        public static void use_camera_matrix$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$use_camera_matrix$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle output_color$VH() {
            return libraw_h_constants_2.libraw_output_params_t$output_color$VH();
        }
        public static  int output_color$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$output_color$VH().get(seg);
        }
        public static  int output_color$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$output_color$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void output_color$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$output_color$VH().set(seg, x);
        }
        public static void output_color$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$output_color$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle output_profile$VH() {
            return libraw_h_constants_2.libraw_output_params_t$output_profile$VH();
        }
        public static  MemoryAddress output_profile$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_output_params_t$output_profile$VH().get(seg);
        }
        public static  MemoryAddress output_profile$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_output_params_t$output_profile$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void output_profile$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_2.libraw_output_params_t$output_profile$VH().set(seg, x);
        }
        public static void output_profile$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_2.libraw_output_params_t$output_profile$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle camera_profile$VH() {
            return libraw_h_constants_2.libraw_output_params_t$camera_profile$VH();
        }
        public static  MemoryAddress camera_profile$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_output_params_t$camera_profile$VH().get(seg);
        }
        public static  MemoryAddress camera_profile$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_output_params_t$camera_profile$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void camera_profile$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_2.libraw_output_params_t$camera_profile$VH().set(seg, x);
        }
        public static void camera_profile$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_2.libraw_output_params_t$camera_profile$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle bad_pixels$VH() {
            return libraw_h_constants_2.libraw_output_params_t$bad_pixels$VH();
        }
        public static  MemoryAddress bad_pixels$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_output_params_t$bad_pixels$VH().get(seg);
        }
        public static  MemoryAddress bad_pixels$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_output_params_t$bad_pixels$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void bad_pixels$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_2.libraw_output_params_t$bad_pixels$VH().set(seg, x);
        }
        public static void bad_pixels$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_2.libraw_output_params_t$bad_pixels$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dark_frame$VH() {
            return libraw_h_constants_2.libraw_output_params_t$dark_frame$VH();
        }
        public static  MemoryAddress dark_frame$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_output_params_t$dark_frame$VH().get(seg);
        }
        public static  MemoryAddress dark_frame$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_output_params_t$dark_frame$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dark_frame$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_2.libraw_output_params_t$dark_frame$VH().set(seg, x);
        }
        public static void dark_frame$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_2.libraw_output_params_t$dark_frame$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle output_bps$VH() {
            return libraw_h_constants_2.libraw_output_params_t$output_bps$VH();
        }
        public static  int output_bps$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$output_bps$VH().get(seg);
        }
        public static  int output_bps$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$output_bps$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void output_bps$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$output_bps$VH().set(seg, x);
        }
        public static void output_bps$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$output_bps$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle output_tiff$VH() {
            return libraw_h_constants_2.libraw_output_params_t$output_tiff$VH();
        }
        public static  int output_tiff$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$output_tiff$VH().get(seg);
        }
        public static  int output_tiff$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$output_tiff$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void output_tiff$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$output_tiff$VH().set(seg, x);
        }
        public static void output_tiff$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$output_tiff$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle user_flip$VH() {
            return libraw_h_constants_2.libraw_output_params_t$user_flip$VH();
        }
        public static  int user_flip$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$user_flip$VH().get(seg);
        }
        public static  int user_flip$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$user_flip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void user_flip$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$user_flip$VH().set(seg, x);
        }
        public static void user_flip$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$user_flip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle user_qual$VH() {
            return libraw_h_constants_2.libraw_output_params_t$user_qual$VH();
        }
        public static  int user_qual$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$user_qual$VH().get(seg);
        }
        public static  int user_qual$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$user_qual$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void user_qual$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$user_qual$VH().set(seg, x);
        }
        public static void user_qual$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$user_qual$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle user_black$VH() {
            return libraw_h_constants_2.libraw_output_params_t$user_black$VH();
        }
        public static  int user_black$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$user_black$VH().get(seg);
        }
        public static  int user_black$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$user_black$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void user_black$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$user_black$VH().set(seg, x);
        }
        public static void user_black$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$user_black$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment user_cblack$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(220, 16));
        }
        public static VarHandle user_sat$VH() {
            return libraw_h_constants_2.libraw_output_params_t$user_sat$VH();
        }
        public static  int user_sat$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$user_sat$VH().get(seg);
        }
        public static  int user_sat$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$user_sat$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void user_sat$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$user_sat$VH().set(seg, x);
        }
        public static void user_sat$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$user_sat$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle med_passes$VH() {
            return libraw_h_constants_2.libraw_output_params_t$med_passes$VH();
        }
        public static  int med_passes$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$med_passes$VH().get(seg);
        }
        public static  int med_passes$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$med_passes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void med_passes$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$med_passes$VH().set(seg, x);
        }
        public static void med_passes$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$med_passes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle auto_bright_thr$VH() {
            return libraw_h_constants_2.libraw_output_params_t$auto_bright_thr$VH();
        }
        public static  float auto_bright_thr$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_output_params_t$auto_bright_thr$VH().get(seg);
        }
        public static  float auto_bright_thr$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_output_params_t$auto_bright_thr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void auto_bright_thr$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_output_params_t$auto_bright_thr$VH().set(seg, x);
        }
        public static void auto_bright_thr$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_output_params_t$auto_bright_thr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle adjust_maximum_thr$VH() {
            return libraw_h_constants_2.libraw_output_params_t$adjust_maximum_thr$VH();
        }
        public static  float adjust_maximum_thr$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_output_params_t$adjust_maximum_thr$VH().get(seg);
        }
        public static  float adjust_maximum_thr$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_output_params_t$adjust_maximum_thr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void adjust_maximum_thr$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_output_params_t$adjust_maximum_thr$VH().set(seg, x);
        }
        public static void adjust_maximum_thr$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_output_params_t$adjust_maximum_thr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle no_auto_bright$VH() {
            return libraw_h_constants_2.libraw_output_params_t$no_auto_bright$VH();
        }
        public static  int no_auto_bright$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$no_auto_bright$VH().get(seg);
        }
        public static  int no_auto_bright$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$no_auto_bright$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void no_auto_bright$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$no_auto_bright$VH().set(seg, x);
        }
        public static void no_auto_bright$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$no_auto_bright$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle use_fuji_rotate$VH() {
            return libraw_h_constants_2.libraw_output_params_t$use_fuji_rotate$VH();
        }
        public static  int use_fuji_rotate$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$use_fuji_rotate$VH().get(seg);
        }
        public static  int use_fuji_rotate$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$use_fuji_rotate$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void use_fuji_rotate$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$use_fuji_rotate$VH().set(seg, x);
        }
        public static void use_fuji_rotate$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$use_fuji_rotate$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle green_matching$VH() {
            return libraw_h_constants_2.libraw_output_params_t$green_matching$VH();
        }
        public static  int green_matching$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$green_matching$VH().get(seg);
        }
        public static  int green_matching$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$green_matching$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void green_matching$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$green_matching$VH().set(seg, x);
        }
        public static void green_matching$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$green_matching$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dcb_iterations$VH() {
            return libraw_h_constants_2.libraw_output_params_t$dcb_iterations$VH();
        }
        public static  int dcb_iterations$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$dcb_iterations$VH().get(seg);
        }
        public static  int dcb_iterations$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$dcb_iterations$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dcb_iterations$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$dcb_iterations$VH().set(seg, x);
        }
        public static void dcb_iterations$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$dcb_iterations$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dcb_enhance_fl$VH() {
            return libraw_h_constants_2.libraw_output_params_t$dcb_enhance_fl$VH();
        }
        public static  int dcb_enhance_fl$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$dcb_enhance_fl$VH().get(seg);
        }
        public static  int dcb_enhance_fl$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$dcb_enhance_fl$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dcb_enhance_fl$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$dcb_enhance_fl$VH().set(seg, x);
        }
        public static void dcb_enhance_fl$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$dcb_enhance_fl$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fbdd_noiserd$VH() {
            return libraw_h_constants_2.libraw_output_params_t$fbdd_noiserd$VH();
        }
        public static  int fbdd_noiserd$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$fbdd_noiserd$VH().get(seg);
        }
        public static  int fbdd_noiserd$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$fbdd_noiserd$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fbdd_noiserd$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$fbdd_noiserd$VH().set(seg, x);
        }
        public static void fbdd_noiserd$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$fbdd_noiserd$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle exp_correc$VH() {
            return libraw_h_constants_2.libraw_output_params_t$exp_correc$VH();
        }
        public static  int exp_correc$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$exp_correc$VH().get(seg);
        }
        public static  int exp_correc$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$exp_correc$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void exp_correc$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$exp_correc$VH().set(seg, x);
        }
        public static void exp_correc$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$exp_correc$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle exp_shift$VH() {
            return libraw_h_constants_2.libraw_output_params_t$exp_shift$VH();
        }
        public static  float exp_shift$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_output_params_t$exp_shift$VH().get(seg);
        }
        public static  float exp_shift$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_output_params_t$exp_shift$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void exp_shift$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_output_params_t$exp_shift$VH().set(seg, x);
        }
        public static void exp_shift$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_output_params_t$exp_shift$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle exp_preser$VH() {
            return libraw_h_constants_2.libraw_output_params_t$exp_preser$VH();
        }
        public static  float exp_preser$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_output_params_t$exp_preser$VH().get(seg);
        }
        public static  float exp_preser$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_output_params_t$exp_preser$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void exp_preser$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_output_params_t$exp_preser$VH().set(seg, x);
        }
        public static void exp_preser$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_output_params_t$exp_preser$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle use_rawspeed$VH() {
            return libraw_h_constants_2.libraw_output_params_t$use_rawspeed$VH();
        }
        public static  int use_rawspeed$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$use_rawspeed$VH().get(seg);
        }
        public static  int use_rawspeed$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$use_rawspeed$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void use_rawspeed$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$use_rawspeed$VH().set(seg, x);
        }
        public static void use_rawspeed$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$use_rawspeed$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle use_dngsdk$VH() {
            return libraw_h_constants_2.libraw_output_params_t$use_dngsdk$VH();
        }
        public static  int use_dngsdk$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$use_dngsdk$VH().get(seg);
        }
        public static  int use_dngsdk$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$use_dngsdk$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void use_dngsdk$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$use_dngsdk$VH().set(seg, x);
        }
        public static void use_dngsdk$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$use_dngsdk$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle no_auto_scale$VH() {
            return libraw_h_constants_2.libraw_output_params_t$no_auto_scale$VH();
        }
        public static  int no_auto_scale$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$no_auto_scale$VH().get(seg);
        }
        public static  int no_auto_scale$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$no_auto_scale$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void no_auto_scale$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$no_auto_scale$VH().set(seg, x);
        }
        public static void no_auto_scale$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$no_auto_scale$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle no_interpolation$VH() {
            return libraw_h_constants_2.libraw_output_params_t$no_interpolation$VH();
        }
        public static  int no_interpolation$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$no_interpolation$VH().get(seg);
        }
        public static  int no_interpolation$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$no_interpolation$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void no_interpolation$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$no_interpolation$VH().set(seg, x);
        }
        public static void no_interpolation$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$no_interpolation$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle raw_processing_options$VH() {
            return libraw_h_constants_2.libraw_output_params_t$raw_processing_options$VH();
        }
        public static  int raw_processing_options$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$raw_processing_options$VH().get(seg);
        }
        public static  int raw_processing_options$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$raw_processing_options$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void raw_processing_options$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$raw_processing_options$VH().set(seg, x);
        }
        public static void raw_processing_options$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$raw_processing_options$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle max_raw_memory_mb$VH() {
            return libraw_h_constants_2.libraw_output_params_t$max_raw_memory_mb$VH();
        }
        public static  int max_raw_memory_mb$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$max_raw_memory_mb$VH().get(seg);
        }
        public static  int max_raw_memory_mb$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$max_raw_memory_mb$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void max_raw_memory_mb$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$max_raw_memory_mb$VH().set(seg, x);
        }
        public static void max_raw_memory_mb$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$max_raw_memory_mb$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle sony_arw2_posterization_thr$VH() {
            return libraw_h_constants_2.libraw_output_params_t$sony_arw2_posterization_thr$VH();
        }
        public static  int sony_arw2_posterization_thr$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_output_params_t$sony_arw2_posterization_thr$VH().get(seg);
        }
        public static  int sony_arw2_posterization_thr$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_output_params_t$sony_arw2_posterization_thr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sony_arw2_posterization_thr$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_output_params_t$sony_arw2_posterization_thr$VH().set(seg, x);
        }
        public static void sony_arw2_posterization_thr$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_output_params_t$sony_arw2_posterization_thr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle coolscan_nef_gamma$VH() {
            return libraw_h_constants_2.libraw_output_params_t$coolscan_nef_gamma$VH();
        }
        public static  float coolscan_nef_gamma$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_output_params_t$coolscan_nef_gamma$VH().get(seg);
        }
        public static  float coolscan_nef_gamma$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_output_params_t$coolscan_nef_gamma$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void coolscan_nef_gamma$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_output_params_t$coolscan_nef_gamma$VH().set(seg, x);
        }
        public static void coolscan_nef_gamma$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_output_params_t$coolscan_nef_gamma$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment p4shot_order$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(320, 5));
        }
        public static VarHandle custom_camera_strings$VH() {
            return libraw_h_constants_2.libraw_output_params_t$custom_camera_strings$VH();
        }
        public static  MemoryAddress custom_camera_strings$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_output_params_t$custom_camera_strings$VH().get(seg);
        }
        public static  MemoryAddress custom_camera_strings$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_output_params_t$custom_camera_strings$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void custom_camera_strings$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_2.libraw_output_params_t$custom_camera_strings$VH().set(seg, x);
        }
        public static void custom_camera_strings$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_2.libraw_output_params_t$custom_camera_strings$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_rawdata_t {

        /* package-private */ libraw_rawdata_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_2.libraw_rawdata_t$struct$LAYOUT();
        }
        public static VarHandle raw_alloc$VH() {
            return libraw_h_constants_2.libraw_rawdata_t$raw_alloc$VH();
        }
        public static  MemoryAddress raw_alloc$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_rawdata_t$raw_alloc$VH().get(seg);
        }
        public static  MemoryAddress raw_alloc$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_rawdata_t$raw_alloc$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void raw_alloc$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_2.libraw_rawdata_t$raw_alloc$VH().set(seg, x);
        }
        public static void raw_alloc$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_2.libraw_rawdata_t$raw_alloc$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle raw_image$VH() {
            return libraw_h_constants_2.libraw_rawdata_t$raw_image$VH();
        }
        public static  MemoryAddress raw_image$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_rawdata_t$raw_image$VH().get(seg);
        }
        public static  MemoryAddress raw_image$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_rawdata_t$raw_image$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void raw_image$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_2.libraw_rawdata_t$raw_image$VH().set(seg, x);
        }
        public static void raw_image$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_2.libraw_rawdata_t$raw_image$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle color4_image$VH() {
            return libraw_h_constants_2.libraw_rawdata_t$color4_image$VH();
        }
        public static  MemoryAddress color4_image$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_rawdata_t$color4_image$VH().get(seg);
        }
        public static  MemoryAddress color4_image$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_rawdata_t$color4_image$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void color4_image$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_2.libraw_rawdata_t$color4_image$VH().set(seg, x);
        }
        public static void color4_image$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_2.libraw_rawdata_t$color4_image$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle color3_image$VH() {
            return libraw_h_constants_2.libraw_rawdata_t$color3_image$VH();
        }
        public static  MemoryAddress color3_image$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_rawdata_t$color3_image$VH().get(seg);
        }
        public static  MemoryAddress color3_image$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_rawdata_t$color3_image$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void color3_image$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_2.libraw_rawdata_t$color3_image$VH().set(seg, x);
        }
        public static void color3_image$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_2.libraw_rawdata_t$color3_image$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle float_image$VH() {
            return libraw_h_constants_2.libraw_rawdata_t$float_image$VH();
        }
        public static  MemoryAddress float_image$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_rawdata_t$float_image$VH().get(seg);
        }
        public static  MemoryAddress float_image$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_rawdata_t$float_image$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void float_image$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_2.libraw_rawdata_t$float_image$VH().set(seg, x);
        }
        public static void float_image$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_2.libraw_rawdata_t$float_image$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle float3_image$VH() {
            return libraw_h_constants_2.libraw_rawdata_t$float3_image$VH();
        }
        public static  MemoryAddress float3_image$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_rawdata_t$float3_image$VH().get(seg);
        }
        public static  MemoryAddress float3_image$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_rawdata_t$float3_image$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void float3_image$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_2.libraw_rawdata_t$float3_image$VH().set(seg, x);
        }
        public static void float3_image$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_2.libraw_rawdata_t$float3_image$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle float4_image$VH() {
            return libraw_h_constants_2.libraw_rawdata_t$float4_image$VH();
        }
        public static  MemoryAddress float4_image$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_rawdata_t$float4_image$VH().get(seg);
        }
        public static  MemoryAddress float4_image$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_rawdata_t$float4_image$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void float4_image$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_2.libraw_rawdata_t$float4_image$VH().set(seg, x);
        }
        public static void float4_image$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_2.libraw_rawdata_t$float4_image$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ph1_cblack$VH() {
            return libraw_h_constants_2.libraw_rawdata_t$ph1_cblack$VH();
        }
        public static  MemoryAddress ph1_cblack$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_rawdata_t$ph1_cblack$VH().get(seg);
        }
        public static  MemoryAddress ph1_cblack$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_rawdata_t$ph1_cblack$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ph1_cblack$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_2.libraw_rawdata_t$ph1_cblack$VH().set(seg, x);
        }
        public static void ph1_cblack$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_2.libraw_rawdata_t$ph1_cblack$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ph1_rblack$VH() {
            return libraw_h_constants_2.libraw_rawdata_t$ph1_rblack$VH();
        }
        public static  MemoryAddress ph1_rblack$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_rawdata_t$ph1_rblack$VH().get(seg);
        }
        public static  MemoryAddress ph1_rblack$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_rawdata_t$ph1_rblack$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ph1_rblack$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_2.libraw_rawdata_t$ph1_rblack$VH().set(seg, x);
        }
        public static void ph1_rblack$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_2.libraw_rawdata_t$ph1_rblack$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment iparams$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(72, 440));
        }
        public static MemorySegment sizes$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(512, 176));
        }
        public static MemorySegment ioparams$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(688, 16));
        }
        public static MemorySegment color$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(704, 187040));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_makernotes_lens_t {

        /* package-private */ libraw_makernotes_lens_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$struct$LAYOUT();
        }
        public static VarHandle LensID$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$LensID$VH();
        }
        public static  long LensID$get(MemorySegment seg) {
            return (long)libraw_h_constants_2.libraw_makernotes_lens_t$LensID$VH().get(seg);
        }
        public static  long LensID$get(MemorySegment seg, long index) {
            return (long)libraw_h_constants_2.libraw_makernotes_lens_t$LensID$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LensID$set( MemorySegment seg, long x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$LensID$VH().set(seg, x);
        }
        public static void LensID$set(MemorySegment seg, long index, long x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$LensID$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Lens$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 128));
        }
        public static VarHandle LensFormat$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$LensFormat$VH();
        }
        public static  short LensFormat$get(MemorySegment seg) {
            return (short)libraw_h_constants_2.libraw_makernotes_lens_t$LensFormat$VH().get(seg);
        }
        public static  short LensFormat$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_2.libraw_makernotes_lens_t$LensFormat$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LensFormat$set( MemorySegment seg, short x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$LensFormat$VH().set(seg, x);
        }
        public static void LensFormat$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$LensFormat$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LensMount$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$LensMount$VH();
        }
        public static  short LensMount$get(MemorySegment seg) {
            return (short)libraw_h_constants_2.libraw_makernotes_lens_t$LensMount$VH().get(seg);
        }
        public static  short LensMount$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_2.libraw_makernotes_lens_t$LensMount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LensMount$set( MemorySegment seg, short x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$LensMount$VH().set(seg, x);
        }
        public static void LensMount$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$LensMount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CamID$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$CamID$VH();
        }
        public static  long CamID$get(MemorySegment seg) {
            return (long)libraw_h_constants_2.libraw_makernotes_lens_t$CamID$VH().get(seg);
        }
        public static  long CamID$get(MemorySegment seg, long index) {
            return (long)libraw_h_constants_2.libraw_makernotes_lens_t$CamID$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CamID$set( MemorySegment seg, long x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$CamID$VH().set(seg, x);
        }
        public static void CamID$set(MemorySegment seg, long index, long x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$CamID$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CameraFormat$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$CameraFormat$VH();
        }
        public static  short CameraFormat$get(MemorySegment seg) {
            return (short)libraw_h_constants_2.libraw_makernotes_lens_t$CameraFormat$VH().get(seg);
        }
        public static  short CameraFormat$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_2.libraw_makernotes_lens_t$CameraFormat$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CameraFormat$set( MemorySegment seg, short x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$CameraFormat$VH().set(seg, x);
        }
        public static void CameraFormat$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$CameraFormat$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CameraMount$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$CameraMount$VH();
        }
        public static  short CameraMount$get(MemorySegment seg) {
            return (short)libraw_h_constants_2.libraw_makernotes_lens_t$CameraMount$VH().get(seg);
        }
        public static  short CameraMount$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_2.libraw_makernotes_lens_t$CameraMount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CameraMount$set( MemorySegment seg, short x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$CameraMount$VH().set(seg, x);
        }
        public static void CameraMount$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$CameraMount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment body$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(156, 64));
        }
        public static VarHandle FocalType$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$FocalType$VH();
        }
        public static  short FocalType$get(MemorySegment seg) {
            return (short)libraw_h_constants_2.libraw_makernotes_lens_t$FocalType$VH().get(seg);
        }
        public static  short FocalType$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_2.libraw_makernotes_lens_t$FocalType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FocalType$set( MemorySegment seg, short x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$FocalType$VH().set(seg, x);
        }
        public static void FocalType$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$FocalType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment LensFeatures_pre$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(222, 16));
        }
        public static MemorySegment LensFeatures_suf$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(238, 16));
        }
        public static VarHandle MinFocal$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$MinFocal$VH();
        }
        public static  float MinFocal$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$MinFocal$VH().get(seg);
        }
        public static  float MinFocal$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$MinFocal$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinFocal$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$MinFocal$VH().set(seg, x);
        }
        public static void MinFocal$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$MinFocal$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxFocal$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$MaxFocal$VH();
        }
        public static  float MaxFocal$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$MaxFocal$VH().get(seg);
        }
        public static  float MaxFocal$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$MaxFocal$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxFocal$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$MaxFocal$VH().set(seg, x);
        }
        public static void MaxFocal$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$MaxFocal$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxAp4MinFocal$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$MaxAp4MinFocal$VH();
        }
        public static  float MaxAp4MinFocal$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$MaxAp4MinFocal$VH().get(seg);
        }
        public static  float MaxAp4MinFocal$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$MaxAp4MinFocal$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxAp4MinFocal$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$MaxAp4MinFocal$VH().set(seg, x);
        }
        public static void MaxAp4MinFocal$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$MaxAp4MinFocal$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxAp4MaxFocal$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$MaxAp4MaxFocal$VH();
        }
        public static  float MaxAp4MaxFocal$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$MaxAp4MaxFocal$VH().get(seg);
        }
        public static  float MaxAp4MaxFocal$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$MaxAp4MaxFocal$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxAp4MaxFocal$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$MaxAp4MaxFocal$VH().set(seg, x);
        }
        public static void MaxAp4MaxFocal$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$MaxAp4MaxFocal$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinAp4MinFocal$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$MinAp4MinFocal$VH();
        }
        public static  float MinAp4MinFocal$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$MinAp4MinFocal$VH().get(seg);
        }
        public static  float MinAp4MinFocal$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$MinAp4MinFocal$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinAp4MinFocal$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$MinAp4MinFocal$VH().set(seg, x);
        }
        public static void MinAp4MinFocal$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$MinAp4MinFocal$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinAp4MaxFocal$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$MinAp4MaxFocal$VH();
        }
        public static  float MinAp4MaxFocal$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$MinAp4MaxFocal$VH().get(seg);
        }
        public static  float MinAp4MaxFocal$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$MinAp4MaxFocal$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinAp4MaxFocal$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$MinAp4MaxFocal$VH().set(seg, x);
        }
        public static void MinAp4MaxFocal$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$MinAp4MaxFocal$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxAp$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$MaxAp$VH();
        }
        public static  float MaxAp$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$MaxAp$VH().get(seg);
        }
        public static  float MaxAp$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$MaxAp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxAp$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$MaxAp$VH().set(seg, x);
        }
        public static void MaxAp$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$MaxAp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinAp$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$MinAp$VH();
        }
        public static  float MinAp$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$MinAp$VH().get(seg);
        }
        public static  float MinAp$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$MinAp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinAp$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$MinAp$VH().set(seg, x);
        }
        public static void MinAp$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$MinAp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CurFocal$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$CurFocal$VH();
        }
        public static  float CurFocal$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$CurFocal$VH().get(seg);
        }
        public static  float CurFocal$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$CurFocal$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CurFocal$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$CurFocal$VH().set(seg, x);
        }
        public static void CurFocal$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$CurFocal$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CurAp$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$CurAp$VH();
        }
        public static  float CurAp$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$CurAp$VH().get(seg);
        }
        public static  float CurAp$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$CurAp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CurAp$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$CurAp$VH().set(seg, x);
        }
        public static void CurAp$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$CurAp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxAp4CurFocal$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$MaxAp4CurFocal$VH();
        }
        public static  float MaxAp4CurFocal$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$MaxAp4CurFocal$VH().get(seg);
        }
        public static  float MaxAp4CurFocal$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$MaxAp4CurFocal$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxAp4CurFocal$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$MaxAp4CurFocal$VH().set(seg, x);
        }
        public static void MaxAp4CurFocal$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$MaxAp4CurFocal$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinAp4CurFocal$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$MinAp4CurFocal$VH();
        }
        public static  float MinAp4CurFocal$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$MinAp4CurFocal$VH().get(seg);
        }
        public static  float MinAp4CurFocal$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$MinAp4CurFocal$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinAp4CurFocal$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$MinAp4CurFocal$VH().set(seg, x);
        }
        public static void MinAp4CurFocal$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$MinAp4CurFocal$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinFocusDistance$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$MinFocusDistance$VH();
        }
        public static  float MinFocusDistance$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$MinFocusDistance$VH().get(seg);
        }
        public static  float MinFocusDistance$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$MinFocusDistance$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinFocusDistance$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$MinFocusDistance$VH().set(seg, x);
        }
        public static void MinFocusDistance$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$MinFocusDistance$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FocusRangeIndex$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$FocusRangeIndex$VH();
        }
        public static  float FocusRangeIndex$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$FocusRangeIndex$VH().get(seg);
        }
        public static  float FocusRangeIndex$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$FocusRangeIndex$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FocusRangeIndex$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$FocusRangeIndex$VH().set(seg, x);
        }
        public static void FocusRangeIndex$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$FocusRangeIndex$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LensFStops$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$LensFStops$VH();
        }
        public static  float LensFStops$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$LensFStops$VH().get(seg);
        }
        public static  float LensFStops$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$LensFStops$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LensFStops$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$LensFStops$VH().set(seg, x);
        }
        public static void LensFStops$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$LensFStops$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TeleconverterID$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$TeleconverterID$VH();
        }
        public static  long TeleconverterID$get(MemorySegment seg) {
            return (long)libraw_h_constants_2.libraw_makernotes_lens_t$TeleconverterID$VH().get(seg);
        }
        public static  long TeleconverterID$get(MemorySegment seg, long index) {
            return (long)libraw_h_constants_2.libraw_makernotes_lens_t$TeleconverterID$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TeleconverterID$set( MemorySegment seg, long x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$TeleconverterID$VH().set(seg, x);
        }
        public static void TeleconverterID$set(MemorySegment seg, long index, long x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$TeleconverterID$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Teleconverter$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(328, 128));
        }
        public static VarHandle AdapterID$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$AdapterID$VH();
        }
        public static  long AdapterID$get(MemorySegment seg) {
            return (long)libraw_h_constants_2.libraw_makernotes_lens_t$AdapterID$VH().get(seg);
        }
        public static  long AdapterID$get(MemorySegment seg, long index) {
            return (long)libraw_h_constants_2.libraw_makernotes_lens_t$AdapterID$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AdapterID$set( MemorySegment seg, long x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$AdapterID$VH().set(seg, x);
        }
        public static void AdapterID$set(MemorySegment seg, long index, long x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$AdapterID$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Adapter$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(464, 128));
        }
        public static VarHandle AttachmentID$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$AttachmentID$VH();
        }
        public static  long AttachmentID$get(MemorySegment seg) {
            return (long)libraw_h_constants_2.libraw_makernotes_lens_t$AttachmentID$VH().get(seg);
        }
        public static  long AttachmentID$get(MemorySegment seg, long index) {
            return (long)libraw_h_constants_2.libraw_makernotes_lens_t$AttachmentID$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AttachmentID$set( MemorySegment seg, long x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$AttachmentID$VH().set(seg, x);
        }
        public static void AttachmentID$set(MemorySegment seg, long index, long x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$AttachmentID$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Attachment$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(600, 128));
        }
        public static VarHandle FocalUnits$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$FocalUnits$VH();
        }
        public static  short FocalUnits$get(MemorySegment seg) {
            return (short)libraw_h_constants_2.libraw_makernotes_lens_t$FocalUnits$VH().get(seg);
        }
        public static  short FocalUnits$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_2.libraw_makernotes_lens_t$FocalUnits$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FocalUnits$set( MemorySegment seg, short x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$FocalUnits$VH().set(seg, x);
        }
        public static void FocalUnits$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$FocalUnits$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FocalLengthIn35mmFormat$VH() {
            return libraw_h_constants_2.libraw_makernotes_lens_t$FocalLengthIn35mmFormat$VH();
        }
        public static  float FocalLengthIn35mmFormat$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$FocalLengthIn35mmFormat$VH().get(seg);
        }
        public static  float FocalLengthIn35mmFormat$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_makernotes_lens_t$FocalLengthIn35mmFormat$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FocalLengthIn35mmFormat$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$FocalLengthIn35mmFormat$VH().set(seg, x);
        }
        public static void FocalLengthIn35mmFormat$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_makernotes_lens_t$FocalLengthIn35mmFormat$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_nikonlens_t {

        /* package-private */ libraw_nikonlens_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_2.libraw_nikonlens_t$struct$LAYOUT();
        }
        public static VarHandle EffectiveMaxAp$VH() {
            return libraw_h_constants_2.libraw_nikonlens_t$EffectiveMaxAp$VH();
        }
        public static  float EffectiveMaxAp$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_nikonlens_t$EffectiveMaxAp$VH().get(seg);
        }
        public static  float EffectiveMaxAp$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_nikonlens_t$EffectiveMaxAp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EffectiveMaxAp$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_nikonlens_t$EffectiveMaxAp$VH().set(seg, x);
        }
        public static void EffectiveMaxAp$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_nikonlens_t$EffectiveMaxAp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LensIDNumber$VH() {
            return libraw_h_constants_2.libraw_nikonlens_t$LensIDNumber$VH();
        }
        public static  byte LensIDNumber$get(MemorySegment seg) {
            return (byte)libraw_h_constants_2.libraw_nikonlens_t$LensIDNumber$VH().get(seg);
        }
        public static  byte LensIDNumber$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_2.libraw_nikonlens_t$LensIDNumber$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LensIDNumber$set( MemorySegment seg, byte x) {
            libraw_h_constants_2.libraw_nikonlens_t$LensIDNumber$VH().set(seg, x);
        }
        public static void LensIDNumber$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_2.libraw_nikonlens_t$LensIDNumber$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LensFStops$VH() {
            return libraw_h_constants_2.libraw_nikonlens_t$LensFStops$VH();
        }
        public static  byte LensFStops$get(MemorySegment seg) {
            return (byte)libraw_h_constants_2.libraw_nikonlens_t$LensFStops$VH().get(seg);
        }
        public static  byte LensFStops$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_2.libraw_nikonlens_t$LensFStops$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LensFStops$set( MemorySegment seg, byte x) {
            libraw_h_constants_2.libraw_nikonlens_t$LensFStops$VH().set(seg, x);
        }
        public static void LensFStops$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_2.libraw_nikonlens_t$LensFStops$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MCUVersion$VH() {
            return libraw_h_constants_2.libraw_nikonlens_t$MCUVersion$VH();
        }
        public static  byte MCUVersion$get(MemorySegment seg) {
            return (byte)libraw_h_constants_2.libraw_nikonlens_t$MCUVersion$VH().get(seg);
        }
        public static  byte MCUVersion$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_2.libraw_nikonlens_t$MCUVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MCUVersion$set( MemorySegment seg, byte x) {
            libraw_h_constants_2.libraw_nikonlens_t$MCUVersion$VH().set(seg, x);
        }
        public static void MCUVersion$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_2.libraw_nikonlens_t$MCUVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LensType$VH() {
            return libraw_h_constants_2.libraw_nikonlens_t$LensType$VH();
        }
        public static  byte LensType$get(MemorySegment seg) {
            return (byte)libraw_h_constants_2.libraw_nikonlens_t$LensType$VH().get(seg);
        }
        public static  byte LensType$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_2.libraw_nikonlens_t$LensType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LensType$set( MemorySegment seg, byte x) {
            libraw_h_constants_2.libraw_nikonlens_t$LensType$VH().set(seg, x);
        }
        public static void LensType$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_2.libraw_nikonlens_t$LensType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_dnglens_t {

        /* package-private */ libraw_dnglens_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_2.libraw_dnglens_t$struct$LAYOUT();
        }
        public static VarHandle MinFocal$VH() {
            return libraw_h_constants_2.libraw_dnglens_t$MinFocal$VH();
        }
        public static  float MinFocal$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_dnglens_t$MinFocal$VH().get(seg);
        }
        public static  float MinFocal$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_dnglens_t$MinFocal$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinFocal$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_dnglens_t$MinFocal$VH().set(seg, x);
        }
        public static void MinFocal$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_dnglens_t$MinFocal$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxFocal$VH() {
            return libraw_h_constants_2.libraw_dnglens_t$MaxFocal$VH();
        }
        public static  float MaxFocal$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_dnglens_t$MaxFocal$VH().get(seg);
        }
        public static  float MaxFocal$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_dnglens_t$MaxFocal$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxFocal$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_dnglens_t$MaxFocal$VH().set(seg, x);
        }
        public static void MaxFocal$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_dnglens_t$MaxFocal$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxAp4MinFocal$VH() {
            return libraw_h_constants_2.libraw_dnglens_t$MaxAp4MinFocal$VH();
        }
        public static  float MaxAp4MinFocal$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_dnglens_t$MaxAp4MinFocal$VH().get(seg);
        }
        public static  float MaxAp4MinFocal$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_dnglens_t$MaxAp4MinFocal$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxAp4MinFocal$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_dnglens_t$MaxAp4MinFocal$VH().set(seg, x);
        }
        public static void MaxAp4MinFocal$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_dnglens_t$MaxAp4MinFocal$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxAp4MaxFocal$VH() {
            return libraw_h_constants_2.libraw_dnglens_t$MaxAp4MaxFocal$VH();
        }
        public static  float MaxAp4MaxFocal$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_dnglens_t$MaxAp4MaxFocal$VH().get(seg);
        }
        public static  float MaxAp4MaxFocal$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_dnglens_t$MaxAp4MaxFocal$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxAp4MaxFocal$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_dnglens_t$MaxAp4MaxFocal$VH().set(seg, x);
        }
        public static void MaxAp4MaxFocal$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_dnglens_t$MaxAp4MaxFocal$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_lensinfo_t {

        /* package-private */ libraw_lensinfo_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_2.libraw_lensinfo_t$struct$LAYOUT();
        }
        public static VarHandle MinFocal$VH() {
            return libraw_h_constants_2.libraw_lensinfo_t$MinFocal$VH();
        }
        public static  float MinFocal$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_lensinfo_t$MinFocal$VH().get(seg);
        }
        public static  float MinFocal$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_lensinfo_t$MinFocal$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinFocal$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_lensinfo_t$MinFocal$VH().set(seg, x);
        }
        public static void MinFocal$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_lensinfo_t$MinFocal$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxFocal$VH() {
            return libraw_h_constants_2.libraw_lensinfo_t$MaxFocal$VH();
        }
        public static  float MaxFocal$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_lensinfo_t$MaxFocal$VH().get(seg);
        }
        public static  float MaxFocal$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_lensinfo_t$MaxFocal$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxFocal$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_lensinfo_t$MaxFocal$VH().set(seg, x);
        }
        public static void MaxFocal$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_lensinfo_t$MaxFocal$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxAp4MinFocal$VH() {
            return libraw_h_constants_2.libraw_lensinfo_t$MaxAp4MinFocal$VH();
        }
        public static  float MaxAp4MinFocal$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_lensinfo_t$MaxAp4MinFocal$VH().get(seg);
        }
        public static  float MaxAp4MinFocal$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_lensinfo_t$MaxAp4MinFocal$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxAp4MinFocal$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_lensinfo_t$MaxAp4MinFocal$VH().set(seg, x);
        }
        public static void MaxAp4MinFocal$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_lensinfo_t$MaxAp4MinFocal$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxAp4MaxFocal$VH() {
            return libraw_h_constants_2.libraw_lensinfo_t$MaxAp4MaxFocal$VH();
        }
        public static  float MaxAp4MaxFocal$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_lensinfo_t$MaxAp4MaxFocal$VH().get(seg);
        }
        public static  float MaxAp4MaxFocal$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_lensinfo_t$MaxAp4MaxFocal$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxAp4MaxFocal$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_lensinfo_t$MaxAp4MaxFocal$VH().set(seg, x);
        }
        public static void MaxAp4MaxFocal$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_lensinfo_t$MaxAp4MaxFocal$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EXIF_MaxAp$VH() {
            return libraw_h_constants_2.libraw_lensinfo_t$EXIF_MaxAp$VH();
        }
        public static  float EXIF_MaxAp$get(MemorySegment seg) {
            return (float)libraw_h_constants_2.libraw_lensinfo_t$EXIF_MaxAp$VH().get(seg);
        }
        public static  float EXIF_MaxAp$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_2.libraw_lensinfo_t$EXIF_MaxAp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EXIF_MaxAp$set( MemorySegment seg, float x) {
            libraw_h_constants_2.libraw_lensinfo_t$EXIF_MaxAp$VH().set(seg, x);
        }
        public static void EXIF_MaxAp$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_2.libraw_lensinfo_t$EXIF_MaxAp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment LensMake$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(20, 128));
        }
        public static MemorySegment Lens$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(148, 128));
        }
        public static MemorySegment LensSerial$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(276, 128));
        }
        public static MemorySegment InternalLensSerial$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(404, 128));
        }
        public static VarHandle FocalLengthIn35mmFormat$VH() {
            return libraw_h_constants_2.libraw_lensinfo_t$FocalLengthIn35mmFormat$VH();
        }
        public static  short FocalLengthIn35mmFormat$get(MemorySegment seg) {
            return (short)libraw_h_constants_2.libraw_lensinfo_t$FocalLengthIn35mmFormat$VH().get(seg);
        }
        public static  short FocalLengthIn35mmFormat$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_2.libraw_lensinfo_t$FocalLengthIn35mmFormat$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FocalLengthIn35mmFormat$set( MemorySegment seg, short x) {
            libraw_h_constants_2.libraw_lensinfo_t$FocalLengthIn35mmFormat$VH().set(seg, x);
        }
        public static void FocalLengthIn35mmFormat$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_2.libraw_lensinfo_t$FocalLengthIn35mmFormat$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment nikon$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(536, 8));
        }
        public static MemorySegment dng$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(544, 16));
        }
        public static MemorySegment makernotes$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(560, 736));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_makernotes_t {

        /* package-private */ libraw_makernotes_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_2.libraw_makernotes_t$struct$LAYOUT();
        }
        public static MemorySegment canon$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 664));
        }
        public static MemorySegment nikon$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(664, 240));
        }
        public static MemorySegment hasselblad$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(904, 384));
        }
        public static MemorySegment fuji$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1288, 88));
        }
        public static MemorySegment olympus$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1376, 344));
        }
        public static MemorySegment sony$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1720, 152));
        }
        public static MemorySegment kodak$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1872, 244));
        }
        public static MemorySegment panasonic$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2116, 56));
        }
        public static MemorySegment pentax$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2172, 20));
        }
        public static MemorySegment phaseone$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2192, 448));
        }
        public static MemorySegment samsung$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2640, 136));
        }
        public static MemorySegment common$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2776, 196));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_shootinginfo_t {

        /* package-private */ libraw_shootinginfo_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_2.libraw_shootinginfo_t$struct$LAYOUT();
        }
        public static VarHandle DriveMode$VH() {
            return libraw_h_constants_2.libraw_shootinginfo_t$DriveMode$VH();
        }
        public static  short DriveMode$get(MemorySegment seg) {
            return (short)libraw_h_constants_2.libraw_shootinginfo_t$DriveMode$VH().get(seg);
        }
        public static  short DriveMode$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_2.libraw_shootinginfo_t$DriveMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DriveMode$set( MemorySegment seg, short x) {
            libraw_h_constants_2.libraw_shootinginfo_t$DriveMode$VH().set(seg, x);
        }
        public static void DriveMode$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_2.libraw_shootinginfo_t$DriveMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FocusMode$VH() {
            return libraw_h_constants_2.libraw_shootinginfo_t$FocusMode$VH();
        }
        public static  short FocusMode$get(MemorySegment seg) {
            return (short)libraw_h_constants_2.libraw_shootinginfo_t$FocusMode$VH().get(seg);
        }
        public static  short FocusMode$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_2.libraw_shootinginfo_t$FocusMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FocusMode$set( MemorySegment seg, short x) {
            libraw_h_constants_2.libraw_shootinginfo_t$FocusMode$VH().set(seg, x);
        }
        public static void FocusMode$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_2.libraw_shootinginfo_t$FocusMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MeteringMode$VH() {
            return libraw_h_constants_2.libraw_shootinginfo_t$MeteringMode$VH();
        }
        public static  short MeteringMode$get(MemorySegment seg) {
            return (short)libraw_h_constants_2.libraw_shootinginfo_t$MeteringMode$VH().get(seg);
        }
        public static  short MeteringMode$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_2.libraw_shootinginfo_t$MeteringMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MeteringMode$set( MemorySegment seg, short x) {
            libraw_h_constants_2.libraw_shootinginfo_t$MeteringMode$VH().set(seg, x);
        }
        public static void MeteringMode$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_2.libraw_shootinginfo_t$MeteringMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AFPoint$VH() {
            return libraw_h_constants_2.libraw_shootinginfo_t$AFPoint$VH();
        }
        public static  short AFPoint$get(MemorySegment seg) {
            return (short)libraw_h_constants_2.libraw_shootinginfo_t$AFPoint$VH().get(seg);
        }
        public static  short AFPoint$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_2.libraw_shootinginfo_t$AFPoint$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AFPoint$set( MemorySegment seg, short x) {
            libraw_h_constants_2.libraw_shootinginfo_t$AFPoint$VH().set(seg, x);
        }
        public static void AFPoint$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_2.libraw_shootinginfo_t$AFPoint$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ExposureMode$VH() {
            return libraw_h_constants_2.libraw_shootinginfo_t$ExposureMode$VH();
        }
        public static  short ExposureMode$get(MemorySegment seg) {
            return (short)libraw_h_constants_2.libraw_shootinginfo_t$ExposureMode$VH().get(seg);
        }
        public static  short ExposureMode$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_2.libraw_shootinginfo_t$ExposureMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExposureMode$set( MemorySegment seg, short x) {
            libraw_h_constants_2.libraw_shootinginfo_t$ExposureMode$VH().set(seg, x);
        }
        public static void ExposureMode$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_2.libraw_shootinginfo_t$ExposureMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ExposureProgram$VH() {
            return libraw_h_constants_2.libraw_shootinginfo_t$ExposureProgram$VH();
        }
        public static  short ExposureProgram$get(MemorySegment seg) {
            return (short)libraw_h_constants_2.libraw_shootinginfo_t$ExposureProgram$VH().get(seg);
        }
        public static  short ExposureProgram$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_2.libraw_shootinginfo_t$ExposureProgram$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExposureProgram$set( MemorySegment seg, short x) {
            libraw_h_constants_2.libraw_shootinginfo_t$ExposureProgram$VH().set(seg, x);
        }
        public static void ExposureProgram$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_2.libraw_shootinginfo_t$ExposureProgram$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ImageStabilization$VH() {
            return libraw_h_constants_2.libraw_shootinginfo_t$ImageStabilization$VH();
        }
        public static  short ImageStabilization$get(MemorySegment seg) {
            return (short)libraw_h_constants_2.libraw_shootinginfo_t$ImageStabilization$VH().get(seg);
        }
        public static  short ImageStabilization$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_2.libraw_shootinginfo_t$ImageStabilization$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ImageStabilization$set( MemorySegment seg, short x) {
            libraw_h_constants_2.libraw_shootinginfo_t$ImageStabilization$VH().set(seg, x);
        }
        public static void ImageStabilization$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_2.libraw_shootinginfo_t$ImageStabilization$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment BodySerial$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(14, 64));
        }
        public static MemorySegment InternalBodySerial$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(78, 64));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_custom_camera_t {

        /* package-private */ libraw_custom_camera_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_2.libraw_custom_camera_t$struct$LAYOUT();
        }
        public static VarHandle fsize$VH() {
            return libraw_h_constants_2.libraw_custom_camera_t$fsize$VH();
        }
        public static  int fsize$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_custom_camera_t$fsize$VH().get(seg);
        }
        public static  int fsize$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_custom_camera_t$fsize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fsize$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_custom_camera_t$fsize$VH().set(seg, x);
        }
        public static void fsize$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_custom_camera_t$fsize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle rw$VH() {
            return libraw_h_constants_2.libraw_custom_camera_t$rw$VH();
        }
        public static  short rw$get(MemorySegment seg) {
            return (short)libraw_h_constants_2.libraw_custom_camera_t$rw$VH().get(seg);
        }
        public static  short rw$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_2.libraw_custom_camera_t$rw$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void rw$set( MemorySegment seg, short x) {
            libraw_h_constants_2.libraw_custom_camera_t$rw$VH().set(seg, x);
        }
        public static void rw$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_2.libraw_custom_camera_t$rw$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle rh$VH() {
            return libraw_h_constants_2.libraw_custom_camera_t$rh$VH();
        }
        public static  short rh$get(MemorySegment seg) {
            return (short)libraw_h_constants_2.libraw_custom_camera_t$rh$VH().get(seg);
        }
        public static  short rh$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_2.libraw_custom_camera_t$rh$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void rh$set( MemorySegment seg, short x) {
            libraw_h_constants_2.libraw_custom_camera_t$rh$VH().set(seg, x);
        }
        public static void rh$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_2.libraw_custom_camera_t$rh$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lm$VH() {
            return libraw_h_constants_2.libraw_custom_camera_t$lm$VH();
        }
        public static  byte lm$get(MemorySegment seg) {
            return (byte)libraw_h_constants_2.libraw_custom_camera_t$lm$VH().get(seg);
        }
        public static  byte lm$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_2.libraw_custom_camera_t$lm$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lm$set( MemorySegment seg, byte x) {
            libraw_h_constants_2.libraw_custom_camera_t$lm$VH().set(seg, x);
        }
        public static void lm$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_2.libraw_custom_camera_t$lm$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tm$VH() {
            return libraw_h_constants_2.libraw_custom_camera_t$tm$VH();
        }
        public static  byte tm$get(MemorySegment seg) {
            return (byte)libraw_h_constants_2.libraw_custom_camera_t$tm$VH().get(seg);
        }
        public static  byte tm$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_2.libraw_custom_camera_t$tm$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tm$set( MemorySegment seg, byte x) {
            libraw_h_constants_2.libraw_custom_camera_t$tm$VH().set(seg, x);
        }
        public static void tm$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_2.libraw_custom_camera_t$tm$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle rm$VH() {
            return libraw_h_constants_2.libraw_custom_camera_t$rm$VH();
        }
        public static  byte rm$get(MemorySegment seg) {
            return (byte)libraw_h_constants_2.libraw_custom_camera_t$rm$VH().get(seg);
        }
        public static  byte rm$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_2.libraw_custom_camera_t$rm$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void rm$set( MemorySegment seg, byte x) {
            libraw_h_constants_2.libraw_custom_camera_t$rm$VH().set(seg, x);
        }
        public static void rm$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_2.libraw_custom_camera_t$rm$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle bm$VH() {
            return libraw_h_constants_2.libraw_custom_camera_t$bm$VH();
        }
        public static  byte bm$get(MemorySegment seg) {
            return (byte)libraw_h_constants_2.libraw_custom_camera_t$bm$VH().get(seg);
        }
        public static  byte bm$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_2.libraw_custom_camera_t$bm$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void bm$set( MemorySegment seg, byte x) {
            libraw_h_constants_2.libraw_custom_camera_t$bm$VH().set(seg, x);
        }
        public static void bm$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_2.libraw_custom_camera_t$bm$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lf$VH() {
            return libraw_h_constants_2.libraw_custom_camera_t$lf$VH();
        }
        public static  short lf$get(MemorySegment seg) {
            return (short)libraw_h_constants_2.libraw_custom_camera_t$lf$VH().get(seg);
        }
        public static  short lf$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_2.libraw_custom_camera_t$lf$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lf$set( MemorySegment seg, short x) {
            libraw_h_constants_2.libraw_custom_camera_t$lf$VH().set(seg, x);
        }
        public static void lf$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_2.libraw_custom_camera_t$lf$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle cf$VH() {
            return libraw_h_constants_2.libraw_custom_camera_t$cf$VH();
        }
        public static  byte cf$get(MemorySegment seg) {
            return (byte)libraw_h_constants_2.libraw_custom_camera_t$cf$VH().get(seg);
        }
        public static  byte cf$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_2.libraw_custom_camera_t$cf$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void cf$set( MemorySegment seg, byte x) {
            libraw_h_constants_2.libraw_custom_camera_t$cf$VH().set(seg, x);
        }
        public static void cf$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_2.libraw_custom_camera_t$cf$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle max$VH() {
            return libraw_h_constants_2.libraw_custom_camera_t$max$VH();
        }
        public static  byte max$get(MemorySegment seg) {
            return (byte)libraw_h_constants_2.libraw_custom_camera_t$max$VH().get(seg);
        }
        public static  byte max$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_2.libraw_custom_camera_t$max$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void max$set( MemorySegment seg, byte x) {
            libraw_h_constants_2.libraw_custom_camera_t$max$VH().set(seg, x);
        }
        public static void max$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_2.libraw_custom_camera_t$max$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle flags$VH() {
            return libraw_h_constants_2.libraw_custom_camera_t$flags$VH();
        }
        public static  byte flags$get(MemorySegment seg) {
            return (byte)libraw_h_constants_2.libraw_custom_camera_t$flags$VH().get(seg);
        }
        public static  byte flags$get(MemorySegment seg, long index) {
            return (byte)libraw_h_constants_2.libraw_custom_camera_t$flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void flags$set( MemorySegment seg, byte x) {
            libraw_h_constants_2.libraw_custom_camera_t$flags$VH().set(seg, x);
        }
        public static void flags$set(MemorySegment seg, long index, byte x) {
            libraw_h_constants_2.libraw_custom_camera_t$flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment t_make$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(17, 10));
        }
        public static MemorySegment t_model$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(27, 20));
        }
        public static VarHandle offset$VH() {
            return libraw_h_constants_2.libraw_custom_camera_t$offset$VH();
        }
        public static  short offset$get(MemorySegment seg) {
            return (short)libraw_h_constants_2.libraw_custom_camera_t$offset$VH().get(seg);
        }
        public static  short offset$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_2.libraw_custom_camera_t$offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void offset$set( MemorySegment seg, short x) {
            libraw_h_constants_2.libraw_custom_camera_t$offset$VH().set(seg, x);
        }
        public static void offset$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_2.libraw_custom_camera_t$offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_data_t {

        /* package-private */ libraw_data_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_2.libraw_data_t$struct$LAYOUT();
        }
        public static VarHandle image$VH() {
            return libraw_h_constants_2.libraw_data_t$image$VH();
        }
        public static  MemoryAddress image$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_data_t$image$VH().get(seg);
        }
        public static  MemoryAddress image$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_data_t$image$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void image$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_2.libraw_data_t$image$VH().set(seg, x);
        }
        public static void image$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_2.libraw_data_t$image$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment sizes$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 176));
        }
        public static MemorySegment idata$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(184, 440));
        }
        public static MemorySegment lens$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(624, 1296));
        }
        public static MemorySegment makernotes$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1920, 2976));
        }
        public static MemorySegment shootinginfo$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4896, 142));
        }
        public static MemorySegment params$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(5040, 336));
        }
        public static VarHandle progress_flags$VH() {
            return libraw_h_constants_2.libraw_data_t$progress_flags$VH();
        }
        public static  int progress_flags$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_data_t$progress_flags$VH().get(seg);
        }
        public static  int progress_flags$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_data_t$progress_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void progress_flags$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_data_t$progress_flags$VH().set(seg, x);
        }
        public static void progress_flags$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_data_t$progress_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle process_warnings$VH() {
            return libraw_h_constants_2.libraw_data_t$process_warnings$VH();
        }
        public static  int process_warnings$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.libraw_data_t$process_warnings$VH().get(seg);
        }
        public static  int process_warnings$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.libraw_data_t$process_warnings$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void process_warnings$set( MemorySegment seg, int x) {
            libraw_h_constants_2.libraw_data_t$process_warnings$VH().set(seg, x);
        }
        public static void process_warnings$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.libraw_data_t$process_warnings$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment color$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(5384, 187040));
        }
        public static MemorySegment other$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(192424, 800));
        }
        public static MemorySegment thumbnail$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(193224, 24));
        }
        public static MemorySegment rawdata$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(193248, 187744));
        }
        public static VarHandle parent_class$VH() {
            return libraw_h_constants_2.libraw_data_t$parent_class$VH();
        }
        public static  MemoryAddress parent_class$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_data_t$parent_class$VH().get(seg);
        }
        public static  MemoryAddress parent_class$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.libraw_data_t$parent_class$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void parent_class$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_2.libraw_data_t$parent_class$VH().set(seg, x);
        }
        public static void parent_class$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_2.libraw_data_t$parent_class$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class fuji_compressed_params {

        /* package-private */ fuji_compressed_params() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_2.fuji_compressed_params$struct$LAYOUT();
        }
        public static VarHandle q_table$VH() {
            return libraw_h_constants_2.fuji_compressed_params$q_table$VH();
        }
        public static  MemoryAddress q_table$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.fuji_compressed_params$q_table$VH().get(seg);
        }
        public static  MemoryAddress q_table$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.fuji_compressed_params$q_table$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void q_table$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_2.fuji_compressed_params$q_table$VH().set(seg, x);
        }
        public static void q_table$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_2.fuji_compressed_params$q_table$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment q_point$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 20));
        }
        public static VarHandle max_bits$VH() {
            return libraw_h_constants_2.fuji_compressed_params$max_bits$VH();
        }
        public static  int max_bits$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.fuji_compressed_params$max_bits$VH().get(seg);
        }
        public static  int max_bits$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.fuji_compressed_params$max_bits$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void max_bits$set( MemorySegment seg, int x) {
            libraw_h_constants_2.fuji_compressed_params$max_bits$VH().set(seg, x);
        }
        public static void max_bits$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.fuji_compressed_params$max_bits$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle min_value$VH() {
            return libraw_h_constants_2.fuji_compressed_params$min_value$VH();
        }
        public static  int min_value$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.fuji_compressed_params$min_value$VH().get(seg);
        }
        public static  int min_value$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.fuji_compressed_params$min_value$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void min_value$set( MemorySegment seg, int x) {
            libraw_h_constants_2.fuji_compressed_params$min_value$VH().set(seg, x);
        }
        public static void min_value$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.fuji_compressed_params$min_value$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle raw_bits$VH() {
            return libraw_h_constants_2.fuji_compressed_params$raw_bits$VH();
        }
        public static  int raw_bits$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.fuji_compressed_params$raw_bits$VH().get(seg);
        }
        public static  int raw_bits$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.fuji_compressed_params$raw_bits$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void raw_bits$set( MemorySegment seg, int x) {
            libraw_h_constants_2.fuji_compressed_params$raw_bits$VH().set(seg, x);
        }
        public static void raw_bits$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.fuji_compressed_params$raw_bits$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle total_values$VH() {
            return libraw_h_constants_2.fuji_compressed_params$total_values$VH();
        }
        public static  int total_values$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.fuji_compressed_params$total_values$VH().get(seg);
        }
        public static  int total_values$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.fuji_compressed_params$total_values$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void total_values$set( MemorySegment seg, int x) {
            libraw_h_constants_2.fuji_compressed_params$total_values$VH().set(seg, x);
        }
        public static void total_values$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.fuji_compressed_params$total_values$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle maxDiff$VH() {
            return libraw_h_constants_2.fuji_compressed_params$maxDiff$VH();
        }
        public static  int maxDiff$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.fuji_compressed_params$maxDiff$VH().get(seg);
        }
        public static  int maxDiff$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.fuji_compressed_params$maxDiff$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void maxDiff$set( MemorySegment seg, int x) {
            libraw_h_constants_2.fuji_compressed_params$maxDiff$VH().set(seg, x);
        }
        public static void maxDiff$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.fuji_compressed_params$maxDiff$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle line_width$VH() {
            return libraw_h_constants_2.fuji_compressed_params$line_width$VH();
        }
        public static  short line_width$get(MemorySegment seg) {
            return (short)libraw_h_constants_2.fuji_compressed_params$line_width$VH().get(seg);
        }
        public static  short line_width$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_2.fuji_compressed_params$line_width$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void line_width$set( MemorySegment seg, short x) {
            libraw_h_constants_2.fuji_compressed_params$line_width$VH().set(seg, x);
        }
        public static void line_width$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_2.fuji_compressed_params$line_width$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class internal_data_t {

        /* package-private */ internal_data_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_2.internal_data_t$struct$LAYOUT();
        }
        public static VarHandle input$VH() {
            return libraw_h_constants_2.internal_data_t$input$VH();
        }
        public static  MemoryAddress input$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.internal_data_t$input$VH().get(seg);
        }
        public static  MemoryAddress input$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.internal_data_t$input$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void input$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_2.internal_data_t$input$VH().set(seg, x);
        }
        public static void input$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_2.internal_data_t$input$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle output$VH() {
            return libraw_h_constants_2.internal_data_t$output$VH();
        }
        public static  MemoryAddress output$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.internal_data_t$output$VH().get(seg);
        }
        public static  MemoryAddress output$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.internal_data_t$output$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void output$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_2.internal_data_t$output$VH().set(seg, x);
        }
        public static void output$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_2.internal_data_t$output$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle input_internal$VH() {
            return libraw_h_constants_2.internal_data_t$input_internal$VH();
        }
        public static  int input_internal$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.internal_data_t$input_internal$VH().get(seg);
        }
        public static  int input_internal$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.internal_data_t$input_internal$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void input_internal$set( MemorySegment seg, int x) {
            libraw_h_constants_2.internal_data_t$input_internal$VH().set(seg, x);
        }
        public static void input_internal$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.internal_data_t$input_internal$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle meta_data$VH() {
            return libraw_h_constants_2.internal_data_t$meta_data$VH();
        }
        public static  MemoryAddress meta_data$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.internal_data_t$meta_data$VH().get(seg);
        }
        public static  MemoryAddress meta_data$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.internal_data_t$meta_data$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void meta_data$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_2.internal_data_t$meta_data$VH().set(seg, x);
        }
        public static void meta_data$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_2.internal_data_t$meta_data$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle profile_offset$VH() {
            return libraw_h_constants_2.internal_data_t$profile_offset$VH();
        }
        public static  long profile_offset$get(MemorySegment seg) {
            return (long)libraw_h_constants_2.internal_data_t$profile_offset$VH().get(seg);
        }
        public static  long profile_offset$get(MemorySegment seg, long index) {
            return (long)libraw_h_constants_2.internal_data_t$profile_offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void profile_offset$set( MemorySegment seg, long x) {
            libraw_h_constants_2.internal_data_t$profile_offset$VH().set(seg, x);
        }
        public static void profile_offset$set(MemorySegment seg, long index, long x) {
            libraw_h_constants_2.internal_data_t$profile_offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle toffset$VH() {
            return libraw_h_constants_2.internal_data_t$toffset$VH();
        }
        public static  long toffset$get(MemorySegment seg) {
            return (long)libraw_h_constants_2.internal_data_t$toffset$VH().get(seg);
        }
        public static  long toffset$get(MemorySegment seg, long index) {
            return (long)libraw_h_constants_2.internal_data_t$toffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void toffset$set( MemorySegment seg, long x) {
            libraw_h_constants_2.internal_data_t$toffset$VH().set(seg, x);
        }
        public static void toffset$set(MemorySegment seg, long index, long x) {
            libraw_h_constants_2.internal_data_t$toffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment pana_black$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class output_data_t {

        /* package-private */ output_data_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_2.output_data_t$struct$LAYOUT();
        }
        public static VarHandle histogram$VH() {
            return libraw_h_constants_2.output_data_t$histogram$VH();
        }
        public static  MemoryAddress histogram$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.output_data_t$histogram$VH().get(seg);
        }
        public static  MemoryAddress histogram$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.output_data_t$histogram$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void histogram$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_2.output_data_t$histogram$VH().set(seg, x);
        }
        public static void histogram$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_2.output_data_t$histogram$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle oprof$VH() {
            return libraw_h_constants_2.output_data_t$oprof$VH();
        }
        public static  MemoryAddress oprof$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.output_data_t$oprof$VH().get(seg);
        }
        public static  MemoryAddress oprof$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_2.output_data_t$oprof$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void oprof$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_2.output_data_t$oprof$VH().set(seg, x);
        }
        public static void oprof$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_2.output_data_t$oprof$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class identify_data_t {

        /* package-private */ identify_data_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_2.identify_data_t$struct$LAYOUT();
        }
        public static VarHandle olympus_exif_cfa$VH() {
            return libraw_h_constants_2.identify_data_t$olympus_exif_cfa$VH();
        }
        public static  int olympus_exif_cfa$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.identify_data_t$olympus_exif_cfa$VH().get(seg);
        }
        public static  int olympus_exif_cfa$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.identify_data_t$olympus_exif_cfa$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void olympus_exif_cfa$set( MemorySegment seg, int x) {
            libraw_h_constants_2.identify_data_t$olympus_exif_cfa$VH().set(seg, x);
        }
        public static void olympus_exif_cfa$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.identify_data_t$olympus_exif_cfa$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle unique_id$VH() {
            return libraw_h_constants_2.identify_data_t$unique_id$VH();
        }
        public static  long unique_id$get(MemorySegment seg) {
            return (long)libraw_h_constants_2.identify_data_t$unique_id$VH().get(seg);
        }
        public static  long unique_id$get(MemorySegment seg, long index) {
            return (long)libraw_h_constants_2.identify_data_t$unique_id$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void unique_id$set( MemorySegment seg, long x) {
            libraw_h_constants_2.identify_data_t$unique_id$VH().set(seg, x);
        }
        public static void unique_id$set(MemorySegment seg, long index, long x) {
            libraw_h_constants_2.identify_data_t$unique_id$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle OlyID$VH() {
            return libraw_h_constants_2.identify_data_t$OlyID$VH();
        }
        public static  long OlyID$get(MemorySegment seg) {
            return (long)libraw_h_constants_2.identify_data_t$OlyID$VH().get(seg);
        }
        public static  long OlyID$get(MemorySegment seg, long index) {
            return (long)libraw_h_constants_2.identify_data_t$OlyID$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void OlyID$set( MemorySegment seg, long x) {
            libraw_h_constants_2.identify_data_t$OlyID$VH().set(seg, x);
        }
        public static void OlyID$set(MemorySegment seg, long index, long x) {
            libraw_h_constants_2.identify_data_t$OlyID$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tiff_nifds$VH() {
            return libraw_h_constants_2.identify_data_t$tiff_nifds$VH();
        }
        public static  int tiff_nifds$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.identify_data_t$tiff_nifds$VH().get(seg);
        }
        public static  int tiff_nifds$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.identify_data_t$tiff_nifds$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tiff_nifds$set( MemorySegment seg, int x) {
            libraw_h_constants_2.identify_data_t$tiff_nifds$VH().set(seg, x);
        }
        public static void tiff_nifds$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.identify_data_t$tiff_nifds$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tiff_flip$VH() {
            return libraw_h_constants_2.identify_data_t$tiff_flip$VH();
        }
        public static  int tiff_flip$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.identify_data_t$tiff_flip$VH().get(seg);
        }
        public static  int tiff_flip$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.identify_data_t$tiff_flip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tiff_flip$set( MemorySegment seg, int x) {
            libraw_h_constants_2.identify_data_t$tiff_flip$VH().set(seg, x);
        }
        public static void tiff_flip$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.identify_data_t$tiff_flip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle metadata_blocks$VH() {
            return libraw_h_constants_2.identify_data_t$metadata_blocks$VH();
        }
        public static  int metadata_blocks$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.identify_data_t$metadata_blocks$VH().get(seg);
        }
        public static  int metadata_blocks$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.identify_data_t$metadata_blocks$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void metadata_blocks$set( MemorySegment seg, int x) {
            libraw_h_constants_2.identify_data_t$metadata_blocks$VH().set(seg, x);
        }
        public static void metadata_blocks$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.identify_data_t$metadata_blocks$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class crx_data_header_t {

        /* package-private */ crx_data_header_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_2.crx_data_header_t$struct$LAYOUT();
        }
        public static VarHandle version$VH() {
            return libraw_h_constants_2.crx_data_header_t$version$VH();
        }
        public static  int version$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.crx_data_header_t$version$VH().get(seg);
        }
        public static  int version$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.crx_data_header_t$version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void version$set( MemorySegment seg, int x) {
            libraw_h_constants_2.crx_data_header_t$version$VH().set(seg, x);
        }
        public static void version$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.crx_data_header_t$version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_width$VH() {
            return libraw_h_constants_2.crx_data_header_t$f_width$VH();
        }
        public static  int f_width$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.crx_data_header_t$f_width$VH().get(seg);
        }
        public static  int f_width$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.crx_data_header_t$f_width$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_width$set( MemorySegment seg, int x) {
            libraw_h_constants_2.crx_data_header_t$f_width$VH().set(seg, x);
        }
        public static void f_width$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.crx_data_header_t$f_width$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle f_height$VH() {
            return libraw_h_constants_2.crx_data_header_t$f_height$VH();
        }
        public static  int f_height$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.crx_data_header_t$f_height$VH().get(seg);
        }
        public static  int f_height$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.crx_data_header_t$f_height$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void f_height$set( MemorySegment seg, int x) {
            libraw_h_constants_2.crx_data_header_t$f_height$VH().set(seg, x);
        }
        public static void f_height$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.crx_data_header_t$f_height$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tileWidth$VH() {
            return libraw_h_constants_2.crx_data_header_t$tileWidth$VH();
        }
        public static  int tileWidth$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.crx_data_header_t$tileWidth$VH().get(seg);
        }
        public static  int tileWidth$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.crx_data_header_t$tileWidth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tileWidth$set( MemorySegment seg, int x) {
            libraw_h_constants_2.crx_data_header_t$tileWidth$VH().set(seg, x);
        }
        public static void tileWidth$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.crx_data_header_t$tileWidth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tileHeight$VH() {
            return libraw_h_constants_2.crx_data_header_t$tileHeight$VH();
        }
        public static  int tileHeight$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.crx_data_header_t$tileHeight$VH().get(seg);
        }
        public static  int tileHeight$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.crx_data_header_t$tileHeight$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tileHeight$set( MemorySegment seg, int x) {
            libraw_h_constants_2.crx_data_header_t$tileHeight$VH().set(seg, x);
        }
        public static void tileHeight$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.crx_data_header_t$tileHeight$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle nBits$VH() {
            return libraw_h_constants_2.crx_data_header_t$nBits$VH();
        }
        public static  int nBits$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.crx_data_header_t$nBits$VH().get(seg);
        }
        public static  int nBits$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.crx_data_header_t$nBits$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nBits$set( MemorySegment seg, int x) {
            libraw_h_constants_2.crx_data_header_t$nBits$VH().set(seg, x);
        }
        public static void nBits$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.crx_data_header_t$nBits$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle nPlanes$VH() {
            return libraw_h_constants_2.crx_data_header_t$nPlanes$VH();
        }
        public static  int nPlanes$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.crx_data_header_t$nPlanes$VH().get(seg);
        }
        public static  int nPlanes$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.crx_data_header_t$nPlanes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nPlanes$set( MemorySegment seg, int x) {
            libraw_h_constants_2.crx_data_header_t$nPlanes$VH().set(seg, x);
        }
        public static void nPlanes$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.crx_data_header_t$nPlanes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle cfaLayout$VH() {
            return libraw_h_constants_2.crx_data_header_t$cfaLayout$VH();
        }
        public static  int cfaLayout$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.crx_data_header_t$cfaLayout$VH().get(seg);
        }
        public static  int cfaLayout$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.crx_data_header_t$cfaLayout$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void cfaLayout$set( MemorySegment seg, int x) {
            libraw_h_constants_2.crx_data_header_t$cfaLayout$VH().set(seg, x);
        }
        public static void cfaLayout$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.crx_data_header_t$cfaLayout$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle encType$VH() {
            return libraw_h_constants_2.crx_data_header_t$encType$VH();
        }
        public static  int encType$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.crx_data_header_t$encType$VH().get(seg);
        }
        public static  int encType$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.crx_data_header_t$encType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void encType$set( MemorySegment seg, int x) {
            libraw_h_constants_2.crx_data_header_t$encType$VH().set(seg, x);
        }
        public static void encType$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.crx_data_header_t$encType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle imageLevels$VH() {
            return libraw_h_constants_2.crx_data_header_t$imageLevels$VH();
        }
        public static  int imageLevels$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.crx_data_header_t$imageLevels$VH().get(seg);
        }
        public static  int imageLevels$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.crx_data_header_t$imageLevels$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void imageLevels$set( MemorySegment seg, int x) {
            libraw_h_constants_2.crx_data_header_t$imageLevels$VH().set(seg, x);
        }
        public static void imageLevels$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.crx_data_header_t$imageLevels$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle hasTileCols$VH() {
            return libraw_h_constants_2.crx_data_header_t$hasTileCols$VH();
        }
        public static  int hasTileCols$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.crx_data_header_t$hasTileCols$VH().get(seg);
        }
        public static  int hasTileCols$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.crx_data_header_t$hasTileCols$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void hasTileCols$set( MemorySegment seg, int x) {
            libraw_h_constants_2.crx_data_header_t$hasTileCols$VH().set(seg, x);
        }
        public static void hasTileCols$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.crx_data_header_t$hasTileCols$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle hasTileRows$VH() {
            return libraw_h_constants_2.crx_data_header_t$hasTileRows$VH();
        }
        public static  int hasTileRows$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.crx_data_header_t$hasTileRows$VH().get(seg);
        }
        public static  int hasTileRows$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.crx_data_header_t$hasTileRows$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void hasTileRows$set( MemorySegment seg, int x) {
            libraw_h_constants_2.crx_data_header_t$hasTileRows$VH().set(seg, x);
        }
        public static void hasTileRows$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.crx_data_header_t$hasTileRows$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mdatHdrSize$VH() {
            return libraw_h_constants_2.crx_data_header_t$mdatHdrSize$VH();
        }
        public static  int mdatHdrSize$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.crx_data_header_t$mdatHdrSize$VH().get(seg);
        }
        public static  int mdatHdrSize$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.crx_data_header_t$mdatHdrSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void mdatHdrSize$set( MemorySegment seg, int x) {
            libraw_h_constants_2.crx_data_header_t$mdatHdrSize$VH().set(seg, x);
        }
        public static void mdatHdrSize$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.crx_data_header_t$mdatHdrSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MediaSize$VH() {
            return libraw_h_constants_2.crx_data_header_t$MediaSize$VH();
        }
        public static  int MediaSize$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.crx_data_header_t$MediaSize$VH().get(seg);
        }
        public static  int MediaSize$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.crx_data_header_t$MediaSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MediaSize$set( MemorySegment seg, int x) {
            libraw_h_constants_2.crx_data_header_t$MediaSize$VH().set(seg, x);
        }
        public static void MediaSize$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.crx_data_header_t$MediaSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MediaOffset$VH() {
            return libraw_h_constants_2.crx_data_header_t$MediaOffset$VH();
        }
        public static  long MediaOffset$get(MemorySegment seg) {
            return (long)libraw_h_constants_2.crx_data_header_t$MediaOffset$VH().get(seg);
        }
        public static  long MediaOffset$get(MemorySegment seg, long index) {
            return (long)libraw_h_constants_2.crx_data_header_t$MediaOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MediaOffset$set( MemorySegment seg, long x) {
            libraw_h_constants_2.crx_data_header_t$MediaOffset$VH().set(seg, x);
        }
        public static void MediaOffset$set(MemorySegment seg, long index, long x) {
            libraw_h_constants_2.crx_data_header_t$MediaOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MediaType$VH() {
            return libraw_h_constants_2.crx_data_header_t$MediaType$VH();
        }
        public static  int MediaType$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.crx_data_header_t$MediaType$VH().get(seg);
        }
        public static  int MediaType$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.crx_data_header_t$MediaType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MediaType$set( MemorySegment seg, int x) {
            libraw_h_constants_2.crx_data_header_t$MediaType$VH().set(seg, x);
        }
        public static void MediaType$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.crx_data_header_t$MediaType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class unpacker_data_t {

        /* package-private */ unpacker_data_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_2.unpacker_data_t$struct$LAYOUT();
        }
        public static VarHandle order$VH() {
            return libraw_h_constants_2.unpacker_data_t$order$VH();
        }
        public static  short order$get(MemorySegment seg) {
            return (short)libraw_h_constants_2.unpacker_data_t$order$VH().get(seg);
        }
        public static  short order$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_2.unpacker_data_t$order$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void order$set( MemorySegment seg, short x) {
            libraw_h_constants_2.unpacker_data_t$order$VH().set(seg, x);
        }
        public static void order$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_2.unpacker_data_t$order$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment sraw_mul$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2, 8));
        }
        public static MemorySegment cr2_slice$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(10, 6));
        }
        public static VarHandle kodak_cbpp$VH() {
            return libraw_h_constants_2.unpacker_data_t$kodak_cbpp$VH();
        }
        public static  int kodak_cbpp$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.unpacker_data_t$kodak_cbpp$VH().get(seg);
        }
        public static  int kodak_cbpp$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.unpacker_data_t$kodak_cbpp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void kodak_cbpp$set( MemorySegment seg, int x) {
            libraw_h_constants_2.unpacker_data_t$kodak_cbpp$VH().set(seg, x);
        }
        public static void kodak_cbpp$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.unpacker_data_t$kodak_cbpp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle strip_offset$VH() {
            return libraw_h_constants_2.unpacker_data_t$strip_offset$VH();
        }
        public static  long strip_offset$get(MemorySegment seg) {
            return (long)libraw_h_constants_2.unpacker_data_t$strip_offset$VH().get(seg);
        }
        public static  long strip_offset$get(MemorySegment seg, long index) {
            return (long)libraw_h_constants_2.unpacker_data_t$strip_offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void strip_offset$set( MemorySegment seg, long x) {
            libraw_h_constants_2.unpacker_data_t$strip_offset$VH().set(seg, x);
        }
        public static void strip_offset$set(MemorySegment seg, long index, long x) {
            libraw_h_constants_2.unpacker_data_t$strip_offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle data_offset$VH() {
            return libraw_h_constants_2.unpacker_data_t$data_offset$VH();
        }
        public static  long data_offset$get(MemorySegment seg) {
            return (long)libraw_h_constants_2.unpacker_data_t$data_offset$VH().get(seg);
        }
        public static  long data_offset$get(MemorySegment seg, long index) {
            return (long)libraw_h_constants_2.unpacker_data_t$data_offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void data_offset$set( MemorySegment seg, long x) {
            libraw_h_constants_2.unpacker_data_t$data_offset$VH().set(seg, x);
        }
        public static void data_offset$set(MemorySegment seg, long index, long x) {
            libraw_h_constants_2.unpacker_data_t$data_offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle meta_offset$VH() {
            return libraw_h_constants_2.unpacker_data_t$meta_offset$VH();
        }
        public static  long meta_offset$get(MemorySegment seg) {
            return (long)libraw_h_constants_2.unpacker_data_t$meta_offset$VH().get(seg);
        }
        public static  long meta_offset$get(MemorySegment seg, long index) {
            return (long)libraw_h_constants_2.unpacker_data_t$meta_offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void meta_offset$set( MemorySegment seg, long x) {
            libraw_h_constants_2.unpacker_data_t$meta_offset$VH().set(seg, x);
        }
        public static void meta_offset$set(MemorySegment seg, long index, long x) {
            libraw_h_constants_2.unpacker_data_t$meta_offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle data_size$VH() {
            return libraw_h_constants_2.unpacker_data_t$data_size$VH();
        }
        public static  int data_size$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.unpacker_data_t$data_size$VH().get(seg);
        }
        public static  int data_size$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.unpacker_data_t$data_size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void data_size$set( MemorySegment seg, int x) {
            libraw_h_constants_2.unpacker_data_t$data_size$VH().set(seg, x);
        }
        public static void data_size$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.unpacker_data_t$data_size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle meta_length$VH() {
            return libraw_h_constants_2.unpacker_data_t$meta_length$VH();
        }
        public static  int meta_length$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.unpacker_data_t$meta_length$VH().get(seg);
        }
        public static  int meta_length$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.unpacker_data_t$meta_length$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void meta_length$set( MemorySegment seg, int x) {
            libraw_h_constants_2.unpacker_data_t$meta_length$VH().set(seg, x);
        }
        public static void meta_length$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.unpacker_data_t$meta_length$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle thumb_misc$VH() {
            return libraw_h_constants_2.unpacker_data_t$thumb_misc$VH();
        }
        public static  int thumb_misc$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.unpacker_data_t$thumb_misc$VH().get(seg);
        }
        public static  int thumb_misc$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.unpacker_data_t$thumb_misc$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void thumb_misc$set( MemorySegment seg, int x) {
            libraw_h_constants_2.unpacker_data_t$thumb_misc$VH().set(seg, x);
        }
        public static void thumb_misc$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.unpacker_data_t$thumb_misc$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fuji_layout$VH() {
            return libraw_h_constants_2.unpacker_data_t$fuji_layout$VH();
        }
        public static  int fuji_layout$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.unpacker_data_t$fuji_layout$VH().get(seg);
        }
        public static  int fuji_layout$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.unpacker_data_t$fuji_layout$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fuji_layout$set( MemorySegment seg, int x) {
            libraw_h_constants_2.unpacker_data_t$fuji_layout$VH().set(seg, x);
        }
        public static void fuji_layout$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.unpacker_data_t$fuji_layout$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tiff_samples$VH() {
            return libraw_h_constants_2.unpacker_data_t$tiff_samples$VH();
        }
        public static  int tiff_samples$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.unpacker_data_t$tiff_samples$VH().get(seg);
        }
        public static  int tiff_samples$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.unpacker_data_t$tiff_samples$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tiff_samples$set( MemorySegment seg, int x) {
            libraw_h_constants_2.unpacker_data_t$tiff_samples$VH().set(seg, x);
        }
        public static void tiff_samples$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.unpacker_data_t$tiff_samples$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tiff_bps$VH() {
            return libraw_h_constants_2.unpacker_data_t$tiff_bps$VH();
        }
        public static  int tiff_bps$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.unpacker_data_t$tiff_bps$VH().get(seg);
        }
        public static  int tiff_bps$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.unpacker_data_t$tiff_bps$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tiff_bps$set( MemorySegment seg, int x) {
            libraw_h_constants_2.unpacker_data_t$tiff_bps$VH().set(seg, x);
        }
        public static void tiff_bps$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.unpacker_data_t$tiff_bps$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tiff_compress$VH() {
            return libraw_h_constants_2.unpacker_data_t$tiff_compress$VH();
        }
        public static  int tiff_compress$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.unpacker_data_t$tiff_compress$VH().get(seg);
        }
        public static  int tiff_compress$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.unpacker_data_t$tiff_compress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tiff_compress$set( MemorySegment seg, int x) {
            libraw_h_constants_2.unpacker_data_t$tiff_compress$VH().set(seg, x);
        }
        public static void tiff_compress$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.unpacker_data_t$tiff_compress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tiff_sampleformat$VH() {
            return libraw_h_constants_2.unpacker_data_t$tiff_sampleformat$VH();
        }
        public static  int tiff_sampleformat$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.unpacker_data_t$tiff_sampleformat$VH().get(seg);
        }
        public static  int tiff_sampleformat$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.unpacker_data_t$tiff_sampleformat$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tiff_sampleformat$set( MemorySegment seg, int x) {
            libraw_h_constants_2.unpacker_data_t$tiff_sampleformat$VH().set(seg, x);
        }
        public static void tiff_sampleformat$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.unpacker_data_t$tiff_sampleformat$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle zero_after_ff$VH() {
            return libraw_h_constants_2.unpacker_data_t$zero_after_ff$VH();
        }
        public static  int zero_after_ff$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.unpacker_data_t$zero_after_ff$VH().get(seg);
        }
        public static  int zero_after_ff$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.unpacker_data_t$zero_after_ff$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void zero_after_ff$set( MemorySegment seg, int x) {
            libraw_h_constants_2.unpacker_data_t$zero_after_ff$VH().set(seg, x);
        }
        public static void zero_after_ff$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.unpacker_data_t$zero_after_ff$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tile_width$VH() {
            return libraw_h_constants_2.unpacker_data_t$tile_width$VH();
        }
        public static  int tile_width$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.unpacker_data_t$tile_width$VH().get(seg);
        }
        public static  int tile_width$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.unpacker_data_t$tile_width$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tile_width$set( MemorySegment seg, int x) {
            libraw_h_constants_2.unpacker_data_t$tile_width$VH().set(seg, x);
        }
        public static void tile_width$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.unpacker_data_t$tile_width$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle tile_length$VH() {
            return libraw_h_constants_2.unpacker_data_t$tile_length$VH();
        }
        public static  int tile_length$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.unpacker_data_t$tile_length$VH().get(seg);
        }
        public static  int tile_length$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.unpacker_data_t$tile_length$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tile_length$set( MemorySegment seg, int x) {
            libraw_h_constants_2.unpacker_data_t$tile_length$VH().set(seg, x);
        }
        public static void tile_length$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.unpacker_data_t$tile_length$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle load_flags$VH() {
            return libraw_h_constants_2.unpacker_data_t$load_flags$VH();
        }
        public static  int load_flags$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.unpacker_data_t$load_flags$VH().get(seg);
        }
        public static  int load_flags$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.unpacker_data_t$load_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void load_flags$set( MemorySegment seg, int x) {
            libraw_h_constants_2.unpacker_data_t$load_flags$VH().set(seg, x);
        }
        public static void load_flags$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.unpacker_data_t$load_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle data_error$VH() {
            return libraw_h_constants_2.unpacker_data_t$data_error$VH();
        }
        public static  int data_error$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.unpacker_data_t$data_error$VH().get(seg);
        }
        public static  int data_error$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.unpacker_data_t$data_error$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void data_error$set( MemorySegment seg, int x) {
            libraw_h_constants_2.unpacker_data_t$data_error$VH().set(seg, x);
        }
        public static void data_error$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.unpacker_data_t$data_error$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle hasselblad_parser_flag$VH() {
            return libraw_h_constants_2.unpacker_data_t$hasselblad_parser_flag$VH();
        }
        public static  int hasselblad_parser_flag$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.unpacker_data_t$hasselblad_parser_flag$VH().get(seg);
        }
        public static  int hasselblad_parser_flag$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.unpacker_data_t$hasselblad_parser_flag$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void hasselblad_parser_flag$set( MemorySegment seg, int x) {
            libraw_h_constants_2.unpacker_data_t$hasselblad_parser_flag$VH().set(seg, x);
        }
        public static void hasselblad_parser_flag$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.unpacker_data_t$hasselblad_parser_flag$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle posRAFData$VH() {
            return libraw_h_constants_2.unpacker_data_t$posRAFData$VH();
        }
        public static  long posRAFData$get(MemorySegment seg) {
            return (long)libraw_h_constants_2.unpacker_data_t$posRAFData$VH().get(seg);
        }
        public static  long posRAFData$get(MemorySegment seg, long index) {
            return (long)libraw_h_constants_2.unpacker_data_t$posRAFData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void posRAFData$set( MemorySegment seg, long x) {
            libraw_h_constants_2.unpacker_data_t$posRAFData$VH().set(seg, x);
        }
        public static void posRAFData$set(MemorySegment seg, long index, long x) {
            libraw_h_constants_2.unpacker_data_t$posRAFData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lenRAFData$VH() {
            return libraw_h_constants_2.unpacker_data_t$lenRAFData$VH();
        }
        public static  int lenRAFData$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.unpacker_data_t$lenRAFData$VH().get(seg);
        }
        public static  int lenRAFData$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.unpacker_data_t$lenRAFData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lenRAFData$set( MemorySegment seg, int x) {
            libraw_h_constants_2.unpacker_data_t$lenRAFData$VH().set(seg, x);
        }
        public static void lenRAFData$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.unpacker_data_t$lenRAFData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fuji_total_lines$VH() {
            return libraw_h_constants_2.unpacker_data_t$fuji_total_lines$VH();
        }
        public static  int fuji_total_lines$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.unpacker_data_t$fuji_total_lines$VH().get(seg);
        }
        public static  int fuji_total_lines$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.unpacker_data_t$fuji_total_lines$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fuji_total_lines$set( MemorySegment seg, int x) {
            libraw_h_constants_2.unpacker_data_t$fuji_total_lines$VH().set(seg, x);
        }
        public static void fuji_total_lines$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.unpacker_data_t$fuji_total_lines$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fuji_total_blocks$VH() {
            return libraw_h_constants_2.unpacker_data_t$fuji_total_blocks$VH();
        }
        public static  int fuji_total_blocks$get(MemorySegment seg) {
            return (int)libraw_h_constants_2.unpacker_data_t$fuji_total_blocks$VH().get(seg);
        }
        public static  int fuji_total_blocks$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_2.unpacker_data_t$fuji_total_blocks$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fuji_total_blocks$set( MemorySegment seg, int x) {
            libraw_h_constants_2.unpacker_data_t$fuji_total_blocks$VH().set(seg, x);
        }
        public static void fuji_total_blocks$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_2.unpacker_data_t$fuji_total_blocks$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fuji_block_width$VH() {
            return libraw_h_constants_3.unpacker_data_t$fuji_block_width$VH();
        }
        public static  int fuji_block_width$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.unpacker_data_t$fuji_block_width$VH().get(seg);
        }
        public static  int fuji_block_width$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.unpacker_data_t$fuji_block_width$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fuji_block_width$set( MemorySegment seg, int x) {
            libraw_h_constants_3.unpacker_data_t$fuji_block_width$VH().set(seg, x);
        }
        public static void fuji_block_width$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.unpacker_data_t$fuji_block_width$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fuji_bits$VH() {
            return libraw_h_constants_3.unpacker_data_t$fuji_bits$VH();
        }
        public static  int fuji_bits$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.unpacker_data_t$fuji_bits$VH().get(seg);
        }
        public static  int fuji_bits$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.unpacker_data_t$fuji_bits$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fuji_bits$set( MemorySegment seg, int x) {
            libraw_h_constants_3.unpacker_data_t$fuji_bits$VH().set(seg, x);
        }
        public static void fuji_bits$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.unpacker_data_t$fuji_bits$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fuji_raw_type$VH() {
            return libraw_h_constants_3.unpacker_data_t$fuji_raw_type$VH();
        }
        public static  int fuji_raw_type$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.unpacker_data_t$fuji_raw_type$VH().get(seg);
        }
        public static  int fuji_raw_type$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.unpacker_data_t$fuji_raw_type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fuji_raw_type$set( MemorySegment seg, int x) {
            libraw_h_constants_3.unpacker_data_t$fuji_raw_type$VH().set(seg, x);
        }
        public static void fuji_raw_type$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.unpacker_data_t$fuji_raw_type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pana_encoding$VH() {
            return libraw_h_constants_3.unpacker_data_t$pana_encoding$VH();
        }
        public static  int pana_encoding$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.unpacker_data_t$pana_encoding$VH().get(seg);
        }
        public static  int pana_encoding$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.unpacker_data_t$pana_encoding$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void pana_encoding$set( MemorySegment seg, int x) {
            libraw_h_constants_3.unpacker_data_t$pana_encoding$VH().set(seg, x);
        }
        public static void pana_encoding$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.unpacker_data_t$pana_encoding$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pana_bpp$VH() {
            return libraw_h_constants_3.unpacker_data_t$pana_bpp$VH();
        }
        public static  int pana_bpp$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.unpacker_data_t$pana_bpp$VH().get(seg);
        }
        public static  int pana_bpp$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.unpacker_data_t$pana_bpp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void pana_bpp$set( MemorySegment seg, int x) {
            libraw_h_constants_3.unpacker_data_t$pana_bpp$VH().set(seg, x);
        }
        public static void pana_bpp$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.unpacker_data_t$pana_bpp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment crx_header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(144, 1152));
        }
        public static VarHandle crx_track_selected$VH() {
            return libraw_h_constants_3.unpacker_data_t$crx_track_selected$VH();
        }
        public static  int crx_track_selected$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.unpacker_data_t$crx_track_selected$VH().get(seg);
        }
        public static  int crx_track_selected$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.unpacker_data_t$crx_track_selected$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void crx_track_selected$set( MemorySegment seg, int x) {
            libraw_h_constants_3.unpacker_data_t$crx_track_selected$VH().set(seg, x);
        }
        public static void crx_track_selected$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.unpacker_data_t$crx_track_selected$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CR3_CTMDtag$VH() {
            return libraw_h_constants_3.unpacker_data_t$CR3_CTMDtag$VH();
        }
        public static  short CR3_CTMDtag$get(MemorySegment seg) {
            return (short)libraw_h_constants_3.unpacker_data_t$CR3_CTMDtag$VH().get(seg);
        }
        public static  short CR3_CTMDtag$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_3.unpacker_data_t$CR3_CTMDtag$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CR3_CTMDtag$set( MemorySegment seg, short x) {
            libraw_h_constants_3.unpacker_data_t$CR3_CTMDtag$VH().set(seg, x);
        }
        public static void CR3_CTMDtag$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_3.unpacker_data_t$CR3_CTMDtag$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CR3_Version$VH() {
            return libraw_h_constants_3.unpacker_data_t$CR3_Version$VH();
        }
        public static  short CR3_Version$get(MemorySegment seg) {
            return (short)libraw_h_constants_3.unpacker_data_t$CR3_Version$VH().get(seg);
        }
        public static  short CR3_Version$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_3.unpacker_data_t$CR3_Version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CR3_Version$set( MemorySegment seg, short x) {
            libraw_h_constants_3.unpacker_data_t$CR3_Version$VH().set(seg, x);
        }
        public static void CR3_Version$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_3.unpacker_data_t$CR3_Version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CM_found$VH() {
            return libraw_h_constants_3.unpacker_data_t$CM_found$VH();
        }
        public static  int CM_found$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.unpacker_data_t$CM_found$VH().get(seg);
        }
        public static  int CM_found$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.unpacker_data_t$CM_found$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CM_found$set( MemorySegment seg, int x) {
            libraw_h_constants_3.unpacker_data_t$CM_found$VH().set(seg, x);
        }
        public static void CM_found$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.unpacker_data_t$CM_found$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle is_NikonTransfer$VH() {
            return libraw_h_constants_3.unpacker_data_t$is_NikonTransfer$VH();
        }
        public static  int is_NikonTransfer$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.unpacker_data_t$is_NikonTransfer$VH().get(seg);
        }
        public static  int is_NikonTransfer$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.unpacker_data_t$is_NikonTransfer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void is_NikonTransfer$set( MemorySegment seg, int x) {
            libraw_h_constants_3.unpacker_data_t$is_NikonTransfer$VH().set(seg, x);
        }
        public static void is_NikonTransfer$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.unpacker_data_t$is_NikonTransfer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle is_Sony$VH() {
            return libraw_h_constants_3.unpacker_data_t$is_Sony$VH();
        }
        public static  int is_Sony$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.unpacker_data_t$is_Sony$VH().get(seg);
        }
        public static  int is_Sony$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.unpacker_data_t$is_Sony$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void is_Sony$set( MemorySegment seg, int x) {
            libraw_h_constants_3.unpacker_data_t$is_Sony$VH().set(seg, x);
        }
        public static void is_Sony$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.unpacker_data_t$is_Sony$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle is_pana_raw$VH() {
            return libraw_h_constants_3.unpacker_data_t$is_pana_raw$VH();
        }
        public static  int is_pana_raw$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.unpacker_data_t$is_pana_raw$VH().get(seg);
        }
        public static  int is_pana_raw$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.unpacker_data_t$is_pana_raw$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void is_pana_raw$set( MemorySegment seg, int x) {
            libraw_h_constants_3.unpacker_data_t$is_pana_raw$VH().set(seg, x);
        }
        public static void is_pana_raw$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.unpacker_data_t$is_pana_raw$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle is_4K_RAFdata$VH() {
            return libraw_h_constants_3.unpacker_data_t$is_4K_RAFdata$VH();
        }
        public static  int is_4K_RAFdata$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.unpacker_data_t$is_4K_RAFdata$VH().get(seg);
        }
        public static  int is_4K_RAFdata$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.unpacker_data_t$is_4K_RAFdata$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void is_4K_RAFdata$set( MemorySegment seg, int x) {
            libraw_h_constants_3.unpacker_data_t$is_4K_RAFdata$VH().set(seg, x);
        }
        public static void is_4K_RAFdata$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.unpacker_data_t$is_4K_RAFdata$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle is_PentaxRicohMakernotes$VH() {
            return libraw_h_constants_3.unpacker_data_t$is_PentaxRicohMakernotes$VH();
        }
        public static  int is_PentaxRicohMakernotes$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.unpacker_data_t$is_PentaxRicohMakernotes$VH().get(seg);
        }
        public static  int is_PentaxRicohMakernotes$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.unpacker_data_t$is_PentaxRicohMakernotes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void is_PentaxRicohMakernotes$set( MemorySegment seg, int x) {
            libraw_h_constants_3.unpacker_data_t$is_PentaxRicohMakernotes$VH().set(seg, x);
        }
        public static void is_PentaxRicohMakernotes$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.unpacker_data_t$is_PentaxRicohMakernotes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment dng_frames$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1328, 80));
        }
        public static VarHandle raw_stride$VH() {
            return libraw_h_constants_3.unpacker_data_t$raw_stride$VH();
        }
        public static  short raw_stride$get(MemorySegment seg) {
            return (short)libraw_h_constants_3.unpacker_data_t$raw_stride$VH().get(seg);
        }
        public static  short raw_stride$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_3.unpacker_data_t$raw_stride$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void raw_stride$set( MemorySegment seg, short x) {
            libraw_h_constants_3.unpacker_data_t$raw_stride$VH().set(seg, x);
        }
        public static void raw_stride$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_3.unpacker_data_t$raw_stride$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_internal_data_t {

        /* package-private */ libraw_internal_data_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_3.libraw_internal_data_t$struct$LAYOUT();
        }
        public static MemorySegment internal_data$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 64));
        }
        public static MemorySegment internal_output_params$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(64, 16));
        }
        public static MemorySegment output_data$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(80, 16));
        }
        public static MemorySegment identify_data$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(96, 40));
        }
        public static MemorySegment unpacker_data$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(136, 1416));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class decode {

        /* package-private */ decode() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_3.decode$struct$LAYOUT();
        }
        public static MemorySegment branch$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static VarHandle leaf$VH() {
            return libraw_h_constants_3.decode$leaf$VH();
        }
        public static  int leaf$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.decode$leaf$VH().get(seg);
        }
        public static  int leaf$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.decode$leaf$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void leaf$set( MemorySegment seg, int x) {
            libraw_h_constants_3.decode$leaf$VH().set(seg, x);
        }
        public static void leaf$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.decode$leaf$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class tiff_ifd_t {

        /* package-private */ tiff_ifd_t() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_3.tiff_ifd_t$struct$LAYOUT();
        }
        public static VarHandle t_width$VH() {
            return libraw_h_constants_3.tiff_ifd_t$t_width$VH();
        }
        public static  int t_width$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$t_width$VH().get(seg);
        }
        public static  int t_width$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$t_width$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void t_width$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$t_width$VH().set(seg, x);
        }
        public static void t_width$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$t_width$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle t_height$VH() {
            return libraw_h_constants_3.tiff_ifd_t$t_height$VH();
        }
        public static  int t_height$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$t_height$VH().get(seg);
        }
        public static  int t_height$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$t_height$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void t_height$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$t_height$VH().set(seg, x);
        }
        public static void t_height$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$t_height$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle bps$VH() {
            return libraw_h_constants_3.tiff_ifd_t$bps$VH();
        }
        public static  int bps$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$bps$VH().get(seg);
        }
        public static  int bps$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$bps$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void bps$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$bps$VH().set(seg, x);
        }
        public static void bps$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$bps$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle comp$VH() {
            return libraw_h_constants_3.tiff_ifd_t$comp$VH();
        }
        public static  int comp$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$comp$VH().get(seg);
        }
        public static  int comp$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$comp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void comp$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$comp$VH().set(seg, x);
        }
        public static void comp$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$comp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle phint$VH() {
            return libraw_h_constants_3.tiff_ifd_t$phint$VH();
        }
        public static  int phint$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$phint$VH().get(seg);
        }
        public static  int phint$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$phint$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void phint$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$phint$VH().set(seg, x);
        }
        public static void phint$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$phint$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle offset$VH() {
            return libraw_h_constants_3.tiff_ifd_t$offset$VH();
        }
        public static  int offset$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$offset$VH().get(seg);
        }
        public static  int offset$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void offset$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$offset$VH().set(seg, x);
        }
        public static void offset$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle t_flip$VH() {
            return libraw_h_constants_3.tiff_ifd_t$t_flip$VH();
        }
        public static  int t_flip$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$t_flip$VH().get(seg);
        }
        public static  int t_flip$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$t_flip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void t_flip$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$t_flip$VH().set(seg, x);
        }
        public static void t_flip$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$t_flip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle samples$VH() {
            return libraw_h_constants_3.tiff_ifd_t$samples$VH();
        }
        public static  int samples$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$samples$VH().get(seg);
        }
        public static  int samples$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$samples$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void samples$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$samples$VH().set(seg, x);
        }
        public static void samples$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$samples$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle bytes$VH() {
            return libraw_h_constants_3.tiff_ifd_t$bytes$VH();
        }
        public static  int bytes$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$bytes$VH().get(seg);
        }
        public static  int bytes$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$bytes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void bytes$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$bytes$VH().set(seg, x);
        }
        public static void bytes$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$bytes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle extrasamples$VH() {
            return libraw_h_constants_3.tiff_ifd_t$extrasamples$VH();
        }
        public static  int extrasamples$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$extrasamples$VH().get(seg);
        }
        public static  int extrasamples$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$extrasamples$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void extrasamples$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$extrasamples$VH().set(seg, x);
        }
        public static void extrasamples$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$extrasamples$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle t_tile_width$VH() {
            return libraw_h_constants_3.tiff_ifd_t$t_tile_width$VH();
        }
        public static  int t_tile_width$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$t_tile_width$VH().get(seg);
        }
        public static  int t_tile_width$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$t_tile_width$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void t_tile_width$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$t_tile_width$VH().set(seg, x);
        }
        public static void t_tile_width$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$t_tile_width$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle t_tile_length$VH() {
            return libraw_h_constants_3.tiff_ifd_t$t_tile_length$VH();
        }
        public static  int t_tile_length$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$t_tile_length$VH().get(seg);
        }
        public static  int t_tile_length$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$t_tile_length$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void t_tile_length$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$t_tile_length$VH().set(seg, x);
        }
        public static void t_tile_length$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$t_tile_length$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle sample_format$VH() {
            return libraw_h_constants_3.tiff_ifd_t$sample_format$VH();
        }
        public static  int sample_format$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$sample_format$VH().get(seg);
        }
        public static  int sample_format$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$sample_format$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sample_format$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$sample_format$VH().set(seg, x);
        }
        public static void sample_format$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$sample_format$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle predictor$VH() {
            return libraw_h_constants_3.tiff_ifd_t$predictor$VH();
        }
        public static  int predictor$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$predictor$VH().get(seg);
        }
        public static  int predictor$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$predictor$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void predictor$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$predictor$VH().set(seg, x);
        }
        public static void predictor$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$predictor$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle rows_per_strip$VH() {
            return libraw_h_constants_3.tiff_ifd_t$rows_per_strip$VH();
        }
        public static  int rows_per_strip$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$rows_per_strip$VH().get(seg);
        }
        public static  int rows_per_strip$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$rows_per_strip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void rows_per_strip$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$rows_per_strip$VH().set(seg, x);
        }
        public static void rows_per_strip$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$rows_per_strip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle strip_offsets$VH() {
            return libraw_h_constants_3.tiff_ifd_t$strip_offsets$VH();
        }
        public static  MemoryAddress strip_offsets$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_3.tiff_ifd_t$strip_offsets$VH().get(seg);
        }
        public static  MemoryAddress strip_offsets$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_3.tiff_ifd_t$strip_offsets$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void strip_offsets$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_3.tiff_ifd_t$strip_offsets$VH().set(seg, x);
        }
        public static void strip_offsets$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_3.tiff_ifd_t$strip_offsets$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle strip_offsets_count$VH() {
            return libraw_h_constants_3.tiff_ifd_t$strip_offsets_count$VH();
        }
        public static  int strip_offsets_count$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$strip_offsets_count$VH().get(seg);
        }
        public static  int strip_offsets_count$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$strip_offsets_count$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void strip_offsets_count$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$strip_offsets_count$VH().set(seg, x);
        }
        public static void strip_offsets_count$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$strip_offsets_count$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle strip_byte_counts$VH() {
            return libraw_h_constants_3.tiff_ifd_t$strip_byte_counts$VH();
        }
        public static  MemoryAddress strip_byte_counts$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_3.tiff_ifd_t$strip_byte_counts$VH().get(seg);
        }
        public static  MemoryAddress strip_byte_counts$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_3.tiff_ifd_t$strip_byte_counts$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void strip_byte_counts$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_3.tiff_ifd_t$strip_byte_counts$VH().set(seg, x);
        }
        public static void strip_byte_counts$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_3.tiff_ifd_t$strip_byte_counts$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle strip_byte_counts_count$VH() {
            return libraw_h_constants_3.tiff_ifd_t$strip_byte_counts_count$VH();
        }
        public static  int strip_byte_counts_count$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$strip_byte_counts_count$VH().get(seg);
        }
        public static  int strip_byte_counts_count$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$strip_byte_counts_count$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void strip_byte_counts_count$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$strip_byte_counts_count$VH().set(seg, x);
        }
        public static void strip_byte_counts_count$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$strip_byte_counts_count$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle t_filters$VH() {
            return libraw_h_constants_3.tiff_ifd_t$t_filters$VH();
        }
        public static  int t_filters$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$t_filters$VH().get(seg);
        }
        public static  int t_filters$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$t_filters$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void t_filters$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$t_filters$VH().set(seg, x);
        }
        public static void t_filters$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$t_filters$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle t_vwidth$VH() {
            return libraw_h_constants_3.tiff_ifd_t$t_vwidth$VH();
        }
        public static  int t_vwidth$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$t_vwidth$VH().get(seg);
        }
        public static  int t_vwidth$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$t_vwidth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void t_vwidth$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$t_vwidth$VH().set(seg, x);
        }
        public static void t_vwidth$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$t_vwidth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle t_vheight$VH() {
            return libraw_h_constants_3.tiff_ifd_t$t_vheight$VH();
        }
        public static  int t_vheight$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$t_vheight$VH().get(seg);
        }
        public static  int t_vheight$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$t_vheight$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void t_vheight$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$t_vheight$VH().set(seg, x);
        }
        public static void t_vheight$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$t_vheight$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle t_lm$VH() {
            return libraw_h_constants_3.tiff_ifd_t$t_lm$VH();
        }
        public static  int t_lm$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$t_lm$VH().get(seg);
        }
        public static  int t_lm$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$t_lm$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void t_lm$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$t_lm$VH().set(seg, x);
        }
        public static void t_lm$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$t_lm$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle t_tm$VH() {
            return libraw_h_constants_3.tiff_ifd_t$t_tm$VH();
        }
        public static  int t_tm$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$t_tm$VH().get(seg);
        }
        public static  int t_tm$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$t_tm$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void t_tm$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$t_tm$VH().set(seg, x);
        }
        public static void t_tm$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$t_tm$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle t_fuji_width$VH() {
            return libraw_h_constants_3.tiff_ifd_t$t_fuji_width$VH();
        }
        public static  int t_fuji_width$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$t_fuji_width$VH().get(seg);
        }
        public static  int t_fuji_width$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$t_fuji_width$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void t_fuji_width$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$t_fuji_width$VH().set(seg, x);
        }
        public static void t_fuji_width$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$t_fuji_width$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle t_shutter$VH() {
            return libraw_h_constants_3.tiff_ifd_t$t_shutter$VH();
        }
        public static  float t_shutter$get(MemorySegment seg) {
            return (float)libraw_h_constants_3.tiff_ifd_t$t_shutter$VH().get(seg);
        }
        public static  float t_shutter$get(MemorySegment seg, long index) {
            return (float)libraw_h_constants_3.tiff_ifd_t$t_shutter$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void t_shutter$set( MemorySegment seg, float x) {
            libraw_h_constants_3.tiff_ifd_t$t_shutter$VH().set(seg, x);
        }
        public static void t_shutter$set(MemorySegment seg, long index, float x) {
            libraw_h_constants_3.tiff_ifd_t$t_shutter$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle opcode2_offset$VH() {
            return libraw_h_constants_3.tiff_ifd_t$opcode2_offset$VH();
        }
        public static  long opcode2_offset$get(MemorySegment seg) {
            return (long)libraw_h_constants_3.tiff_ifd_t$opcode2_offset$VH().get(seg);
        }
        public static  long opcode2_offset$get(MemorySegment seg, long index) {
            return (long)libraw_h_constants_3.tiff_ifd_t$opcode2_offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void opcode2_offset$set( MemorySegment seg, long x) {
            libraw_h_constants_3.tiff_ifd_t$opcode2_offset$VH().set(seg, x);
        }
        public static void opcode2_offset$set(MemorySegment seg, long index, long x) {
            libraw_h_constants_3.tiff_ifd_t$opcode2_offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lineartable_offset$VH() {
            return libraw_h_constants_3.tiff_ifd_t$lineartable_offset$VH();
        }
        public static  long lineartable_offset$get(MemorySegment seg) {
            return (long)libraw_h_constants_3.tiff_ifd_t$lineartable_offset$VH().get(seg);
        }
        public static  long lineartable_offset$get(MemorySegment seg, long index) {
            return (long)libraw_h_constants_3.tiff_ifd_t$lineartable_offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lineartable_offset$set( MemorySegment seg, long x) {
            libraw_h_constants_3.tiff_ifd_t$lineartable_offset$VH().set(seg, x);
        }
        public static void lineartable_offset$set(MemorySegment seg, long index, long x) {
            libraw_h_constants_3.tiff_ifd_t$lineartable_offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lineartable_len$VH() {
            return libraw_h_constants_3.tiff_ifd_t$lineartable_len$VH();
        }
        public static  int lineartable_len$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$lineartable_len$VH().get(seg);
        }
        public static  int lineartable_len$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$lineartable_len$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lineartable_len$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$lineartable_len$VH().set(seg, x);
        }
        public static void lineartable_len$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$lineartable_len$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment dng_color$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(140, 336));
        }
        public static MemorySegment dng_levels$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(476, 32920));
        }
        public static VarHandle newsubfiletype$VH() {
            return libraw_h_constants_3.tiff_ifd_t$newsubfiletype$VH();
        }
        public static  int newsubfiletype$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_ifd_t$newsubfiletype$VH().get(seg);
        }
        public static  int newsubfiletype$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_ifd_t$newsubfiletype$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void newsubfiletype$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_ifd_t$newsubfiletype$VH().set(seg, x);
        }
        public static void newsubfiletype$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_ifd_t$newsubfiletype$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class jhead {

        /* package-private */ jhead() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_3.jhead$struct$LAYOUT();
        }
        public static VarHandle algo$VH() {
            return libraw_h_constants_3.jhead$algo$VH();
        }
        public static  int algo$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.jhead$algo$VH().get(seg);
        }
        public static  int algo$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.jhead$algo$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void algo$set( MemorySegment seg, int x) {
            libraw_h_constants_3.jhead$algo$VH().set(seg, x);
        }
        public static void algo$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.jhead$algo$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle bits$VH() {
            return libraw_h_constants_3.jhead$bits$VH();
        }
        public static  int bits$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.jhead$bits$VH().get(seg);
        }
        public static  int bits$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.jhead$bits$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void bits$set( MemorySegment seg, int x) {
            libraw_h_constants_3.jhead$bits$VH().set(seg, x);
        }
        public static void bits$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.jhead$bits$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle high$VH() {
            return libraw_h_constants_3.jhead$high$VH();
        }
        public static  int high$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.jhead$high$VH().get(seg);
        }
        public static  int high$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.jhead$high$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void high$set( MemorySegment seg, int x) {
            libraw_h_constants_3.jhead$high$VH().set(seg, x);
        }
        public static void high$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.jhead$high$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle wide$VH() {
            return libraw_h_constants_3.jhead$wide$VH();
        }
        public static  int wide$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.jhead$wide$VH().get(seg);
        }
        public static  int wide$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.jhead$wide$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wide$set( MemorySegment seg, int x) {
            libraw_h_constants_3.jhead$wide$VH().set(seg, x);
        }
        public static void wide$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.jhead$wide$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle clrs$VH() {
            return libraw_h_constants_3.jhead$clrs$VH();
        }
        public static  int clrs$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.jhead$clrs$VH().get(seg);
        }
        public static  int clrs$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.jhead$clrs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void clrs$set( MemorySegment seg, int x) {
            libraw_h_constants_3.jhead$clrs$VH().set(seg, x);
        }
        public static void clrs$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.jhead$clrs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle sraw$VH() {
            return libraw_h_constants_3.jhead$sraw$VH();
        }
        public static  int sraw$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.jhead$sraw$VH().get(seg);
        }
        public static  int sraw$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.jhead$sraw$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void sraw$set( MemorySegment seg, int x) {
            libraw_h_constants_3.jhead$sraw$VH().set(seg, x);
        }
        public static void sraw$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.jhead$sraw$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle psv$VH() {
            return libraw_h_constants_3.jhead$psv$VH();
        }
        public static  int psv$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.jhead$psv$VH().get(seg);
        }
        public static  int psv$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.jhead$psv$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void psv$set( MemorySegment seg, int x) {
            libraw_h_constants_3.jhead$psv$VH().set(seg, x);
        }
        public static void psv$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.jhead$psv$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle restart$VH() {
            return libraw_h_constants_3.jhead$restart$VH();
        }
        public static  int restart$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.jhead$restart$VH().get(seg);
        }
        public static  int restart$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.jhead$restart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void restart$set( MemorySegment seg, int x) {
            libraw_h_constants_3.jhead$restart$VH().set(seg, x);
        }
        public static void restart$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.jhead$restart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment vpred$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 24));
        }
        public static MemorySegment quant$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(56, 128));
        }
        public static MemorySegment idct$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(184, 128));
        }
        public static MemorySegment huff$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(312, 160));
        }
        public static MemorySegment free$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(472, 160));
        }
        public static VarHandle row$VH() {
            return libraw_h_constants_3.jhead$row$VH();
        }
        public static  MemoryAddress row$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_3.jhead$row$VH().get(seg);
        }
        public static  MemoryAddress row$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)libraw_h_constants_3.jhead$row$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void row$set( MemorySegment seg, MemoryAddress x) {
            libraw_h_constants_3.jhead$row$VH().set(seg, x);
        }
        public static void row$set(MemorySegment seg, long index, MemoryAddress x) {
            libraw_h_constants_3.jhead$row$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class libraw_tiff_tag {

        /* package-private */ libraw_tiff_tag() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_3.libraw_tiff_tag$struct$LAYOUT();
        }
        public static VarHandle tag$VH() {
            return libraw_h_constants_3.libraw_tiff_tag$tag$VH();
        }
        public static  short tag$get(MemorySegment seg) {
            return (short)libraw_h_constants_3.libraw_tiff_tag$tag$VH().get(seg);
        }
        public static  short tag$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_3.libraw_tiff_tag$tag$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void tag$set( MemorySegment seg, short x) {
            libraw_h_constants_3.libraw_tiff_tag$tag$VH().set(seg, x);
        }
        public static void tag$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_3.libraw_tiff_tag$tag$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle type$VH() {
            return libraw_h_constants_3.libraw_tiff_tag$type$VH();
        }
        public static  short type$get(MemorySegment seg) {
            return (short)libraw_h_constants_3.libraw_tiff_tag$type$VH().get(seg);
        }
        public static  short type$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_3.libraw_tiff_tag$type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void type$set( MemorySegment seg, short x) {
            libraw_h_constants_3.libraw_tiff_tag$type$VH().set(seg, x);
        }
        public static void type$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_3.libraw_tiff_tag$type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle count$VH() {
            return libraw_h_constants_3.libraw_tiff_tag$count$VH();
        }
        public static  int count$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.libraw_tiff_tag$count$VH().get(seg);
        }
        public static  int count$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.libraw_tiff_tag$count$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void count$set( MemorySegment seg, int x) {
            libraw_h_constants_3.libraw_tiff_tag$count$VH().set(seg, x);
        }
        public static void count$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.libraw_tiff_tag$count$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static class val {

            /* package-private */ val() {}
            public static MemoryLayout $LAYOUT() {
                return libraw_h_constants_3.libraw_tiff_tag$val$union$LAYOUT();
            }
            public static MemorySegment c$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
            }
            public static MemorySegment s$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
            }
            public static VarHandle i$VH() {
                return libraw_h_constants_3.libraw_tiff_tag$val$i$VH();
            }
            public static  int i$get(MemorySegment seg) {
                return (int)libraw_h_constants_3.libraw_tiff_tag$val$i$VH().get(seg);
            }
            public static  int i$get(MemorySegment seg, long index) {
                return (int)libraw_h_constants_3.libraw_tiff_tag$val$i$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void i$set( MemorySegment seg, int x) {
                libraw_h_constants_3.libraw_tiff_tag$val$i$VH().set(seg, x);
            }
            public static void i$set(MemorySegment seg, long index, int x) {
                libraw_h_constants_3.libraw_tiff_tag$val$i$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static  MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static  MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static  MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static  MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment val$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 4));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static class tiff_hdr {

        /* package-private */ tiff_hdr() {}
        public static MemoryLayout $LAYOUT() {
            return libraw_h_constants_3.tiff_hdr$struct$LAYOUT();
        }
        public static VarHandle t_order$VH() {
            return libraw_h_constants_3.tiff_hdr$t_order$VH();
        }
        public static  short t_order$get(MemorySegment seg) {
            return (short)libraw_h_constants_3.tiff_hdr$t_order$VH().get(seg);
        }
        public static  short t_order$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_3.tiff_hdr$t_order$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void t_order$set( MemorySegment seg, short x) {
            libraw_h_constants_3.tiff_hdr$t_order$VH().set(seg, x);
        }
        public static void t_order$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_3.tiff_hdr$t_order$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle magic$VH() {
            return libraw_h_constants_3.tiff_hdr$magic$VH();
        }
        public static  short magic$get(MemorySegment seg) {
            return (short)libraw_h_constants_3.tiff_hdr$magic$VH().get(seg);
        }
        public static  short magic$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_3.tiff_hdr$magic$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void magic$set( MemorySegment seg, short x) {
            libraw_h_constants_3.tiff_hdr$magic$VH().set(seg, x);
        }
        public static void magic$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_3.tiff_hdr$magic$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ifd$VH() {
            return libraw_h_constants_3.tiff_hdr$ifd$VH();
        }
        public static  int ifd$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_hdr$ifd$VH().get(seg);
        }
        public static  int ifd$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_hdr$ifd$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ifd$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_hdr$ifd$VH().set(seg, x);
        }
        public static void ifd$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_hdr$ifd$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pad$VH() {
            return libraw_h_constants_3.tiff_hdr$pad$VH();
        }
        public static  short pad$get(MemorySegment seg) {
            return (short)libraw_h_constants_3.tiff_hdr$pad$VH().get(seg);
        }
        public static  short pad$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_3.tiff_hdr$pad$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void pad$set( MemorySegment seg, short x) {
            libraw_h_constants_3.tiff_hdr$pad$VH().set(seg, x);
        }
        public static void pad$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_3.tiff_hdr$pad$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ntag$VH() {
            return libraw_h_constants_3.tiff_hdr$ntag$VH();
        }
        public static  short ntag$get(MemorySegment seg) {
            return (short)libraw_h_constants_3.tiff_hdr$ntag$VH().get(seg);
        }
        public static  short ntag$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_3.tiff_hdr$ntag$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ntag$set( MemorySegment seg, short x) {
            libraw_h_constants_3.tiff_hdr$ntag$VH().set(seg, x);
        }
        public static void ntag$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_3.tiff_hdr$ntag$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment tag$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 276));
        }
        public static VarHandle nextifd$VH() {
            return libraw_h_constants_3.tiff_hdr$nextifd$VH();
        }
        public static  int nextifd$get(MemorySegment seg) {
            return (int)libraw_h_constants_3.tiff_hdr$nextifd$VH().get(seg);
        }
        public static  int nextifd$get(MemorySegment seg, long index) {
            return (int)libraw_h_constants_3.tiff_hdr$nextifd$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nextifd$set( MemorySegment seg, int x) {
            libraw_h_constants_3.tiff_hdr$nextifd$VH().set(seg, x);
        }
        public static void nextifd$set(MemorySegment seg, long index, int x) {
            libraw_h_constants_3.tiff_hdr$nextifd$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pad2$VH() {
            return libraw_h_constants_3.tiff_hdr$pad2$VH();
        }
        public static  short pad2$get(MemorySegment seg) {
            return (short)libraw_h_constants_3.tiff_hdr$pad2$VH().get(seg);
        }
        public static  short pad2$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_3.tiff_hdr$pad2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void pad2$set( MemorySegment seg, short x) {
            libraw_h_constants_3.tiff_hdr$pad2$VH().set(seg, x);
        }
        public static void pad2$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_3.tiff_hdr$pad2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle nexif$VH() {
            return libraw_h_constants_3.tiff_hdr$nexif$VH();
        }
        public static  short nexif$get(MemorySegment seg) {
            return (short)libraw_h_constants_3.tiff_hdr$nexif$VH().get(seg);
        }
        public static  short nexif$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_3.tiff_hdr$nexif$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nexif$set( MemorySegment seg, short x) {
            libraw_h_constants_3.tiff_hdr$nexif$VH().set(seg, x);
        }
        public static void nexif$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_3.tiff_hdr$nexif$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment exif$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(296, 48));
        }
        public static VarHandle pad3$VH() {
            return libraw_h_constants_3.tiff_hdr$pad3$VH();
        }
        public static  short pad3$get(MemorySegment seg) {
            return (short)libraw_h_constants_3.tiff_hdr$pad3$VH().get(seg);
        }
        public static  short pad3$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_3.tiff_hdr$pad3$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void pad3$set( MemorySegment seg, short x) {
            libraw_h_constants_3.tiff_hdr$pad3$VH().set(seg, x);
        }
        public static void pad3$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_3.tiff_hdr$pad3$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ngps$VH() {
            return libraw_h_constants_3.tiff_hdr$ngps$VH();
        }
        public static  short ngps$get(MemorySegment seg) {
            return (short)libraw_h_constants_3.tiff_hdr$ngps$VH().get(seg);
        }
        public static  short ngps$get(MemorySegment seg, long index) {
            return (short)libraw_h_constants_3.tiff_hdr$ngps$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ngps$set( MemorySegment seg, short x) {
            libraw_h_constants_3.tiff_hdr$ngps$VH().set(seg, x);
        }
        public static void ngps$set(MemorySegment seg, long index, short x) {
            libraw_h_constants_3.tiff_hdr$ngps$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment gpst$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(348, 120));
        }
        public static MemorySegment bps$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(468, 8));
        }
        public static MemorySegment rat$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(476, 40));
        }
        public static MemorySegment gps$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(516, 104));
        }
        public static MemorySegment t_desc$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(620, 512));
        }
        public static MemorySegment t_make$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1132, 64));
        }
        public static MemorySegment t_model$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1196, 64));
        }
        public static MemorySegment soft$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1260, 32));
        }
        public static MemorySegment date$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1292, 20));
        }
        public static MemorySegment t_artist$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1312, 64));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static  MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static  MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static  MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static  MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static  MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static  MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static  MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static  MethodHandle libraw_strerror$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_strerror$MH(),"unresolved symbol: libraw_strerror");
    }
    public static MemoryAddress libraw_strerror ( int errorcode) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_strerror$MH(), "unresolved symbol: libraw_strerror");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(errorcode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_strprogress$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_strprogress$MH(),"unresolved symbol: libraw_strprogress");
    }
    public static MemoryAddress libraw_strprogress ( int x0) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_strprogress$MH(), "unresolved symbol: libraw_strprogress");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_init$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_init$MH(),"unresolved symbol: libraw_init");
    }
    public static MemoryAddress libraw_init ( int flags) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_init$MH(), "unresolved symbol: libraw_init");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_open_file$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_open_file$MH(),"unresolved symbol: libraw_open_file");
    }
    public static int libraw_open_file ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_open_file$MH(), "unresolved symbol: libraw_open_file");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_open_file_ex$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_open_file_ex$MH(),"unresolved symbol: libraw_open_file_ex");
    }
    public static int libraw_open_file_ex ( Addressable x0,  Addressable x1,  long max_buff_sz) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_open_file_ex$MH(), "unresolved symbol: libraw_open_file_ex");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address(), max_buff_sz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_open_buffer$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_open_buffer$MH(),"unresolved symbol: libraw_open_buffer");
    }
    public static int libraw_open_buffer ( Addressable x0,  Addressable buffer,  long size) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_open_buffer$MH(), "unresolved symbol: libraw_open_buffer");
        try {
            return (int)mh$.invokeExact(x0.address(), buffer.address(), size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_unpack$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_unpack$MH(),"unresolved symbol: libraw_unpack");
    }
    public static int libraw_unpack ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_unpack$MH(), "unresolved symbol: libraw_unpack");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_unpack_thumb$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_unpack_thumb$MH(),"unresolved symbol: libraw_unpack_thumb");
    }
    public static int libraw_unpack_thumb ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_unpack_thumb$MH(), "unresolved symbol: libraw_unpack_thumb");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_recycle_datastream$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_recycle_datastream$MH(),"unresolved symbol: libraw_recycle_datastream");
    }
    public static void libraw_recycle_datastream ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_recycle_datastream$MH(), "unresolved symbol: libraw_recycle_datastream");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_recycle$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_recycle$MH(),"unresolved symbol: libraw_recycle");
    }
    public static void libraw_recycle ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_recycle$MH(), "unresolved symbol: libraw_recycle");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_close$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_close$MH(),"unresolved symbol: libraw_close");
    }
    public static void libraw_close ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_close$MH(), "unresolved symbol: libraw_close");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_subtract_black$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_subtract_black$MH(),"unresolved symbol: libraw_subtract_black");
    }
    public static void libraw_subtract_black ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_subtract_black$MH(), "unresolved symbol: libraw_subtract_black");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_raw2image$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_raw2image$MH(),"unresolved symbol: libraw_raw2image");
    }
    public static int libraw_raw2image ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_raw2image$MH(), "unresolved symbol: libraw_raw2image");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_free_image$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_free_image$MH(),"unresolved symbol: libraw_free_image");
    }
    public static void libraw_free_image ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_free_image$MH(), "unresolved symbol: libraw_free_image");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_version$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_version$MH(),"unresolved symbol: libraw_version");
    }
    public static MemoryAddress libraw_version (Object... x0) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_version$MH(), "unresolved symbol: libraw_version");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_versionNumber$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_versionNumber$MH(),"unresolved symbol: libraw_versionNumber");
    }
    public static int libraw_versionNumber (Object... x0) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_versionNumber$MH(), "unresolved symbol: libraw_versionNumber");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_cameraList$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_cameraList$MH(),"unresolved symbol: libraw_cameraList");
    }
    public static MemoryAddress libraw_cameraList (Object... x0) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_cameraList$MH(), "unresolved symbol: libraw_cameraList");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_cameraCount$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_cameraCount$MH(),"unresolved symbol: libraw_cameraCount");
    }
    public static int libraw_cameraCount (Object... x0) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_cameraCount$MH(), "unresolved symbol: libraw_cameraCount");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_set_memerror_handler$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_memerror_handler$MH(),"unresolved symbol: libraw_set_memerror_handler");
    }
    public static void libraw_set_memerror_handler ( Addressable x0,  Addressable cb,  Addressable datap) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_memerror_handler$MH(), "unresolved symbol: libraw_set_memerror_handler");
        try {
            mh$.invokeExact(x0.address(), cb.address(), datap.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_set_exifparser_handler$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_exifparser_handler$MH(),"unresolved symbol: libraw_set_exifparser_handler");
    }
    public static void libraw_set_exifparser_handler ( Addressable x0,  Addressable cb,  Addressable datap) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_exifparser_handler$MH(), "unresolved symbol: libraw_set_exifparser_handler");
        try {
            mh$.invokeExact(x0.address(), cb.address(), datap.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_set_dataerror_handler$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_dataerror_handler$MH(),"unresolved symbol: libraw_set_dataerror_handler");
    }
    public static void libraw_set_dataerror_handler ( Addressable x0,  Addressable func,  Addressable datap) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_dataerror_handler$MH(), "unresolved symbol: libraw_set_dataerror_handler");
        try {
            mh$.invokeExact(x0.address(), func.address(), datap.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_set_progress_handler$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_progress_handler$MH(),"unresolved symbol: libraw_set_progress_handler");
    }
    public static void libraw_set_progress_handler ( Addressable x0,  Addressable cb,  Addressable datap) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_progress_handler$MH(), "unresolved symbol: libraw_set_progress_handler");
        try {
            mh$.invokeExact(x0.address(), cb.address(), datap.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_unpack_function_name$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_unpack_function_name$MH(),"unresolved symbol: libraw_unpack_function_name");
    }
    public static MemoryAddress libraw_unpack_function_name ( Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_unpack_function_name$MH(), "unresolved symbol: libraw_unpack_function_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_get_decoder_info$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_decoder_info$MH(),"unresolved symbol: libraw_get_decoder_info");
    }
    public static int libraw_get_decoder_info ( Addressable lr,  Addressable d) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_decoder_info$MH(), "unresolved symbol: libraw_get_decoder_info");
        try {
            return (int)mh$.invokeExact(lr.address(), d.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_COLOR$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_COLOR$MH(),"unresolved symbol: libraw_COLOR");
    }
    public static int libraw_COLOR ( Addressable x0,  int row,  int col) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_COLOR$MH(), "unresolved symbol: libraw_COLOR");
        try {
            return (int)mh$.invokeExact(x0.address(), row, col);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_capabilities$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_capabilities$MH(),"unresolved symbol: libraw_capabilities");
    }
    public static int libraw_capabilities (Object... x0) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_capabilities$MH(), "unresolved symbol: libraw_capabilities");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_adjust_sizes_info_only$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_adjust_sizes_info_only$MH(),"unresolved symbol: libraw_adjust_sizes_info_only");
    }
    public static int libraw_adjust_sizes_info_only ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_adjust_sizes_info_only$MH(), "unresolved symbol: libraw_adjust_sizes_info_only");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_dcraw_ppm_tiff_writer$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_dcraw_ppm_tiff_writer$MH(),"unresolved symbol: libraw_dcraw_ppm_tiff_writer");
    }
    public static int libraw_dcraw_ppm_tiff_writer ( Addressable lr,  Addressable filename) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_dcraw_ppm_tiff_writer$MH(), "unresolved symbol: libraw_dcraw_ppm_tiff_writer");
        try {
            return (int)mh$.invokeExact(lr.address(), filename.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_dcraw_thumb_writer$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_dcraw_thumb_writer$MH(),"unresolved symbol: libraw_dcraw_thumb_writer");
    }
    public static int libraw_dcraw_thumb_writer ( Addressable lr,  Addressable fname) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_dcraw_thumb_writer$MH(), "unresolved symbol: libraw_dcraw_thumb_writer");
        try {
            return (int)mh$.invokeExact(lr.address(), fname.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_dcraw_process$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_dcraw_process$MH(),"unresolved symbol: libraw_dcraw_process");
    }
    public static int libraw_dcraw_process ( Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_dcraw_process$MH(), "unresolved symbol: libraw_dcraw_process");
        try {
            return (int)mh$.invokeExact(lr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_dcraw_make_mem_image$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_dcraw_make_mem_image$MH(),"unresolved symbol: libraw_dcraw_make_mem_image");
    }
    public static MemoryAddress libraw_dcraw_make_mem_image ( Addressable lr,  Addressable errc) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_dcraw_make_mem_image$MH(), "unresolved symbol: libraw_dcraw_make_mem_image");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lr.address(), errc.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_dcraw_make_mem_thumb$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_dcraw_make_mem_thumb$MH(),"unresolved symbol: libraw_dcraw_make_mem_thumb");
    }
    public static MemoryAddress libraw_dcraw_make_mem_thumb ( Addressable lr,  Addressable errc) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_dcraw_make_mem_thumb$MH(), "unresolved symbol: libraw_dcraw_make_mem_thumb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lr.address(), errc.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_dcraw_clear_mem$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_dcraw_clear_mem$MH(),"unresolved symbol: libraw_dcraw_clear_mem");
    }
    public static void libraw_dcraw_clear_mem ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_dcraw_clear_mem$MH(), "unresolved symbol: libraw_dcraw_clear_mem");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_set_demosaic$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_demosaic$MH(),"unresolved symbol: libraw_set_demosaic");
    }
    public static void libraw_set_demosaic ( Addressable lr,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_demosaic$MH(), "unresolved symbol: libraw_set_demosaic");
        try {
            mh$.invokeExact(lr.address(), value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_set_output_color$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_output_color$MH(),"unresolved symbol: libraw_set_output_color");
    }
    public static void libraw_set_output_color ( Addressable lr,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_output_color$MH(), "unresolved symbol: libraw_set_output_color");
        try {
            mh$.invokeExact(lr.address(), value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_set_user_mul$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_user_mul$MH(),"unresolved symbol: libraw_set_user_mul");
    }
    public static void libraw_set_user_mul ( Addressable lr,  int index,  float val) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_user_mul$MH(), "unresolved symbol: libraw_set_user_mul");
        try {
            mh$.invokeExact(lr.address(), index, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_set_output_bps$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_output_bps$MH(),"unresolved symbol: libraw_set_output_bps");
    }
    public static void libraw_set_output_bps ( Addressable lr,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_output_bps$MH(), "unresolved symbol: libraw_set_output_bps");
        try {
            mh$.invokeExact(lr.address(), value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_set_gamma$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_gamma$MH(),"unresolved symbol: libraw_set_gamma");
    }
    public static void libraw_set_gamma ( Addressable lr,  int index,  float value) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_gamma$MH(), "unresolved symbol: libraw_set_gamma");
        try {
            mh$.invokeExact(lr.address(), index, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_set_no_auto_bright$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_no_auto_bright$MH(),"unresolved symbol: libraw_set_no_auto_bright");
    }
    public static void libraw_set_no_auto_bright ( Addressable lr,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_no_auto_bright$MH(), "unresolved symbol: libraw_set_no_auto_bright");
        try {
            mh$.invokeExact(lr.address(), value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_set_bright$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_bright$MH(),"unresolved symbol: libraw_set_bright");
    }
    public static void libraw_set_bright ( Addressable lr,  float value) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_bright$MH(), "unresolved symbol: libraw_set_bright");
        try {
            mh$.invokeExact(lr.address(), value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_set_highlight$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_highlight$MH(),"unresolved symbol: libraw_set_highlight");
    }
    public static void libraw_set_highlight ( Addressable lr,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_highlight$MH(), "unresolved symbol: libraw_set_highlight");
        try {
            mh$.invokeExact(lr.address(), value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_set_fbdd_noiserd$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_fbdd_noiserd$MH(),"unresolved symbol: libraw_set_fbdd_noiserd");
    }
    public static void libraw_set_fbdd_noiserd ( Addressable lr,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_fbdd_noiserd$MH(), "unresolved symbol: libraw_set_fbdd_noiserd");
        try {
            mh$.invokeExact(lr.address(), value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_get_raw_height$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_raw_height$MH(),"unresolved symbol: libraw_get_raw_height");
    }
    public static int libraw_get_raw_height ( Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_raw_height$MH(), "unresolved symbol: libraw_get_raw_height");
        try {
            return (int)mh$.invokeExact(lr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_get_raw_width$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_raw_width$MH(),"unresolved symbol: libraw_get_raw_width");
    }
    public static int libraw_get_raw_width ( Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_raw_width$MH(), "unresolved symbol: libraw_get_raw_width");
        try {
            return (int)mh$.invokeExact(lr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_get_iheight$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_iheight$MH(),"unresolved symbol: libraw_get_iheight");
    }
    public static int libraw_get_iheight ( Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_iheight$MH(), "unresolved symbol: libraw_get_iheight");
        try {
            return (int)mh$.invokeExact(lr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_get_iwidth$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_iwidth$MH(),"unresolved symbol: libraw_get_iwidth");
    }
    public static int libraw_get_iwidth ( Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_iwidth$MH(), "unresolved symbol: libraw_get_iwidth");
        try {
            return (int)mh$.invokeExact(lr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_get_cam_mul$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_cam_mul$MH(),"unresolved symbol: libraw_get_cam_mul");
    }
    public static float libraw_get_cam_mul ( Addressable lr,  int index) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_cam_mul$MH(), "unresolved symbol: libraw_get_cam_mul");
        try {
            return (float)mh$.invokeExact(lr.address(), index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_get_pre_mul$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_pre_mul$MH(),"unresolved symbol: libraw_get_pre_mul");
    }
    public static float libraw_get_pre_mul ( Addressable lr,  int index) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_pre_mul$MH(), "unresolved symbol: libraw_get_pre_mul");
        try {
            return (float)mh$.invokeExact(lr.address(), index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_get_rgb_cam$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_rgb_cam$MH(),"unresolved symbol: libraw_get_rgb_cam");
    }
    public static float libraw_get_rgb_cam ( Addressable lr,  int index1,  int index2) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_rgb_cam$MH(), "unresolved symbol: libraw_get_rgb_cam");
        try {
            return (float)mh$.invokeExact(lr.address(), index1, index2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_get_color_maximum$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_color_maximum$MH(),"unresolved symbol: libraw_get_color_maximum");
    }
    public static int libraw_get_color_maximum ( Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_color_maximum$MH(), "unresolved symbol: libraw_get_color_maximum");
        try {
            return (int)mh$.invokeExact(lr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_set_output_tif$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_output_tif$MH(),"unresolved symbol: libraw_set_output_tif");
    }
    public static void libraw_set_output_tif ( Addressable lr,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_set_output_tif$MH(), "unresolved symbol: libraw_set_output_tif");
        try {
            mh$.invokeExact(lr.address(), value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_get_iparams$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_iparams$MH(),"unresolved symbol: libraw_get_iparams");
    }
    public static MemoryAddress libraw_get_iparams ( Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_iparams$MH(), "unresolved symbol: libraw_get_iparams");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_get_lensinfo$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_lensinfo$MH(),"unresolved symbol: libraw_get_lensinfo");
    }
    public static MemoryAddress libraw_get_lensinfo ( Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_lensinfo$MH(), "unresolved symbol: libraw_get_lensinfo");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle libraw_get_imgother$MH() {
        return RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_imgother$MH(),"unresolved symbol: libraw_get_imgother");
    }
    public static MemoryAddress libraw_get_imgother ( Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(libraw_h_constants_3.libraw_get_imgother$MH(), "unresolved symbol: libraw_get_imgother");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  long LIBRAW_USE_STREAMS_DATASTREAM_MAXSIZE() {
        return libraw_h_constants_3.LIBRAW_USE_STREAMS_DATASTREAM_MAXSIZE();
    }
    public static  double LIBRAW_DEFAULT_ADJUST_MAXIMUM_THRESHOLD() {
        return libraw_h_constants_3.LIBRAW_DEFAULT_ADJUST_MAXIMUM_THRESHOLD();
    }
    public static  double LIBRAW_DEFAULT_AUTO_BRIGHTNESS_THRESHOLD() {
        return libraw_h_constants_3.LIBRAW_DEFAULT_AUTO_BRIGHTNESS_THRESHOLD();
    }
    public static  long LIBRAW_MAX_ALLOC_MB_DEFAULT() {
        return libraw_h_constants_3.LIBRAW_MAX_ALLOC_MB_DEFAULT();
    }
    public static  long LIBRAW_MAX_THUMBNAIL_MB() {
        return libraw_h_constants_3.LIBRAW_MAX_THUMBNAIL_MB();
    }
    public static  int LIBRAW_EXIFTOOLTAGTYPE_int8u() {
        return libraw_h_constants_3.LIBRAW_EXIFTOOLTAGTYPE_int8u();
    }
    public static  int LIBRAW_EXIFTOOLTAGTYPE_string() {
        return libraw_h_constants_3.LIBRAW_EXIFTOOLTAGTYPE_string();
    }
    public static  int LIBRAW_EXIFTOOLTAGTYPE_int16u() {
        return libraw_h_constants_3.LIBRAW_EXIFTOOLTAGTYPE_int16u();
    }
    public static  int LIBRAW_EXIFTOOLTAGTYPE_int32u() {
        return libraw_h_constants_3.LIBRAW_EXIFTOOLTAGTYPE_int32u();
    }
    public static  int LIBRAW_EXIFTOOLTAGTYPE_rational64u() {
        return libraw_h_constants_3.LIBRAW_EXIFTOOLTAGTYPE_rational64u();
    }
    public static  int LIBRAW_EXIFTOOLTAGTYPE_int8s() {
        return libraw_h_constants_3.LIBRAW_EXIFTOOLTAGTYPE_int8s();
    }
    public static  int LIBRAW_EXIFTOOLTAGTYPE_undef() {
        return libraw_h_constants_3.LIBRAW_EXIFTOOLTAGTYPE_undef();
    }
    public static  int LIBRAW_EXIFTOOLTAGTYPE_binary() {
        return libraw_h_constants_3.LIBRAW_EXIFTOOLTAGTYPE_binary();
    }
    public static  int LIBRAW_EXIFTOOLTAGTYPE_int16s() {
        return libraw_h_constants_3.LIBRAW_EXIFTOOLTAGTYPE_int16s();
    }
    public static  int LIBRAW_EXIFTOOLTAGTYPE_int32s() {
        return libraw_h_constants_3.LIBRAW_EXIFTOOLTAGTYPE_int32s();
    }
    public static  int LIBRAW_EXIFTOOLTAGTYPE_rational64s() {
        return libraw_h_constants_3.LIBRAW_EXIFTOOLTAGTYPE_rational64s();
    }
    public static  int LIBRAW_EXIFTOOLTAGTYPE_float() {
        return libraw_h_constants_3.LIBRAW_EXIFTOOLTAGTYPE_float();
    }
    public static  int LIBRAW_EXIFTOOLTAGTYPE_double() {
        return libraw_h_constants_3.LIBRAW_EXIFTOOLTAGTYPE_double();
    }
    public static  int LIBRAW_EXIFTOOLTAGTYPE_ifd() {
        return libraw_h_constants_3.LIBRAW_EXIFTOOLTAGTYPE_ifd();
    }
    public static  int LIBRAW_EXIFTOOLTAGTYPE_unicode() {
        return libraw_h_constants_3.LIBRAW_EXIFTOOLTAGTYPE_unicode();
    }
    public static  int LIBRAW_EXIFTOOLTAGTYPE_complex() {
        return libraw_h_constants_3.LIBRAW_EXIFTOOLTAGTYPE_complex();
    }
    public static  int LIBRAW_EXIFTOOLTAGTYPE_int64u() {
        return libraw_h_constants_3.LIBRAW_EXIFTOOLTAGTYPE_int64u();
    }
    public static  int LIBRAW_EXIFTOOLTAGTYPE_int64s() {
        return libraw_h_constants_3.LIBRAW_EXIFTOOLTAGTYPE_int64s();
    }
    public static  int LIBRAW_EXIFTOOLTAGTYPE_ifd64() {
        return libraw_h_constants_3.LIBRAW_EXIFTOOLTAGTYPE_ifd64();
    }
    public static  long LIBRAW_LENS_NOT_SET() {
        return libraw_h_constants_3.LIBRAW_LENS_NOT_SET();
    }
    public static  MemorySegment LIBRAW_VERSION_STR() {
        return libraw_h_constants_3.LIBRAW_VERSION_STR();
    }
    public static  int LIBRAW_VERSION() {
        return libraw_h_constants_3.LIBRAW_VERSION();
    }
}


