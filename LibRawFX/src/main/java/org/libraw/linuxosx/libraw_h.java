// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class libraw_h  {

    /* package-private */ libraw_h() {}
    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static int LIBRAW_MAX_METADATA_BLOCKS() {
        return (int)1024L;
    }
    public static int LIBRAW_CBLACK_SIZE() {
        return (int)4104L;
    }
    public static int LIBRAW_IFD_MAXCOUNT() {
        return (int)10L;
    }
    public static int LIBRAW_CRXTRACKS_MAXCOUNT() {
        return (int)16L;
    }
    public static int LIBRAW_AFDATA_MAXCOUNT() {
        return (int)4L;
    }
    public static int LIBRAW_AHD_TILE() {
        return (int)512L;
    }
    public static int LIBRAW_XTRANS() {
        return (int)9L;
    }
    public static int LIBRAW_PROGRESS_THUMB_MASK() {
        return (int)268435455L;
    }
    public static int LIBRAW_MAJOR_VERSION() {
        return (int)0L;
    }
    public static int LIBRAW_MINOR_VERSION() {
        return (int)21L;
    }
    public static int LIBRAW_PATCH_VERSION() {
        return (int)0L;
    }
    public static int LIBRAW_SHLIB_CURRENT() {
        return (int)22L;
    }
    public static int LIBRAW_SHLIB_REVISION() {
        return (int)0L;
    }
    public static int LIBRAW_SHLIB_AGE() {
        return (int)0L;
    }
    public static int LibRawBigEndian() {
        return (int)0L;
    }
    public static int LIBRAW_HISTOGRAM_SIZE() {
        return (int)8192L;
    }
    public static int LIBRAW_OPENBAYER_RGGB() {
        return (int)148L;
    }
    public static int LIBRAW_OPENBAYER_BGGR() {
        return (int)22L;
    }
    public static int LIBRAW_OPENBAYER_GRBG() {
        return (int)97L;
    }
    public static int LIBRAW_OPENBAYER_GBRG() {
        return (int)73L;
    }
    public static int LIBRAW_DNGFM_FORWARDMATRIX() {
        return (int)1L;
    }
    public static int LIBRAW_DNGFM_ILLUMINANT() {
        return (int)2L;
    }
    public static int LIBRAW_DNGFM_COLORMATRIX() {
        return (int)4L;
    }
    public static int LIBRAW_DNGFM_CALIBRATION() {
        return (int)8L;
    }
    public static int LIBRAW_DNGFM_ANALOGBALANCE() {
        return (int)16L;
    }
    public static int LIBRAW_DNGFM_BLACK() {
        return (int)32L;
    }
    public static int LIBRAW_DNGFM_WHITE() {
        return (int)64L;
    }
    public static int LIBRAW_DNGFM_OPCODE2() {
        return (int)128L;
    }
    public static int LIBRAW_DNGFM_LINTABLE() {
        return (int)256L;
    }
    public static int LIBRAW_DNGFM_CROPORIGIN() {
        return (int)512L;
    }
    public static int LIBRAW_DNGFM_CROPSIZE() {
        return (int)1024L;
    }
    public static int LIBRAW_DNGFM_PREVIEWCS() {
        return (int)2048L;
    }
    public static int LIBRAW_DNGFM_ASSHOTNEUTRAL() {
        return (int)4096L;
    }
    public static int LIBRAW_DNGFM_BASELINEEXPOSURE() {
        return (int)8192L;
    }
    public static int LIBRAW_DNGFM_LINEARRESPONSELIMIT() {
        return (int)16384L;
    }
    public static int LIBRAW_DNGFM_USERCROP() {
        return (int)32768L;
    }
    public static int LIBRAW_ASWB_APPLIED() {
        return (int)1L;
    }
    public static int LIBRAW_ASWB_CANON() {
        return (int)2L;
    }
    public static int LIBRAW_ASWB_NIKON() {
        return (int)4L;
    }
    public static int LIBRAW_ASWB_NIKON_SRAW() {
        return (int)8L;
    }
    public static int LIBRAW_ASWB_PENTAX() {
        return (int)16L;
    }
    public static int LIBRAW_EXIFTAG_TYPE_UNKNOWN() {
        return (int)0L;
    }
    public static int LIBRAW_EXIFTAG_TYPE_BYTE() {
        return (int)1L;
    }
    public static int LIBRAW_EXIFTAG_TYPE_ASCII() {
        return (int)2L;
    }
    public static int LIBRAW_EXIFTAG_TYPE_SHORT() {
        return (int)3L;
    }
    public static int LIBRAW_EXIFTAG_TYPE_LONG() {
        return (int)4L;
    }
    public static int LIBRAW_EXIFTAG_TYPE_RATIONAL() {
        return (int)5L;
    }
    public static int LIBRAW_EXIFTAG_TYPE_SBYTE() {
        return (int)6L;
    }
    public static int LIBRAW_EXIFTAG_TYPE_UNDEFINED() {
        return (int)7L;
    }
    public static int LIBRAW_EXIFTAG_TYPE_SSHORT() {
        return (int)8L;
    }
    public static int LIBRAW_EXIFTAG_TYPE_SLONG() {
        return (int)9L;
    }
    public static int LIBRAW_EXIFTAG_TYPE_SRATIONAL() {
        return (int)10L;
    }
    public static int LIBRAW_EXIFTAG_TYPE_FLOAT() {
        return (int)11L;
    }
    public static int LIBRAW_EXIFTAG_TYPE_DOUBLE() {
        return (int)12L;
    }
    public static int LIBRAW_EXIFTAG_TYPE_IFD() {
        return (int)13L;
    }
    public static int LIBRAW_EXIFTAG_TYPE_UNICODE() {
        return (int)14L;
    }
    public static int LIBRAW_EXIFTAG_TYPE_COMPLEX() {
        return (int)15L;
    }
    public static int LIBRAW_EXIFTAG_TYPE_LONG8() {
        return (int)16L;
    }
    public static int LIBRAW_EXIFTAG_TYPE_SLONG8() {
        return (int)17L;
    }
    public static int LIBRAW_EXIFTAG_TYPE_IFD8() {
        return (int)18L;
    }
    public static int LIBRAW_WBI_Unknown() {
        return (int)0L;
    }
    public static int LIBRAW_WBI_Daylight() {
        return (int)1L;
    }
    public static int LIBRAW_WBI_Fluorescent() {
        return (int)2L;
    }
    public static int LIBRAW_WBI_Tungsten() {
        return (int)3L;
    }
    public static int LIBRAW_WBI_Flash() {
        return (int)4L;
    }
    public static int LIBRAW_WBI_FineWeather() {
        return (int)9L;
    }
    public static int LIBRAW_WBI_Cloudy() {
        return (int)10L;
    }
    public static int LIBRAW_WBI_Shade() {
        return (int)11L;
    }
    public static int LIBRAW_WBI_FL_D() {
        return (int)12L;
    }
    public static int LIBRAW_WBI_FL_N() {
        return (int)13L;
    }
    public static int LIBRAW_WBI_FL_W() {
        return (int)14L;
    }
    public static int LIBRAW_WBI_FL_WW() {
        return (int)15L;
    }
    public static int LIBRAW_WBI_FL_L() {
        return (int)16L;
    }
    public static int LIBRAW_WBI_Ill_A() {
        return (int)17L;
    }
    public static int LIBRAW_WBI_Ill_B() {
        return (int)18L;
    }
    public static int LIBRAW_WBI_Ill_C() {
        return (int)19L;
    }
    public static int LIBRAW_WBI_D55() {
        return (int)20L;
    }
    public static int LIBRAW_WBI_D65() {
        return (int)21L;
    }
    public static int LIBRAW_WBI_D75() {
        return (int)22L;
    }
    public static int LIBRAW_WBI_D50() {
        return (int)23L;
    }
    public static int LIBRAW_WBI_StudioTungsten() {
        return (int)24L;
    }
    public static int LIBRAW_WBI_Sunset() {
        return (int)64L;
    }
    public static int LIBRAW_WBI_Underwater() {
        return (int)65L;
    }
    public static int LIBRAW_WBI_FluorescentHigh() {
        return (int)66L;
    }
    public static int LIBRAW_WBI_HT_Mercury() {
        return (int)67L;
    }
    public static int LIBRAW_WBI_AsShot() {
        return (int)81L;
    }
    public static int LIBRAW_WBI_Auto() {
        return (int)82L;
    }
    public static int LIBRAW_WBI_Custom() {
        return (int)83L;
    }
    public static int LIBRAW_WBI_Auto1() {
        return (int)85L;
    }
    public static int LIBRAW_WBI_Auto2() {
        return (int)86L;
    }
    public static int LIBRAW_WBI_Auto3() {
        return (int)87L;
    }
    public static int LIBRAW_WBI_Auto4() {
        return (int)88L;
    }
    public static int LIBRAW_WBI_Custom1() {
        return (int)90L;
    }
    public static int LIBRAW_WBI_Custom2() {
        return (int)91L;
    }
    public static int LIBRAW_WBI_Custom3() {
        return (int)92L;
    }
    public static int LIBRAW_WBI_Custom4() {
        return (int)93L;
    }
    public static int LIBRAW_WBI_Custom5() {
        return (int)94L;
    }
    public static int LIBRAW_WBI_Custom6() {
        return (int)95L;
    }
    public static int LIBRAW_WBI_PC_Set1() {
        return (int)96L;
    }
    public static int LIBRAW_WBI_PC_Set2() {
        return (int)97L;
    }
    public static int LIBRAW_WBI_PC_Set3() {
        return (int)98L;
    }
    public static int LIBRAW_WBI_PC_Set4() {
        return (int)99L;
    }
    public static int LIBRAW_WBI_PC_Set5() {
        return (int)100L;
    }
    public static int LIBRAW_WBI_Measured() {
        return (int)110L;
    }
    public static int LIBRAW_WBI_BW() {
        return (int)120L;
    }
    public static int LIBRAW_WBI_Kelvin() {
        return (int)254L;
    }
    public static int LIBRAW_WBI_Other() {
        return (int)255L;
    }
    public static int LIBRAW_WBI_None() {
        return (int)65535L;
    }
    public static int LIBRAW_ME_NONE() {
        return (int)0L;
    }
    public static int LIBRAW_ME_SIMPLE() {
        return (int)1L;
    }
    public static int LIBRAW_ME_OVERLAY() {
        return (int)2L;
    }
    public static int LIBRAW_ME_HDR() {
        return (int)3L;
    }
    public static int LIBRAW_DNG_NONE() {
        return (int)0L;
    }
    public static int LIBRAW_DNG_FLOAT() {
        return (int)1L;
    }
    public static int LIBRAW_DNG_LINEAR() {
        return (int)2L;
    }
    public static int LIBRAW_DNG_DEFLATE() {
        return (int)4L;
    }
    public static int LIBRAW_DNG_XTRANS() {
        return (int)8L;
    }
    public static int LIBRAW_DNG_OTHER() {
        return (int)16L;
    }
    public static int LIBRAW_DNG_8BIT() {
        return (int)32L;
    }
    public static int LIBRAW_DNG_ALL() {
        return (int)63L;
    }
    public static int LIBRAW_DNG_DEFAULT() {
        return (int)39L;
    }
    public static int LIBRAW_OUTPUT_FLAGS_NONE() {
        return (int)0L;
    }
    public static int LIBRAW_OUTPUT_FLAGS_PPMMETA() {
        return (int)1L;
    }
    public static int LIBRAW_CAPS_RAWSPEED() {
        return (int)1L;
    }
    public static int LIBRAW_CAPS_DNGSDK() {
        return (int)2L;
    }
    public static int LIBRAW_CAPS_GPRSDK() {
        return (int)4L;
    }
    public static int LIBRAW_CAPS_UNICODEPATHS() {
        return (int)8L;
    }
    public static int LIBRAW_CAPS_X3FTOOLS() {
        return (int)16L;
    }
    public static int LIBRAW_CAPS_RPI6BY9() {
        return (int)32L;
    }
    public static int LIBRAW_CAPS_ZLIB() {
        return (int)64L;
    }
    public static int LIBRAW_CAPS_JPEG() {
        return (int)128L;
    }
    public static int LIBRAW_COLORSPACE_NotFound() {
        return (int)0L;
    }
    public static int LIBRAW_COLORSPACE_sRGB() {
        return (int)1L;
    }
    public static int LIBRAW_COLORSPACE_AdobeRGB() {
        return (int)2L;
    }
    public static int LIBRAW_COLORSPACE_WideGamutRGB() {
        return (int)3L;
    }
    public static int LIBRAW_COLORSPACE_ProPhotoRGB() {
        return (int)4L;
    }
    public static int LIBRAW_COLORSPACE_ICC() {
        return (int)5L;
    }
    public static int LIBRAW_COLORSPACE_Uncalibrated() {
        return (int)6L;
    }
    public static int LIBRAW_COLORSPACE_CameraLinearUniWB() {
        return (int)7L;
    }
    public static int LIBRAW_COLORSPACE_CameraLinear() {
        return (int)8L;
    }
    public static int LIBRAW_COLORSPACE_CameraGammaUniWB() {
        return (int)9L;
    }
    public static int LIBRAW_COLORSPACE_CameraGamma() {
        return (int)10L;
    }
    public static int LIBRAW_COLORSPACE_MonochromeLinear() {
        return (int)11L;
    }
    public static int LIBRAW_COLORSPACE_MonochromeGamma() {
        return (int)12L;
    }
    public static int LIBRAW_COLORSPACE_Unknown() {
        return (int)255L;
    }
    public static int LIBRAW_CAMERAMAKER_Unknown() {
        return (int)0L;
    }
    public static int LIBRAW_CAMERAMAKER_Agfa() {
        return (int)1L;
    }
    public static int LIBRAW_CAMERAMAKER_Alcatel() {
        return (int)2L;
    }
    public static int LIBRAW_CAMERAMAKER_Apple() {
        return (int)3L;
    }
    public static int LIBRAW_CAMERAMAKER_Aptina() {
        return (int)4L;
    }
    public static int LIBRAW_CAMERAMAKER_AVT() {
        return (int)5L;
    }
    public static int LIBRAW_CAMERAMAKER_Baumer() {
        return (int)6L;
    }
    public static int LIBRAW_CAMERAMAKER_Broadcom() {
        return (int)7L;
    }
    public static int LIBRAW_CAMERAMAKER_Canon() {
        return (int)8L;
    }
    public static int LIBRAW_CAMERAMAKER_Casio() {
        return (int)9L;
    }
    public static int LIBRAW_CAMERAMAKER_CINE() {
        return (int)10L;
    }
    public static int LIBRAW_CAMERAMAKER_Clauss() {
        return (int)11L;
    }
    public static int LIBRAW_CAMERAMAKER_Contax() {
        return (int)12L;
    }
    public static int LIBRAW_CAMERAMAKER_Creative() {
        return (int)13L;
    }
    public static int LIBRAW_CAMERAMAKER_DJI() {
        return (int)14L;
    }
    public static int LIBRAW_CAMERAMAKER_DXO() {
        return (int)15L;
    }
    public static int LIBRAW_CAMERAMAKER_Epson() {
        return (int)16L;
    }
    public static int LIBRAW_CAMERAMAKER_Foculus() {
        return (int)17L;
    }
    public static int LIBRAW_CAMERAMAKER_Fujifilm() {
        return (int)18L;
    }
    public static int LIBRAW_CAMERAMAKER_Generic() {
        return (int)19L;
    }
    public static int LIBRAW_CAMERAMAKER_Gione() {
        return (int)20L;
    }
    public static int LIBRAW_CAMERAMAKER_GITUP() {
        return (int)21L;
    }
    public static int LIBRAW_CAMERAMAKER_Google() {
        return (int)22L;
    }
    public static int LIBRAW_CAMERAMAKER_GoPro() {
        return (int)23L;
    }
    public static int LIBRAW_CAMERAMAKER_Hasselblad() {
        return (int)24L;
    }
    public static int LIBRAW_CAMERAMAKER_HTC() {
        return (int)25L;
    }
    public static int LIBRAW_CAMERAMAKER_I_Mobile() {
        return (int)26L;
    }
    public static int LIBRAW_CAMERAMAKER_Imacon() {
        return (int)27L;
    }
    public static int LIBRAW_CAMERAMAKER_JK_Imaging() {
        return (int)28L;
    }
    public static int LIBRAW_CAMERAMAKER_Kodak() {
        return (int)29L;
    }
    public static int LIBRAW_CAMERAMAKER_Konica() {
        return (int)30L;
    }
    public static int LIBRAW_CAMERAMAKER_Leaf() {
        return (int)31L;
    }
    public static int LIBRAW_CAMERAMAKER_Leica() {
        return (int)32L;
    }
    public static int LIBRAW_CAMERAMAKER_Lenovo() {
        return (int)33L;
    }
    public static int LIBRAW_CAMERAMAKER_LG() {
        return (int)34L;
    }
    public static int LIBRAW_CAMERAMAKER_Logitech() {
        return (int)35L;
    }
    public static int LIBRAW_CAMERAMAKER_Mamiya() {
        return (int)36L;
    }
    public static int LIBRAW_CAMERAMAKER_Matrix() {
        return (int)37L;
    }
    public static int LIBRAW_CAMERAMAKER_Meizu() {
        return (int)38L;
    }
    public static int LIBRAW_CAMERAMAKER_Micron() {
        return (int)39L;
    }
    public static int LIBRAW_CAMERAMAKER_Minolta() {
        return (int)40L;
    }
    public static int LIBRAW_CAMERAMAKER_Motorola() {
        return (int)41L;
    }
    public static int LIBRAW_CAMERAMAKER_NGM() {
        return (int)42L;
    }
    public static int LIBRAW_CAMERAMAKER_Nikon() {
        return (int)43L;
    }
    public static int LIBRAW_CAMERAMAKER_Nokia() {
        return (int)44L;
    }
    public static int LIBRAW_CAMERAMAKER_Olympus() {
        return (int)45L;
    }
    public static int LIBRAW_CAMERAMAKER_OmniVison() {
        return (int)46L;
    }
    public static int LIBRAW_CAMERAMAKER_Panasonic() {
        return (int)47L;
    }
    public static int LIBRAW_CAMERAMAKER_Parrot() {
        return (int)48L;
    }
    public static int LIBRAW_CAMERAMAKER_Pentax() {
        return (int)49L;
    }
    public static int LIBRAW_CAMERAMAKER_PhaseOne() {
        return (int)50L;
    }
    public static int LIBRAW_CAMERAMAKER_PhotoControl() {
        return (int)51L;
    }
    public static int LIBRAW_CAMERAMAKER_Photron() {
        return (int)52L;
    }
    public static int LIBRAW_CAMERAMAKER_Pixelink() {
        return (int)53L;
    }
    public static int LIBRAW_CAMERAMAKER_Polaroid() {
        return (int)54L;
    }
    public static int LIBRAW_CAMERAMAKER_RED() {
        return (int)55L;
    }
    public static int LIBRAW_CAMERAMAKER_Ricoh() {
        return (int)56L;
    }
    public static int LIBRAW_CAMERAMAKER_Rollei() {
        return (int)57L;
    }
    public static int LIBRAW_CAMERAMAKER_RoverShot() {
        return (int)58L;
    }
    public static int LIBRAW_CAMERAMAKER_Samsung() {
        return (int)59L;
    }
    public static int LIBRAW_CAMERAMAKER_Sigma() {
        return (int)60L;
    }
    public static int LIBRAW_CAMERAMAKER_Sinar() {
        return (int)61L;
    }
    public static int LIBRAW_CAMERAMAKER_SMaL() {
        return (int)62L;
    }
    public static int LIBRAW_CAMERAMAKER_Sony() {
        return (int)63L;
    }
    public static int LIBRAW_CAMERAMAKER_ST_Micro() {
        return (int)64L;
    }
    public static int LIBRAW_CAMERAMAKER_THL() {
        return (int)65L;
    }
    public static int LIBRAW_CAMERAMAKER_VLUU() {
        return (int)66L;
    }
    public static int LIBRAW_CAMERAMAKER_Xiaomi() {
        return (int)67L;
    }
    public static int LIBRAW_CAMERAMAKER_XIAOYI() {
        return (int)68L;
    }
    public static int LIBRAW_CAMERAMAKER_YI() {
        return (int)69L;
    }
    public static int LIBRAW_CAMERAMAKER_Yuneec() {
        return (int)70L;
    }
    public static int LIBRAW_CAMERAMAKER_Zeiss() {
        return (int)71L;
    }
    public static int LIBRAW_CAMERAMAKER_OnePlus() {
        return (int)72L;
    }
    public static int LIBRAW_CAMERAMAKER_ISG() {
        return (int)73L;
    }
    public static int LIBRAW_CAMERAMAKER_VIVO() {
        return (int)74L;
    }
    public static int LIBRAW_CAMERAMAKER_HMD_Global() {
        return (int)75L;
    }
    public static int LIBRAW_CAMERAMAKER_HUAWEI() {
        return (int)76L;
    }
    public static int LIBRAW_CAMERAMAKER_RaspberryPi() {
        return (int)77L;
    }
    public static int LIBRAW_CAMERAMAKER_TheLastOne() {
        return (int)78L;
    }
    public static int LIBRAW_MOUNT_Unknown() {
        return (int)0L;
    }
    public static int LIBRAW_MOUNT_Alpa() {
        return (int)1L;
    }
    public static int LIBRAW_MOUNT_C() {
        return (int)2L;
    }
    public static int LIBRAW_MOUNT_Canon_EF_M() {
        return (int)3L;
    }
    public static int LIBRAW_MOUNT_Canon_EF_S() {
        return (int)4L;
    }
    public static int LIBRAW_MOUNT_Canon_EF() {
        return (int)5L;
    }
    public static int LIBRAW_MOUNT_Canon_RF() {
        return (int)6L;
    }
    public static int LIBRAW_MOUNT_Contax_N() {
        return (int)7L;
    }
    public static int LIBRAW_MOUNT_Contax645() {
        return (int)8L;
    }
    public static int LIBRAW_MOUNT_FT() {
        return (int)9L;
    }
    public static int LIBRAW_MOUNT_mFT() {
        return (int)10L;
    }
    public static int LIBRAW_MOUNT_Fuji_GF() {
        return (int)11L;
    }
    public static int LIBRAW_MOUNT_Fuji_GX() {
        return (int)12L;
    }
    public static int LIBRAW_MOUNT_Fuji_X() {
        return (int)13L;
    }
    public static int LIBRAW_MOUNT_Hasselblad_H() {
        return (int)14L;
    }
    public static int LIBRAW_MOUNT_Hasselblad_V() {
        return (int)15L;
    }
    public static int LIBRAW_MOUNT_Hasselblad_XCD() {
        return (int)16L;
    }
    public static int LIBRAW_MOUNT_Leica_M() {
        return (int)17L;
    }
    public static int LIBRAW_MOUNT_Leica_R() {
        return (int)18L;
    }
    public static int LIBRAW_MOUNT_Leica_S() {
        return (int)19L;
    }
    public static int LIBRAW_MOUNT_Leica_SL() {
        return (int)20L;
    }
    public static int LIBRAW_MOUNT_Leica_TL() {
        return (int)21L;
    }
    public static int LIBRAW_MOUNT_LPS_L() {
        return (int)22L;
    }
    public static int LIBRAW_MOUNT_Mamiya67() {
        return (int)23L;
    }
    public static int LIBRAW_MOUNT_Mamiya645() {
        return (int)24L;
    }
    public static int LIBRAW_MOUNT_Minolta_A() {
        return (int)25L;
    }
    public static int LIBRAW_MOUNT_Nikon_CX() {
        return (int)26L;
    }
    public static int LIBRAW_MOUNT_Nikon_F() {
        return (int)27L;
    }
    public static int LIBRAW_MOUNT_Nikon_Z() {
        return (int)28L;
    }
    public static int LIBRAW_MOUNT_PhaseOne_iXM_MV() {
        return (int)29L;
    }
    public static int LIBRAW_MOUNT_PhaseOne_iXM_RS() {
        return (int)30L;
    }
    public static int LIBRAW_MOUNT_PhaseOne_iXM() {
        return (int)31L;
    }
    public static int LIBRAW_MOUNT_Pentax_645() {
        return (int)32L;
    }
    public static int LIBRAW_MOUNT_Pentax_K() {
        return (int)33L;
    }
    public static int LIBRAW_MOUNT_Pentax_Q() {
        return (int)34L;
    }
    public static int LIBRAW_MOUNT_RicohModule() {
        return (int)35L;
    }
    public static int LIBRAW_MOUNT_Rollei_bayonet() {
        return (int)36L;
    }
    public static int LIBRAW_MOUNT_Samsung_NX_M() {
        return (int)37L;
    }
    public static int LIBRAW_MOUNT_Samsung_NX() {
        return (int)38L;
    }
    public static int LIBRAW_MOUNT_Sigma_X3F() {
        return (int)39L;
    }
    public static int LIBRAW_MOUNT_Sony_E() {
        return (int)40L;
    }
    public static int LIBRAW_MOUNT_LF() {
        return (int)41L;
    }
    public static int LIBRAW_MOUNT_DigitalBack() {
        return (int)42L;
    }
    public static int LIBRAW_MOUNT_FixedLens() {
        return (int)43L;
    }
    public static int LIBRAW_MOUNT_IL_UM() {
        return (int)44L;
    }
    public static int LIBRAW_MOUNT_TheLastOne() {
        return (int)45L;
    }
    public static int LIBRAW_FORMAT_Unknown() {
        return (int)0L;
    }
    public static int LIBRAW_FORMAT_APSC() {
        return (int)1L;
    }
    public static int LIBRAW_FORMAT_FF() {
        return (int)2L;
    }
    public static int LIBRAW_FORMAT_MF() {
        return (int)3L;
    }
    public static int LIBRAW_FORMAT_APSH() {
        return (int)4L;
    }
    public static int LIBRAW_FORMAT_1INCH() {
        return (int)5L;
    }
    public static int LIBRAW_FORMAT_1div2p3INCH() {
        return (int)6L;
    }
    public static int LIBRAW_FORMAT_1div1p7INCH() {
        return (int)7L;
    }
    public static int LIBRAW_FORMAT_FT() {
        return (int)8L;
    }
    public static int LIBRAW_FORMAT_CROP645() {
        return (int)9L;
    }
    public static int LIBRAW_FORMAT_LeicaS() {
        return (int)10L;
    }
    public static int LIBRAW_FORMAT_645() {
        return (int)11L;
    }
    public static int LIBRAW_FORMAT_66() {
        return (int)12L;
    }
    public static int LIBRAW_FORMAT_69() {
        return (int)13L;
    }
    public static int LIBRAW_FORMAT_LF() {
        return (int)14L;
    }
    public static int LIBRAW_FORMAT_Leica_DMR() {
        return (int)15L;
    }
    public static int LIBRAW_FORMAT_67() {
        return (int)16L;
    }
    public static int LIBRAW_FORMAT_SigmaAPSC() {
        return (int)17L;
    }
    public static int LIBRAW_FORMAT_SigmaMerrill() {
        return (int)18L;
    }
    public static int LIBRAW_FORMAT_SigmaAPSH() {
        return (int)19L;
    }
    public static int LIBRAW_FORMAT_3648() {
        return (int)20L;
    }
    public static int LIBRAW_FORMAT_68() {
        return (int)21L;
    }
    public static int LIBRAW_FORMAT_TheLastOne() {
        return (int)22L;
    }
    public static int LIBRAW_IMAGE_ASPECT_UNKNOWN() {
        return (int)0L;
    }
    public static int LIBRAW_IMAGE_ASPECT_OTHER() {
        return (int)1L;
    }
    public static int LIBRAW_IMAGE_ASPECT_MINIMAL_REAL_ASPECT_VALUE() {
        return (int)99L;
    }
    public static int LIBRAW_IMAGE_ASPECT_MAXIMAL_REAL_ASPECT_VALUE() {
        return (int)10000L;
    }
    public static int LIBRAW_IMAGE_ASPECT_3to2() {
        return (int)1500L;
    }
    public static int LIBRAW_IMAGE_ASPECT_1to1() {
        return (int)1000L;
    }
    public static int LIBRAW_IMAGE_ASPECT_4to3() {
        return (int)1333L;
    }
    public static int LIBRAW_IMAGE_ASPECT_16to9() {
        return (int)1777L;
    }
    public static int LIBRAW_IMAGE_ASPECT_5to4() {
        return (int)1250L;
    }
    public static int LIBRAW_IMAGE_ASPECT_7to6() {
        return (int)1166L;
    }
    public static int LIBRAW_IMAGE_ASPECT_6to5() {
        return (int)1200L;
    }
    public static int LIBRAW_IMAGE_ASPECT_7to5() {
        return (int)1400L;
    }
    public static int LIBRAW_FT_UNDEFINED() {
        return (int)0L;
    }
    public static int LIBRAW_FT_PRIME_LENS() {
        return (int)1L;
    }
    public static int LIBRAW_FT_ZOOM_LENS() {
        return (int)2L;
    }
    public static int LIBRAW_FT_ZOOM_LENS_CONSTANT_APERTURE() {
        return (int)3L;
    }
    public static int LIBRAW_FT_ZOOM_LENS_VARIABLE_APERTURE() {
        return (int)4L;
    }
    public static int LIBRAW_Canon_RecordMode_UNDEFINED() {
        return (int)0L;
    }
    public static int LIBRAW_Canon_RecordMode_JPEG() {
        return (int)1L;
    }
    public static int LIBRAW_Canon_RecordMode_CRW_THM() {
        return (int)2L;
    }
    public static int LIBRAW_Canon_RecordMode_AVI_THM() {
        return (int)3L;
    }
    public static int LIBRAW_Canon_RecordMode_TIF() {
        return (int)4L;
    }
    public static int LIBRAW_Canon_RecordMode_TIF_JPEG() {
        return (int)5L;
    }
    public static int LIBRAW_Canon_RecordMode_CR2() {
        return (int)6L;
    }
    public static int LIBRAW_Canon_RecordMode_CR2_JPEG() {
        return (int)7L;
    }
    public static int LIBRAW_Canon_RecordMode_UNKNOWN() {
        return (int)8L;
    }
    public static int LIBRAW_Canon_RecordMode_MOV() {
        return (int)9L;
    }
    public static int LIBRAW_Canon_RecordMode_MP4() {
        return (int)10L;
    }
    public static int LIBRAW_Canon_RecordMode_CRM() {
        return (int)11L;
    }
    public static int LIBRAW_Canon_RecordMode_CR3() {
        return (int)12L;
    }
    public static int LIBRAW_Canon_RecordMode_CR3_JPEG() {
        return (int)13L;
    }
    public static int LIBRAW_Canon_RecordMode_HEIF() {
        return (int)14L;
    }
    public static int LIBRAW_Canon_RecordMode_CR3_HEIF() {
        return (int)15L;
    }
    public static int LIBRAW_Canon_RecordMode_TheLastOne() {
        return (int)16L;
    }
    public static int LIBRAW_MINOLTA_UNPACKED() {
        return (int)82L;
    }
    public static int LIBRAW_MINOLTA_PACKED() {
        return (int)89L;
    }
    public static int LIBRAW_MINOLTA_RGGB() {
        return (int)1L;
    }
    public static int LIBRAW_MINOLTA_G2BRG1() {
        return (int)4L;
    }
    public static int LIBRAW_SONY_DSC() {
        return (int)1L;
    }
    public static int LIBRAW_SONY_DSLR() {
        return (int)2L;
    }
    public static int LIBRAW_SONY_NEX() {
        return (int)3L;
    }
    public static int LIBRAW_SONY_SLT() {
        return (int)4L;
    }
    public static int LIBRAW_SONY_ILCE() {
        return (int)5L;
    }
    public static int LIBRAW_SONY_ILCA() {
        return (int)6L;
    }
    public static int LIBRAW_SONY_CameraType_UNKNOWN() {
        return (int)65535L;
    }
    public static int LIBRAW_SONY_Tag2010None() {
        return (int)0L;
    }
    public static int LIBRAW_SONY_Tag2010a() {
        return (int)1L;
    }
    public static int LIBRAW_SONY_Tag2010b() {
        return (int)2L;
    }
    public static int LIBRAW_SONY_Tag2010c() {
        return (int)3L;
    }
    public static int LIBRAW_SONY_Tag2010d() {
        return (int)4L;
    }
    public static int LIBRAW_SONY_Tag2010e() {
        return (int)5L;
    }
    public static int LIBRAW_SONY_Tag2010f() {
        return (int)6L;
    }
    public static int LIBRAW_SONY_Tag2010g() {
        return (int)7L;
    }
    public static int LIBRAW_SONY_Tag2010h() {
        return (int)8L;
    }
    public static int LIBRAW_SONY_Tag2010i() {
        return (int)9L;
    }
    public static int LIBRAW_SONY_Tag9050None() {
        return (int)0L;
    }
    public static int LIBRAW_SONY_Tag9050a() {
        return (int)1L;
    }
    public static int LIBRAW_SONY_Tag9050b() {
        return (int)2L;
    }
    public static int LIBRAW_SONY_Tag9050c() {
        return (int)3L;
    }
    public static int LIBRAW_SONY_FOCUSMODE_MF() {
        return (int)0L;
    }
    public static int LIBRAW_SONY_FOCUSMODE_AF_S() {
        return (int)2L;
    }
    public static int LIBRAW_SONY_FOCUSMODE_AF_C() {
        return (int)3L;
    }
    public static int LIBRAW_SONY_FOCUSMODE_AF_A() {
        return (int)4L;
    }
    public static int LIBRAW_SONY_FOCUSMODE_DMF() {
        return (int)6L;
    }
    public static int LIBRAW_SONY_FOCUSMODE_AF_D() {
        return (int)7L;
    }
    public static int LIBRAW_SONY_FOCUSMODE_AF() {
        return (int)101L;
    }
    public static int LIBRAW_SONY_FOCUSMODE_PERMANENT_AF() {
        return (int)104L;
    }
    public static int LIBRAW_SONY_FOCUSMODE_SEMI_MF() {
        return (int)105L;
    }
    public static int LIBRAW_SONY_FOCUSMODE_UNKNOWN() {
        return (int)-1L;
    }
    public static int LIBRAW_Kodak_UnknownSensor() {
        return (int)0L;
    }
    public static int LIBRAW_Kodak_M1() {
        return (int)1L;
    }
    public static int LIBRAW_Kodak_M15() {
        return (int)2L;
    }
    public static int LIBRAW_Kodak_M16() {
        return (int)3L;
    }
    public static int LIBRAW_Kodak_M17() {
        return (int)4L;
    }
    public static int LIBRAW_Kodak_M2() {
        return (int)5L;
    }
    public static int LIBRAW_Kodak_M23() {
        return (int)6L;
    }
    public static int LIBRAW_Kodak_M24() {
        return (int)7L;
    }
    public static int LIBRAW_Kodak_M3() {
        return (int)8L;
    }
    public static int LIBRAW_Kodak_M5() {
        return (int)9L;
    }
    public static int LIBRAW_Kodak_M6() {
        return (int)10L;
    }
    public static int LIBRAW_Kodak_C14() {
        return (int)11L;
    }
    public static int LIBRAW_Kodak_X14() {
        return (int)12L;
    }
    public static int LIBRAW_Kodak_M11() {
        return (int)13L;
    }
    public static int LIBRAW_HF_Unknown() {
        return (int)0L;
    }
    public static int LIBRAW_HF_3FR() {
        return (int)1L;
    }
    public static int LIBRAW_HF_FFF() {
        return (int)2L;
    }
    public static int LIBRAW_HF_Imacon() {
        return (int)3L;
    }
    public static int LIBRAW_HF_HasselbladDNG() {
        return (int)4L;
    }
    public static int LIBRAW_HF_AdobeDNG() {
        return (int)5L;
    }
    public static int LIBRAW_HF_AdobeDNG_fromPhocusDNG() {
        return (int)6L;
    }
    public static int LIBRAW_RAWSPECIAL_SONYARW2_NONE() {
        return (int)0L;
    }
    public static int LIBRAW_RAWSPECIAL_SONYARW2_BASEONLY() {
        return (int)1L;
    }
    public static int LIBRAW_RAWSPECIAL_SONYARW2_DELTAONLY() {
        return (int)2L;
    }
    public static int LIBRAW_RAWSPECIAL_SONYARW2_DELTAZEROBASE() {
        return (int)4L;
    }
    public static int LIBRAW_RAWSPECIAL_SONYARW2_DELTATOVALUE() {
        return (int)8L;
    }
    public static int LIBRAW_RAWSPECIAL_SONYARW2_ALLFLAGS() {
        return (int)15L;
    }
    public static int LIBRAW_RAWSPECIAL_NODP2Q_INTERPOLATERG() {
        return (int)16L;
    }
    public static int LIBRAW_RAWSPECIAL_NODP2Q_INTERPOLATEAF() {
        return (int)32L;
    }
    public static int LIBRAW_RAWSPECIAL_SRAW_NO_RGB() {
        return (int)64L;
    }
    public static int LIBRAW_RAWSPECIAL_SRAW_NO_INTERPOLATE() {
        return (int)128L;
    }
    public static int LIBRAW_RAWOPTIONS_PENTAX_PS_ALLFRAMES() {
        return (int)1L;
    }
    public static int LIBRAW_RAWOPTIONS_CONVERTFLOAT_TO_INT() {
        return (int)2L;
    }
    public static int LIBRAW_RAWOPTIONS_ARQ_SKIP_CHANNEL_SWAP() {
        return (int)4L;
    }
    public static int LIBRAW_RAWOPTIONS_NO_ROTATE_FOR_KODAK_THUMBNAILS() {
        return (int)8L;
    }
    public static int LIBRAW_RAWOPTIONS_USE_PPM16_THUMBS() {
        return (int)32L;
    }
    public static int LIBRAW_RAWOPTIONS_DONT_CHECK_DNG_ILLUMINANT() {
        return (int)64L;
    }
    public static int LIBRAW_RAWOPTIONS_DNGSDK_ZEROCOPY() {
        return (int)128L;
    }
    public static int LIBRAW_RAWOPTIONS_ZEROFILTERS_FOR_MONOCHROMETIFFS() {
        return (int)256L;
    }
    public static int LIBRAW_RAWOPTIONS_DNG_ADD_ENHANCED() {
        return (int)512L;
    }
    public static int LIBRAW_RAWOPTIONS_DNG_ADD_PREVIEWS() {
        return (int)1024L;
    }
    public static int LIBRAW_RAWOPTIONS_DNG_PREFER_LARGEST_IMAGE() {
        return (int)2048L;
    }
    public static int LIBRAW_RAWOPTIONS_DNG_STAGE2() {
        return (int)4096L;
    }
    public static int LIBRAW_RAWOPTIONS_DNG_STAGE3() {
        return (int)8192L;
    }
    public static int LIBRAW_RAWOPTIONS_DNG_ALLOWSIZECHANGE() {
        return (int)16384L;
    }
    public static int LIBRAW_RAWOPTIONS_DNG_DISABLEWBADJUST() {
        return (int)32768L;
    }
    public static int LIBRAW_RAWOPTIONS_PROVIDE_NONSTANDARD_WB() {
        return (int)65536L;
    }
    public static int LIBRAW_RAWOPTIONS_CAMERAWB_FALLBACK_TO_DAYLIGHT() {
        return (int)131072L;
    }
    public static int LIBRAW_RAWOPTIONS_CHECK_THUMBNAILS_KNOWN_VENDORS() {
        return (int)262144L;
    }
    public static int LIBRAW_RAWOPTIONS_CHECK_THUMBNAILS_ALL_VENDORS() {
        return (int)524288L;
    }
    public static int LIBRAW_DECODER_HASCURVE() {
        return (int)16L;
    }
    public static int LIBRAW_DECODER_SONYARW2() {
        return (int)32L;
    }
    public static int LIBRAW_DECODER_TRYRAWSPEED() {
        return (int)64L;
    }
    public static int LIBRAW_DECODER_OWNALLOC() {
        return (int)128L;
    }
    public static int LIBRAW_DECODER_FIXEDMAXC() {
        return (int)256L;
    }
    public static int LIBRAW_DECODER_ADOBECOPYPIXEL() {
        return (int)512L;
    }
    public static int LIBRAW_DECODER_LEGACY_WITH_MARGINS() {
        return (int)1024L;
    }
    public static int LIBRAW_DECODER_3CHANNEL() {
        return (int)2048L;
    }
    public static int LIBRAW_DECODER_SINAR4SHOT() {
        return (int)2048L;
    }
    public static int LIBRAW_DECODER_FLATDATA() {
        return (int)4096L;
    }
    public static int LIBRAW_DECODER_FLAT_BG2_SWAPPED() {
        return (int)8192L;
    }
    public static int LIBRAW_DECODER_NOTSET() {
        return (int)32768L;
    }
    public static int LIBRAW_OPTIONS_NONE() {
        return (int)0L;
    }
    public static int LIBRAW_OPTIONS_NO_MEMERR_CALLBACK() {
        return (int)1L;
    }
    public static int LIBRAW_OPTIONS_NO_DATAERR_CALLBACK() {
        return (int)2L;
    }
    public static int LIBRAW_OPIONS_NO_MEMERR_CALLBACK() {
        return (int)1L;
    }
    public static int LIBRAW_OPIONS_NO_DATAERR_CALLBACK() {
        return (int)2L;
    }
    public static int LIBRAW_WARN_NONE() {
        return (int)0L;
    }
    public static int LIBRAW_WARN_BAD_CAMERA_WB() {
        return (int)4L;
    }
    public static int LIBRAW_WARN_NO_METADATA() {
        return (int)8L;
    }
    public static int LIBRAW_WARN_NO_JPEGLIB() {
        return (int)16L;
    }
    public static int LIBRAW_WARN_NO_EMBEDDED_PROFILE() {
        return (int)32L;
    }
    public static int LIBRAW_WARN_NO_INPUT_PROFILE() {
        return (int)64L;
    }
    public static int LIBRAW_WARN_BAD_OUTPUT_PROFILE() {
        return (int)128L;
    }
    public static int LIBRAW_WARN_NO_BADPIXELMAP() {
        return (int)256L;
    }
    public static int LIBRAW_WARN_BAD_DARKFRAME_FILE() {
        return (int)512L;
    }
    public static int LIBRAW_WARN_BAD_DARKFRAME_DIM() {
        return (int)1024L;
    }
    public static int LIBRAW_WARN_RAWSPEED_PROBLEM() {
        return (int)4096L;
    }
    public static int LIBRAW_WARN_RAWSPEED_UNSUPPORTED() {
        return (int)8192L;
    }
    public static int LIBRAW_WARN_RAWSPEED_PROCESSED() {
        return (int)16384L;
    }
    public static int LIBRAW_WARN_FALLBACK_TO_AHD() {
        return (int)32768L;
    }
    public static int LIBRAW_WARN_PARSEFUJI_PROCESSED() {
        return (int)65536L;
    }
    public static int LIBRAW_WARN_DNGSDK_PROCESSED() {
        return (int)131072L;
    }
    public static int LIBRAW_WARN_DNG_IMAGES_REORDERED() {
        return (int)262144L;
    }
    public static int LIBRAW_WARN_DNG_STAGE2_APPLIED() {
        return (int)524288L;
    }
    public static int LIBRAW_WARN_DNG_STAGE3_APPLIED() {
        return (int)1048576L;
    }
    public static int LIBRAW_EXCEPTION_NONE() {
        return (int)0L;
    }
    public static int LIBRAW_EXCEPTION_ALLOC() {
        return (int)1L;
    }
    public static int LIBRAW_EXCEPTION_DECODE_RAW() {
        return (int)2L;
    }
    public static int LIBRAW_EXCEPTION_DECODE_JPEG() {
        return (int)3L;
    }
    public static int LIBRAW_EXCEPTION_IO_EOF() {
        return (int)4L;
    }
    public static int LIBRAW_EXCEPTION_IO_CORRUPT() {
        return (int)5L;
    }
    public static int LIBRAW_EXCEPTION_CANCELLED_BY_CALLBACK() {
        return (int)6L;
    }
    public static int LIBRAW_EXCEPTION_BAD_CROP() {
        return (int)7L;
    }
    public static int LIBRAW_EXCEPTION_IO_BADFILE() {
        return (int)8L;
    }
    public static int LIBRAW_EXCEPTION_DECODE_JPEG2000() {
        return (int)9L;
    }
    public static int LIBRAW_EXCEPTION_TOOBIG() {
        return (int)10L;
    }
    public static int LIBRAW_EXCEPTION_MEMPOOL() {
        return (int)11L;
    }
    public static int LIBRAW_PROGRESS_START() {
        return (int)0L;
    }
    public static int LIBRAW_PROGRESS_OPEN() {
        return (int)1L;
    }
    public static int LIBRAW_PROGRESS_IDENTIFY() {
        return (int)2L;
    }
    public static int LIBRAW_PROGRESS_SIZE_ADJUST() {
        return (int)4L;
    }
    public static int LIBRAW_PROGRESS_LOAD_RAW() {
        return (int)8L;
    }
    public static int LIBRAW_PROGRESS_RAW2_IMAGE() {
        return (int)16L;
    }
    public static int LIBRAW_PROGRESS_REMOVE_ZEROES() {
        return (int)32L;
    }
    public static int LIBRAW_PROGRESS_BAD_PIXELS() {
        return (int)64L;
    }
    public static int LIBRAW_PROGRESS_DARK_FRAME() {
        return (int)128L;
    }
    public static int LIBRAW_PROGRESS_FOVEON_INTERPOLATE() {
        return (int)256L;
    }
    public static int LIBRAW_PROGRESS_SCALE_COLORS() {
        return (int)512L;
    }
    public static int LIBRAW_PROGRESS_PRE_INTERPOLATE() {
        return (int)1024L;
    }
    public static int LIBRAW_PROGRESS_INTERPOLATE() {
        return (int)2048L;
    }
    public static int LIBRAW_PROGRESS_MIX_GREEN() {
        return (int)4096L;
    }
    public static int LIBRAW_PROGRESS_MEDIAN_FILTER() {
        return (int)8192L;
    }
    public static int LIBRAW_PROGRESS_HIGHLIGHTS() {
        return (int)16384L;
    }
    public static int LIBRAW_PROGRESS_FUJI_ROTATE() {
        return (int)32768L;
    }
    public static int LIBRAW_PROGRESS_FLIP() {
        return (int)65536L;
    }
    public static int LIBRAW_PROGRESS_APPLY_PROFILE() {
        return (int)131072L;
    }
    public static int LIBRAW_PROGRESS_CONVERT_RGB() {
        return (int)262144L;
    }
    public static int LIBRAW_PROGRESS_STRETCH() {
        return (int)524288L;
    }
    public static int LIBRAW_PROGRESS_STAGE20() {
        return (int)1048576L;
    }
    public static int LIBRAW_PROGRESS_STAGE21() {
        return (int)2097152L;
    }
    public static int LIBRAW_PROGRESS_STAGE22() {
        return (int)4194304L;
    }
    public static int LIBRAW_PROGRESS_STAGE23() {
        return (int)8388608L;
    }
    public static int LIBRAW_PROGRESS_STAGE24() {
        return (int)16777216L;
    }
    public static int LIBRAW_PROGRESS_STAGE25() {
        return (int)33554432L;
    }
    public static int LIBRAW_PROGRESS_STAGE26() {
        return (int)67108864L;
    }
    public static int LIBRAW_PROGRESS_STAGE27() {
        return (int)134217728L;
    }
    public static int LIBRAW_PROGRESS_THUMB_LOAD() {
        return (int)268435456L;
    }
    public static int LIBRAW_PROGRESS_TRESERVED1() {
        return (int)536870912L;
    }
    public static int LIBRAW_PROGRESS_TRESERVED2() {
        return (int)1073741824L;
    }
    public static int LIBRAW_SUCCESS() {
        return (int)0L;
    }
    public static int LIBRAW_UNSPECIFIED_ERROR() {
        return (int)-1L;
    }
    public static int LIBRAW_FILE_UNSUPPORTED() {
        return (int)-2L;
    }
    public static int LIBRAW_REQUEST_FOR_NONEXISTENT_IMAGE() {
        return (int)-3L;
    }
    public static int LIBRAW_OUT_OF_ORDER_CALL() {
        return (int)-4L;
    }
    public static int LIBRAW_NO_THUMBNAIL() {
        return (int)-5L;
    }
    public static int LIBRAW_UNSUPPORTED_THUMBNAIL() {
        return (int)-6L;
    }
    public static int LIBRAW_INPUT_CLOSED() {
        return (int)-7L;
    }
    public static int LIBRAW_NOT_IMPLEMENTED() {
        return (int)-8L;
    }
    public static int LIBRAW_UNSUFFICIENT_MEMORY() {
        return (int)-100007L;
    }
    public static int LIBRAW_DATA_ERROR() {
        return (int)-100008L;
    }
    public static int LIBRAW_IO_ERROR() {
        return (int)-100009L;
    }
    public static int LIBRAW_CANCELLED_BY_CALLBACK() {
        return (int)-100010L;
    }
    public static int LIBRAW_BAD_CROP() {
        return (int)-100011L;
    }
    public static int LIBRAW_TOO_BIG() {
        return (int)-100012L;
    }
    public static int LIBRAW_MEMPOOL_OVERFLOW() {
        return (int)-100013L;
    }
    public static int LIBRAW_THUMBNAIL_UNKNOWN() {
        return (int)0L;
    }
    public static int LIBRAW_THUMBNAIL_JPEG() {
        return (int)1L;
    }
    public static int LIBRAW_THUMBNAIL_BITMAP() {
        return (int)2L;
    }
    public static int LIBRAW_THUMBNAIL_BITMAP16() {
        return (int)3L;
    }
    public static int LIBRAW_THUMBNAIL_LAYER() {
        return (int)4L;
    }
    public static int LIBRAW_THUMBNAIL_ROLLEI() {
        return (int)5L;
    }
    public static int LIBRAW_THUMBNAIL_H265() {
        return (int)6L;
    }
    public static int LIBRAW_IMAGE_JPEG() {
        return (int)1L;
    }
    public static int LIBRAW_IMAGE_BITMAP() {
        return (int)2L;
    }
    public static OfLong INT64 = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle default_memory_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$0.default_memory_callback$MH,"default_memory_callback");
    }
    public static void default_memory_callback ( Addressable data,  Addressable file,  Addressable where) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.default_memory_callback$MH, "default_memory_callback");
        try {
            mh$.invokeExact(data, file, where);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle default_data_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$1.default_data_callback$MH,"default_data_callback");
    }
    public static void default_data_callback ( Addressable data,  Addressable file,  int offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.default_data_callback$MH, "default_data_callback");
        try {
            mh$.invokeExact(data, file, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$2.libraw_strerror$MH,"libraw_strerror");
    }
    public static MemoryAddress libraw_strerror ( int errorcode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.libraw_strerror$MH, "libraw_strerror");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(errorcode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_strprogress$MH() {
        return RuntimeHelper.requireNonNull(constants$2.libraw_strprogress$MH,"libraw_strprogress");
    }
    public static MemoryAddress libraw_strprogress ( int x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.libraw_strprogress$MH, "libraw_strprogress");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_init$MH() {
        return RuntimeHelper.requireNonNull(constants$3.libraw_init$MH,"libraw_init");
    }
    public static MemoryAddress libraw_init ( int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.libraw_init$MH, "libraw_init");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_open_file$MH() {
        return RuntimeHelper.requireNonNull(constants$3.libraw_open_file$MH,"libraw_open_file");
    }
    public static int libraw_open_file ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.libraw_open_file$MH, "libraw_open_file");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_open_buffer$MH() {
        return RuntimeHelper.requireNonNull(constants$3.libraw_open_buffer$MH,"libraw_open_buffer");
    }
    public static int libraw_open_buffer ( Addressable x0,  Addressable buffer,  long size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.libraw_open_buffer$MH, "libraw_open_buffer");
        try {
            return (int)mh$.invokeExact(x0, buffer, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_open_bayer$MH() {
        return RuntimeHelper.requireNonNull(constants$3.libraw_open_bayer$MH,"libraw_open_bayer");
    }
    public static int libraw_open_bayer ( Addressable lr,  Addressable data,  int datalen,  short _raw_width,  short _raw_height,  short _left_margin,  short _top_margin,  short _right_margin,  short _bottom_margin,  byte procflags,  byte bayer_battern,  int unused_bits,  int otherflags,  int black_level) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.libraw_open_bayer$MH, "libraw_open_bayer");
        try {
            return (int)mh$.invokeExact(lr, data, datalen, _raw_width, _raw_height, _left_margin, _top_margin, _right_margin, _bottom_margin, procflags, bayer_battern, unused_bits, otherflags, black_level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_unpack$MH() {
        return RuntimeHelper.requireNonNull(constants$3.libraw_unpack$MH,"libraw_unpack");
    }
    public static int libraw_unpack ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.libraw_unpack$MH, "libraw_unpack");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_unpack_thumb$MH() {
        return RuntimeHelper.requireNonNull(constants$3.libraw_unpack_thumb$MH,"libraw_unpack_thumb");
    }
    public static int libraw_unpack_thumb ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.libraw_unpack_thumb$MH, "libraw_unpack_thumb");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_recycle_datastream$MH() {
        return RuntimeHelper.requireNonNull(constants$4.libraw_recycle_datastream$MH,"libraw_recycle_datastream");
    }
    public static void libraw_recycle_datastream ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.libraw_recycle_datastream$MH, "libraw_recycle_datastream");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_recycle$MH() {
        return RuntimeHelper.requireNonNull(constants$4.libraw_recycle$MH,"libraw_recycle");
    }
    public static void libraw_recycle ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.libraw_recycle$MH, "libraw_recycle");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_close$MH() {
        return RuntimeHelper.requireNonNull(constants$4.libraw_close$MH,"libraw_close");
    }
    public static void libraw_close ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.libraw_close$MH, "libraw_close");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_subtract_black$MH() {
        return RuntimeHelper.requireNonNull(constants$4.libraw_subtract_black$MH,"libraw_subtract_black");
    }
    public static void libraw_subtract_black ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.libraw_subtract_black$MH, "libraw_subtract_black");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_raw2image$MH() {
        return RuntimeHelper.requireNonNull(constants$4.libraw_raw2image$MH,"libraw_raw2image");
    }
    public static int libraw_raw2image ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.libraw_raw2image$MH, "libraw_raw2image");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_free_image$MH() {
        return RuntimeHelper.requireNonNull(constants$4.libraw_free_image$MH,"libraw_free_image");
    }
    public static void libraw_free_image ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.libraw_free_image$MH, "libraw_free_image");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_version$MH() {
        return RuntimeHelper.requireNonNull(constants$5.libraw_version$MH,"libraw_version");
    }
    public static MemoryAddress libraw_version (Object... x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.libraw_version$MH, "libraw_version");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_versionNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$5.libraw_versionNumber$MH,"libraw_versionNumber");
    }
    public static int libraw_versionNumber (Object... x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.libraw_versionNumber$MH, "libraw_versionNumber");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_cameraList$MH() {
        return RuntimeHelper.requireNonNull(constants$5.libraw_cameraList$MH,"libraw_cameraList");
    }
    public static MemoryAddress libraw_cameraList (Object... x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.libraw_cameraList$MH, "libraw_cameraList");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_cameraCount$MH() {
        return RuntimeHelper.requireNonNull(constants$5.libraw_cameraCount$MH,"libraw_cameraCount");
    }
    public static int libraw_cameraCount (Object... x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.libraw_cameraCount$MH, "libraw_cameraCount");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_set_memerror_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$5.libraw_set_memerror_handler$MH,"libraw_set_memerror_handler");
    }
    public static void libraw_set_memerror_handler ( Addressable x0,  Addressable cb,  Addressable datap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.libraw_set_memerror_handler$MH, "libraw_set_memerror_handler");
        try {
            mh$.invokeExact(x0, cb, datap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_set_exifparser_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$5.libraw_set_exifparser_handler$MH,"libraw_set_exifparser_handler");
    }
    public static void libraw_set_exifparser_handler ( Addressable x0,  Addressable cb,  Addressable datap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.libraw_set_exifparser_handler$MH, "libraw_set_exifparser_handler");
        try {
            mh$.invokeExact(x0, cb, datap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_set_dataerror_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$6.libraw_set_dataerror_handler$MH,"libraw_set_dataerror_handler");
    }
    public static void libraw_set_dataerror_handler ( Addressable x0,  Addressable func,  Addressable datap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.libraw_set_dataerror_handler$MH, "libraw_set_dataerror_handler");
        try {
            mh$.invokeExact(x0, func, datap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_set_progress_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$6.libraw_set_progress_handler$MH,"libraw_set_progress_handler");
    }
    public static void libraw_set_progress_handler ( Addressable x0,  Addressable cb,  Addressable datap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.libraw_set_progress_handler$MH, "libraw_set_progress_handler");
        try {
            mh$.invokeExact(x0, cb, datap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_unpack_function_name$MH() {
        return RuntimeHelper.requireNonNull(constants$6.libraw_unpack_function_name$MH,"libraw_unpack_function_name");
    }
    public static MemoryAddress libraw_unpack_function_name ( Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.libraw_unpack_function_name$MH, "libraw_unpack_function_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_get_decoder_info$MH() {
        return RuntimeHelper.requireNonNull(constants$6.libraw_get_decoder_info$MH,"libraw_get_decoder_info");
    }
    public static int libraw_get_decoder_info ( Addressable lr,  Addressable d) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.libraw_get_decoder_info$MH, "libraw_get_decoder_info");
        try {
            return (int)mh$.invokeExact(lr, d);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_COLOR$MH() {
        return RuntimeHelper.requireNonNull(constants$6.libraw_COLOR$MH,"libraw_COLOR");
    }
    public static int libraw_COLOR ( Addressable x0,  int row,  int col) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.libraw_COLOR$MH, "libraw_COLOR");
        try {
            return (int)mh$.invokeExact(x0, row, col);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_capabilities$MH() {
        return RuntimeHelper.requireNonNull(constants$6.libraw_capabilities$MH,"libraw_capabilities");
    }
    public static int libraw_capabilities (Object... x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.libraw_capabilities$MH, "libraw_capabilities");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_adjust_sizes_info_only$MH() {
        return RuntimeHelper.requireNonNull(constants$7.libraw_adjust_sizes_info_only$MH,"libraw_adjust_sizes_info_only");
    }
    public static int libraw_adjust_sizes_info_only ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.libraw_adjust_sizes_info_only$MH, "libraw_adjust_sizes_info_only");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_dcraw_ppm_tiff_writer$MH() {
        return RuntimeHelper.requireNonNull(constants$7.libraw_dcraw_ppm_tiff_writer$MH,"libraw_dcraw_ppm_tiff_writer");
    }
    public static int libraw_dcraw_ppm_tiff_writer ( Addressable lr,  Addressable filename) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.libraw_dcraw_ppm_tiff_writer$MH, "libraw_dcraw_ppm_tiff_writer");
        try {
            return (int)mh$.invokeExact(lr, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_dcraw_thumb_writer$MH() {
        return RuntimeHelper.requireNonNull(constants$7.libraw_dcraw_thumb_writer$MH,"libraw_dcraw_thumb_writer");
    }
    public static int libraw_dcraw_thumb_writer ( Addressable lr,  Addressable fname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.libraw_dcraw_thumb_writer$MH, "libraw_dcraw_thumb_writer");
        try {
            return (int)mh$.invokeExact(lr, fname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_dcraw_process$MH() {
        return RuntimeHelper.requireNonNull(constants$7.libraw_dcraw_process$MH,"libraw_dcraw_process");
    }
    public static int libraw_dcraw_process ( Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.libraw_dcraw_process$MH, "libraw_dcraw_process");
        try {
            return (int)mh$.invokeExact(lr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_dcraw_make_mem_image$MH() {
        return RuntimeHelper.requireNonNull(constants$7.libraw_dcraw_make_mem_image$MH,"libraw_dcraw_make_mem_image");
    }
    public static MemoryAddress libraw_dcraw_make_mem_image ( Addressable lr,  Addressable errc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.libraw_dcraw_make_mem_image$MH, "libraw_dcraw_make_mem_image");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lr, errc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_dcraw_make_mem_thumb$MH() {
        return RuntimeHelper.requireNonNull(constants$7.libraw_dcraw_make_mem_thumb$MH,"libraw_dcraw_make_mem_thumb");
    }
    public static MemoryAddress libraw_dcraw_make_mem_thumb ( Addressable lr,  Addressable errc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.libraw_dcraw_make_mem_thumb$MH, "libraw_dcraw_make_mem_thumb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lr, errc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_dcraw_clear_mem$MH() {
        return RuntimeHelper.requireNonNull(constants$8.libraw_dcraw_clear_mem$MH,"libraw_dcraw_clear_mem");
    }
    public static void libraw_dcraw_clear_mem ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.libraw_dcraw_clear_mem$MH, "libraw_dcraw_clear_mem");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_set_demosaic$MH() {
        return RuntimeHelper.requireNonNull(constants$8.libraw_set_demosaic$MH,"libraw_set_demosaic");
    }
    public static void libraw_set_demosaic ( Addressable lr,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.libraw_set_demosaic$MH, "libraw_set_demosaic");
        try {
            mh$.invokeExact(lr, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_set_output_color$MH() {
        return RuntimeHelper.requireNonNull(constants$8.libraw_set_output_color$MH,"libraw_set_output_color");
    }
    public static void libraw_set_output_color ( Addressable lr,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.libraw_set_output_color$MH, "libraw_set_output_color");
        try {
            mh$.invokeExact(lr, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_set_adjust_maximum_thr$MH() {
        return RuntimeHelper.requireNonNull(constants$8.libraw_set_adjust_maximum_thr$MH,"libraw_set_adjust_maximum_thr");
    }
    public static void libraw_set_adjust_maximum_thr ( Addressable lr,  float value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.libraw_set_adjust_maximum_thr$MH, "libraw_set_adjust_maximum_thr");
        try {
            mh$.invokeExact(lr, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_set_user_mul$MH() {
        return RuntimeHelper.requireNonNull(constants$8.libraw_set_user_mul$MH,"libraw_set_user_mul");
    }
    public static void libraw_set_user_mul ( Addressable lr,  int index,  float val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.libraw_set_user_mul$MH, "libraw_set_user_mul");
        try {
            mh$.invokeExact(lr, index, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_set_output_bps$MH() {
        return RuntimeHelper.requireNonNull(constants$8.libraw_set_output_bps$MH,"libraw_set_output_bps");
    }
    public static void libraw_set_output_bps ( Addressable lr,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.libraw_set_output_bps$MH, "libraw_set_output_bps");
        try {
            mh$.invokeExact(lr, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_set_gamma$MH() {
        return RuntimeHelper.requireNonNull(constants$9.libraw_set_gamma$MH,"libraw_set_gamma");
    }
    public static void libraw_set_gamma ( Addressable lr,  int index,  float value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.libraw_set_gamma$MH, "libraw_set_gamma");
        try {
            mh$.invokeExact(lr, index, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_set_no_auto_bright$MH() {
        return RuntimeHelper.requireNonNull(constants$9.libraw_set_no_auto_bright$MH,"libraw_set_no_auto_bright");
    }
    public static void libraw_set_no_auto_bright ( Addressable lr,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.libraw_set_no_auto_bright$MH, "libraw_set_no_auto_bright");
        try {
            mh$.invokeExact(lr, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_set_bright$MH() {
        return RuntimeHelper.requireNonNull(constants$9.libraw_set_bright$MH,"libraw_set_bright");
    }
    public static void libraw_set_bright ( Addressable lr,  float value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.libraw_set_bright$MH, "libraw_set_bright");
        try {
            mh$.invokeExact(lr, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_set_highlight$MH() {
        return RuntimeHelper.requireNonNull(constants$9.libraw_set_highlight$MH,"libraw_set_highlight");
    }
    public static void libraw_set_highlight ( Addressable lr,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.libraw_set_highlight$MH, "libraw_set_highlight");
        try {
            mh$.invokeExact(lr, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_set_fbdd_noiserd$MH() {
        return RuntimeHelper.requireNonNull(constants$9.libraw_set_fbdd_noiserd$MH,"libraw_set_fbdd_noiserd");
    }
    public static void libraw_set_fbdd_noiserd ( Addressable lr,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.libraw_set_fbdd_noiserd$MH, "libraw_set_fbdd_noiserd");
        try {
            mh$.invokeExact(lr, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_get_raw_height$MH() {
        return RuntimeHelper.requireNonNull(constants$9.libraw_get_raw_height$MH,"libraw_get_raw_height");
    }
    public static int libraw_get_raw_height ( Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.libraw_get_raw_height$MH, "libraw_get_raw_height");
        try {
            return (int)mh$.invokeExact(lr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_get_raw_width$MH() {
        return RuntimeHelper.requireNonNull(constants$10.libraw_get_raw_width$MH,"libraw_get_raw_width");
    }
    public static int libraw_get_raw_width ( Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.libraw_get_raw_width$MH, "libraw_get_raw_width");
        try {
            return (int)mh$.invokeExact(lr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_get_iheight$MH() {
        return RuntimeHelper.requireNonNull(constants$10.libraw_get_iheight$MH,"libraw_get_iheight");
    }
    public static int libraw_get_iheight ( Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.libraw_get_iheight$MH, "libraw_get_iheight");
        try {
            return (int)mh$.invokeExact(lr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_get_iwidth$MH() {
        return RuntimeHelper.requireNonNull(constants$10.libraw_get_iwidth$MH,"libraw_get_iwidth");
    }
    public static int libraw_get_iwidth ( Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.libraw_get_iwidth$MH, "libraw_get_iwidth");
        try {
            return (int)mh$.invokeExact(lr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_get_cam_mul$MH() {
        return RuntimeHelper.requireNonNull(constants$10.libraw_get_cam_mul$MH,"libraw_get_cam_mul");
    }
    public static float libraw_get_cam_mul ( Addressable lr,  int index) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.libraw_get_cam_mul$MH, "libraw_get_cam_mul");
        try {
            return (float)mh$.invokeExact(lr, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_get_pre_mul$MH() {
        return RuntimeHelper.requireNonNull(constants$10.libraw_get_pre_mul$MH,"libraw_get_pre_mul");
    }
    public static float libraw_get_pre_mul ( Addressable lr,  int index) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.libraw_get_pre_mul$MH, "libraw_get_pre_mul");
        try {
            return (float)mh$.invokeExact(lr, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_get_rgb_cam$MH() {
        return RuntimeHelper.requireNonNull(constants$10.libraw_get_rgb_cam$MH,"libraw_get_rgb_cam");
    }
    public static float libraw_get_rgb_cam ( Addressable lr,  int index1,  int index2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.libraw_get_rgb_cam$MH, "libraw_get_rgb_cam");
        try {
            return (float)mh$.invokeExact(lr, index1, index2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_get_color_maximum$MH() {
        return RuntimeHelper.requireNonNull(constants$11.libraw_get_color_maximum$MH,"libraw_get_color_maximum");
    }
    public static int libraw_get_color_maximum ( Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.libraw_get_color_maximum$MH, "libraw_get_color_maximum");
        try {
            return (int)mh$.invokeExact(lr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_set_output_tif$MH() {
        return RuntimeHelper.requireNonNull(constants$11.libraw_set_output_tif$MH,"libraw_set_output_tif");
    }
    public static void libraw_set_output_tif ( Addressable lr,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.libraw_set_output_tif$MH, "libraw_set_output_tif");
        try {
            mh$.invokeExact(lr, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_get_iparams$MH() {
        return RuntimeHelper.requireNonNull(constants$11.libraw_get_iparams$MH,"libraw_get_iparams");
    }
    public static MemoryAddress libraw_get_iparams ( Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.libraw_get_iparams$MH, "libraw_get_iparams");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_get_lensinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$11.libraw_get_lensinfo$MH,"libraw_get_lensinfo");
    }
    public static MemoryAddress libraw_get_lensinfo ( Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.libraw_get_lensinfo$MH, "libraw_get_lensinfo");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle libraw_get_imgother$MH() {
        return RuntimeHelper.requireNonNull(constants$11.libraw_get_imgother$MH,"libraw_get_imgother");
    }
    public static MemoryAddress libraw_get_imgother ( Addressable lr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.libraw_get_imgother$MH, "libraw_get_imgother");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static double LIBRAW_DEFAULT_ADJUST_MAXIMUM_THRESHOLD() {
        return 0.75d;
    }
    public static double LIBRAW_DEFAULT_AUTO_BRIGHTNESS_THRESHOLD() {
        return 0.01d;
    }
    public static long LIBRAW_MAX_ALLOC_MB_DEFAULT() {
        return 2048L;
    }
    public static long LIBRAW_MAX_NONDNG_RAW_FILE_SIZE() {
        return 2147483647L;
    }
    public static long LIBRAW_MAX_DNG_RAW_FILE_SIZE() {
        return 2147483647L;
    }
    public static long LIBRAW_MAX_THUMBNAIL_MB() {
        return 512L;
    }
    public static int LIBRAW_EXIFTOOLTAGTYPE_int8u() {
        return (int)1L;
    }
    public static int LIBRAW_EXIFTOOLTAGTYPE_string() {
        return (int)2L;
    }
    public static int LIBRAW_EXIFTOOLTAGTYPE_int16u() {
        return (int)3L;
    }
    public static int LIBRAW_EXIFTOOLTAGTYPE_int32u() {
        return (int)4L;
    }
    public static int LIBRAW_EXIFTOOLTAGTYPE_rational64u() {
        return (int)5L;
    }
    public static int LIBRAW_EXIFTOOLTAGTYPE_int8s() {
        return (int)6L;
    }
    public static int LIBRAW_EXIFTOOLTAGTYPE_undef() {
        return (int)7L;
    }
    public static int LIBRAW_EXIFTOOLTAGTYPE_binary() {
        return (int)7L;
    }
    public static int LIBRAW_EXIFTOOLTAGTYPE_int16s() {
        return (int)8L;
    }
    public static int LIBRAW_EXIFTOOLTAGTYPE_int32s() {
        return (int)9L;
    }
    public static int LIBRAW_EXIFTOOLTAGTYPE_rational64s() {
        return (int)10L;
    }
    public static int LIBRAW_EXIFTOOLTAGTYPE_float() {
        return (int)11L;
    }
    public static int LIBRAW_EXIFTOOLTAGTYPE_double() {
        return (int)12L;
    }
    public static int LIBRAW_EXIFTOOLTAGTYPE_ifd() {
        return (int)13L;
    }
    public static int LIBRAW_EXIFTOOLTAGTYPE_unicode() {
        return (int)14L;
    }
    public static int LIBRAW_EXIFTOOLTAGTYPE_complex() {
        return (int)15L;
    }
    public static int LIBRAW_EXIFTOOLTAGTYPE_int64u() {
        return (int)16L;
    }
    public static int LIBRAW_EXIFTOOLTAGTYPE_int64s() {
        return (int)17L;
    }
    public static int LIBRAW_EXIFTOOLTAGTYPE_ifd64() {
        return (int)18L;
    }
    public static long LIBRAW_LENS_NOT_SET() {
        return -1L;
    }
    public static MemorySegment LIBRAW_VERSION_STR() {
        return constants$11.LIBRAW_VERSION_STR$SEGMENT;
    }
    public static int LIBRAW_VERSION() {
        return (int)5376L;
    }
}


