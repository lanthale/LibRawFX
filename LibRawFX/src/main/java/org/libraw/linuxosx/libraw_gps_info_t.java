// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_gps_info_t {
 *     float latitude[3];
 *     float longitude[3];
 *     float gpstimestamp[3];
 *     float altitude;
 *     char altref;
 *     char latref;
 *     char longref;
 *     char gpsstatus;
 *     char gpsparsed;
 * };
 * }
 */
public class libraw_gps_info_t {

    public static MemoryLayout $LAYOUT() {
        return constants$62.const$2;
    }
    public static MemorySegment latitude$slice(MemorySegment seg) {
        return seg.asSlice(0, 12);
    }
    public static MemorySegment longitude$slice(MemorySegment seg) {
        return seg.asSlice(12, 12);
    }
    public static MemorySegment gpstimestamp$slice(MemorySegment seg) {
        return seg.asSlice(24, 12);
    }
    public static VarHandle altitude$VH() {
        return constants$62.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float altitude;
     * }
     */
    public static float altitude$get(MemorySegment seg) {
        return (float)constants$62.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float altitude;
     * }
     */
    public static void altitude$set(MemorySegment seg, float x) {
        constants$62.const$3.set(seg, x);
    }
    public static float altitude$get(MemorySegment seg, long index) {
        return (float)constants$62.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void altitude$set(MemorySegment seg, long index, float x) {
        constants$62.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle altref$VH() {
        return constants$62.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char altref;
     * }
     */
    public static byte altref$get(MemorySegment seg) {
        return (byte)constants$62.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char altref;
     * }
     */
    public static void altref$set(MemorySegment seg, byte x) {
        constants$62.const$4.set(seg, x);
    }
    public static byte altref$get(MemorySegment seg, long index) {
        return (byte)constants$62.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void altref$set(MemorySegment seg, long index, byte x) {
        constants$62.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle latref$VH() {
        return constants$62.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char latref;
     * }
     */
    public static byte latref$get(MemorySegment seg) {
        return (byte)constants$62.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char latref;
     * }
     */
    public static void latref$set(MemorySegment seg, byte x) {
        constants$62.const$5.set(seg, x);
    }
    public static byte latref$get(MemorySegment seg, long index) {
        return (byte)constants$62.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void latref$set(MemorySegment seg, long index, byte x) {
        constants$62.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle longref$VH() {
        return constants$63.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char longref;
     * }
     */
    public static byte longref$get(MemorySegment seg) {
        return (byte)constants$63.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char longref;
     * }
     */
    public static void longref$set(MemorySegment seg, byte x) {
        constants$63.const$0.set(seg, x);
    }
    public static byte longref$get(MemorySegment seg, long index) {
        return (byte)constants$63.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void longref$set(MemorySegment seg, long index, byte x) {
        constants$63.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle gpsstatus$VH() {
        return constants$63.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char gpsstatus;
     * }
     */
    public static byte gpsstatus$get(MemorySegment seg) {
        return (byte)constants$63.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char gpsstatus;
     * }
     */
    public static void gpsstatus$set(MemorySegment seg, byte x) {
        constants$63.const$1.set(seg, x);
    }
    public static byte gpsstatus$get(MemorySegment seg, long index) {
        return (byte)constants$63.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void gpsstatus$set(MemorySegment seg, long index, byte x) {
        constants$63.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle gpsparsed$VH() {
        return constants$63.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char gpsparsed;
     * }
     */
    public static byte gpsparsed$get(MemorySegment seg) {
        return (byte)constants$63.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char gpsparsed;
     * }
     */
    public static void gpsparsed$set(MemorySegment seg, byte x) {
        constants$63.const$2.set(seg, x);
    }
    public static byte gpsparsed$get(MemorySegment seg, long index) {
        return (byte)constants$63.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void gpsparsed$set(MemorySegment seg, long index, byte x) {
        constants$63.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


