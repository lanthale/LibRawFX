// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class libraw_gps_info_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(3, Constants$root.C_FLOAT$LAYOUT).withName("latitude"),
        MemoryLayout.sequenceLayout(3, Constants$root.C_FLOAT$LAYOUT).withName("longitude"),
        MemoryLayout.sequenceLayout(3, Constants$root.C_FLOAT$LAYOUT).withName("gpstimestamp"),
        Constants$root.C_FLOAT$LAYOUT.withName("altitude"),
        Constants$root.C_CHAR$LAYOUT.withName("altref"),
        Constants$root.C_CHAR$LAYOUT.withName("latref"),
        Constants$root.C_CHAR$LAYOUT.withName("longref"),
        Constants$root.C_CHAR$LAYOUT.withName("gpsstatus"),
        Constants$root.C_CHAR$LAYOUT.withName("gpsparsed"),
        MemoryLayout.paddingLayout(24)
    );
    public static MemoryLayout $LAYOUT() {
        return libraw_gps_info_t.$struct$LAYOUT;
    }
    public static MemorySegment latitude$slice(MemorySegment seg) {
        return seg.asSlice(0, 12);
    }
    public static MemorySegment longitude$slice(MemorySegment seg) {
        return seg.asSlice(12, 12);
    }
    public static MemorySegment gpstimestamp$slice(MemorySegment seg) {
        return seg.asSlice(24, 12);
    }
    static final VarHandle altitude$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("altitude"));
    public static VarHandle altitude$VH() {
        return libraw_gps_info_t.altitude$VH;
    }
    public static float altitude$get(MemorySegment seg) {
        return (float)libraw_gps_info_t.altitude$VH.get(seg);
    }
    public static void altitude$set( MemorySegment seg, float x) {
        libraw_gps_info_t.altitude$VH.set(seg, x);
    }
    public static float altitude$get(MemorySegment seg, long index) {
        return (float)libraw_gps_info_t.altitude$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void altitude$set(MemorySegment seg, long index, float x) {
        libraw_gps_info_t.altitude$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle altref$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("altref"));
    public static VarHandle altref$VH() {
        return libraw_gps_info_t.altref$VH;
    }
    public static byte altref$get(MemorySegment seg) {
        return (byte)libraw_gps_info_t.altref$VH.get(seg);
    }
    public static void altref$set( MemorySegment seg, byte x) {
        libraw_gps_info_t.altref$VH.set(seg, x);
    }
    public static byte altref$get(MemorySegment seg, long index) {
        return (byte)libraw_gps_info_t.altref$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void altref$set(MemorySegment seg, long index, byte x) {
        libraw_gps_info_t.altref$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle latref$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("latref"));
    public static VarHandle latref$VH() {
        return libraw_gps_info_t.latref$VH;
    }
    public static byte latref$get(MemorySegment seg) {
        return (byte)libraw_gps_info_t.latref$VH.get(seg);
    }
    public static void latref$set( MemorySegment seg, byte x) {
        libraw_gps_info_t.latref$VH.set(seg, x);
    }
    public static byte latref$get(MemorySegment seg, long index) {
        return (byte)libraw_gps_info_t.latref$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void latref$set(MemorySegment seg, long index, byte x) {
        libraw_gps_info_t.latref$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle longref$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("longref"));
    public static VarHandle longref$VH() {
        return libraw_gps_info_t.longref$VH;
    }
    public static byte longref$get(MemorySegment seg) {
        return (byte)libraw_gps_info_t.longref$VH.get(seg);
    }
    public static void longref$set( MemorySegment seg, byte x) {
        libraw_gps_info_t.longref$VH.set(seg, x);
    }
    public static byte longref$get(MemorySegment seg, long index) {
        return (byte)libraw_gps_info_t.longref$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void longref$set(MemorySegment seg, long index, byte x) {
        libraw_gps_info_t.longref$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle gpsstatus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("gpsstatus"));
    public static VarHandle gpsstatus$VH() {
        return libraw_gps_info_t.gpsstatus$VH;
    }
    public static byte gpsstatus$get(MemorySegment seg) {
        return (byte)libraw_gps_info_t.gpsstatus$VH.get(seg);
    }
    public static void gpsstatus$set( MemorySegment seg, byte x) {
        libraw_gps_info_t.gpsstatus$VH.set(seg, x);
    }
    public static byte gpsstatus$get(MemorySegment seg, long index) {
        return (byte)libraw_gps_info_t.gpsstatus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void gpsstatus$set(MemorySegment seg, long index, byte x) {
        libraw_gps_info_t.gpsstatus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle gpsparsed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("gpsparsed"));
    public static VarHandle gpsparsed$VH() {
        return libraw_gps_info_t.gpsparsed$VH;
    }
    public static byte gpsparsed$get(MemorySegment seg) {
        return (byte)libraw_gps_info_t.gpsparsed$VH.get(seg);
    }
    public static void gpsparsed$set( MemorySegment seg, byte x) {
        libraw_gps_info_t.gpsparsed$VH.set(seg, x);
    }
    public static byte gpsparsed$get(MemorySegment seg, long index) {
        return (byte)libraw_gps_info_t.gpsparsed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void gpsparsed$set(MemorySegment seg, long index, byte x) {
        libraw_gps_info_t.gpsparsed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


