// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_samsung_makernotes_t {
 *     unsigned int ImageSizeFull[4];
 *     unsigned int ImageSizeCrop[4];
 *     int ColorSpace[2];
 *     unsigned int key[11];
 *     double DigitalGain;
 *     int DeviceType;
 *     char LensFirmware[32];
 * };
 * }
 */
public class libraw_samsung_makernotes_t {

    public static MemoryLayout $LAYOUT() {
        return constants$48.const$0;
    }
    public static MemorySegment ImageSizeFull$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment ImageSizeCrop$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static MemorySegment ColorSpace$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    public static MemorySegment key$slice(MemorySegment seg) {
        return seg.asSlice(40, 44);
    }
    public static VarHandle DigitalGain$VH() {
        return constants$48.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double DigitalGain;
     * }
     */
    public static double DigitalGain$get(MemorySegment seg) {
        return (double)constants$48.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double DigitalGain;
     * }
     */
    public static void DigitalGain$set(MemorySegment seg, double x) {
        constants$48.const$1.set(seg, x);
    }
    public static double DigitalGain$get(MemorySegment seg, long index) {
        return (double)constants$48.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void DigitalGain$set(MemorySegment seg, long index, double x) {
        constants$48.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DeviceType$VH() {
        return constants$48.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int DeviceType;
     * }
     */
    public static int DeviceType$get(MemorySegment seg) {
        return (int)constants$48.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int DeviceType;
     * }
     */
    public static void DeviceType$set(MemorySegment seg, int x) {
        constants$48.const$2.set(seg, x);
    }
    public static int DeviceType$get(MemorySegment seg, long index) {
        return (int)constants$48.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceType$set(MemorySegment seg, long index, int x) {
        constants$48.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment LensFirmware$slice(MemorySegment seg) {
        return seg.asSlice(100, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


