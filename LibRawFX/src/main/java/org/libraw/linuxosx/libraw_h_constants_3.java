// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.util.Objects;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class libraw_h_constants_3 extends libraw_h_constants_2 {

    /* package-private */ libraw_h_constants_3() {}
    static final MemoryLayout unpacker_data_t$fuji_block_width$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout unpacker_data_t$fuji_block_width$LAYOUT() { return unpacker_data_t$fuji_block_width$LAYOUT_; }

    static final VarHandle unpacker_data_t$fuji_block_width$VH_ = unpacker_data_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fuji_block_width"));
    static final java.lang.invoke.VarHandle unpacker_data_t$fuji_block_width$VH() { return unpacker_data_t$fuji_block_width$VH_; }

    static final MemoryLayout unpacker_data_t$fuji_bits$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout unpacker_data_t$fuji_bits$LAYOUT() { return unpacker_data_t$fuji_bits$LAYOUT_; }

    static final VarHandle unpacker_data_t$fuji_bits$VH_ = unpacker_data_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fuji_bits"));
    static final java.lang.invoke.VarHandle unpacker_data_t$fuji_bits$VH() { return unpacker_data_t$fuji_bits$VH_; }

    static final MemoryLayout unpacker_data_t$fuji_raw_type$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout unpacker_data_t$fuji_raw_type$LAYOUT() { return unpacker_data_t$fuji_raw_type$LAYOUT_; }

    static final VarHandle unpacker_data_t$fuji_raw_type$VH_ = unpacker_data_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fuji_raw_type"));
    static final java.lang.invoke.VarHandle unpacker_data_t$fuji_raw_type$VH() { return unpacker_data_t$fuji_raw_type$VH_; }

    static final MemoryLayout unpacker_data_t$pana_encoding$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout unpacker_data_t$pana_encoding$LAYOUT() { return unpacker_data_t$pana_encoding$LAYOUT_; }

    static final VarHandle unpacker_data_t$pana_encoding$VH_ = unpacker_data_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("pana_encoding"));
    static final java.lang.invoke.VarHandle unpacker_data_t$pana_encoding$VH() { return unpacker_data_t$pana_encoding$VH_; }

    static final MemoryLayout unpacker_data_t$pana_bpp$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout unpacker_data_t$pana_bpp$LAYOUT() { return unpacker_data_t$pana_bpp$LAYOUT_; }

    static final VarHandle unpacker_data_t$pana_bpp$VH_ = unpacker_data_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("pana_bpp"));
    static final java.lang.invoke.VarHandle unpacker_data_t$pana_bpp$VH() { return unpacker_data_t$pana_bpp$VH_; }

    static final MemoryLayout unpacker_data_t$crx_track_selected$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout unpacker_data_t$crx_track_selected$LAYOUT() { return unpacker_data_t$crx_track_selected$LAYOUT_; }

    static final VarHandle unpacker_data_t$crx_track_selected$VH_ = unpacker_data_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("crx_track_selected"));
    static final java.lang.invoke.VarHandle unpacker_data_t$crx_track_selected$VH() { return unpacker_data_t$crx_track_selected$VH_; }

    static final MemoryLayout unpacker_data_t$CR3_CTMDtag$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout unpacker_data_t$CR3_CTMDtag$LAYOUT() { return unpacker_data_t$CR3_CTMDtag$LAYOUT_; }

    static final VarHandle unpacker_data_t$CR3_CTMDtag$VH_ = unpacker_data_t$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("CR3_CTMDtag"));
    static final java.lang.invoke.VarHandle unpacker_data_t$CR3_CTMDtag$VH() { return unpacker_data_t$CR3_CTMDtag$VH_; }

    static final MemoryLayout unpacker_data_t$CR3_Version$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout unpacker_data_t$CR3_Version$LAYOUT() { return unpacker_data_t$CR3_Version$LAYOUT_; }

    static final VarHandle unpacker_data_t$CR3_Version$VH_ = unpacker_data_t$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("CR3_Version"));
    static final java.lang.invoke.VarHandle unpacker_data_t$CR3_Version$VH() { return unpacker_data_t$CR3_Version$VH_; }

    static final MemoryLayout unpacker_data_t$CM_found$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout unpacker_data_t$CM_found$LAYOUT() { return unpacker_data_t$CM_found$LAYOUT_; }

    static final VarHandle unpacker_data_t$CM_found$VH_ = unpacker_data_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CM_found"));
    static final java.lang.invoke.VarHandle unpacker_data_t$CM_found$VH() { return unpacker_data_t$CM_found$VH_; }

    static final MemoryLayout unpacker_data_t$is_NikonTransfer$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout unpacker_data_t$is_NikonTransfer$LAYOUT() { return unpacker_data_t$is_NikonTransfer$LAYOUT_; }

    static final VarHandle unpacker_data_t$is_NikonTransfer$VH_ = unpacker_data_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("is_NikonTransfer"));
    static final java.lang.invoke.VarHandle unpacker_data_t$is_NikonTransfer$VH() { return unpacker_data_t$is_NikonTransfer$VH_; }

    static final MemoryLayout unpacker_data_t$is_Sony$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout unpacker_data_t$is_Sony$LAYOUT() { return unpacker_data_t$is_Sony$LAYOUT_; }

    static final VarHandle unpacker_data_t$is_Sony$VH_ = unpacker_data_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("is_Sony"));
    static final java.lang.invoke.VarHandle unpacker_data_t$is_Sony$VH() { return unpacker_data_t$is_Sony$VH_; }

    static final MemoryLayout unpacker_data_t$is_pana_raw$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout unpacker_data_t$is_pana_raw$LAYOUT() { return unpacker_data_t$is_pana_raw$LAYOUT_; }

    static final VarHandle unpacker_data_t$is_pana_raw$VH_ = unpacker_data_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("is_pana_raw"));
    static final java.lang.invoke.VarHandle unpacker_data_t$is_pana_raw$VH() { return unpacker_data_t$is_pana_raw$VH_; }

    static final MemoryLayout unpacker_data_t$is_4K_RAFdata$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout unpacker_data_t$is_4K_RAFdata$LAYOUT() { return unpacker_data_t$is_4K_RAFdata$LAYOUT_; }

    static final VarHandle unpacker_data_t$is_4K_RAFdata$VH_ = unpacker_data_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("is_4K_RAFdata"));
    static final java.lang.invoke.VarHandle unpacker_data_t$is_4K_RAFdata$VH() { return unpacker_data_t$is_4K_RAFdata$VH_; }

    static final MemoryLayout unpacker_data_t$is_PentaxRicohMakernotes$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout unpacker_data_t$is_PentaxRicohMakernotes$LAYOUT() { return unpacker_data_t$is_PentaxRicohMakernotes$LAYOUT_; }

    static final VarHandle unpacker_data_t$is_PentaxRicohMakernotes$VH_ = unpacker_data_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("is_PentaxRicohMakernotes"));
    static final java.lang.invoke.VarHandle unpacker_data_t$is_PentaxRicohMakernotes$VH() { return unpacker_data_t$is_PentaxRicohMakernotes$VH_; }

    static final MemoryLayout unpacker_data_t$raw_stride$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout unpacker_data_t$raw_stride$LAYOUT() { return unpacker_data_t$raw_stride$LAYOUT_; }

    static final VarHandle unpacker_data_t$raw_stride$VH_ = unpacker_data_t$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("raw_stride"));
    static final java.lang.invoke.VarHandle unpacker_data_t$raw_stride$VH() { return unpacker_data_t$raw_stride$VH_; }

    static final MemoryLayout libraw_internal_data_t$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_POINTER.withName("input"),
            C_POINTER.withName("output"),
            C_INT.withName("input_internal"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("meta_data"),
            C_LONG_LONG.withName("profile_offset"),
            C_LONG_LONG.withName("toffset"),
            MemoryLayout.ofSequence(4, C_INT).withName("pana_black")
        ).withName("internal_data"),
        MemoryLayout.ofStruct(
            C_INT.withName("mix_green"),
            C_INT.withName("raw_color"),
            C_INT.withName("zero_is_bad"),
            C_SHORT.withName("shrink"),
            C_SHORT.withName("fuji_width")
        ).withName("internal_output_params"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("histogram"),
            C_POINTER.withName("oprof")
        ).withName("output_data"),
        MemoryLayout.ofStruct(
            C_INT.withName("olympus_exif_cfa"),
            MemoryLayout.ofPaddingBits(32),
            C_LONG_LONG.withName("unique_id"),
            C_LONG_LONG.withName("OlyID"),
            C_INT.withName("tiff_nifds"),
            C_INT.withName("tiff_flip"),
            C_INT.withName("metadata_blocks"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("identify_data"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("order"),
            MemoryLayout.ofSequence(4, C_SHORT).withName("sraw_mul"),
            MemoryLayout.ofSequence(3, C_SHORT).withName("cr2_slice"),
            C_INT.withName("kodak_cbpp"),
            MemoryLayout.ofPaddingBits(32),
            C_LONG_LONG.withName("strip_offset"),
            C_LONG_LONG.withName("data_offset"),
            C_LONG_LONG.withName("meta_offset"),
            C_INT.withName("data_size"),
            C_INT.withName("meta_length"),
            C_INT.withName("thumb_misc"),
            C_INT.withName("fuji_layout"),
            C_INT.withName("tiff_samples"),
            C_INT.withName("tiff_bps"),
            C_INT.withName("tiff_compress"),
            C_INT.withName("tiff_sampleformat"),
            C_INT.withName("zero_after_ff"),
            C_INT.withName("tile_width"),
            C_INT.withName("tile_length"),
            C_INT.withName("load_flags"),
            C_INT.withName("data_error"),
            C_INT.withName("hasselblad_parser_flag"),
            C_LONG_LONG.withName("posRAFData"),
            C_INT.withName("lenRAFData"),
            C_INT.withName("fuji_total_lines"),
            C_INT.withName("fuji_total_blocks"),
            C_INT.withName("fuji_block_width"),
            C_INT.withName("fuji_bits"),
            C_INT.withName("fuji_raw_type"),
            C_INT.withName("pana_encoding"),
            C_INT.withName("pana_bpp"),
            MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
                C_INT.withName("version"),
                C_INT.withName("f_width"),
                C_INT.withName("f_height"),
                C_INT.withName("tileWidth"),
                C_INT.withName("tileHeight"),
                C_INT.withName("nBits"),
                C_INT.withName("nPlanes"),
                C_INT.withName("cfaLayout"),
                C_INT.withName("encType"),
                C_INT.withName("imageLevels"),
                C_INT.withName("hasTileCols"),
                C_INT.withName("hasTileRows"),
                C_INT.withName("mdatHdrSize"),
                C_INT.withName("MediaSize"),
                C_LONG_LONG.withName("MediaOffset"),
                C_INT.withName("MediaType"),
                MemoryLayout.ofPaddingBits(32)
            )).withName("crx_header"),
            C_INT.withName("crx_track_selected"),
            C_SHORT.withName("CR3_CTMDtag"),
            C_SHORT.withName("CR3_Version"),
            C_INT.withName("CM_found"),
            C_INT.withName("is_NikonTransfer"),
            C_INT.withName("is_Sony"),
            C_INT.withName("is_pana_raw"),
            C_INT.withName("is_4K_RAFdata"),
            C_INT.withName("is_PentaxRicohMakernotes"),
            MemoryLayout.ofSequence(20, C_INT).withName("dng_frames"),
            C_SHORT.withName("raw_stride"),
            MemoryLayout.ofPaddingBits(48)
        ).withName("unpacker_data")
    );
    static final jdk.incubator.foreign.MemoryLayout libraw_internal_data_t$struct$LAYOUT() { return libraw_internal_data_t$struct$LAYOUT_; }

    static final MemoryLayout decode$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(2, C_POINTER).withName("branch"),
        C_INT.withName("leaf"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("decode");
    static final jdk.incubator.foreign.MemoryLayout decode$struct$LAYOUT() { return decode$struct$LAYOUT_; }

    static final MemoryLayout decode$leaf$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout decode$leaf$LAYOUT() { return decode$leaf$LAYOUT_; }

    static final VarHandle decode$leaf$VH_ = decode$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("leaf"));
    static final java.lang.invoke.VarHandle decode$leaf$VH() { return decode$leaf$VH_; }

    static final MemoryLayout tiff_ifd_t$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("t_width"),
        C_INT.withName("t_height"),
        C_INT.withName("bps"),
        C_INT.withName("comp"),
        C_INT.withName("phint"),
        C_INT.withName("offset"),
        C_INT.withName("t_flip"),
        C_INT.withName("samples"),
        C_INT.withName("bytes"),
        C_INT.withName("extrasamples"),
        C_INT.withName("t_tile_width"),
        C_INT.withName("t_tile_length"),
        C_INT.withName("sample_format"),
        C_INT.withName("predictor"),
        C_INT.withName("rows_per_strip"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("strip_offsets"),
        C_INT.withName("strip_offsets_count"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("strip_byte_counts"),
        C_INT.withName("strip_byte_counts_count"),
        C_INT.withName("t_filters"),
        C_INT.withName("t_vwidth"),
        C_INT.withName("t_vheight"),
        C_INT.withName("t_lm"),
        C_INT.withName("t_tm"),
        C_INT.withName("t_fuji_width"),
        C_FLOAT.withName("t_shutter"),
        C_LONG_LONG.withName("opcode2_offset"),
        C_LONG_LONG.withName("lineartable_offset"),
        C_INT.withName("lineartable_len"),
        MemoryLayout.ofSequence(2, MemoryLayout.ofStruct(
            C_INT.withName("parsedfields"),
            C_SHORT.withName("illuminant"),
            MemoryLayout.ofPaddingBits(16),
            MemoryLayout.ofSequence(4, MemoryLayout.ofSequence(4, C_FLOAT)).withName("calibration"),
            MemoryLayout.ofSequence(4, MemoryLayout.ofSequence(3, C_FLOAT)).withName("colormatrix"),
            MemoryLayout.ofSequence(3, MemoryLayout.ofSequence(4, C_FLOAT)).withName("forwardmatrix")
        )).withName("dng_color"),
        MemoryLayout.ofStruct(
            C_INT.withName("parsedfields"),
            MemoryLayout.ofSequence(4104, C_INT).withName("dng_cblack"),
            C_INT.withName("dng_black"),
            MemoryLayout.ofSequence(4104, C_FLOAT).withName("dng_fcblack"),
            C_FLOAT.withName("dng_fblack"),
            MemoryLayout.ofSequence(4, C_INT).withName("dng_whitelevel"),
            MemoryLayout.ofSequence(4, C_INT).withName("default_crop"),
            C_INT.withName("preview_colorspace"),
            MemoryLayout.ofSequence(4, C_FLOAT).withName("analogbalance"),
            MemoryLayout.ofSequence(4, C_FLOAT).withName("asshotneutral"),
            C_FLOAT.withName("baseline_exposure"),
            C_FLOAT.withName("LinearResponseLimit")
        ).withName("dng_levels"),
        C_INT.withName("newsubfiletype")
    ).withName("tiff_ifd_t");
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$struct$LAYOUT() { return tiff_ifd_t$struct$LAYOUT_; }

    static final MemoryLayout tiff_ifd_t$t_width$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$t_width$LAYOUT() { return tiff_ifd_t$t_width$LAYOUT_; }

    static final VarHandle tiff_ifd_t$t_width$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("t_width"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$t_width$VH() { return tiff_ifd_t$t_width$VH_; }

    static final MemoryLayout tiff_ifd_t$t_height$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$t_height$LAYOUT() { return tiff_ifd_t$t_height$LAYOUT_; }

    static final VarHandle tiff_ifd_t$t_height$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("t_height"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$t_height$VH() { return tiff_ifd_t$t_height$VH_; }

    static final MemoryLayout tiff_ifd_t$bps$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$bps$LAYOUT() { return tiff_ifd_t$bps$LAYOUT_; }

    static final VarHandle tiff_ifd_t$bps$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bps"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$bps$VH() { return tiff_ifd_t$bps$VH_; }

    static final MemoryLayout tiff_ifd_t$comp$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$comp$LAYOUT() { return tiff_ifd_t$comp$LAYOUT_; }

    static final VarHandle tiff_ifd_t$comp$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("comp"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$comp$VH() { return tiff_ifd_t$comp$VH_; }

    static final MemoryLayout tiff_ifd_t$phint$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$phint$LAYOUT() { return tiff_ifd_t$phint$LAYOUT_; }

    static final VarHandle tiff_ifd_t$phint$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("phint"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$phint$VH() { return tiff_ifd_t$phint$VH_; }

    static final MemoryLayout tiff_ifd_t$offset$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$offset$LAYOUT() { return tiff_ifd_t$offset$LAYOUT_; }

    static final VarHandle tiff_ifd_t$offset$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("offset"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$offset$VH() { return tiff_ifd_t$offset$VH_; }

    static final MemoryLayout tiff_ifd_t$t_flip$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$t_flip$LAYOUT() { return tiff_ifd_t$t_flip$LAYOUT_; }

    static final VarHandle tiff_ifd_t$t_flip$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("t_flip"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$t_flip$VH() { return tiff_ifd_t$t_flip$VH_; }

    static final MemoryLayout tiff_ifd_t$samples$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$samples$LAYOUT() { return tiff_ifd_t$samples$LAYOUT_; }

    static final VarHandle tiff_ifd_t$samples$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("samples"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$samples$VH() { return tiff_ifd_t$samples$VH_; }

    static final MemoryLayout tiff_ifd_t$bytes$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$bytes$LAYOUT() { return tiff_ifd_t$bytes$LAYOUT_; }

    static final VarHandle tiff_ifd_t$bytes$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bytes"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$bytes$VH() { return tiff_ifd_t$bytes$VH_; }

    static final MemoryLayout tiff_ifd_t$extrasamples$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$extrasamples$LAYOUT() { return tiff_ifd_t$extrasamples$LAYOUT_; }

    static final VarHandle tiff_ifd_t$extrasamples$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("extrasamples"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$extrasamples$VH() { return tiff_ifd_t$extrasamples$VH_; }

    static final MemoryLayout tiff_ifd_t$t_tile_width$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$t_tile_width$LAYOUT() { return tiff_ifd_t$t_tile_width$LAYOUT_; }

    static final VarHandle tiff_ifd_t$t_tile_width$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("t_tile_width"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$t_tile_width$VH() { return tiff_ifd_t$t_tile_width$VH_; }

    static final MemoryLayout tiff_ifd_t$t_tile_length$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$t_tile_length$LAYOUT() { return tiff_ifd_t$t_tile_length$LAYOUT_; }

    static final VarHandle tiff_ifd_t$t_tile_length$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("t_tile_length"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$t_tile_length$VH() { return tiff_ifd_t$t_tile_length$VH_; }

    static final MemoryLayout tiff_ifd_t$sample_format$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$sample_format$LAYOUT() { return tiff_ifd_t$sample_format$LAYOUT_; }

    static final VarHandle tiff_ifd_t$sample_format$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("sample_format"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$sample_format$VH() { return tiff_ifd_t$sample_format$VH_; }

    static final MemoryLayout tiff_ifd_t$predictor$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$predictor$LAYOUT() { return tiff_ifd_t$predictor$LAYOUT_; }

    static final VarHandle tiff_ifd_t$predictor$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("predictor"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$predictor$VH() { return tiff_ifd_t$predictor$VH_; }

    static final MemoryLayout tiff_ifd_t$rows_per_strip$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$rows_per_strip$LAYOUT() { return tiff_ifd_t$rows_per_strip$LAYOUT_; }

    static final VarHandle tiff_ifd_t$rows_per_strip$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("rows_per_strip"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$rows_per_strip$VH() { return tiff_ifd_t$rows_per_strip$VH_; }

    static final MemoryLayout tiff_ifd_t$strip_offsets$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$strip_offsets$LAYOUT() { return tiff_ifd_t$strip_offsets$LAYOUT_; }

    static final VarHandle tiff_ifd_t$strip_offsets$VH_ = MemoryHandles.asAddressVarHandle(tiff_ifd_t$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("strip_offsets")));
    static final java.lang.invoke.VarHandle tiff_ifd_t$strip_offsets$VH() { return tiff_ifd_t$strip_offsets$VH_; }

    static final MemoryLayout tiff_ifd_t$strip_offsets_count$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$strip_offsets_count$LAYOUT() { return tiff_ifd_t$strip_offsets_count$LAYOUT_; }

    static final VarHandle tiff_ifd_t$strip_offsets_count$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("strip_offsets_count"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$strip_offsets_count$VH() { return tiff_ifd_t$strip_offsets_count$VH_; }

    static final MemoryLayout tiff_ifd_t$strip_byte_counts$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$strip_byte_counts$LAYOUT() { return tiff_ifd_t$strip_byte_counts$LAYOUT_; }

    static final VarHandle tiff_ifd_t$strip_byte_counts$VH_ = MemoryHandles.asAddressVarHandle(tiff_ifd_t$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("strip_byte_counts")));
    static final java.lang.invoke.VarHandle tiff_ifd_t$strip_byte_counts$VH() { return tiff_ifd_t$strip_byte_counts$VH_; }

    static final MemoryLayout tiff_ifd_t$strip_byte_counts_count$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$strip_byte_counts_count$LAYOUT() { return tiff_ifd_t$strip_byte_counts_count$LAYOUT_; }

    static final VarHandle tiff_ifd_t$strip_byte_counts_count$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("strip_byte_counts_count"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$strip_byte_counts_count$VH() { return tiff_ifd_t$strip_byte_counts_count$VH_; }

    static final MemoryLayout tiff_ifd_t$t_filters$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$t_filters$LAYOUT() { return tiff_ifd_t$t_filters$LAYOUT_; }

    static final VarHandle tiff_ifd_t$t_filters$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("t_filters"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$t_filters$VH() { return tiff_ifd_t$t_filters$VH_; }

    static final MemoryLayout tiff_ifd_t$t_vwidth$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$t_vwidth$LAYOUT() { return tiff_ifd_t$t_vwidth$LAYOUT_; }

    static final VarHandle tiff_ifd_t$t_vwidth$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("t_vwidth"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$t_vwidth$VH() { return tiff_ifd_t$t_vwidth$VH_; }

    static final MemoryLayout tiff_ifd_t$t_vheight$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$t_vheight$LAYOUT() { return tiff_ifd_t$t_vheight$LAYOUT_; }

    static final VarHandle tiff_ifd_t$t_vheight$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("t_vheight"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$t_vheight$VH() { return tiff_ifd_t$t_vheight$VH_; }

    static final MemoryLayout tiff_ifd_t$t_lm$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$t_lm$LAYOUT() { return tiff_ifd_t$t_lm$LAYOUT_; }

    static final VarHandle tiff_ifd_t$t_lm$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("t_lm"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$t_lm$VH() { return tiff_ifd_t$t_lm$VH_; }

    static final MemoryLayout tiff_ifd_t$t_tm$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$t_tm$LAYOUT() { return tiff_ifd_t$t_tm$LAYOUT_; }

    static final VarHandle tiff_ifd_t$t_tm$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("t_tm"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$t_tm$VH() { return tiff_ifd_t$t_tm$VH_; }

    static final MemoryLayout tiff_ifd_t$t_fuji_width$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$t_fuji_width$LAYOUT() { return tiff_ifd_t$t_fuji_width$LAYOUT_; }

    static final VarHandle tiff_ifd_t$t_fuji_width$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("t_fuji_width"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$t_fuji_width$VH() { return tiff_ifd_t$t_fuji_width$VH_; }

    static final MemoryLayout tiff_ifd_t$t_shutter$LAYOUT_ = C_FLOAT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$t_shutter$LAYOUT() { return tiff_ifd_t$t_shutter$LAYOUT_; }

    static final VarHandle tiff_ifd_t$t_shutter$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("t_shutter"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$t_shutter$VH() { return tiff_ifd_t$t_shutter$VH_; }

    static final MemoryLayout tiff_ifd_t$opcode2_offset$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$opcode2_offset$LAYOUT() { return tiff_ifd_t$opcode2_offset$LAYOUT_; }

    static final VarHandle tiff_ifd_t$opcode2_offset$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("opcode2_offset"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$opcode2_offset$VH() { return tiff_ifd_t$opcode2_offset$VH_; }

    static final MemoryLayout tiff_ifd_t$lineartable_offset$LAYOUT_ = C_LONG_LONG;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$lineartable_offset$LAYOUT() { return tiff_ifd_t$lineartable_offset$LAYOUT_; }

    static final VarHandle tiff_ifd_t$lineartable_offset$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lineartable_offset"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$lineartable_offset$VH() { return tiff_ifd_t$lineartable_offset$VH_; }

    static final MemoryLayout tiff_ifd_t$lineartable_len$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$lineartable_len$LAYOUT() { return tiff_ifd_t$lineartable_len$LAYOUT_; }

    static final VarHandle tiff_ifd_t$lineartable_len$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lineartable_len"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$lineartable_len$VH() { return tiff_ifd_t$lineartable_len$VH_; }

    static final MemoryLayout tiff_ifd_t$newsubfiletype$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_ifd_t$newsubfiletype$LAYOUT() { return tiff_ifd_t$newsubfiletype$LAYOUT_; }

    static final VarHandle tiff_ifd_t$newsubfiletype$VH_ = tiff_ifd_t$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("newsubfiletype"));
    static final java.lang.invoke.VarHandle tiff_ifd_t$newsubfiletype$VH() { return tiff_ifd_t$newsubfiletype$VH_; }

    static final MemoryLayout jhead$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("algo"),
        C_INT.withName("bits"),
        C_INT.withName("high"),
        C_INT.withName("wide"),
        C_INT.withName("clrs"),
        C_INT.withName("sraw"),
        C_INT.withName("psv"),
        C_INT.withName("restart"),
        MemoryLayout.ofSequence(6, C_INT).withName("vpred"),
        MemoryLayout.ofSequence(64, C_SHORT).withName("quant"),
        MemoryLayout.ofSequence(64, C_SHORT).withName("idct"),
        MemoryLayout.ofSequence(20, C_POINTER).withName("huff"),
        MemoryLayout.ofSequence(20, C_POINTER).withName("free"),
        C_POINTER.withName("row")
    ).withName("jhead");
    static final jdk.incubator.foreign.MemoryLayout jhead$struct$LAYOUT() { return jhead$struct$LAYOUT_; }

    static final MemoryLayout jhead$algo$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout jhead$algo$LAYOUT() { return jhead$algo$LAYOUT_; }

    static final VarHandle jhead$algo$VH_ = jhead$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("algo"));
    static final java.lang.invoke.VarHandle jhead$algo$VH() { return jhead$algo$VH_; }

    static final MemoryLayout jhead$bits$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout jhead$bits$LAYOUT() { return jhead$bits$LAYOUT_; }

    static final VarHandle jhead$bits$VH_ = jhead$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bits"));
    static final java.lang.invoke.VarHandle jhead$bits$VH() { return jhead$bits$VH_; }

    static final MemoryLayout jhead$high$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout jhead$high$LAYOUT() { return jhead$high$LAYOUT_; }

    static final VarHandle jhead$high$VH_ = jhead$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("high"));
    static final java.lang.invoke.VarHandle jhead$high$VH() { return jhead$high$VH_; }

    static final MemoryLayout jhead$wide$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout jhead$wide$LAYOUT() { return jhead$wide$LAYOUT_; }

    static final VarHandle jhead$wide$VH_ = jhead$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("wide"));
    static final java.lang.invoke.VarHandle jhead$wide$VH() { return jhead$wide$VH_; }

    static final MemoryLayout jhead$clrs$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout jhead$clrs$LAYOUT() { return jhead$clrs$LAYOUT_; }

    static final VarHandle jhead$clrs$VH_ = jhead$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("clrs"));
    static final java.lang.invoke.VarHandle jhead$clrs$VH() { return jhead$clrs$VH_; }

    static final MemoryLayout jhead$sraw$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout jhead$sraw$LAYOUT() { return jhead$sraw$LAYOUT_; }

    static final VarHandle jhead$sraw$VH_ = jhead$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("sraw"));
    static final java.lang.invoke.VarHandle jhead$sraw$VH() { return jhead$sraw$VH_; }

    static final MemoryLayout jhead$psv$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout jhead$psv$LAYOUT() { return jhead$psv$LAYOUT_; }

    static final VarHandle jhead$psv$VH_ = jhead$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("psv"));
    static final java.lang.invoke.VarHandle jhead$psv$VH() { return jhead$psv$VH_; }

    static final MemoryLayout jhead$restart$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout jhead$restart$LAYOUT() { return jhead$restart$LAYOUT_; }

    static final VarHandle jhead$restart$VH_ = jhead$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("restart"));
    static final java.lang.invoke.VarHandle jhead$restart$VH() { return jhead$restart$VH_; }

    static final MemoryLayout jhead$row$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout jhead$row$LAYOUT() { return jhead$row$LAYOUT_; }

    static final VarHandle jhead$row$VH_ = MemoryHandles.asAddressVarHandle(jhead$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("row")));
    static final java.lang.invoke.VarHandle jhead$row$VH() { return jhead$row$VH_; }

    static final MemoryLayout libraw_tiff_tag$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("tag"),
        C_SHORT.withName("type"),
        C_INT.withName("count"),
        MemoryLayout.ofUnion(
            MemoryLayout.ofSequence(4, C_CHAR).withName("c"),
            MemoryLayout.ofSequence(2, C_SHORT).withName("s"),
            C_INT.withName("i")
        ).withName("val")
    ).withName("libraw_tiff_tag");
    static final jdk.incubator.foreign.MemoryLayout libraw_tiff_tag$struct$LAYOUT() { return libraw_tiff_tag$struct$LAYOUT_; }

    static final MemoryLayout libraw_tiff_tag$tag$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout libraw_tiff_tag$tag$LAYOUT() { return libraw_tiff_tag$tag$LAYOUT_; }

    static final VarHandle libraw_tiff_tag$tag$VH_ = libraw_tiff_tag$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("tag"));
    static final java.lang.invoke.VarHandle libraw_tiff_tag$tag$VH() { return libraw_tiff_tag$tag$VH_; }

    static final MemoryLayout libraw_tiff_tag$type$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout libraw_tiff_tag$type$LAYOUT() { return libraw_tiff_tag$type$LAYOUT_; }

    static final VarHandle libraw_tiff_tag$type$VH_ = libraw_tiff_tag$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("type"));
    static final java.lang.invoke.VarHandle libraw_tiff_tag$type$VH() { return libraw_tiff_tag$type$VH_; }

    static final MemoryLayout libraw_tiff_tag$count$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout libraw_tiff_tag$count$LAYOUT() { return libraw_tiff_tag$count$LAYOUT_; }

    static final VarHandle libraw_tiff_tag$count$VH_ = libraw_tiff_tag$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("count"));
    static final java.lang.invoke.VarHandle libraw_tiff_tag$count$VH() { return libraw_tiff_tag$count$VH_; }

    static final MemoryLayout libraw_tiff_tag$val$union$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofSequence(4, C_CHAR).withName("c"),
        MemoryLayout.ofSequence(2, C_SHORT).withName("s"),
        C_INT.withName("i")
    );
    static final jdk.incubator.foreign.MemoryLayout libraw_tiff_tag$val$union$LAYOUT() { return libraw_tiff_tag$val$union$LAYOUT_; }

    static final MemoryLayout libraw_tiff_tag$val$i$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout libraw_tiff_tag$val$i$LAYOUT() { return libraw_tiff_tag$val$i$LAYOUT_; }

    static final VarHandle libraw_tiff_tag$val$i$VH_ = libraw_tiff_tag$val$union$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("i"));
    static final java.lang.invoke.VarHandle libraw_tiff_tag$val$i$VH() { return libraw_tiff_tag$val$i$VH_; }

    static final MemoryLayout tiff_hdr$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("t_order"),
        C_SHORT.withName("magic"),
        C_INT.withName("ifd"),
        C_SHORT.withName("pad"),
        C_SHORT.withName("ntag"),
        MemoryLayout.ofSequence(23, MemoryLayout.ofStruct(
            C_SHORT.withName("tag"),
            C_SHORT.withName("type"),
            C_INT.withName("count"),
            MemoryLayout.ofUnion(
                MemoryLayout.ofSequence(4, C_CHAR).withName("c"),
                MemoryLayout.ofSequence(2, C_SHORT).withName("s"),
                C_INT.withName("i")
            ).withName("val")
        ).withName("libraw_tiff_tag")).withName("tag"),
        C_INT.withName("nextifd"),
        C_SHORT.withName("pad2"),
        C_SHORT.withName("nexif"),
        MemoryLayout.ofSequence(4, MemoryLayout.ofStruct(
            C_SHORT.withName("tag"),
            C_SHORT.withName("type"),
            C_INT.withName("count"),
            MemoryLayout.ofUnion(
                MemoryLayout.ofSequence(4, C_CHAR).withName("c"),
                MemoryLayout.ofSequence(2, C_SHORT).withName("s"),
                C_INT.withName("i")
            ).withName("val")
        ).withName("libraw_tiff_tag")).withName("exif"),
        C_SHORT.withName("pad3"),
        C_SHORT.withName("ngps"),
        MemoryLayout.ofSequence(10, MemoryLayout.ofStruct(
            C_SHORT.withName("tag"),
            C_SHORT.withName("type"),
            C_INT.withName("count"),
            MemoryLayout.ofUnion(
                MemoryLayout.ofSequence(4, C_CHAR).withName("c"),
                MemoryLayout.ofSequence(2, C_SHORT).withName("s"),
                C_INT.withName("i")
            ).withName("val")
        ).withName("libraw_tiff_tag")).withName("gpst"),
        MemoryLayout.ofSequence(4, C_SHORT).withName("bps"),
        MemoryLayout.ofSequence(10, C_INT).withName("rat"),
        MemoryLayout.ofSequence(26, C_INT).withName("gps"),
        MemoryLayout.ofSequence(512, C_CHAR).withName("t_desc"),
        MemoryLayout.ofSequence(64, C_CHAR).withName("t_make"),
        MemoryLayout.ofSequence(64, C_CHAR).withName("t_model"),
        MemoryLayout.ofSequence(32, C_CHAR).withName("soft"),
        MemoryLayout.ofSequence(20, C_CHAR).withName("date"),
        MemoryLayout.ofSequence(64, C_CHAR).withName("t_artist")
    ).withName("tiff_hdr");
    static final jdk.incubator.foreign.MemoryLayout tiff_hdr$struct$LAYOUT() { return tiff_hdr$struct$LAYOUT_; }

    static final MemoryLayout tiff_hdr$t_order$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tiff_hdr$t_order$LAYOUT() { return tiff_hdr$t_order$LAYOUT_; }

    static final VarHandle tiff_hdr$t_order$VH_ = tiff_hdr$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("t_order"));
    static final java.lang.invoke.VarHandle tiff_hdr$t_order$VH() { return tiff_hdr$t_order$VH_; }

    static final MemoryLayout tiff_hdr$magic$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tiff_hdr$magic$LAYOUT() { return tiff_hdr$magic$LAYOUT_; }

    static final VarHandle tiff_hdr$magic$VH_ = tiff_hdr$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("magic"));
    static final java.lang.invoke.VarHandle tiff_hdr$magic$VH() { return tiff_hdr$magic$VH_; }

    static final MemoryLayout tiff_hdr$ifd$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_hdr$ifd$LAYOUT() { return tiff_hdr$ifd$LAYOUT_; }

    static final VarHandle tiff_hdr$ifd$VH_ = tiff_hdr$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ifd"));
    static final java.lang.invoke.VarHandle tiff_hdr$ifd$VH() { return tiff_hdr$ifd$VH_; }

    static final MemoryLayout tiff_hdr$pad$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tiff_hdr$pad$LAYOUT() { return tiff_hdr$pad$LAYOUT_; }

    static final VarHandle tiff_hdr$pad$VH_ = tiff_hdr$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("pad"));
    static final java.lang.invoke.VarHandle tiff_hdr$pad$VH() { return tiff_hdr$pad$VH_; }

    static final MemoryLayout tiff_hdr$ntag$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tiff_hdr$ntag$LAYOUT() { return tiff_hdr$ntag$LAYOUT_; }

    static final VarHandle tiff_hdr$ntag$VH_ = tiff_hdr$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ntag"));
    static final java.lang.invoke.VarHandle tiff_hdr$ntag$VH() { return tiff_hdr$ntag$VH_; }

    static final MemoryLayout tiff_hdr$nextifd$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tiff_hdr$nextifd$LAYOUT() { return tiff_hdr$nextifd$LAYOUT_; }

    static final VarHandle tiff_hdr$nextifd$VH_ = tiff_hdr$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nextifd"));
    static final java.lang.invoke.VarHandle tiff_hdr$nextifd$VH() { return tiff_hdr$nextifd$VH_; }

    static final MemoryLayout tiff_hdr$pad2$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tiff_hdr$pad2$LAYOUT() { return tiff_hdr$pad2$LAYOUT_; }

    static final VarHandle tiff_hdr$pad2$VH_ = tiff_hdr$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("pad2"));
    static final java.lang.invoke.VarHandle tiff_hdr$pad2$VH() { return tiff_hdr$pad2$VH_; }

    static final MemoryLayout tiff_hdr$nexif$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tiff_hdr$nexif$LAYOUT() { return tiff_hdr$nexif$LAYOUT_; }

    static final VarHandle tiff_hdr$nexif$VH_ = tiff_hdr$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("nexif"));
    static final java.lang.invoke.VarHandle tiff_hdr$nexif$VH() { return tiff_hdr$nexif$VH_; }

    static final MemoryLayout tiff_hdr$pad3$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tiff_hdr$pad3$LAYOUT() { return tiff_hdr$pad3$LAYOUT_; }

    static final VarHandle tiff_hdr$pad3$VH_ = tiff_hdr$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("pad3"));
    static final java.lang.invoke.VarHandle tiff_hdr$pad3$VH() { return tiff_hdr$pad3$VH_; }

    static final MemoryLayout tiff_hdr$ngps$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tiff_hdr$ngps$LAYOUT() { return tiff_hdr$ngps$LAYOUT_; }

    static final VarHandle tiff_hdr$ngps$VH_ = tiff_hdr$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ngps"));
    static final java.lang.invoke.VarHandle tiff_hdr$ngps$VH() { return tiff_hdr$ngps$VH_; }

    static final FunctionDescriptor libraw_strerror$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_strerror$FUNC() { return libraw_strerror$FUNC_; }

    static final MethodHandle libraw_strerror$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_strerror",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        libraw_strerror$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_strerror$MH() { return libraw_strerror$MH_; }

    static final FunctionDescriptor libraw_strprogress$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_strprogress$FUNC() { return libraw_strprogress$FUNC_; }

    static final MethodHandle libraw_strprogress$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_strprogress",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        libraw_strprogress$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_strprogress$MH() { return libraw_strprogress$MH_; }

    static final FunctionDescriptor libraw_init$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_init$FUNC() { return libraw_init$FUNC_; }

    static final MethodHandle libraw_init$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_init",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        libraw_init$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_init$MH() { return libraw_init$MH_; }

    static final FunctionDescriptor libraw_open_file$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_open_file$FUNC() { return libraw_open_file$FUNC_; }

    static final MethodHandle libraw_open_file$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_open_file",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        libraw_open_file$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_open_file$MH() { return libraw_open_file$MH_; }

    static final FunctionDescriptor libraw_open_file_ex$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_open_file_ex$FUNC() { return libraw_open_file_ex$FUNC_; }

    static final MethodHandle libraw_open_file_ex$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_open_file_ex",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        libraw_open_file_ex$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_open_file_ex$MH() { return libraw_open_file_ex$MH_; }

    static final FunctionDescriptor libraw_open_buffer$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_open_buffer$FUNC() { return libraw_open_buffer$FUNC_; }

    static final MethodHandle libraw_open_buffer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_open_buffer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        libraw_open_buffer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_open_buffer$MH() { return libraw_open_buffer$MH_; }

    static final FunctionDescriptor libraw_unpack$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_unpack$FUNC() { return libraw_unpack$FUNC_; }

    static final MethodHandle libraw_unpack$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_unpack",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        libraw_unpack$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_unpack$MH() { return libraw_unpack$MH_; }

    static final FunctionDescriptor libraw_unpack_thumb$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_unpack_thumb$FUNC() { return libraw_unpack_thumb$FUNC_; }

    static final MethodHandle libraw_unpack_thumb$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_unpack_thumb",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        libraw_unpack_thumb$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_unpack_thumb$MH() { return libraw_unpack_thumb$MH_; }

    static final FunctionDescriptor libraw_recycle_datastream$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_recycle_datastream$FUNC() { return libraw_recycle_datastream$FUNC_; }

    static final MethodHandle libraw_recycle_datastream$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_recycle_datastream",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        libraw_recycle_datastream$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_recycle_datastream$MH() { return libraw_recycle_datastream$MH_; }

    static final FunctionDescriptor libraw_recycle$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_recycle$FUNC() { return libraw_recycle$FUNC_; }

    static final MethodHandle libraw_recycle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_recycle",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        libraw_recycle$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_recycle$MH() { return libraw_recycle$MH_; }

    static final FunctionDescriptor libraw_close$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_close$FUNC() { return libraw_close$FUNC_; }

    static final MethodHandle libraw_close$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_close",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        libraw_close$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_close$MH() { return libraw_close$MH_; }

    static final FunctionDescriptor libraw_subtract_black$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_subtract_black$FUNC() { return libraw_subtract_black$FUNC_; }

    static final MethodHandle libraw_subtract_black$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_subtract_black",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        libraw_subtract_black$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_subtract_black$MH() { return libraw_subtract_black$MH_; }

    static final FunctionDescriptor libraw_raw2image$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_raw2image$FUNC() { return libraw_raw2image$FUNC_; }

    static final MethodHandle libraw_raw2image$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_raw2image",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        libraw_raw2image$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_raw2image$MH() { return libraw_raw2image$MH_; }

    static final FunctionDescriptor libraw_free_image$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_free_image$FUNC() { return libraw_free_image$FUNC_; }

    static final MethodHandle libraw_free_image$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_free_image",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        libraw_free_image$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_free_image$MH() { return libraw_free_image$MH_; }

    static final FunctionDescriptor libraw_version$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor libraw_version$FUNC() { return libraw_version$FUNC_; }

    static final MethodHandle libraw_version$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_version",
        "([Ljava/lang/Object;)Ljdk/incubator/foreign/MemoryAddress;",
        libraw_version$FUNC_, true
    );
    static final java.lang.invoke.MethodHandle libraw_version$MH() { return libraw_version$MH_; }

    static final FunctionDescriptor libraw_versionNumber$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor libraw_versionNumber$FUNC() { return libraw_versionNumber$FUNC_; }

    static final MethodHandle libraw_versionNumber$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_versionNumber",
        "([Ljava/lang/Object;)I",
        libraw_versionNumber$FUNC_, true
    );
    static final java.lang.invoke.MethodHandle libraw_versionNumber$MH() { return libraw_versionNumber$MH_; }

    static final FunctionDescriptor libraw_cameraList$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor libraw_cameraList$FUNC() { return libraw_cameraList$FUNC_; }

    static final MethodHandle libraw_cameraList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_cameraList",
        "([Ljava/lang/Object;)Ljdk/incubator/foreign/MemoryAddress;",
        libraw_cameraList$FUNC_, true
    );
    static final java.lang.invoke.MethodHandle libraw_cameraList$MH() { return libraw_cameraList$MH_; }

    static final FunctionDescriptor libraw_cameraCount$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor libraw_cameraCount$FUNC() { return libraw_cameraCount$FUNC_; }

    static final MethodHandle libraw_cameraCount$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_cameraCount",
        "([Ljava/lang/Object;)I",
        libraw_cameraCount$FUNC_, true
    );
    static final java.lang.invoke.MethodHandle libraw_cameraCount$MH() { return libraw_cameraCount$MH_; }

    static final FunctionDescriptor libraw_set_memerror_handler$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_set_memerror_handler$FUNC() { return libraw_set_memerror_handler$FUNC_; }

    static final MethodHandle libraw_set_memerror_handler$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_set_memerror_handler",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        libraw_set_memerror_handler$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_set_memerror_handler$MH() { return libraw_set_memerror_handler$MH_; }

    static final FunctionDescriptor libraw_set_exifparser_handler$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_set_exifparser_handler$FUNC() { return libraw_set_exifparser_handler$FUNC_; }

    static final MethodHandle libraw_set_exifparser_handler$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_set_exifparser_handler",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        libraw_set_exifparser_handler$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_set_exifparser_handler$MH() { return libraw_set_exifparser_handler$MH_; }

    static final FunctionDescriptor libraw_set_dataerror_handler$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_set_dataerror_handler$FUNC() { return libraw_set_dataerror_handler$FUNC_; }

    static final MethodHandle libraw_set_dataerror_handler$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_set_dataerror_handler",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        libraw_set_dataerror_handler$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_set_dataerror_handler$MH() { return libraw_set_dataerror_handler$MH_; }

    static final FunctionDescriptor libraw_set_progress_handler$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_set_progress_handler$FUNC() { return libraw_set_progress_handler$FUNC_; }

    static final MethodHandle libraw_set_progress_handler$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_set_progress_handler",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        libraw_set_progress_handler$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_set_progress_handler$MH() { return libraw_set_progress_handler$MH_; }

    static final FunctionDescriptor libraw_unpack_function_name$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_unpack_function_name$FUNC() { return libraw_unpack_function_name$FUNC_; }

    static final MethodHandle libraw_unpack_function_name$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_unpack_function_name",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        libraw_unpack_function_name$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_unpack_function_name$MH() { return libraw_unpack_function_name$MH_; }

    static final FunctionDescriptor libraw_get_decoder_info$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_get_decoder_info$FUNC() { return libraw_get_decoder_info$FUNC_; }

    static final MethodHandle libraw_get_decoder_info$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_get_decoder_info",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        libraw_get_decoder_info$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_get_decoder_info$MH() { return libraw_get_decoder_info$MH_; }

    static final FunctionDescriptor libraw_COLOR$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_COLOR$FUNC() { return libraw_COLOR$FUNC_; }

    static final MethodHandle libraw_COLOR$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_COLOR",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        libraw_COLOR$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_COLOR$MH() { return libraw_COLOR$MH_; }

    static final FunctionDescriptor libraw_capabilities$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor libraw_capabilities$FUNC() { return libraw_capabilities$FUNC_; }

    static final MethodHandle libraw_capabilities$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_capabilities",
        "([Ljava/lang/Object;)I",
        libraw_capabilities$FUNC_, true
    );
    static final java.lang.invoke.MethodHandle libraw_capabilities$MH() { return libraw_capabilities$MH_; }

    static final FunctionDescriptor libraw_adjust_sizes_info_only$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_adjust_sizes_info_only$FUNC() { return libraw_adjust_sizes_info_only$FUNC_; }

    static final MethodHandle libraw_adjust_sizes_info_only$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_adjust_sizes_info_only",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        libraw_adjust_sizes_info_only$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_adjust_sizes_info_only$MH() { return libraw_adjust_sizes_info_only$MH_; }

    static final FunctionDescriptor libraw_dcraw_ppm_tiff_writer$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_dcraw_ppm_tiff_writer$FUNC() { return libraw_dcraw_ppm_tiff_writer$FUNC_; }

    static final MethodHandle libraw_dcraw_ppm_tiff_writer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_dcraw_ppm_tiff_writer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        libraw_dcraw_ppm_tiff_writer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_dcraw_ppm_tiff_writer$MH() { return libraw_dcraw_ppm_tiff_writer$MH_; }

    static final FunctionDescriptor libraw_dcraw_thumb_writer$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_dcraw_thumb_writer$FUNC() { return libraw_dcraw_thumb_writer$FUNC_; }

    static final MethodHandle libraw_dcraw_thumb_writer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_dcraw_thumb_writer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        libraw_dcraw_thumb_writer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_dcraw_thumb_writer$MH() { return libraw_dcraw_thumb_writer$MH_; }

    static final FunctionDescriptor libraw_dcraw_process$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_dcraw_process$FUNC() { return libraw_dcraw_process$FUNC_; }

    static final MethodHandle libraw_dcraw_process$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_dcraw_process",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        libraw_dcraw_process$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_dcraw_process$MH() { return libraw_dcraw_process$MH_; }

    static final FunctionDescriptor libraw_dcraw_make_mem_image$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_dcraw_make_mem_image$FUNC() { return libraw_dcraw_make_mem_image$FUNC_; }

    static final MethodHandle libraw_dcraw_make_mem_image$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_dcraw_make_mem_image",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        libraw_dcraw_make_mem_image$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_dcraw_make_mem_image$MH() { return libraw_dcraw_make_mem_image$MH_; }

    static final FunctionDescriptor libraw_dcraw_make_mem_thumb$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_dcraw_make_mem_thumb$FUNC() { return libraw_dcraw_make_mem_thumb$FUNC_; }

    static final MethodHandle libraw_dcraw_make_mem_thumb$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_dcraw_make_mem_thumb",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        libraw_dcraw_make_mem_thumb$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_dcraw_make_mem_thumb$MH() { return libraw_dcraw_make_mem_thumb$MH_; }

    static final FunctionDescriptor libraw_dcraw_clear_mem$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_dcraw_clear_mem$FUNC() { return libraw_dcraw_clear_mem$FUNC_; }

    static final MethodHandle libraw_dcraw_clear_mem$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_dcraw_clear_mem",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        libraw_dcraw_clear_mem$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_dcraw_clear_mem$MH() { return libraw_dcraw_clear_mem$MH_; }

    static final FunctionDescriptor libraw_set_demosaic$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_set_demosaic$FUNC() { return libraw_set_demosaic$FUNC_; }

    static final MethodHandle libraw_set_demosaic$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_set_demosaic",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        libraw_set_demosaic$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_set_demosaic$MH() { return libraw_set_demosaic$MH_; }

    static final FunctionDescriptor libraw_set_output_color$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_set_output_color$FUNC() { return libraw_set_output_color$FUNC_; }

    static final MethodHandle libraw_set_output_color$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_set_output_color",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        libraw_set_output_color$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_set_output_color$MH() { return libraw_set_output_color$MH_; }

    static final FunctionDescriptor libraw_set_user_mul$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_FLOAT
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_set_user_mul$FUNC() { return libraw_set_user_mul$FUNC_; }

    static final MethodHandle libraw_set_user_mul$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_set_user_mul",
        "(Ljdk/incubator/foreign/MemoryAddress;IF)V",
        libraw_set_user_mul$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_set_user_mul$MH() { return libraw_set_user_mul$MH_; }

    static final FunctionDescriptor libraw_set_output_bps$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_set_output_bps$FUNC() { return libraw_set_output_bps$FUNC_; }

    static final MethodHandle libraw_set_output_bps$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_set_output_bps",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        libraw_set_output_bps$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_set_output_bps$MH() { return libraw_set_output_bps$MH_; }

    static final FunctionDescriptor libraw_set_gamma$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_FLOAT
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_set_gamma$FUNC() { return libraw_set_gamma$FUNC_; }

    static final MethodHandle libraw_set_gamma$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_set_gamma",
        "(Ljdk/incubator/foreign/MemoryAddress;IF)V",
        libraw_set_gamma$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_set_gamma$MH() { return libraw_set_gamma$MH_; }

    static final FunctionDescriptor libraw_set_no_auto_bright$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_set_no_auto_bright$FUNC() { return libraw_set_no_auto_bright$FUNC_; }

    static final MethodHandle libraw_set_no_auto_bright$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_set_no_auto_bright",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        libraw_set_no_auto_bright$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_set_no_auto_bright$MH() { return libraw_set_no_auto_bright$MH_; }

    static final FunctionDescriptor libraw_set_bright$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_FLOAT
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_set_bright$FUNC() { return libraw_set_bright$FUNC_; }

    static final MethodHandle libraw_set_bright$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_set_bright",
        "(Ljdk/incubator/foreign/MemoryAddress;F)V",
        libraw_set_bright$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_set_bright$MH() { return libraw_set_bright$MH_; }

    static final FunctionDescriptor libraw_set_highlight$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_set_highlight$FUNC() { return libraw_set_highlight$FUNC_; }

    static final MethodHandle libraw_set_highlight$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_set_highlight",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        libraw_set_highlight$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_set_highlight$MH() { return libraw_set_highlight$MH_; }

    static final FunctionDescriptor libraw_set_fbdd_noiserd$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_set_fbdd_noiserd$FUNC() { return libraw_set_fbdd_noiserd$FUNC_; }

    static final MethodHandle libraw_set_fbdd_noiserd$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_set_fbdd_noiserd",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        libraw_set_fbdd_noiserd$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_set_fbdd_noiserd$MH() { return libraw_set_fbdd_noiserd$MH_; }

    static final FunctionDescriptor libraw_get_raw_height$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_get_raw_height$FUNC() { return libraw_get_raw_height$FUNC_; }

    static final MethodHandle libraw_get_raw_height$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_get_raw_height",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        libraw_get_raw_height$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_get_raw_height$MH() { return libraw_get_raw_height$MH_; }

    static final FunctionDescriptor libraw_get_raw_width$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_get_raw_width$FUNC() { return libraw_get_raw_width$FUNC_; }

    static final MethodHandle libraw_get_raw_width$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_get_raw_width",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        libraw_get_raw_width$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_get_raw_width$MH() { return libraw_get_raw_width$MH_; }

    static final FunctionDescriptor libraw_get_iheight$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_get_iheight$FUNC() { return libraw_get_iheight$FUNC_; }

    static final MethodHandle libraw_get_iheight$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_get_iheight",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        libraw_get_iheight$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_get_iheight$MH() { return libraw_get_iheight$MH_; }

    static final FunctionDescriptor libraw_get_iwidth$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_get_iwidth$FUNC() { return libraw_get_iwidth$FUNC_; }

    static final MethodHandle libraw_get_iwidth$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_get_iwidth",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        libraw_get_iwidth$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_get_iwidth$MH() { return libraw_get_iwidth$MH_; }

    static final FunctionDescriptor libraw_get_cam_mul$FUNC_ = FunctionDescriptor.of(C_FLOAT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_get_cam_mul$FUNC() { return libraw_get_cam_mul$FUNC_; }

    static final MethodHandle libraw_get_cam_mul$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_get_cam_mul",
        "(Ljdk/incubator/foreign/MemoryAddress;I)F",
        libraw_get_cam_mul$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_get_cam_mul$MH() { return libraw_get_cam_mul$MH_; }

    static final FunctionDescriptor libraw_get_pre_mul$FUNC_ = FunctionDescriptor.of(C_FLOAT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_get_pre_mul$FUNC() { return libraw_get_pre_mul$FUNC_; }

    static final MethodHandle libraw_get_pre_mul$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_get_pre_mul",
        "(Ljdk/incubator/foreign/MemoryAddress;I)F",
        libraw_get_pre_mul$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_get_pre_mul$MH() { return libraw_get_pre_mul$MH_; }

    static final FunctionDescriptor libraw_get_rgb_cam$FUNC_ = FunctionDescriptor.of(C_FLOAT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_get_rgb_cam$FUNC() { return libraw_get_rgb_cam$FUNC_; }

    static final MethodHandle libraw_get_rgb_cam$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_get_rgb_cam",
        "(Ljdk/incubator/foreign/MemoryAddress;II)F",
        libraw_get_rgb_cam$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_get_rgb_cam$MH() { return libraw_get_rgb_cam$MH_; }

    static final FunctionDescriptor libraw_get_color_maximum$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_get_color_maximum$FUNC() { return libraw_get_color_maximum$FUNC_; }

    static final MethodHandle libraw_get_color_maximum$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_get_color_maximum",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        libraw_get_color_maximum$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_get_color_maximum$MH() { return libraw_get_color_maximum$MH_; }

    static final FunctionDescriptor libraw_set_output_tif$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_set_output_tif$FUNC() { return libraw_set_output_tif$FUNC_; }

    static final MethodHandle libraw_set_output_tif$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_set_output_tif",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        libraw_set_output_tif$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_set_output_tif$MH() { return libraw_set_output_tif$MH_; }

    static final FunctionDescriptor libraw_get_iparams$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_get_iparams$FUNC() { return libraw_get_iparams$FUNC_; }

    static final MethodHandle libraw_get_iparams$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_get_iparams",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        libraw_get_iparams$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_get_iparams$MH() { return libraw_get_iparams$MH_; }

    static final FunctionDescriptor libraw_get_lensinfo$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_get_lensinfo$FUNC() { return libraw_get_lensinfo$FUNC_; }

    static final MethodHandle libraw_get_lensinfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_get_lensinfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        libraw_get_lensinfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_get_lensinfo$MH() { return libraw_get_lensinfo$MH_; }

    static final FunctionDescriptor libraw_get_imgother$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor libraw_get_imgother$FUNC() { return libraw_get_imgother$FUNC_; }

    static final MethodHandle libraw_get_imgother$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "libraw_get_imgother",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        libraw_get_imgother$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle libraw_get_imgother$MH() { return libraw_get_imgother$MH_; }

    static final long LIBRAW_USE_STREAMS_DATASTREAM_MAXSIZE() { return 262144000L; }

    static final double LIBRAW_DEFAULT_ADJUST_MAXIMUM_THRESHOLD() { return 0.75d; }

    static final double LIBRAW_DEFAULT_AUTO_BRIGHTNESS_THRESHOLD() { return 0.01d; }

    static final long LIBRAW_MAX_ALLOC_MB_DEFAULT() { return 2048L; }

    static final long LIBRAW_MAX_THUMBNAIL_MB() { return 512L; }

    static final int LIBRAW_EXIFTOOLTAGTYPE_int8u() { return (int)1L; }

    static final int LIBRAW_EXIFTOOLTAGTYPE_string() { return (int)2L; }

    static final int LIBRAW_EXIFTOOLTAGTYPE_int16u() { return (int)3L; }

    static final int LIBRAW_EXIFTOOLTAGTYPE_int32u() { return (int)4L; }

    static final int LIBRAW_EXIFTOOLTAGTYPE_rational64u() { return (int)5L; }

    static final int LIBRAW_EXIFTOOLTAGTYPE_int8s() { return (int)6L; }

    static final int LIBRAW_EXIFTOOLTAGTYPE_undef() { return (int)7L; }

    static final int LIBRAW_EXIFTOOLTAGTYPE_binary() { return (int)7L; }

    static final int LIBRAW_EXIFTOOLTAGTYPE_int16s() { return (int)8L; }

    static final int LIBRAW_EXIFTOOLTAGTYPE_int32s() { return (int)9L; }

    static final int LIBRAW_EXIFTOOLTAGTYPE_rational64s() { return (int)10L; }

    static final int LIBRAW_EXIFTOOLTAGTYPE_float() { return (int)11L; }

    static final int LIBRAW_EXIFTOOLTAGTYPE_double() { return (int)12L; }

    static final int LIBRAW_EXIFTOOLTAGTYPE_ifd() { return (int)13L; }

    static final int LIBRAW_EXIFTOOLTAGTYPE_unicode() { return (int)14L; }

    static final int LIBRAW_EXIFTOOLTAGTYPE_complex() { return (int)15L; }

    static final int LIBRAW_EXIFTOOLTAGTYPE_int64u() { return (int)16L; }

    static final int LIBRAW_EXIFTOOLTAGTYPE_int64s() { return (int)17L; }

    static final int LIBRAW_EXIFTOOLTAGTYPE_ifd64() { return (int)18L; }

    static final long LIBRAW_LENS_NOT_SET() { return -1L; }

    static final MemorySegment LIBRAW_VERSION_STR$SEGMENT_CONSTANT_ = CLinker.toCString("0.20.2-Release");
    static final jdk.incubator.foreign.MemorySegment LIBRAW_VERSION_STR() { return LIBRAW_VERSION_STR$SEGMENT_CONSTANT_; }

    static final int LIBRAW_VERSION() { return (int)5122L; }

}

