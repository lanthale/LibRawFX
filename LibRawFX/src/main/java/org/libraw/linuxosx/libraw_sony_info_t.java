// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_sony_info_t {
 *     unsigned short CameraType;
 *     unsigned char Sony0x9400_version;
 *     unsigned char Sony0x9400_ReleaseMode2;
 *     unsigned int Sony0x9400_SequenceImageNumber;
 *     unsigned char Sony0x9400_SequenceLength1;
 *     unsigned int Sony0x9400_SequenceFileNumber;
 *     unsigned char Sony0x9400_SequenceLength2;
 *     unsigned char AFAreaModeSetting;
 *     unsigned short AFAreaMode;
 *     unsigned short FlexibleSpotPosition[2];
 *     unsigned char AFPointSelected;
 *     unsigned char AFPointSelected_0x201e;
 *     short nAFPointsUsed;
 *     unsigned char AFPointsUsed[10];
 *     unsigned char AFTracking;
 *     unsigned char AFType;
 *     unsigned short FocusLocation[4];
 *     unsigned short FocusPosition;
 *     signed char AFMicroAdjValue;
 *     signed char AFMicroAdjOn;
 *     unsigned char AFMicroAdjRegisteredLenses;
 *     unsigned short VariableLowPassFilter;
 *     unsigned int LongExposureNoiseReduction;
 *     unsigned short HighISONoiseReduction;
 *     unsigned short HDR[2];
 *     unsigned short group2010;
 *     unsigned short group9050;
 *     unsigned short real_iso_offset;
 *     unsigned short MeteringMode_offset;
 *     unsigned short ExposureProgram_offset;
 *     unsigned short ReleaseMode2_offset;
 *     unsigned int MinoltaCamID;
 *     float firmware;
 *     unsigned short ImageCount3_offset;
 *     unsigned int ImageCount3;
 *     unsigned int ElectronicFrontCurtainShutter;
 *     unsigned short MeteringMode2;
 *     char SonyDateTime[20];
 *     unsigned int ShotNumberSincePowerUp;
 *     unsigned short PixelShiftGroupPrefix;
 *     unsigned int PixelShiftGroupID;
 *     char nShotsInPixelShiftGroup;
 *     char numInPixelShiftGroup;
 *     unsigned short prd_ImageHeight;
 *     unsigned short prd_ImageWidth;
 *     unsigned short prd_Total_bps;
 *     unsigned short prd_Active_bps;
 *     unsigned short prd_StorageMethod;
 *     unsigned short prd_BayerPattern;
 *     unsigned short SonyRawFileType;
 *     unsigned short RAWFileType;
 *     unsigned int Quality;
 *     unsigned short FileFormat;
 *     char MetaVersion[16];
 * };
 * }
 */
public class libraw_sony_info_t {

    public static MemoryLayout $LAYOUT() {
        return constants$50.const$5;
    }
    public static VarHandle CameraType$VH() {
        return constants$51.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short CameraType;
     * }
     */
    public static short CameraType$get(MemorySegment seg) {
        return (short)constants$51.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short CameraType;
     * }
     */
    public static void CameraType$set(MemorySegment seg, short x) {
        constants$51.const$0.set(seg, x);
    }
    public static short CameraType$get(MemorySegment seg, long index) {
        return (short)constants$51.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CameraType$set(MemorySegment seg, long index, short x) {
        constants$51.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Sony0x9400_version$VH() {
        return constants$51.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char Sony0x9400_version;
     * }
     */
    public static byte Sony0x9400_version$get(MemorySegment seg) {
        return (byte)constants$51.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char Sony0x9400_version;
     * }
     */
    public static void Sony0x9400_version$set(MemorySegment seg, byte x) {
        constants$51.const$1.set(seg, x);
    }
    public static byte Sony0x9400_version$get(MemorySegment seg, long index) {
        return (byte)constants$51.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Sony0x9400_version$set(MemorySegment seg, long index, byte x) {
        constants$51.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Sony0x9400_ReleaseMode2$VH() {
        return constants$51.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char Sony0x9400_ReleaseMode2;
     * }
     */
    public static byte Sony0x9400_ReleaseMode2$get(MemorySegment seg) {
        return (byte)constants$51.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char Sony0x9400_ReleaseMode2;
     * }
     */
    public static void Sony0x9400_ReleaseMode2$set(MemorySegment seg, byte x) {
        constants$51.const$2.set(seg, x);
    }
    public static byte Sony0x9400_ReleaseMode2$get(MemorySegment seg, long index) {
        return (byte)constants$51.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Sony0x9400_ReleaseMode2$set(MemorySegment seg, long index, byte x) {
        constants$51.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Sony0x9400_SequenceImageNumber$VH() {
        return constants$51.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int Sony0x9400_SequenceImageNumber;
     * }
     */
    public static int Sony0x9400_SequenceImageNumber$get(MemorySegment seg) {
        return (int)constants$51.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int Sony0x9400_SequenceImageNumber;
     * }
     */
    public static void Sony0x9400_SequenceImageNumber$set(MemorySegment seg, int x) {
        constants$51.const$3.set(seg, x);
    }
    public static int Sony0x9400_SequenceImageNumber$get(MemorySegment seg, long index) {
        return (int)constants$51.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Sony0x9400_SequenceImageNumber$set(MemorySegment seg, long index, int x) {
        constants$51.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Sony0x9400_SequenceLength1$VH() {
        return constants$51.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char Sony0x9400_SequenceLength1;
     * }
     */
    public static byte Sony0x9400_SequenceLength1$get(MemorySegment seg) {
        return (byte)constants$51.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char Sony0x9400_SequenceLength1;
     * }
     */
    public static void Sony0x9400_SequenceLength1$set(MemorySegment seg, byte x) {
        constants$51.const$4.set(seg, x);
    }
    public static byte Sony0x9400_SequenceLength1$get(MemorySegment seg, long index) {
        return (byte)constants$51.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Sony0x9400_SequenceLength1$set(MemorySegment seg, long index, byte x) {
        constants$51.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Sony0x9400_SequenceFileNumber$VH() {
        return constants$51.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int Sony0x9400_SequenceFileNumber;
     * }
     */
    public static int Sony0x9400_SequenceFileNumber$get(MemorySegment seg) {
        return (int)constants$51.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int Sony0x9400_SequenceFileNumber;
     * }
     */
    public static void Sony0x9400_SequenceFileNumber$set(MemorySegment seg, int x) {
        constants$51.const$5.set(seg, x);
    }
    public static int Sony0x9400_SequenceFileNumber$get(MemorySegment seg, long index) {
        return (int)constants$51.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Sony0x9400_SequenceFileNumber$set(MemorySegment seg, long index, int x) {
        constants$51.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Sony0x9400_SequenceLength2$VH() {
        return constants$52.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char Sony0x9400_SequenceLength2;
     * }
     */
    public static byte Sony0x9400_SequenceLength2$get(MemorySegment seg) {
        return (byte)constants$52.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char Sony0x9400_SequenceLength2;
     * }
     */
    public static void Sony0x9400_SequenceLength2$set(MemorySegment seg, byte x) {
        constants$52.const$0.set(seg, x);
    }
    public static byte Sony0x9400_SequenceLength2$get(MemorySegment seg, long index) {
        return (byte)constants$52.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Sony0x9400_SequenceLength2$set(MemorySegment seg, long index, byte x) {
        constants$52.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AFAreaModeSetting$VH() {
        return constants$52.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char AFAreaModeSetting;
     * }
     */
    public static byte AFAreaModeSetting$get(MemorySegment seg) {
        return (byte)constants$52.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char AFAreaModeSetting;
     * }
     */
    public static void AFAreaModeSetting$set(MemorySegment seg, byte x) {
        constants$52.const$1.set(seg, x);
    }
    public static byte AFAreaModeSetting$get(MemorySegment seg, long index) {
        return (byte)constants$52.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void AFAreaModeSetting$set(MemorySegment seg, long index, byte x) {
        constants$52.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AFAreaMode$VH() {
        return constants$52.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short AFAreaMode;
     * }
     */
    public static short AFAreaMode$get(MemorySegment seg) {
        return (short)constants$52.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short AFAreaMode;
     * }
     */
    public static void AFAreaMode$set(MemorySegment seg, short x) {
        constants$52.const$2.set(seg, x);
    }
    public static short AFAreaMode$get(MemorySegment seg, long index) {
        return (short)constants$52.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void AFAreaMode$set(MemorySegment seg, long index, short x) {
        constants$52.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment FlexibleSpotPosition$slice(MemorySegment seg) {
        return seg.asSlice(20, 4);
    }
    public static VarHandle AFPointSelected$VH() {
        return constants$52.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char AFPointSelected;
     * }
     */
    public static byte AFPointSelected$get(MemorySegment seg) {
        return (byte)constants$52.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char AFPointSelected;
     * }
     */
    public static void AFPointSelected$set(MemorySegment seg, byte x) {
        constants$52.const$3.set(seg, x);
    }
    public static byte AFPointSelected$get(MemorySegment seg, long index) {
        return (byte)constants$52.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void AFPointSelected$set(MemorySegment seg, long index, byte x) {
        constants$52.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AFPointSelected_0x201e$VH() {
        return constants$52.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char AFPointSelected_0x201e;
     * }
     */
    public static byte AFPointSelected_0x201e$get(MemorySegment seg) {
        return (byte)constants$52.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char AFPointSelected_0x201e;
     * }
     */
    public static void AFPointSelected_0x201e$set(MemorySegment seg, byte x) {
        constants$52.const$4.set(seg, x);
    }
    public static byte AFPointSelected_0x201e$get(MemorySegment seg, long index) {
        return (byte)constants$52.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void AFPointSelected_0x201e$set(MemorySegment seg, long index, byte x) {
        constants$52.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nAFPointsUsed$VH() {
        return constants$52.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short nAFPointsUsed;
     * }
     */
    public static short nAFPointsUsed$get(MemorySegment seg) {
        return (short)constants$52.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short nAFPointsUsed;
     * }
     */
    public static void nAFPointsUsed$set(MemorySegment seg, short x) {
        constants$52.const$5.set(seg, x);
    }
    public static short nAFPointsUsed$get(MemorySegment seg, long index) {
        return (short)constants$52.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void nAFPointsUsed$set(MemorySegment seg, long index, short x) {
        constants$52.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment AFPointsUsed$slice(MemorySegment seg) {
        return seg.asSlice(28, 10);
    }
    public static VarHandle AFTracking$VH() {
        return constants$53.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char AFTracking;
     * }
     */
    public static byte AFTracking$get(MemorySegment seg) {
        return (byte)constants$53.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char AFTracking;
     * }
     */
    public static void AFTracking$set(MemorySegment seg, byte x) {
        constants$53.const$0.set(seg, x);
    }
    public static byte AFTracking$get(MemorySegment seg, long index) {
        return (byte)constants$53.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void AFTracking$set(MemorySegment seg, long index, byte x) {
        constants$53.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AFType$VH() {
        return constants$53.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char AFType;
     * }
     */
    public static byte AFType$get(MemorySegment seg) {
        return (byte)constants$53.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char AFType;
     * }
     */
    public static void AFType$set(MemorySegment seg, byte x) {
        constants$53.const$1.set(seg, x);
    }
    public static byte AFType$get(MemorySegment seg, long index) {
        return (byte)constants$53.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void AFType$set(MemorySegment seg, long index, byte x) {
        constants$53.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment FocusLocation$slice(MemorySegment seg) {
        return seg.asSlice(40, 8);
    }
    public static VarHandle FocusPosition$VH() {
        return constants$53.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short FocusPosition;
     * }
     */
    public static short FocusPosition$get(MemorySegment seg) {
        return (short)constants$53.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short FocusPosition;
     * }
     */
    public static void FocusPosition$set(MemorySegment seg, short x) {
        constants$53.const$2.set(seg, x);
    }
    public static short FocusPosition$get(MemorySegment seg, long index) {
        return (short)constants$53.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void FocusPosition$set(MemorySegment seg, long index, short x) {
        constants$53.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AFMicroAdjValue$VH() {
        return constants$53.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * signed char AFMicroAdjValue;
     * }
     */
    public static byte AFMicroAdjValue$get(MemorySegment seg) {
        return (byte)constants$53.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * signed char AFMicroAdjValue;
     * }
     */
    public static void AFMicroAdjValue$set(MemorySegment seg, byte x) {
        constants$53.const$3.set(seg, x);
    }
    public static byte AFMicroAdjValue$get(MemorySegment seg, long index) {
        return (byte)constants$53.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void AFMicroAdjValue$set(MemorySegment seg, long index, byte x) {
        constants$53.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AFMicroAdjOn$VH() {
        return constants$53.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * signed char AFMicroAdjOn;
     * }
     */
    public static byte AFMicroAdjOn$get(MemorySegment seg) {
        return (byte)constants$53.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * signed char AFMicroAdjOn;
     * }
     */
    public static void AFMicroAdjOn$set(MemorySegment seg, byte x) {
        constants$53.const$4.set(seg, x);
    }
    public static byte AFMicroAdjOn$get(MemorySegment seg, long index) {
        return (byte)constants$53.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void AFMicroAdjOn$set(MemorySegment seg, long index, byte x) {
        constants$53.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AFMicroAdjRegisteredLenses$VH() {
        return constants$53.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char AFMicroAdjRegisteredLenses;
     * }
     */
    public static byte AFMicroAdjRegisteredLenses$get(MemorySegment seg) {
        return (byte)constants$53.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char AFMicroAdjRegisteredLenses;
     * }
     */
    public static void AFMicroAdjRegisteredLenses$set(MemorySegment seg, byte x) {
        constants$53.const$5.set(seg, x);
    }
    public static byte AFMicroAdjRegisteredLenses$get(MemorySegment seg, long index) {
        return (byte)constants$53.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void AFMicroAdjRegisteredLenses$set(MemorySegment seg, long index, byte x) {
        constants$53.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle VariableLowPassFilter$VH() {
        return constants$54.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short VariableLowPassFilter;
     * }
     */
    public static short VariableLowPassFilter$get(MemorySegment seg) {
        return (short)constants$54.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short VariableLowPassFilter;
     * }
     */
    public static void VariableLowPassFilter$set(MemorySegment seg, short x) {
        constants$54.const$0.set(seg, x);
    }
    public static short VariableLowPassFilter$get(MemorySegment seg, long index) {
        return (short)constants$54.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void VariableLowPassFilter$set(MemorySegment seg, long index, short x) {
        constants$54.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LongExposureNoiseReduction$VH() {
        return constants$54.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int LongExposureNoiseReduction;
     * }
     */
    public static int LongExposureNoiseReduction$get(MemorySegment seg) {
        return (int)constants$54.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int LongExposureNoiseReduction;
     * }
     */
    public static void LongExposureNoiseReduction$set(MemorySegment seg, int x) {
        constants$54.const$1.set(seg, x);
    }
    public static int LongExposureNoiseReduction$get(MemorySegment seg, long index) {
        return (int)constants$54.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void LongExposureNoiseReduction$set(MemorySegment seg, long index, int x) {
        constants$54.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle HighISONoiseReduction$VH() {
        return constants$54.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short HighISONoiseReduction;
     * }
     */
    public static short HighISONoiseReduction$get(MemorySegment seg) {
        return (short)constants$54.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short HighISONoiseReduction;
     * }
     */
    public static void HighISONoiseReduction$set(MemorySegment seg, short x) {
        constants$54.const$2.set(seg, x);
    }
    public static short HighISONoiseReduction$get(MemorySegment seg, long index) {
        return (short)constants$54.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void HighISONoiseReduction$set(MemorySegment seg, long index, short x) {
        constants$54.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment HDR$slice(MemorySegment seg) {
        return seg.asSlice(62, 4);
    }
    public static VarHandle group2010$VH() {
        return constants$54.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short group2010;
     * }
     */
    public static short group2010$get(MemorySegment seg) {
        return (short)constants$54.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short group2010;
     * }
     */
    public static void group2010$set(MemorySegment seg, short x) {
        constants$54.const$3.set(seg, x);
    }
    public static short group2010$get(MemorySegment seg, long index) {
        return (short)constants$54.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void group2010$set(MemorySegment seg, long index, short x) {
        constants$54.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle group9050$VH() {
        return constants$54.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short group9050;
     * }
     */
    public static short group9050$get(MemorySegment seg) {
        return (short)constants$54.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short group9050;
     * }
     */
    public static void group9050$set(MemorySegment seg, short x) {
        constants$54.const$4.set(seg, x);
    }
    public static short group9050$get(MemorySegment seg, long index) {
        return (short)constants$54.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void group9050$set(MemorySegment seg, long index, short x) {
        constants$54.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle real_iso_offset$VH() {
        return constants$54.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short real_iso_offset;
     * }
     */
    public static short real_iso_offset$get(MemorySegment seg) {
        return (short)constants$54.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short real_iso_offset;
     * }
     */
    public static void real_iso_offset$set(MemorySegment seg, short x) {
        constants$54.const$5.set(seg, x);
    }
    public static short real_iso_offset$get(MemorySegment seg, long index) {
        return (short)constants$54.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void real_iso_offset$set(MemorySegment seg, long index, short x) {
        constants$54.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MeteringMode_offset$VH() {
        return constants$55.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short MeteringMode_offset;
     * }
     */
    public static short MeteringMode_offset$get(MemorySegment seg) {
        return (short)constants$55.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short MeteringMode_offset;
     * }
     */
    public static void MeteringMode_offset$set(MemorySegment seg, short x) {
        constants$55.const$0.set(seg, x);
    }
    public static short MeteringMode_offset$get(MemorySegment seg, long index) {
        return (short)constants$55.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void MeteringMode_offset$set(MemorySegment seg, long index, short x) {
        constants$55.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ExposureProgram_offset$VH() {
        return constants$55.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ExposureProgram_offset;
     * }
     */
    public static short ExposureProgram_offset$get(MemorySegment seg) {
        return (short)constants$55.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ExposureProgram_offset;
     * }
     */
    public static void ExposureProgram_offset$set(MemorySegment seg, short x) {
        constants$55.const$1.set(seg, x);
    }
    public static short ExposureProgram_offset$get(MemorySegment seg, long index) {
        return (short)constants$55.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ExposureProgram_offset$set(MemorySegment seg, long index, short x) {
        constants$55.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ReleaseMode2_offset$VH() {
        return constants$55.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ReleaseMode2_offset;
     * }
     */
    public static short ReleaseMode2_offset$get(MemorySegment seg) {
        return (short)constants$55.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ReleaseMode2_offset;
     * }
     */
    public static void ReleaseMode2_offset$set(MemorySegment seg, short x) {
        constants$55.const$2.set(seg, x);
    }
    public static short ReleaseMode2_offset$get(MemorySegment seg, long index) {
        return (short)constants$55.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseMode2_offset$set(MemorySegment seg, long index, short x) {
        constants$55.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinoltaCamID$VH() {
        return constants$55.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int MinoltaCamID;
     * }
     */
    public static int MinoltaCamID$get(MemorySegment seg) {
        return (int)constants$55.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int MinoltaCamID;
     * }
     */
    public static void MinoltaCamID$set(MemorySegment seg, int x) {
        constants$55.const$3.set(seg, x);
    }
    public static int MinoltaCamID$get(MemorySegment seg, long index) {
        return (int)constants$55.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void MinoltaCamID$set(MemorySegment seg, long index, int x) {
        constants$55.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle firmware$VH() {
        return constants$55.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float firmware;
     * }
     */
    public static float firmware$get(MemorySegment seg) {
        return (float)constants$55.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float firmware;
     * }
     */
    public static void firmware$set(MemorySegment seg, float x) {
        constants$55.const$4.set(seg, x);
    }
    public static float firmware$get(MemorySegment seg, long index) {
        return (float)constants$55.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void firmware$set(MemorySegment seg, long index, float x) {
        constants$55.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ImageCount3_offset$VH() {
        return constants$55.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ImageCount3_offset;
     * }
     */
    public static short ImageCount3_offset$get(MemorySegment seg) {
        return (short)constants$55.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ImageCount3_offset;
     * }
     */
    public static void ImageCount3_offset$set(MemorySegment seg, short x) {
        constants$55.const$5.set(seg, x);
    }
    public static short ImageCount3_offset$get(MemorySegment seg, long index) {
        return (short)constants$55.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ImageCount3_offset$set(MemorySegment seg, long index, short x) {
        constants$55.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ImageCount3$VH() {
        return constants$56.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int ImageCount3;
     * }
     */
    public static int ImageCount3$get(MemorySegment seg) {
        return (int)constants$56.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int ImageCount3;
     * }
     */
    public static void ImageCount3$set(MemorySegment seg, int x) {
        constants$56.const$0.set(seg, x);
    }
    public static int ImageCount3$get(MemorySegment seg, long index) {
        return (int)constants$56.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ImageCount3$set(MemorySegment seg, long index, int x) {
        constants$56.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ElectronicFrontCurtainShutter$VH() {
        return constants$56.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int ElectronicFrontCurtainShutter;
     * }
     */
    public static int ElectronicFrontCurtainShutter$get(MemorySegment seg) {
        return (int)constants$56.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int ElectronicFrontCurtainShutter;
     * }
     */
    public static void ElectronicFrontCurtainShutter$set(MemorySegment seg, int x) {
        constants$56.const$1.set(seg, x);
    }
    public static int ElectronicFrontCurtainShutter$get(MemorySegment seg, long index) {
        return (int)constants$56.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ElectronicFrontCurtainShutter$set(MemorySegment seg, long index, int x) {
        constants$56.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MeteringMode2$VH() {
        return constants$56.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short MeteringMode2;
     * }
     */
    public static short MeteringMode2$get(MemorySegment seg) {
        return (short)constants$56.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short MeteringMode2;
     * }
     */
    public static void MeteringMode2$set(MemorySegment seg, short x) {
        constants$56.const$2.set(seg, x);
    }
    public static short MeteringMode2$get(MemorySegment seg, long index) {
        return (short)constants$56.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void MeteringMode2$set(MemorySegment seg, long index, short x) {
        constants$56.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment SonyDateTime$slice(MemorySegment seg) {
        return seg.asSlice(102, 20);
    }
    public static VarHandle ShotNumberSincePowerUp$VH() {
        return constants$56.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int ShotNumberSincePowerUp;
     * }
     */
    public static int ShotNumberSincePowerUp$get(MemorySegment seg) {
        return (int)constants$56.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int ShotNumberSincePowerUp;
     * }
     */
    public static void ShotNumberSincePowerUp$set(MemorySegment seg, int x) {
        constants$56.const$3.set(seg, x);
    }
    public static int ShotNumberSincePowerUp$get(MemorySegment seg, long index) {
        return (int)constants$56.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ShotNumberSincePowerUp$set(MemorySegment seg, long index, int x) {
        constants$56.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PixelShiftGroupPrefix$VH() {
        return constants$56.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short PixelShiftGroupPrefix;
     * }
     */
    public static short PixelShiftGroupPrefix$get(MemorySegment seg) {
        return (short)constants$56.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short PixelShiftGroupPrefix;
     * }
     */
    public static void PixelShiftGroupPrefix$set(MemorySegment seg, short x) {
        constants$56.const$4.set(seg, x);
    }
    public static short PixelShiftGroupPrefix$get(MemorySegment seg, long index) {
        return (short)constants$56.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void PixelShiftGroupPrefix$set(MemorySegment seg, long index, short x) {
        constants$56.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PixelShiftGroupID$VH() {
        return constants$56.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int PixelShiftGroupID;
     * }
     */
    public static int PixelShiftGroupID$get(MemorySegment seg) {
        return (int)constants$56.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int PixelShiftGroupID;
     * }
     */
    public static void PixelShiftGroupID$set(MemorySegment seg, int x) {
        constants$56.const$5.set(seg, x);
    }
    public static int PixelShiftGroupID$get(MemorySegment seg, long index) {
        return (int)constants$56.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void PixelShiftGroupID$set(MemorySegment seg, long index, int x) {
        constants$56.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nShotsInPixelShiftGroup$VH() {
        return constants$57.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char nShotsInPixelShiftGroup;
     * }
     */
    public static byte nShotsInPixelShiftGroup$get(MemorySegment seg) {
        return (byte)constants$57.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char nShotsInPixelShiftGroup;
     * }
     */
    public static void nShotsInPixelShiftGroup$set(MemorySegment seg, byte x) {
        constants$57.const$0.set(seg, x);
    }
    public static byte nShotsInPixelShiftGroup$get(MemorySegment seg, long index) {
        return (byte)constants$57.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void nShotsInPixelShiftGroup$set(MemorySegment seg, long index, byte x) {
        constants$57.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle numInPixelShiftGroup$VH() {
        return constants$57.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char numInPixelShiftGroup;
     * }
     */
    public static byte numInPixelShiftGroup$get(MemorySegment seg) {
        return (byte)constants$57.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char numInPixelShiftGroup;
     * }
     */
    public static void numInPixelShiftGroup$set(MemorySegment seg, byte x) {
        constants$57.const$1.set(seg, x);
    }
    public static byte numInPixelShiftGroup$get(MemorySegment seg, long index) {
        return (byte)constants$57.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void numInPixelShiftGroup$set(MemorySegment seg, long index, byte x) {
        constants$57.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle prd_ImageHeight$VH() {
        return constants$57.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short prd_ImageHeight;
     * }
     */
    public static short prd_ImageHeight$get(MemorySegment seg) {
        return (short)constants$57.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short prd_ImageHeight;
     * }
     */
    public static void prd_ImageHeight$set(MemorySegment seg, short x) {
        constants$57.const$2.set(seg, x);
    }
    public static short prd_ImageHeight$get(MemorySegment seg, long index) {
        return (short)constants$57.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void prd_ImageHeight$set(MemorySegment seg, long index, short x) {
        constants$57.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle prd_ImageWidth$VH() {
        return constants$57.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short prd_ImageWidth;
     * }
     */
    public static short prd_ImageWidth$get(MemorySegment seg) {
        return (short)constants$57.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short prd_ImageWidth;
     * }
     */
    public static void prd_ImageWidth$set(MemorySegment seg, short x) {
        constants$57.const$3.set(seg, x);
    }
    public static short prd_ImageWidth$get(MemorySegment seg, long index) {
        return (short)constants$57.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void prd_ImageWidth$set(MemorySegment seg, long index, short x) {
        constants$57.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle prd_Total_bps$VH() {
        return constants$57.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short prd_Total_bps;
     * }
     */
    public static short prd_Total_bps$get(MemorySegment seg) {
        return (short)constants$57.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short prd_Total_bps;
     * }
     */
    public static void prd_Total_bps$set(MemorySegment seg, short x) {
        constants$57.const$4.set(seg, x);
    }
    public static short prd_Total_bps$get(MemorySegment seg, long index) {
        return (short)constants$57.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void prd_Total_bps$set(MemorySegment seg, long index, short x) {
        constants$57.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle prd_Active_bps$VH() {
        return constants$57.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short prd_Active_bps;
     * }
     */
    public static short prd_Active_bps$get(MemorySegment seg) {
        return (short)constants$57.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short prd_Active_bps;
     * }
     */
    public static void prd_Active_bps$set(MemorySegment seg, short x) {
        constants$57.const$5.set(seg, x);
    }
    public static short prd_Active_bps$get(MemorySegment seg, long index) {
        return (short)constants$57.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void prd_Active_bps$set(MemorySegment seg, long index, short x) {
        constants$57.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle prd_StorageMethod$VH() {
        return constants$58.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short prd_StorageMethod;
     * }
     */
    public static short prd_StorageMethod$get(MemorySegment seg) {
        return (short)constants$58.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short prd_StorageMethod;
     * }
     */
    public static void prd_StorageMethod$set(MemorySegment seg, short x) {
        constants$58.const$0.set(seg, x);
    }
    public static short prd_StorageMethod$get(MemorySegment seg, long index) {
        return (short)constants$58.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void prd_StorageMethod$set(MemorySegment seg, long index, short x) {
        constants$58.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle prd_BayerPattern$VH() {
        return constants$58.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short prd_BayerPattern;
     * }
     */
    public static short prd_BayerPattern$get(MemorySegment seg) {
        return (short)constants$58.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short prd_BayerPattern;
     * }
     */
    public static void prd_BayerPattern$set(MemorySegment seg, short x) {
        constants$58.const$1.set(seg, x);
    }
    public static short prd_BayerPattern$get(MemorySegment seg, long index) {
        return (short)constants$58.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void prd_BayerPattern$set(MemorySegment seg, long index, short x) {
        constants$58.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SonyRawFileType$VH() {
        return constants$58.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short SonyRawFileType;
     * }
     */
    public static short SonyRawFileType$get(MemorySegment seg) {
        return (short)constants$58.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short SonyRawFileType;
     * }
     */
    public static void SonyRawFileType$set(MemorySegment seg, short x) {
        constants$58.const$2.set(seg, x);
    }
    public static short SonyRawFileType$get(MemorySegment seg, long index) {
        return (short)constants$58.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SonyRawFileType$set(MemorySegment seg, long index, short x) {
        constants$58.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RAWFileType$VH() {
        return constants$58.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short RAWFileType;
     * }
     */
    public static short RAWFileType$get(MemorySegment seg) {
        return (short)constants$58.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short RAWFileType;
     * }
     */
    public static void RAWFileType$set(MemorySegment seg, short x) {
        constants$58.const$3.set(seg, x);
    }
    public static short RAWFileType$get(MemorySegment seg, long index) {
        return (short)constants$58.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void RAWFileType$set(MemorySegment seg, long index, short x) {
        constants$58.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Quality$VH() {
        return constants$58.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int Quality;
     * }
     */
    public static int Quality$get(MemorySegment seg) {
        return (int)constants$58.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int Quality;
     * }
     */
    public static void Quality$set(MemorySegment seg, int x) {
        constants$58.const$4.set(seg, x);
    }
    public static int Quality$get(MemorySegment seg, long index) {
        return (int)constants$58.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Quality$set(MemorySegment seg, long index, int x) {
        constants$58.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FileFormat$VH() {
        return constants$58.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short FileFormat;
     * }
     */
    public static short FileFormat$get(MemorySegment seg) {
        return (short)constants$58.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short FileFormat;
     * }
     */
    public static void FileFormat$set(MemorySegment seg, short x) {
        constants$58.const$5.set(seg, x);
    }
    public static short FileFormat$get(MemorySegment seg, long index) {
        return (short)constants$58.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void FileFormat$set(MemorySegment seg, long index, short x) {
        constants$58.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment MetaVersion$slice(MemorySegment seg) {
        return seg.asSlice(162, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


