// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct internal_data_t {
 *     struct LibRaw_abstract_datastream* input;
 *     struct _iobuf* output;
 *     int input_internal;
 *     char* meta_data;
 *     long long profile_offset;
 *     long long toffset;
 *     unsigned int pana_black[4];
 * };
 * }
 */
public class internal_data_t {

    public static MemoryLayout $LAYOUT() {
        return constants$92.const$3;
    }
    public static VarHandle input$VH() {
        return constants$92.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct LibRaw_abstract_datastream* input;
     * }
     */
    public static MemorySegment input$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$92.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct LibRaw_abstract_datastream* input;
     * }
     */
    public static void input$set(MemorySegment seg, MemorySegment x) {
        constants$92.const$4.set(seg, x);
    }
    public static MemorySegment input$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$92.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void input$set(MemorySegment seg, long index, MemorySegment x) {
        constants$92.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle output$VH() {
        return constants$92.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _iobuf* output;
     * }
     */
    public static MemorySegment output$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$92.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _iobuf* output;
     * }
     */
    public static void output$set(MemorySegment seg, MemorySegment x) {
        constants$92.const$5.set(seg, x);
    }
    public static MemorySegment output$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$92.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void output$set(MemorySegment seg, long index, MemorySegment x) {
        constants$92.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle input_internal$VH() {
        return constants$93.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int input_internal;
     * }
     */
    public static int input_internal$get(MemorySegment seg) {
        return (int)constants$93.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int input_internal;
     * }
     */
    public static void input_internal$set(MemorySegment seg, int x) {
        constants$93.const$0.set(seg, x);
    }
    public static int input_internal$get(MemorySegment seg, long index) {
        return (int)constants$93.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void input_internal$set(MemorySegment seg, long index, int x) {
        constants$93.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle meta_data$VH() {
        return constants$93.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* meta_data;
     * }
     */
    public static MemorySegment meta_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$93.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* meta_data;
     * }
     */
    public static void meta_data$set(MemorySegment seg, MemorySegment x) {
        constants$93.const$1.set(seg, x);
    }
    public static MemorySegment meta_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$93.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void meta_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$93.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle profile_offset$VH() {
        return constants$93.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long profile_offset;
     * }
     */
    public static long profile_offset$get(MemorySegment seg) {
        return (long)constants$93.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long profile_offset;
     * }
     */
    public static void profile_offset$set(MemorySegment seg, long x) {
        constants$93.const$2.set(seg, x);
    }
    public static long profile_offset$get(MemorySegment seg, long index) {
        return (long)constants$93.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void profile_offset$set(MemorySegment seg, long index, long x) {
        constants$93.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle toffset$VH() {
        return constants$93.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long toffset;
     * }
     */
    public static long toffset$get(MemorySegment seg) {
        return (long)constants$93.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long toffset;
     * }
     */
    public static void toffset$set(MemorySegment seg, long x) {
        constants$93.const$3.set(seg, x);
    }
    public static long toffset$get(MemorySegment seg, long index) {
        return (long)constants$93.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void toffset$set(MemorySegment seg, long index, long x) {
        constants$93.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment pana_black$slice(MemorySegment seg) {
        return seg.asSlice(48, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


