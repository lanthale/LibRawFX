// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct internal_data_t {
 *     struct LibRaw_abstract_datastream* input;
 *     struct __sFILE* output;
 *     int input_internal;
 *     char* meta_data;
 *     long long profile_offset;
 *     long long toffset;
 *     unsigned int pana_black[4];
 * };
 * }
 */
public class internal_data_t {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("input"),
        Constants$root.C_POINTER$LAYOUT.withName("output"),
        Constants$root.C_INT$LAYOUT.withName("input_internal"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("meta_data"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("profile_offset"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("toffset"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_INT$LAYOUT).withName("pana_black")
    ).withName("internal_data_t");
    public static MemoryLayout $LAYOUT() {
        return internal_data_t.$struct$LAYOUT;
    }
    static final VarHandle input$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("input"));
    public static VarHandle input$VH() {
        return internal_data_t.input$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct LibRaw_abstract_datastream* input;
     * }
     */
    public static MemorySegment input$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)internal_data_t.input$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct LibRaw_abstract_datastream* input;
     * }
     */
    public static void input$set(MemorySegment seg, MemorySegment x) {
        internal_data_t.input$VH.set(seg, x);
    }
    public static MemorySegment input$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)internal_data_t.input$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void input$set(MemorySegment seg, long index, MemorySegment x) {
        internal_data_t.input$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle output$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("output"));
    public static VarHandle output$VH() {
        return internal_data_t.output$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct __sFILE* output;
     * }
     */
    public static MemorySegment output$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)internal_data_t.output$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct __sFILE* output;
     * }
     */
    public static void output$set(MemorySegment seg, MemorySegment x) {
        internal_data_t.output$VH.set(seg, x);
    }
    public static MemorySegment output$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)internal_data_t.output$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void output$set(MemorySegment seg, long index, MemorySegment x) {
        internal_data_t.output$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle input_internal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("input_internal"));
    public static VarHandle input_internal$VH() {
        return internal_data_t.input_internal$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int input_internal;
     * }
     */
    public static int input_internal$get(MemorySegment seg) {
        return (int)internal_data_t.input_internal$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int input_internal;
     * }
     */
    public static void input_internal$set(MemorySegment seg, int x) {
        internal_data_t.input_internal$VH.set(seg, x);
    }
    public static int input_internal$get(MemorySegment seg, long index) {
        return (int)internal_data_t.input_internal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void input_internal$set(MemorySegment seg, long index, int x) {
        internal_data_t.input_internal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle meta_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("meta_data"));
    public static VarHandle meta_data$VH() {
        return internal_data_t.meta_data$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* meta_data;
     * }
     */
    public static MemorySegment meta_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)internal_data_t.meta_data$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* meta_data;
     * }
     */
    public static void meta_data$set(MemorySegment seg, MemorySegment x) {
        internal_data_t.meta_data$VH.set(seg, x);
    }
    public static MemorySegment meta_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)internal_data_t.meta_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void meta_data$set(MemorySegment seg, long index, MemorySegment x) {
        internal_data_t.meta_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle profile_offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("profile_offset"));
    public static VarHandle profile_offset$VH() {
        return internal_data_t.profile_offset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long profile_offset;
     * }
     */
    public static long profile_offset$get(MemorySegment seg) {
        return (long)internal_data_t.profile_offset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long profile_offset;
     * }
     */
    public static void profile_offset$set(MemorySegment seg, long x) {
        internal_data_t.profile_offset$VH.set(seg, x);
    }
    public static long profile_offset$get(MemorySegment seg, long index) {
        return (long)internal_data_t.profile_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void profile_offset$set(MemorySegment seg, long index, long x) {
        internal_data_t.profile_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle toffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("toffset"));
    public static VarHandle toffset$VH() {
        return internal_data_t.toffset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long toffset;
     * }
     */
    public static long toffset$get(MemorySegment seg) {
        return (long)internal_data_t.toffset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long toffset;
     * }
     */
    public static void toffset$set(MemorySegment seg, long x) {
        internal_data_t.toffset$VH.set(seg, x);
    }
    public static long toffset$get(MemorySegment seg, long index) {
        return (long)internal_data_t.toffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void toffset$set(MemorySegment seg, long index, long x) {
        internal_data_t.toffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment pana_black$slice(MemorySegment seg) {
        return seg.asSlice(48, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


