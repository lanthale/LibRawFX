// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_makernotes_lens_t {
 *     unsigned long long LensID;
 *     char Lens[128];
 *     unsigned short LensFormat;
 *     unsigned short LensMount;
 *     unsigned long long CamID;
 *     unsigned short CameraFormat;
 *     unsigned short CameraMount;
 *     char body[64];
 *     short FocalType;
 *     char LensFeatures_pre[16];
 *     char LensFeatures_suf[16];
 *     float MinFocal;
 *     float MaxFocal;
 *     float MaxAp4MinFocal;
 *     float MaxAp4MaxFocal;
 *     float MinAp4MinFocal;
 *     float MinAp4MaxFocal;
 *     float MaxAp;
 *     float MinAp;
 *     float CurFocal;
 *     float CurAp;
 *     float MaxAp4CurFocal;
 *     float MinAp4CurFocal;
 *     float MinFocusDistance;
 *     float FocusRangeIndex;
 *     float LensFStops;
 *     unsigned long long TeleconverterID;
 *     char Teleconverter[128];
 *     unsigned long long AdapterID;
 *     char Adapter[128];
 *     unsigned long long AttachmentID;
 *     char Attachment[128];
 *     unsigned short FocalUnits;
 *     float FocalLengthIn35mmFormat;
 * };
 * }
 */
public class libraw_makernotes_lens_t {

    public static MemoryLayout $LAYOUT() {
        return constants$78.const$1;
    }
    public static VarHandle LensID$VH() {
        return constants$78.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long long LensID;
     * }
     */
    public static long LensID$get(MemorySegment seg) {
        return (long)constants$78.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long long LensID;
     * }
     */
    public static void LensID$set(MemorySegment seg, long x) {
        constants$78.const$2.set(seg, x);
    }
    public static long LensID$get(MemorySegment seg, long index) {
        return (long)constants$78.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void LensID$set(MemorySegment seg, long index, long x) {
        constants$78.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Lens$slice(MemorySegment seg) {
        return seg.asSlice(8, 128);
    }
    public static VarHandle LensFormat$VH() {
        return constants$78.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short LensFormat;
     * }
     */
    public static short LensFormat$get(MemorySegment seg) {
        return (short)constants$78.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short LensFormat;
     * }
     */
    public static void LensFormat$set(MemorySegment seg, short x) {
        constants$78.const$3.set(seg, x);
    }
    public static short LensFormat$get(MemorySegment seg, long index) {
        return (short)constants$78.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void LensFormat$set(MemorySegment seg, long index, short x) {
        constants$78.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LensMount$VH() {
        return constants$78.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short LensMount;
     * }
     */
    public static short LensMount$get(MemorySegment seg) {
        return (short)constants$78.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short LensMount;
     * }
     */
    public static void LensMount$set(MemorySegment seg, short x) {
        constants$78.const$4.set(seg, x);
    }
    public static short LensMount$get(MemorySegment seg, long index) {
        return (short)constants$78.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void LensMount$set(MemorySegment seg, long index, short x) {
        constants$78.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CamID$VH() {
        return constants$78.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long long CamID;
     * }
     */
    public static long CamID$get(MemorySegment seg) {
        return (long)constants$78.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long long CamID;
     * }
     */
    public static void CamID$set(MemorySegment seg, long x) {
        constants$78.const$5.set(seg, x);
    }
    public static long CamID$get(MemorySegment seg, long index) {
        return (long)constants$78.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CamID$set(MemorySegment seg, long index, long x) {
        constants$78.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CameraFormat$VH() {
        return constants$79.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short CameraFormat;
     * }
     */
    public static short CameraFormat$get(MemorySegment seg) {
        return (short)constants$79.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short CameraFormat;
     * }
     */
    public static void CameraFormat$set(MemorySegment seg, short x) {
        constants$79.const$0.set(seg, x);
    }
    public static short CameraFormat$get(MemorySegment seg, long index) {
        return (short)constants$79.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CameraFormat$set(MemorySegment seg, long index, short x) {
        constants$79.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CameraMount$VH() {
        return constants$79.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short CameraMount;
     * }
     */
    public static short CameraMount$get(MemorySegment seg) {
        return (short)constants$79.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short CameraMount;
     * }
     */
    public static void CameraMount$set(MemorySegment seg, short x) {
        constants$79.const$1.set(seg, x);
    }
    public static short CameraMount$get(MemorySegment seg, long index) {
        return (short)constants$79.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void CameraMount$set(MemorySegment seg, long index, short x) {
        constants$79.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment body$slice(MemorySegment seg) {
        return seg.asSlice(156, 64);
    }
    public static VarHandle FocalType$VH() {
        return constants$79.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short FocalType;
     * }
     */
    public static short FocalType$get(MemorySegment seg) {
        return (short)constants$79.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short FocalType;
     * }
     */
    public static void FocalType$set(MemorySegment seg, short x) {
        constants$79.const$2.set(seg, x);
    }
    public static short FocalType$get(MemorySegment seg, long index) {
        return (short)constants$79.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void FocalType$set(MemorySegment seg, long index, short x) {
        constants$79.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment LensFeatures_pre$slice(MemorySegment seg) {
        return seg.asSlice(222, 16);
    }
    public static MemorySegment LensFeatures_suf$slice(MemorySegment seg) {
        return seg.asSlice(238, 16);
    }
    public static VarHandle MinFocal$VH() {
        return constants$79.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float MinFocal;
     * }
     */
    public static float MinFocal$get(MemorySegment seg) {
        return (float)constants$79.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float MinFocal;
     * }
     */
    public static void MinFocal$set(MemorySegment seg, float x) {
        constants$79.const$3.set(seg, x);
    }
    public static float MinFocal$get(MemorySegment seg, long index) {
        return (float)constants$79.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void MinFocal$set(MemorySegment seg, long index, float x) {
        constants$79.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaxFocal$VH() {
        return constants$79.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float MaxFocal;
     * }
     */
    public static float MaxFocal$get(MemorySegment seg) {
        return (float)constants$79.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float MaxFocal;
     * }
     */
    public static void MaxFocal$set(MemorySegment seg, float x) {
        constants$79.const$4.set(seg, x);
    }
    public static float MaxFocal$get(MemorySegment seg, long index) {
        return (float)constants$79.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxFocal$set(MemorySegment seg, long index, float x) {
        constants$79.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaxAp4MinFocal$VH() {
        return constants$79.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float MaxAp4MinFocal;
     * }
     */
    public static float MaxAp4MinFocal$get(MemorySegment seg) {
        return (float)constants$79.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float MaxAp4MinFocal;
     * }
     */
    public static void MaxAp4MinFocal$set(MemorySegment seg, float x) {
        constants$79.const$5.set(seg, x);
    }
    public static float MaxAp4MinFocal$get(MemorySegment seg, long index) {
        return (float)constants$79.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxAp4MinFocal$set(MemorySegment seg, long index, float x) {
        constants$79.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaxAp4MaxFocal$VH() {
        return constants$80.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float MaxAp4MaxFocal;
     * }
     */
    public static float MaxAp4MaxFocal$get(MemorySegment seg) {
        return (float)constants$80.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float MaxAp4MaxFocal;
     * }
     */
    public static void MaxAp4MaxFocal$set(MemorySegment seg, float x) {
        constants$80.const$0.set(seg, x);
    }
    public static float MaxAp4MaxFocal$get(MemorySegment seg, long index) {
        return (float)constants$80.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxAp4MaxFocal$set(MemorySegment seg, long index, float x) {
        constants$80.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinAp4MinFocal$VH() {
        return constants$80.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float MinAp4MinFocal;
     * }
     */
    public static float MinAp4MinFocal$get(MemorySegment seg) {
        return (float)constants$80.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float MinAp4MinFocal;
     * }
     */
    public static void MinAp4MinFocal$set(MemorySegment seg, float x) {
        constants$80.const$1.set(seg, x);
    }
    public static float MinAp4MinFocal$get(MemorySegment seg, long index) {
        return (float)constants$80.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void MinAp4MinFocal$set(MemorySegment seg, long index, float x) {
        constants$80.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinAp4MaxFocal$VH() {
        return constants$80.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float MinAp4MaxFocal;
     * }
     */
    public static float MinAp4MaxFocal$get(MemorySegment seg) {
        return (float)constants$80.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float MinAp4MaxFocal;
     * }
     */
    public static void MinAp4MaxFocal$set(MemorySegment seg, float x) {
        constants$80.const$2.set(seg, x);
    }
    public static float MinAp4MaxFocal$get(MemorySegment seg, long index) {
        return (float)constants$80.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void MinAp4MaxFocal$set(MemorySegment seg, long index, float x) {
        constants$80.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaxAp$VH() {
        return constants$80.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float MaxAp;
     * }
     */
    public static float MaxAp$get(MemorySegment seg) {
        return (float)constants$80.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float MaxAp;
     * }
     */
    public static void MaxAp$set(MemorySegment seg, float x) {
        constants$80.const$3.set(seg, x);
    }
    public static float MaxAp$get(MemorySegment seg, long index) {
        return (float)constants$80.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxAp$set(MemorySegment seg, long index, float x) {
        constants$80.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinAp$VH() {
        return constants$80.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float MinAp;
     * }
     */
    public static float MinAp$get(MemorySegment seg) {
        return (float)constants$80.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float MinAp;
     * }
     */
    public static void MinAp$set(MemorySegment seg, float x) {
        constants$80.const$4.set(seg, x);
    }
    public static float MinAp$get(MemorySegment seg, long index) {
        return (float)constants$80.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MinAp$set(MemorySegment seg, long index, float x) {
        constants$80.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CurFocal$VH() {
        return constants$80.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float CurFocal;
     * }
     */
    public static float CurFocal$get(MemorySegment seg) {
        return (float)constants$80.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float CurFocal;
     * }
     */
    public static void CurFocal$set(MemorySegment seg, float x) {
        constants$80.const$5.set(seg, x);
    }
    public static float CurFocal$get(MemorySegment seg, long index) {
        return (float)constants$80.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CurFocal$set(MemorySegment seg, long index, float x) {
        constants$80.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CurAp$VH() {
        return constants$81.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float CurAp;
     * }
     */
    public static float CurAp$get(MemorySegment seg) {
        return (float)constants$81.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float CurAp;
     * }
     */
    public static void CurAp$set(MemorySegment seg, float x) {
        constants$81.const$0.set(seg, x);
    }
    public static float CurAp$get(MemorySegment seg, long index) {
        return (float)constants$81.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CurAp$set(MemorySegment seg, long index, float x) {
        constants$81.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaxAp4CurFocal$VH() {
        return constants$81.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float MaxAp4CurFocal;
     * }
     */
    public static float MaxAp4CurFocal$get(MemorySegment seg) {
        return (float)constants$81.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float MaxAp4CurFocal;
     * }
     */
    public static void MaxAp4CurFocal$set(MemorySegment seg, float x) {
        constants$81.const$1.set(seg, x);
    }
    public static float MaxAp4CurFocal$get(MemorySegment seg, long index) {
        return (float)constants$81.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxAp4CurFocal$set(MemorySegment seg, long index, float x) {
        constants$81.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinAp4CurFocal$VH() {
        return constants$81.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float MinAp4CurFocal;
     * }
     */
    public static float MinAp4CurFocal$get(MemorySegment seg) {
        return (float)constants$81.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float MinAp4CurFocal;
     * }
     */
    public static void MinAp4CurFocal$set(MemorySegment seg, float x) {
        constants$81.const$2.set(seg, x);
    }
    public static float MinAp4CurFocal$get(MemorySegment seg, long index) {
        return (float)constants$81.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void MinAp4CurFocal$set(MemorySegment seg, long index, float x) {
        constants$81.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MinFocusDistance$VH() {
        return constants$81.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float MinFocusDistance;
     * }
     */
    public static float MinFocusDistance$get(MemorySegment seg) {
        return (float)constants$81.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float MinFocusDistance;
     * }
     */
    public static void MinFocusDistance$set(MemorySegment seg, float x) {
        constants$81.const$3.set(seg, x);
    }
    public static float MinFocusDistance$get(MemorySegment seg, long index) {
        return (float)constants$81.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void MinFocusDistance$set(MemorySegment seg, long index, float x) {
        constants$81.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FocusRangeIndex$VH() {
        return constants$81.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float FocusRangeIndex;
     * }
     */
    public static float FocusRangeIndex$get(MemorySegment seg) {
        return (float)constants$81.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float FocusRangeIndex;
     * }
     */
    public static void FocusRangeIndex$set(MemorySegment seg, float x) {
        constants$81.const$4.set(seg, x);
    }
    public static float FocusRangeIndex$get(MemorySegment seg, long index) {
        return (float)constants$81.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void FocusRangeIndex$set(MemorySegment seg, long index, float x) {
        constants$81.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LensFStops$VH() {
        return constants$81.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float LensFStops;
     * }
     */
    public static float LensFStops$get(MemorySegment seg) {
        return (float)constants$81.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float LensFStops;
     * }
     */
    public static void LensFStops$set(MemorySegment seg, float x) {
        constants$81.const$5.set(seg, x);
    }
    public static float LensFStops$get(MemorySegment seg, long index) {
        return (float)constants$81.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void LensFStops$set(MemorySegment seg, long index, float x) {
        constants$81.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle TeleconverterID$VH() {
        return constants$82.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long long TeleconverterID;
     * }
     */
    public static long TeleconverterID$get(MemorySegment seg) {
        return (long)constants$82.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long long TeleconverterID;
     * }
     */
    public static void TeleconverterID$set(MemorySegment seg, long x) {
        constants$82.const$0.set(seg, x);
    }
    public static long TeleconverterID$get(MemorySegment seg, long index) {
        return (long)constants$82.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void TeleconverterID$set(MemorySegment seg, long index, long x) {
        constants$82.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Teleconverter$slice(MemorySegment seg) {
        return seg.asSlice(328, 128);
    }
    public static VarHandle AdapterID$VH() {
        return constants$82.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long long AdapterID;
     * }
     */
    public static long AdapterID$get(MemorySegment seg) {
        return (long)constants$82.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long long AdapterID;
     * }
     */
    public static void AdapterID$set(MemorySegment seg, long x) {
        constants$82.const$1.set(seg, x);
    }
    public static long AdapterID$get(MemorySegment seg, long index) {
        return (long)constants$82.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void AdapterID$set(MemorySegment seg, long index, long x) {
        constants$82.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Adapter$slice(MemorySegment seg) {
        return seg.asSlice(464, 128);
    }
    public static VarHandle AttachmentID$VH() {
        return constants$82.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long long AttachmentID;
     * }
     */
    public static long AttachmentID$get(MemorySegment seg) {
        return (long)constants$82.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long long AttachmentID;
     * }
     */
    public static void AttachmentID$set(MemorySegment seg, long x) {
        constants$82.const$2.set(seg, x);
    }
    public static long AttachmentID$get(MemorySegment seg, long index) {
        return (long)constants$82.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void AttachmentID$set(MemorySegment seg, long index, long x) {
        constants$82.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Attachment$slice(MemorySegment seg) {
        return seg.asSlice(600, 128);
    }
    public static VarHandle FocalUnits$VH() {
        return constants$82.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short FocalUnits;
     * }
     */
    public static short FocalUnits$get(MemorySegment seg) {
        return (short)constants$82.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short FocalUnits;
     * }
     */
    public static void FocalUnits$set(MemorySegment seg, short x) {
        constants$82.const$3.set(seg, x);
    }
    public static short FocalUnits$get(MemorySegment seg, long index) {
        return (short)constants$82.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void FocalUnits$set(MemorySegment seg, long index, short x) {
        constants$82.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FocalLengthIn35mmFormat$VH() {
        return constants$82.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float FocalLengthIn35mmFormat;
     * }
     */
    public static float FocalLengthIn35mmFormat$get(MemorySegment seg) {
        return (float)constants$82.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float FocalLengthIn35mmFormat;
     * }
     */
    public static void FocalLengthIn35mmFormat$set(MemorySegment seg, float x) {
        constants$82.const$4.set(seg, x);
    }
    public static float FocalLengthIn35mmFormat$get(MemorySegment seg, long index) {
        return (float)constants$82.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void FocalLengthIn35mmFormat$set(MemorySegment seg, long index, float x) {
        constants$82.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


