// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_hasselblad_makernotes_t {
 *     int BaseISO;
 *     double Gain;
 *     char Sensor[8];
 *     char SensorUnit[64];
 *     char HostBody[64];
 *     int SensorCode;
 *     int SensorSubCode;
 *     int CoatingCode;
 *     int uncropped;
 *     char CaptureSequenceInitiator[32];
 *     char SensorUnitConnector[64];
 *     int format;
 *     int nIFD_CM[2];
 *     int RecommendedCrop[2];
 *     double  mnColorMatrix[4][3];
 * };
 * }
 */
public class libraw_hasselblad_makernotes_t {

    public static MemoryLayout $LAYOUT() {
        return constants$26.const$0;
    }
    public static VarHandle BaseISO$VH() {
        return constants$26.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int BaseISO;
     * }
     */
    public static int BaseISO$get(MemorySegment seg) {
        return (int)constants$26.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int BaseISO;
     * }
     */
    public static void BaseISO$set(MemorySegment seg, int x) {
        constants$26.const$1.set(seg, x);
    }
    public static int BaseISO$get(MemorySegment seg, long index) {
        return (int)constants$26.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void BaseISO$set(MemorySegment seg, long index, int x) {
        constants$26.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Gain$VH() {
        return constants$26.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double Gain;
     * }
     */
    public static double Gain$get(MemorySegment seg) {
        return (double)constants$26.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double Gain;
     * }
     */
    public static void Gain$set(MemorySegment seg, double x) {
        constants$26.const$2.set(seg, x);
    }
    public static double Gain$get(MemorySegment seg, long index) {
        return (double)constants$26.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Gain$set(MemorySegment seg, long index, double x) {
        constants$26.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Sensor$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static MemorySegment SensorUnit$slice(MemorySegment seg) {
        return seg.asSlice(24, 64);
    }
    public static MemorySegment HostBody$slice(MemorySegment seg) {
        return seg.asSlice(88, 64);
    }
    public static VarHandle SensorCode$VH() {
        return constants$26.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int SensorCode;
     * }
     */
    public static int SensorCode$get(MemorySegment seg) {
        return (int)constants$26.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int SensorCode;
     * }
     */
    public static void SensorCode$set(MemorySegment seg, int x) {
        constants$26.const$3.set(seg, x);
    }
    public static int SensorCode$get(MemorySegment seg, long index) {
        return (int)constants$26.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SensorCode$set(MemorySegment seg, long index, int x) {
        constants$26.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SensorSubCode$VH() {
        return constants$26.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int SensorSubCode;
     * }
     */
    public static int SensorSubCode$get(MemorySegment seg) {
        return (int)constants$26.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int SensorSubCode;
     * }
     */
    public static void SensorSubCode$set(MemorySegment seg, int x) {
        constants$26.const$4.set(seg, x);
    }
    public static int SensorSubCode$get(MemorySegment seg, long index) {
        return (int)constants$26.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void SensorSubCode$set(MemorySegment seg, long index, int x) {
        constants$26.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CoatingCode$VH() {
        return constants$26.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int CoatingCode;
     * }
     */
    public static int CoatingCode$get(MemorySegment seg) {
        return (int)constants$26.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int CoatingCode;
     * }
     */
    public static void CoatingCode$set(MemorySegment seg, int x) {
        constants$26.const$5.set(seg, x);
    }
    public static int CoatingCode$get(MemorySegment seg, long index) {
        return (int)constants$26.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CoatingCode$set(MemorySegment seg, long index, int x) {
        constants$26.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle uncropped$VH() {
        return constants$27.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int uncropped;
     * }
     */
    public static int uncropped$get(MemorySegment seg) {
        return (int)constants$27.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int uncropped;
     * }
     */
    public static void uncropped$set(MemorySegment seg, int x) {
        constants$27.const$0.set(seg, x);
    }
    public static int uncropped$get(MemorySegment seg, long index) {
        return (int)constants$27.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void uncropped$set(MemorySegment seg, long index, int x) {
        constants$27.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment CaptureSequenceInitiator$slice(MemorySegment seg) {
        return seg.asSlice(168, 32);
    }
    public static MemorySegment SensorUnitConnector$slice(MemorySegment seg) {
        return seg.asSlice(200, 64);
    }
    public static VarHandle format$VH() {
        return constants$27.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int format;
     * }
     */
    public static int format$get(MemorySegment seg) {
        return (int)constants$27.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int format;
     * }
     */
    public static void format$set(MemorySegment seg, int x) {
        constants$27.const$1.set(seg, x);
    }
    public static int format$get(MemorySegment seg, long index) {
        return (int)constants$27.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void format$set(MemorySegment seg, long index, int x) {
        constants$27.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment nIFD_CM$slice(MemorySegment seg) {
        return seg.asSlice(268, 8);
    }
    public static MemorySegment RecommendedCrop$slice(MemorySegment seg) {
        return seg.asSlice(276, 8);
    }
    public static MemorySegment mnColorMatrix$slice(MemorySegment seg) {
        return seg.asSlice(288, 96);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


