// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class fuji_q_table {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("q_table"),
        C_INT.withName("raw_bits"),
        C_INT.withName("total_values"),
        C_INT.withName("max_grad"),
        C_INT.withName("q_grad_mult"),
        C_INT.withName("q_base"),
        MemoryLayout.paddingLayout(32)
    ).withName("fuji_q_table");
    public static MemoryLayout $LAYOUT() {
        return fuji_q_table.$struct$LAYOUT;
    }
    static final VarHandle q_table$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("q_table")));
    public static VarHandle q_table$VH() {
        return fuji_q_table.q_table$VH;
    }
    public static MemoryAddress q_table$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)fuji_q_table.q_table$VH.get(seg);
    }
    public static void q_table$set( MemorySegment seg, MemoryAddress x) {
        fuji_q_table.q_table$VH.set(seg, x);
    }
    public static MemoryAddress q_table$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)fuji_q_table.q_table$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void q_table$set(MemorySegment seg, long index, MemoryAddress x) {
        fuji_q_table.q_table$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle raw_bits$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("raw_bits"));
    public static VarHandle raw_bits$VH() {
        return fuji_q_table.raw_bits$VH;
    }
    public static int raw_bits$get(MemorySegment seg) {
        return (int)fuji_q_table.raw_bits$VH.get(seg);
    }
    public static void raw_bits$set( MemorySegment seg, int x) {
        fuji_q_table.raw_bits$VH.set(seg, x);
    }
    public static int raw_bits$get(MemorySegment seg, long index) {
        return (int)fuji_q_table.raw_bits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void raw_bits$set(MemorySegment seg, long index, int x) {
        fuji_q_table.raw_bits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle total_values$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("total_values"));
    public static VarHandle total_values$VH() {
        return fuji_q_table.total_values$VH;
    }
    public static int total_values$get(MemorySegment seg) {
        return (int)fuji_q_table.total_values$VH.get(seg);
    }
    public static void total_values$set( MemorySegment seg, int x) {
        fuji_q_table.total_values$VH.set(seg, x);
    }
    public static int total_values$get(MemorySegment seg, long index) {
        return (int)fuji_q_table.total_values$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void total_values$set(MemorySegment seg, long index, int x) {
        fuji_q_table.total_values$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_grad$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("max_grad"));
    public static VarHandle max_grad$VH() {
        return fuji_q_table.max_grad$VH;
    }
    public static int max_grad$get(MemorySegment seg) {
        return (int)fuji_q_table.max_grad$VH.get(seg);
    }
    public static void max_grad$set( MemorySegment seg, int x) {
        fuji_q_table.max_grad$VH.set(seg, x);
    }
    public static int max_grad$get(MemorySegment seg, long index) {
        return (int)fuji_q_table.max_grad$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_grad$set(MemorySegment seg, long index, int x) {
        fuji_q_table.max_grad$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle q_grad_mult$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("q_grad_mult"));
    public static VarHandle q_grad_mult$VH() {
        return fuji_q_table.q_grad_mult$VH;
    }
    public static int q_grad_mult$get(MemorySegment seg) {
        return (int)fuji_q_table.q_grad_mult$VH.get(seg);
    }
    public static void q_grad_mult$set( MemorySegment seg, int x) {
        fuji_q_table.q_grad_mult$VH.set(seg, x);
    }
    public static int q_grad_mult$get(MemorySegment seg, long index) {
        return (int)fuji_q_table.q_grad_mult$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void q_grad_mult$set(MemorySegment seg, long index, int x) {
        fuji_q_table.q_grad_mult$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle q_base$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("q_base"));
    public static VarHandle q_base$VH() {
        return fuji_q_table.q_base$VH;
    }
    public static int q_base$get(MemorySegment seg) {
        return (int)fuji_q_table.q_base$VH.get(seg);
    }
    public static void q_base$set( MemorySegment seg, int x) {
        fuji_q_table.q_base$VH.set(seg, x);
    }
    public static int q_base$get(MemorySegment seg, long index) {
        return (int)fuji_q_table.q_base$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void q_base$set(MemorySegment seg, long index, int x) {
        fuji_q_table.q_base$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


