// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct fuji_q_table {
 *     signed char* q_table;
 *     int raw_bits;
 *     int total_values;
 *     int max_grad;
 *     int q_grad_mult;
 *     int q_base;
 * };
 * }
 */
public class fuji_q_table {

    public static MemoryLayout $LAYOUT() {
        return constants$90.const$2;
    }
    public static VarHandle q_table$VH() {
        return constants$90.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * signed char* q_table;
     * }
     */
    public static MemorySegment q_table$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$90.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * signed char* q_table;
     * }
     */
    public static void q_table$set(MemorySegment seg, MemorySegment x) {
        constants$90.const$3.set(seg, x);
    }
    public static MemorySegment q_table$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$90.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void q_table$set(MemorySegment seg, long index, MemorySegment x) {
        constants$90.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle raw_bits$VH() {
        return constants$90.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int raw_bits;
     * }
     */
    public static int raw_bits$get(MemorySegment seg) {
        return (int)constants$90.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int raw_bits;
     * }
     */
    public static void raw_bits$set(MemorySegment seg, int x) {
        constants$90.const$4.set(seg, x);
    }
    public static int raw_bits$get(MemorySegment seg, long index) {
        return (int)constants$90.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void raw_bits$set(MemorySegment seg, long index, int x) {
        constants$90.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle total_values$VH() {
        return constants$90.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int total_values;
     * }
     */
    public static int total_values$get(MemorySegment seg) {
        return (int)constants$90.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int total_values;
     * }
     */
    public static void total_values$set(MemorySegment seg, int x) {
        constants$90.const$5.set(seg, x);
    }
    public static int total_values$get(MemorySegment seg, long index) {
        return (int)constants$90.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void total_values$set(MemorySegment seg, long index, int x) {
        constants$90.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_grad$VH() {
        return constants$91.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int max_grad;
     * }
     */
    public static int max_grad$get(MemorySegment seg) {
        return (int)constants$91.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int max_grad;
     * }
     */
    public static void max_grad$set(MemorySegment seg, int x) {
        constants$91.const$0.set(seg, x);
    }
    public static int max_grad$get(MemorySegment seg, long index) {
        return (int)constants$91.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void max_grad$set(MemorySegment seg, long index, int x) {
        constants$91.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle q_grad_mult$VH() {
        return constants$91.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int q_grad_mult;
     * }
     */
    public static int q_grad_mult$get(MemorySegment seg) {
        return (int)constants$91.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int q_grad_mult;
     * }
     */
    public static void q_grad_mult$set(MemorySegment seg, int x) {
        constants$91.const$1.set(seg, x);
    }
    public static int q_grad_mult$get(MemorySegment seg, long index) {
        return (int)constants$91.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void q_grad_mult$set(MemorySegment seg, long index, int x) {
        constants$91.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle q_base$VH() {
        return constants$91.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int q_base;
     * }
     */
    public static int q_base$get(MemorySegment seg) {
        return (int)constants$91.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int q_base;
     * }
     */
    public static void q_base$set(MemorySegment seg, int x) {
        constants$91.const$2.set(seg, x);
    }
    public static int q_base$get(MemorySegment seg, long index) {
        return (int)constants$91.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void q_base$set(MemorySegment seg, long index, int x) {
        constants$91.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


