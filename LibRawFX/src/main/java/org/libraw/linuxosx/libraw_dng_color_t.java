// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class libraw_dng_color_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("parsedfields"),
        Constants$root.C_SHORT$LAYOUT.withName("illuminant"),
        MemoryLayout.paddingLayout(16),
        MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT)).withName("calibration"),
        MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(3, Constants$root.C_FLOAT$LAYOUT)).withName("colormatrix"),
        MemoryLayout.sequenceLayout(3, MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT)).withName("forwardmatrix")
    );
    public static MemoryLayout $LAYOUT() {
        return libraw_dng_color_t.$struct$LAYOUT;
    }
    static final VarHandle parsedfields$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("parsedfields"));
    public static VarHandle parsedfields$VH() {
        return libraw_dng_color_t.parsedfields$VH;
    }
    public static int parsedfields$get(MemorySegment seg) {
        return (int)libraw_dng_color_t.parsedfields$VH.get(seg);
    }
    public static void parsedfields$set( MemorySegment seg, int x) {
        libraw_dng_color_t.parsedfields$VH.set(seg, x);
    }
    public static int parsedfields$get(MemorySegment seg, long index) {
        return (int)libraw_dng_color_t.parsedfields$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void parsedfields$set(MemorySegment seg, long index, int x) {
        libraw_dng_color_t.parsedfields$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle illuminant$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("illuminant"));
    public static VarHandle illuminant$VH() {
        return libraw_dng_color_t.illuminant$VH;
    }
    public static short illuminant$get(MemorySegment seg) {
        return (short)libraw_dng_color_t.illuminant$VH.get(seg);
    }
    public static void illuminant$set( MemorySegment seg, short x) {
        libraw_dng_color_t.illuminant$VH.set(seg, x);
    }
    public static short illuminant$get(MemorySegment seg, long index) {
        return (short)libraw_dng_color_t.illuminant$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void illuminant$set(MemorySegment seg, long index, short x) {
        libraw_dng_color_t.illuminant$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment calibration$slice(MemorySegment seg) {
        return seg.asSlice(8, 64);
    }
    public static MemorySegment colormatrix$slice(MemorySegment seg) {
        return seg.asSlice(72, 48);
    }
    public static MemorySegment forwardmatrix$slice(MemorySegment seg) {
        return seg.asSlice(120, 48);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


