// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*memory_callback)(void* data,char* file,char* where);
 * }
 */
public interface memory_callback {

    void apply(java.lang.foreign.MemorySegment data, java.lang.foreign.MemorySegment file, java.lang.foreign.MemorySegment where);
    static MemorySegment allocate(memory_callback fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$0.memory_callback_UP$MH, fi, constants$0.memory_callback$FUNC, scope);
    }
    static memory_callback ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _data, java.lang.foreign.MemorySegment _file, java.lang.foreign.MemorySegment _where) -> {
            try {
                constants$0.memory_callback_DOWN$MH.invokeExact(symbol, _data, _file, _where);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


