// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_nikon_makernotes_t {
 *     double ExposureBracketValue;
 *     unsigned short ActiveDLighting;
 *     unsigned short ShootingMode;
 *     unsigned char ImageStabilization[7];
 *     unsigned char VibrationReduction;
 *     unsigned char VRMode;
 *     char FlashSetting[13];
 *     char FlashType[20];
 *     unsigned char FlashExposureCompensation[4];
 *     unsigned char ExternalFlashExposureComp[4];
 *     unsigned char FlashExposureBracketValue[4];
 *     unsigned char FlashMode;
 *     signed char FlashExposureCompensation2;
 *     signed char FlashExposureCompensation3;
 *     signed char FlashExposureCompensation4;
 *     unsigned char FlashSource;
 *     unsigned char FlashFirmware[2];
 *     unsigned char ExternalFlashFlags;
 *     unsigned char FlashControlCommanderMode;
 *     unsigned char FlashOutputAndCompensation;
 *     unsigned char FlashFocalLength;
 *     unsigned char FlashGNDistance;
 *     unsigned char FlashGroupControlMode[4];
 *     unsigned char FlashGroupOutputAndCompensation[4];
 *     unsigned char FlashColorFilter;
 *     unsigned short NEFCompression;
 *     int ExposureMode;
 *     int ExposureProgram;
 *     int nMEshots;
 *     int MEgainOn;
 *     double ME_WB[4];
 *     unsigned char AFFineTune;
 *     unsigned char AFFineTuneIndex;
 *     signed char AFFineTuneAdj;
 *     unsigned int LensDataVersion;
 *     unsigned int FlashInfoVersion;
 *     unsigned int ColorBalanceVersion;
 *     unsigned char key;
 *     unsigned short NEFBitDepth[4];
 *     unsigned short HighSpeedCropFormat;
 *     struct libraw_sensor_highspeed_crop_t SensorHighSpeedCrop;
 *     unsigned short SensorWidth;
 *     unsigned short SensorHeight;
 *     unsigned short Active_D_Lighting;
 *     unsigned int ShotInfoVersion;
 *     short MakernotesFlip;
 *     double RollAngle;
 *     double PitchAngle;
 *     double YawAngle;
 * };
 * }
 */
public class libraw_nikon_makernotes_t {

    public static MemoryLayout $LAYOUT() {
        return constants$33.const$3;
    }
    public static VarHandle ExposureBracketValue$VH() {
        return constants$33.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double ExposureBracketValue;
     * }
     */
    public static double ExposureBracketValue$get(MemorySegment seg) {
        return (double)constants$33.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double ExposureBracketValue;
     * }
     */
    public static void ExposureBracketValue$set(MemorySegment seg, double x) {
        constants$33.const$4.set(seg, x);
    }
    public static double ExposureBracketValue$get(MemorySegment seg, long index) {
        return (double)constants$33.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ExposureBracketValue$set(MemorySegment seg, long index, double x) {
        constants$33.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ActiveDLighting$VH() {
        return constants$33.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ActiveDLighting;
     * }
     */
    public static short ActiveDLighting$get(MemorySegment seg) {
        return (short)constants$33.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ActiveDLighting;
     * }
     */
    public static void ActiveDLighting$set(MemorySegment seg, short x) {
        constants$33.const$5.set(seg, x);
    }
    public static short ActiveDLighting$get(MemorySegment seg, long index) {
        return (short)constants$33.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ActiveDLighting$set(MemorySegment seg, long index, short x) {
        constants$33.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ShootingMode$VH() {
        return constants$34.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ShootingMode;
     * }
     */
    public static short ShootingMode$get(MemorySegment seg) {
        return (short)constants$34.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ShootingMode;
     * }
     */
    public static void ShootingMode$set(MemorySegment seg, short x) {
        constants$34.const$0.set(seg, x);
    }
    public static short ShootingMode$get(MemorySegment seg, long index) {
        return (short)constants$34.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ShootingMode$set(MemorySegment seg, long index, short x) {
        constants$34.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ImageStabilization$slice(MemorySegment seg) {
        return seg.asSlice(12, 7);
    }
    public static VarHandle VibrationReduction$VH() {
        return constants$34.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char VibrationReduction;
     * }
     */
    public static byte VibrationReduction$get(MemorySegment seg) {
        return (byte)constants$34.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char VibrationReduction;
     * }
     */
    public static void VibrationReduction$set(MemorySegment seg, byte x) {
        constants$34.const$1.set(seg, x);
    }
    public static byte VibrationReduction$get(MemorySegment seg, long index) {
        return (byte)constants$34.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void VibrationReduction$set(MemorySegment seg, long index, byte x) {
        constants$34.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle VRMode$VH() {
        return constants$34.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char VRMode;
     * }
     */
    public static byte VRMode$get(MemorySegment seg) {
        return (byte)constants$34.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char VRMode;
     * }
     */
    public static void VRMode$set(MemorySegment seg, byte x) {
        constants$34.const$2.set(seg, x);
    }
    public static byte VRMode$get(MemorySegment seg, long index) {
        return (byte)constants$34.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void VRMode$set(MemorySegment seg, long index, byte x) {
        constants$34.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment FlashSetting$slice(MemorySegment seg) {
        return seg.asSlice(21, 13);
    }
    public static MemorySegment FlashType$slice(MemorySegment seg) {
        return seg.asSlice(34, 20);
    }
    public static MemorySegment FlashExposureCompensation$slice(MemorySegment seg) {
        return seg.asSlice(54, 4);
    }
    public static MemorySegment ExternalFlashExposureComp$slice(MemorySegment seg) {
        return seg.asSlice(58, 4);
    }
    public static MemorySegment FlashExposureBracketValue$slice(MemorySegment seg) {
        return seg.asSlice(62, 4);
    }
    public static VarHandle FlashMode$VH() {
        return constants$34.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char FlashMode;
     * }
     */
    public static byte FlashMode$get(MemorySegment seg) {
        return (byte)constants$34.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char FlashMode;
     * }
     */
    public static void FlashMode$set(MemorySegment seg, byte x) {
        constants$34.const$3.set(seg, x);
    }
    public static byte FlashMode$get(MemorySegment seg, long index) {
        return (byte)constants$34.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashMode$set(MemorySegment seg, long index, byte x) {
        constants$34.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FlashExposureCompensation2$VH() {
        return constants$34.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * signed char FlashExposureCompensation2;
     * }
     */
    public static byte FlashExposureCompensation2$get(MemorySegment seg) {
        return (byte)constants$34.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * signed char FlashExposureCompensation2;
     * }
     */
    public static void FlashExposureCompensation2$set(MemorySegment seg, byte x) {
        constants$34.const$4.set(seg, x);
    }
    public static byte FlashExposureCompensation2$get(MemorySegment seg, long index) {
        return (byte)constants$34.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashExposureCompensation2$set(MemorySegment seg, long index, byte x) {
        constants$34.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FlashExposureCompensation3$VH() {
        return constants$34.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * signed char FlashExposureCompensation3;
     * }
     */
    public static byte FlashExposureCompensation3$get(MemorySegment seg) {
        return (byte)constants$34.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * signed char FlashExposureCompensation3;
     * }
     */
    public static void FlashExposureCompensation3$set(MemorySegment seg, byte x) {
        constants$34.const$5.set(seg, x);
    }
    public static byte FlashExposureCompensation3$get(MemorySegment seg, long index) {
        return (byte)constants$34.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashExposureCompensation3$set(MemorySegment seg, long index, byte x) {
        constants$34.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FlashExposureCompensation4$VH() {
        return constants$35.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * signed char FlashExposureCompensation4;
     * }
     */
    public static byte FlashExposureCompensation4$get(MemorySegment seg) {
        return (byte)constants$35.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * signed char FlashExposureCompensation4;
     * }
     */
    public static void FlashExposureCompensation4$set(MemorySegment seg, byte x) {
        constants$35.const$0.set(seg, x);
    }
    public static byte FlashExposureCompensation4$get(MemorySegment seg, long index) {
        return (byte)constants$35.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashExposureCompensation4$set(MemorySegment seg, long index, byte x) {
        constants$35.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FlashSource$VH() {
        return constants$35.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char FlashSource;
     * }
     */
    public static byte FlashSource$get(MemorySegment seg) {
        return (byte)constants$35.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char FlashSource;
     * }
     */
    public static void FlashSource$set(MemorySegment seg, byte x) {
        constants$35.const$1.set(seg, x);
    }
    public static byte FlashSource$get(MemorySegment seg, long index) {
        return (byte)constants$35.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashSource$set(MemorySegment seg, long index, byte x) {
        constants$35.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment FlashFirmware$slice(MemorySegment seg) {
        return seg.asSlice(71, 2);
    }
    public static VarHandle ExternalFlashFlags$VH() {
        return constants$35.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ExternalFlashFlags;
     * }
     */
    public static byte ExternalFlashFlags$get(MemorySegment seg) {
        return (byte)constants$35.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ExternalFlashFlags;
     * }
     */
    public static void ExternalFlashFlags$set(MemorySegment seg, byte x) {
        constants$35.const$2.set(seg, x);
    }
    public static byte ExternalFlashFlags$get(MemorySegment seg, long index) {
        return (byte)constants$35.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ExternalFlashFlags$set(MemorySegment seg, long index, byte x) {
        constants$35.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FlashControlCommanderMode$VH() {
        return constants$35.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char FlashControlCommanderMode;
     * }
     */
    public static byte FlashControlCommanderMode$get(MemorySegment seg) {
        return (byte)constants$35.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char FlashControlCommanderMode;
     * }
     */
    public static void FlashControlCommanderMode$set(MemorySegment seg, byte x) {
        constants$35.const$3.set(seg, x);
    }
    public static byte FlashControlCommanderMode$get(MemorySegment seg, long index) {
        return (byte)constants$35.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashControlCommanderMode$set(MemorySegment seg, long index, byte x) {
        constants$35.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FlashOutputAndCompensation$VH() {
        return constants$35.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char FlashOutputAndCompensation;
     * }
     */
    public static byte FlashOutputAndCompensation$get(MemorySegment seg) {
        return (byte)constants$35.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char FlashOutputAndCompensation;
     * }
     */
    public static void FlashOutputAndCompensation$set(MemorySegment seg, byte x) {
        constants$35.const$4.set(seg, x);
    }
    public static byte FlashOutputAndCompensation$get(MemorySegment seg, long index) {
        return (byte)constants$35.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashOutputAndCompensation$set(MemorySegment seg, long index, byte x) {
        constants$35.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FlashFocalLength$VH() {
        return constants$35.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char FlashFocalLength;
     * }
     */
    public static byte FlashFocalLength$get(MemorySegment seg) {
        return (byte)constants$35.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char FlashFocalLength;
     * }
     */
    public static void FlashFocalLength$set(MemorySegment seg, byte x) {
        constants$35.const$5.set(seg, x);
    }
    public static byte FlashFocalLength$get(MemorySegment seg, long index) {
        return (byte)constants$35.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashFocalLength$set(MemorySegment seg, long index, byte x) {
        constants$35.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FlashGNDistance$VH() {
        return constants$36.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char FlashGNDistance;
     * }
     */
    public static byte FlashGNDistance$get(MemorySegment seg) {
        return (byte)constants$36.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char FlashGNDistance;
     * }
     */
    public static void FlashGNDistance$set(MemorySegment seg, byte x) {
        constants$36.const$0.set(seg, x);
    }
    public static byte FlashGNDistance$get(MemorySegment seg, long index) {
        return (byte)constants$36.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashGNDistance$set(MemorySegment seg, long index, byte x) {
        constants$36.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment FlashGroupControlMode$slice(MemorySegment seg) {
        return seg.asSlice(78, 4);
    }
    public static MemorySegment FlashGroupOutputAndCompensation$slice(MemorySegment seg) {
        return seg.asSlice(82, 4);
    }
    public static VarHandle FlashColorFilter$VH() {
        return constants$36.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char FlashColorFilter;
     * }
     */
    public static byte FlashColorFilter$get(MemorySegment seg) {
        return (byte)constants$36.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char FlashColorFilter;
     * }
     */
    public static void FlashColorFilter$set(MemorySegment seg, byte x) {
        constants$36.const$1.set(seg, x);
    }
    public static byte FlashColorFilter$get(MemorySegment seg, long index) {
        return (byte)constants$36.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashColorFilter$set(MemorySegment seg, long index, byte x) {
        constants$36.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle NEFCompression$VH() {
        return constants$36.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short NEFCompression;
     * }
     */
    public static short NEFCompression$get(MemorySegment seg) {
        return (short)constants$36.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short NEFCompression;
     * }
     */
    public static void NEFCompression$set(MemorySegment seg, short x) {
        constants$36.const$2.set(seg, x);
    }
    public static short NEFCompression$get(MemorySegment seg, long index) {
        return (short)constants$36.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void NEFCompression$set(MemorySegment seg, long index, short x) {
        constants$36.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ExposureMode$VH() {
        return constants$36.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int ExposureMode;
     * }
     */
    public static int ExposureMode$get(MemorySegment seg) {
        return (int)constants$36.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int ExposureMode;
     * }
     */
    public static void ExposureMode$set(MemorySegment seg, int x) {
        constants$36.const$3.set(seg, x);
    }
    public static int ExposureMode$get(MemorySegment seg, long index) {
        return (int)constants$36.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ExposureMode$set(MemorySegment seg, long index, int x) {
        constants$36.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ExposureProgram$VH() {
        return constants$36.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int ExposureProgram;
     * }
     */
    public static int ExposureProgram$get(MemorySegment seg) {
        return (int)constants$36.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int ExposureProgram;
     * }
     */
    public static void ExposureProgram$set(MemorySegment seg, int x) {
        constants$36.const$4.set(seg, x);
    }
    public static int ExposureProgram$get(MemorySegment seg, long index) {
        return (int)constants$36.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ExposureProgram$set(MemorySegment seg, long index, int x) {
        constants$36.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nMEshots$VH() {
        return constants$36.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int nMEshots;
     * }
     */
    public static int nMEshots$get(MemorySegment seg) {
        return (int)constants$36.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int nMEshots;
     * }
     */
    public static void nMEshots$set(MemorySegment seg, int x) {
        constants$36.const$5.set(seg, x);
    }
    public static int nMEshots$get(MemorySegment seg, long index) {
        return (int)constants$36.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void nMEshots$set(MemorySegment seg, long index, int x) {
        constants$36.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MEgainOn$VH() {
        return constants$37.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int MEgainOn;
     * }
     */
    public static int MEgainOn$get(MemorySegment seg) {
        return (int)constants$37.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int MEgainOn;
     * }
     */
    public static void MEgainOn$set(MemorySegment seg, int x) {
        constants$37.const$0.set(seg, x);
    }
    public static int MEgainOn$get(MemorySegment seg, long index) {
        return (int)constants$37.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void MEgainOn$set(MemorySegment seg, long index, int x) {
        constants$37.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ME_WB$slice(MemorySegment seg) {
        return seg.asSlice(112, 32);
    }
    public static VarHandle AFFineTune$VH() {
        return constants$37.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char AFFineTune;
     * }
     */
    public static byte AFFineTune$get(MemorySegment seg) {
        return (byte)constants$37.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char AFFineTune;
     * }
     */
    public static void AFFineTune$set(MemorySegment seg, byte x) {
        constants$37.const$1.set(seg, x);
    }
    public static byte AFFineTune$get(MemorySegment seg, long index) {
        return (byte)constants$37.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void AFFineTune$set(MemorySegment seg, long index, byte x) {
        constants$37.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AFFineTuneIndex$VH() {
        return constants$37.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char AFFineTuneIndex;
     * }
     */
    public static byte AFFineTuneIndex$get(MemorySegment seg) {
        return (byte)constants$37.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char AFFineTuneIndex;
     * }
     */
    public static void AFFineTuneIndex$set(MemorySegment seg, byte x) {
        constants$37.const$2.set(seg, x);
    }
    public static byte AFFineTuneIndex$get(MemorySegment seg, long index) {
        return (byte)constants$37.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void AFFineTuneIndex$set(MemorySegment seg, long index, byte x) {
        constants$37.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AFFineTuneAdj$VH() {
        return constants$37.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * signed char AFFineTuneAdj;
     * }
     */
    public static byte AFFineTuneAdj$get(MemorySegment seg) {
        return (byte)constants$37.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * signed char AFFineTuneAdj;
     * }
     */
    public static void AFFineTuneAdj$set(MemorySegment seg, byte x) {
        constants$37.const$3.set(seg, x);
    }
    public static byte AFFineTuneAdj$get(MemorySegment seg, long index) {
        return (byte)constants$37.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void AFFineTuneAdj$set(MemorySegment seg, long index, byte x) {
        constants$37.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LensDataVersion$VH() {
        return constants$37.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int LensDataVersion;
     * }
     */
    public static int LensDataVersion$get(MemorySegment seg) {
        return (int)constants$37.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int LensDataVersion;
     * }
     */
    public static void LensDataVersion$set(MemorySegment seg, int x) {
        constants$37.const$4.set(seg, x);
    }
    public static int LensDataVersion$get(MemorySegment seg, long index) {
        return (int)constants$37.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void LensDataVersion$set(MemorySegment seg, long index, int x) {
        constants$37.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FlashInfoVersion$VH() {
        return constants$37.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int FlashInfoVersion;
     * }
     */
    public static int FlashInfoVersion$get(MemorySegment seg) {
        return (int)constants$37.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int FlashInfoVersion;
     * }
     */
    public static void FlashInfoVersion$set(MemorySegment seg, int x) {
        constants$37.const$5.set(seg, x);
    }
    public static int FlashInfoVersion$get(MemorySegment seg, long index) {
        return (int)constants$37.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashInfoVersion$set(MemorySegment seg, long index, int x) {
        constants$37.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ColorBalanceVersion$VH() {
        return constants$38.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int ColorBalanceVersion;
     * }
     */
    public static int ColorBalanceVersion$get(MemorySegment seg) {
        return (int)constants$38.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int ColorBalanceVersion;
     * }
     */
    public static void ColorBalanceVersion$set(MemorySegment seg, int x) {
        constants$38.const$0.set(seg, x);
    }
    public static int ColorBalanceVersion$get(MemorySegment seg, long index) {
        return (int)constants$38.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ColorBalanceVersion$set(MemorySegment seg, long index, int x) {
        constants$38.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle key$VH() {
        return constants$38.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char key;
     * }
     */
    public static byte key$get(MemorySegment seg) {
        return (byte)constants$38.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char key;
     * }
     */
    public static void key$set(MemorySegment seg, byte x) {
        constants$38.const$1.set(seg, x);
    }
    public static byte key$get(MemorySegment seg, long index) {
        return (byte)constants$38.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void key$set(MemorySegment seg, long index, byte x) {
        constants$38.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment NEFBitDepth$slice(MemorySegment seg) {
        return seg.asSlice(162, 8);
    }
    public static VarHandle HighSpeedCropFormat$VH() {
        return constants$38.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short HighSpeedCropFormat;
     * }
     */
    public static short HighSpeedCropFormat$get(MemorySegment seg) {
        return (short)constants$38.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short HighSpeedCropFormat;
     * }
     */
    public static void HighSpeedCropFormat$set(MemorySegment seg, short x) {
        constants$38.const$2.set(seg, x);
    }
    public static short HighSpeedCropFormat$get(MemorySegment seg, long index) {
        return (short)constants$38.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void HighSpeedCropFormat$set(MemorySegment seg, long index, short x) {
        constants$38.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment SensorHighSpeedCrop$slice(MemorySegment seg) {
        return seg.asSlice(172, 8);
    }
    public static VarHandle SensorWidth$VH() {
        return constants$38.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short SensorWidth;
     * }
     */
    public static short SensorWidth$get(MemorySegment seg) {
        return (short)constants$38.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short SensorWidth;
     * }
     */
    public static void SensorWidth$set(MemorySegment seg, short x) {
        constants$38.const$3.set(seg, x);
    }
    public static short SensorWidth$get(MemorySegment seg, long index) {
        return (short)constants$38.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SensorWidth$set(MemorySegment seg, long index, short x) {
        constants$38.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SensorHeight$VH() {
        return constants$38.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short SensorHeight;
     * }
     */
    public static short SensorHeight$get(MemorySegment seg) {
        return (short)constants$38.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short SensorHeight;
     * }
     */
    public static void SensorHeight$set(MemorySegment seg, short x) {
        constants$38.const$4.set(seg, x);
    }
    public static short SensorHeight$get(MemorySegment seg, long index) {
        return (short)constants$38.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void SensorHeight$set(MemorySegment seg, long index, short x) {
        constants$38.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Active_D_Lighting$VH() {
        return constants$38.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short Active_D_Lighting;
     * }
     */
    public static short Active_D_Lighting$get(MemorySegment seg) {
        return (short)constants$38.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short Active_D_Lighting;
     * }
     */
    public static void Active_D_Lighting$set(MemorySegment seg, short x) {
        constants$38.const$5.set(seg, x);
    }
    public static short Active_D_Lighting$get(MemorySegment seg, long index) {
        return (short)constants$38.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Active_D_Lighting$set(MemorySegment seg, long index, short x) {
        constants$38.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ShotInfoVersion$VH() {
        return constants$39.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int ShotInfoVersion;
     * }
     */
    public static int ShotInfoVersion$get(MemorySegment seg) {
        return (int)constants$39.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int ShotInfoVersion;
     * }
     */
    public static void ShotInfoVersion$set(MemorySegment seg, int x) {
        constants$39.const$0.set(seg, x);
    }
    public static int ShotInfoVersion$get(MemorySegment seg, long index) {
        return (int)constants$39.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ShotInfoVersion$set(MemorySegment seg, long index, int x) {
        constants$39.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MakernotesFlip$VH() {
        return constants$39.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short MakernotesFlip;
     * }
     */
    public static short MakernotesFlip$get(MemorySegment seg) {
        return (short)constants$39.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short MakernotesFlip;
     * }
     */
    public static void MakernotesFlip$set(MemorySegment seg, short x) {
        constants$39.const$1.set(seg, x);
    }
    public static short MakernotesFlip$get(MemorySegment seg, long index) {
        return (short)constants$39.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void MakernotesFlip$set(MemorySegment seg, long index, short x) {
        constants$39.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RollAngle$VH() {
        return constants$39.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double RollAngle;
     * }
     */
    public static double RollAngle$get(MemorySegment seg) {
        return (double)constants$39.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double RollAngle;
     * }
     */
    public static void RollAngle$set(MemorySegment seg, double x) {
        constants$39.const$2.set(seg, x);
    }
    public static double RollAngle$get(MemorySegment seg, long index) {
        return (double)constants$39.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void RollAngle$set(MemorySegment seg, long index, double x) {
        constants$39.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle PitchAngle$VH() {
        return constants$39.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double PitchAngle;
     * }
     */
    public static double PitchAngle$get(MemorySegment seg) {
        return (double)constants$39.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double PitchAngle;
     * }
     */
    public static void PitchAngle$set(MemorySegment seg, double x) {
        constants$39.const$3.set(seg, x);
    }
    public static double PitchAngle$get(MemorySegment seg, long index) {
        return (double)constants$39.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void PitchAngle$set(MemorySegment seg, long index, double x) {
        constants$39.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle YawAngle$VH() {
        return constants$39.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double YawAngle;
     * }
     */
    public static double YawAngle$get(MemorySegment seg) {
        return (double)constants$39.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double YawAngle;
     * }
     */
    public static void YawAngle$set(MemorySegment seg, double x) {
        constants$39.const$4.set(seg, x);
    }
    public static double YawAngle$get(MemorySegment seg, long index) {
        return (double)constants$39.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void YawAngle$set(MemorySegment seg, long index, double x) {
        constants$39.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


