// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct ph1_t {
 *     int format;
 *     int key_off;
 *     int tag_21a;
 *     int t_black;
 *     int split_col;
 *     int black_col;
 *     int split_row;
 *     int black_row;
 *     float tag_210;
 * };
 * }
 */
public class ph1_t {

    public static MemoryLayout $LAYOUT() {
        return constants$17.const$2;
    }
    public static VarHandle format$VH() {
        return constants$17.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int format;
     * }
     */
    public static int format$get(MemorySegment seg) {
        return (int)constants$17.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int format;
     * }
     */
    public static void format$set(MemorySegment seg, int x) {
        constants$17.const$3.set(seg, x);
    }
    public static int format$get(MemorySegment seg, long index) {
        return (int)constants$17.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void format$set(MemorySegment seg, long index, int x) {
        constants$17.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle key_off$VH() {
        return constants$17.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int key_off;
     * }
     */
    public static int key_off$get(MemorySegment seg) {
        return (int)constants$17.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int key_off;
     * }
     */
    public static void key_off$set(MemorySegment seg, int x) {
        constants$17.const$4.set(seg, x);
    }
    public static int key_off$get(MemorySegment seg, long index) {
        return (int)constants$17.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void key_off$set(MemorySegment seg, long index, int x) {
        constants$17.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tag_21a$VH() {
        return constants$17.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int tag_21a;
     * }
     */
    public static int tag_21a$get(MemorySegment seg) {
        return (int)constants$17.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int tag_21a;
     * }
     */
    public static void tag_21a$set(MemorySegment seg, int x) {
        constants$17.const$5.set(seg, x);
    }
    public static int tag_21a$get(MemorySegment seg, long index) {
        return (int)constants$17.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void tag_21a$set(MemorySegment seg, long index, int x) {
        constants$17.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle t_black$VH() {
        return constants$18.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int t_black;
     * }
     */
    public static int t_black$get(MemorySegment seg) {
        return (int)constants$18.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int t_black;
     * }
     */
    public static void t_black$set(MemorySegment seg, int x) {
        constants$18.const$0.set(seg, x);
    }
    public static int t_black$get(MemorySegment seg, long index) {
        return (int)constants$18.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void t_black$set(MemorySegment seg, long index, int x) {
        constants$18.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle split_col$VH() {
        return constants$18.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int split_col;
     * }
     */
    public static int split_col$get(MemorySegment seg) {
        return (int)constants$18.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int split_col;
     * }
     */
    public static void split_col$set(MemorySegment seg, int x) {
        constants$18.const$1.set(seg, x);
    }
    public static int split_col$get(MemorySegment seg, long index) {
        return (int)constants$18.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void split_col$set(MemorySegment seg, long index, int x) {
        constants$18.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle black_col$VH() {
        return constants$18.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int black_col;
     * }
     */
    public static int black_col$get(MemorySegment seg) {
        return (int)constants$18.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int black_col;
     * }
     */
    public static void black_col$set(MemorySegment seg, int x) {
        constants$18.const$2.set(seg, x);
    }
    public static int black_col$get(MemorySegment seg, long index) {
        return (int)constants$18.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void black_col$set(MemorySegment seg, long index, int x) {
        constants$18.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle split_row$VH() {
        return constants$18.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int split_row;
     * }
     */
    public static int split_row$get(MemorySegment seg) {
        return (int)constants$18.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int split_row;
     * }
     */
    public static void split_row$set(MemorySegment seg, int x) {
        constants$18.const$3.set(seg, x);
    }
    public static int split_row$get(MemorySegment seg, long index) {
        return (int)constants$18.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void split_row$set(MemorySegment seg, long index, int x) {
        constants$18.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle black_row$VH() {
        return constants$18.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int black_row;
     * }
     */
    public static int black_row$get(MemorySegment seg) {
        return (int)constants$18.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int black_row;
     * }
     */
    public static void black_row$set(MemorySegment seg, int x) {
        constants$18.const$4.set(seg, x);
    }
    public static int black_row$get(MemorySegment seg, long index) {
        return (int)constants$18.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void black_row$set(MemorySegment seg, long index, int x) {
        constants$18.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tag_210$VH() {
        return constants$18.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float tag_210;
     * }
     */
    public static float tag_210$get(MemorySegment seg) {
        return (float)constants$18.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float tag_210;
     * }
     */
    public static void tag_210$set(MemorySegment seg, float x) {
        constants$18.const$5.set(seg, x);
    }
    public static float tag_210$get(MemorySegment seg, long index) {
        return (float)constants$18.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void tag_210$set(MemorySegment seg, long index, float x) {
        constants$18.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


