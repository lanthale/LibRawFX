// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_processed_image_t {
 *     enum LibRaw_image_formats type;
 *     unsigned short height;
 *     unsigned short width;
 *     unsigned short colors;
 *     unsigned short bits;
 *     unsigned int data_size;
 *     unsigned char data[1];
 * };
 * }
 */
public class libraw_processed_image_t {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("type"),
        Constants$root.C_SHORT$LAYOUT.withName("height"),
        Constants$root.C_SHORT$LAYOUT.withName("width"),
        Constants$root.C_SHORT$LAYOUT.withName("colors"),
        Constants$root.C_SHORT$LAYOUT.withName("bits"),
        Constants$root.C_INT$LAYOUT.withName("data_size"),
        MemoryLayout.sequenceLayout(1, Constants$root.C_CHAR$LAYOUT).withName("data"),
        MemoryLayout.paddingLayout(24)
    ).withName("libraw_processed_image_t");
    public static MemoryLayout $LAYOUT() {
        return libraw_processed_image_t.$struct$LAYOUT;
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return libraw_processed_image_t.type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum LibRaw_image_formats type;
     * }
     */
    public static int type$get(MemorySegment seg) {
        return (int)libraw_processed_image_t.type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum LibRaw_image_formats type;
     * }
     */
    public static void type$set(MemorySegment seg, int x) {
        libraw_processed_image_t.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)libraw_processed_image_t.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        libraw_processed_image_t.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("height"));
    public static VarHandle height$VH() {
        return libraw_processed_image_t.height$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short height;
     * }
     */
    public static short height$get(MemorySegment seg) {
        return (short)libraw_processed_image_t.height$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short height;
     * }
     */
    public static void height$set(MemorySegment seg, short x) {
        libraw_processed_image_t.height$VH.set(seg, x);
    }
    public static short height$get(MemorySegment seg, long index) {
        return (short)libraw_processed_image_t.height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, short x) {
        libraw_processed_image_t.height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("width"));
    public static VarHandle width$VH() {
        return libraw_processed_image_t.width$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short width;
     * }
     */
    public static short width$get(MemorySegment seg) {
        return (short)libraw_processed_image_t.width$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short width;
     * }
     */
    public static void width$set(MemorySegment seg, short x) {
        libraw_processed_image_t.width$VH.set(seg, x);
    }
    public static short width$get(MemorySegment seg, long index) {
        return (short)libraw_processed_image_t.width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, short x) {
        libraw_processed_image_t.width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle colors$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("colors"));
    public static VarHandle colors$VH() {
        return libraw_processed_image_t.colors$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short colors;
     * }
     */
    public static short colors$get(MemorySegment seg) {
        return (short)libraw_processed_image_t.colors$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short colors;
     * }
     */
    public static void colors$set(MemorySegment seg, short x) {
        libraw_processed_image_t.colors$VH.set(seg, x);
    }
    public static short colors$get(MemorySegment seg, long index) {
        return (short)libraw_processed_image_t.colors$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void colors$set(MemorySegment seg, long index, short x) {
        libraw_processed_image_t.colors$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bits$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bits"));
    public static VarHandle bits$VH() {
        return libraw_processed_image_t.bits$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short bits;
     * }
     */
    public static short bits$get(MemorySegment seg) {
        return (short)libraw_processed_image_t.bits$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short bits;
     * }
     */
    public static void bits$set(MemorySegment seg, short x) {
        libraw_processed_image_t.bits$VH.set(seg, x);
    }
    public static short bits$get(MemorySegment seg, long index) {
        return (short)libraw_processed_image_t.bits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bits$set(MemorySegment seg, long index, short x) {
        libraw_processed_image_t.bits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle data_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("data_size"));
    public static VarHandle data_size$VH() {
        return libraw_processed_image_t.data_size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int data_size;
     * }
     */
    public static int data_size$get(MemorySegment seg) {
        return (int)libraw_processed_image_t.data_size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int data_size;
     * }
     */
    public static void data_size$set(MemorySegment seg, int x) {
        libraw_processed_image_t.data_size$VH.set(seg, x);
    }
    public static int data_size$get(MemorySegment seg, long index) {
        return (int)libraw_processed_image_t.data_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data_size$set(MemorySegment seg, long index, int x) {
        libraw_processed_image_t.data_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment data$slice(MemorySegment seg) {
        return seg.asSlice(16, 1);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


