// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_area_t {
 *     short t;
 *     short l;
 *     short b;
 *     short r;
 * };
 * }
 */
public class libraw_area_t {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("t"),
        Constants$root.C_SHORT$LAYOUT.withName("l"),
        Constants$root.C_SHORT$LAYOUT.withName("b"),
        Constants$root.C_SHORT$LAYOUT.withName("r")
    ).withName("libraw_area_t");
    public static MemoryLayout $LAYOUT() {
        return libraw_area_t.$struct$LAYOUT;
    }
    static final VarHandle t$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("t"));
    public static VarHandle t$VH() {
        return libraw_area_t.t$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short t;
     * }
     */
    public static short t$get(MemorySegment seg) {
        return (short)libraw_area_t.t$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short t;
     * }
     */
    public static void t$set(MemorySegment seg, short x) {
        libraw_area_t.t$VH.set(seg, x);
    }
    public static short t$get(MemorySegment seg, long index) {
        return (short)libraw_area_t.t$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void t$set(MemorySegment seg, long index, short x) {
        libraw_area_t.t$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle l$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("l"));
    public static VarHandle l$VH() {
        return libraw_area_t.l$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short l;
     * }
     */
    public static short l$get(MemorySegment seg) {
        return (short)libraw_area_t.l$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short l;
     * }
     */
    public static void l$set(MemorySegment seg, short x) {
        libraw_area_t.l$VH.set(seg, x);
    }
    public static short l$get(MemorySegment seg, long index) {
        return (short)libraw_area_t.l$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void l$set(MemorySegment seg, long index, short x) {
        libraw_area_t.l$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle b$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("b"));
    public static VarHandle b$VH() {
        return libraw_area_t.b$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short b;
     * }
     */
    public static short b$get(MemorySegment seg) {
        return (short)libraw_area_t.b$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short b;
     * }
     */
    public static void b$set(MemorySegment seg, short x) {
        libraw_area_t.b$VH.set(seg, x);
    }
    public static short b$get(MemorySegment seg, long index) {
        return (short)libraw_area_t.b$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void b$set(MemorySegment seg, long index, short x) {
        libraw_area_t.b$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle r$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("r"));
    public static VarHandle r$VH() {
        return libraw_area_t.r$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short r;
     * }
     */
    public static short r$get(MemorySegment seg) {
        return (short)libraw_area_t.r$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short r;
     * }
     */
    public static void r$set(MemorySegment seg, short x) {
        libraw_area_t.r$VH.set(seg, x);
    }
    public static short r$get(MemorySegment seg, long index) {
        return (short)libraw_area_t.r$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void r$set(MemorySegment seg, long index, short x) {
        libraw_area_t.r$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


