// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class libraw_ricoh_makernotes_t {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_SHORT.withName("AFStatus"),
        MemoryLayout.paddingLayout(16),
        MemoryLayout.sequenceLayout(2, C_INT).withName("AFAreaXPosition"),
        MemoryLayout.sequenceLayout(2, C_INT).withName("AFAreaYPosition"),
        C_SHORT.withName("AFAreaMode"),
        MemoryLayout.paddingLayout(16),
        C_INT.withName("SensorWidth"),
        C_INT.withName("SensorHeight"),
        C_INT.withName("CroppedImageWidth"),
        C_INT.withName("CroppedImageHeight"),
        C_SHORT.withName("WideAdapter"),
        C_SHORT.withName("CropMode"),
        C_SHORT.withName("NDFilter"),
        C_SHORT.withName("AutoBracketing"),
        C_SHORT.withName("MacroMode"),
        C_SHORT.withName("FlashMode"),
        MemoryLayout.paddingLayout(32),
        C_DOUBLE.withName("FlashExposureComp"),
        C_DOUBLE.withName("ManualFlashOutput")
    );
    public static MemoryLayout $LAYOUT() {
        return libraw_ricoh_makernotes_t.$struct$LAYOUT;
    }
    static final VarHandle AFStatus$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("AFStatus"));
    public static VarHandle AFStatus$VH() {
        return libraw_ricoh_makernotes_t.AFStatus$VH;
    }
    public static short AFStatus$get(MemorySegment seg) {
        return (short)libraw_ricoh_makernotes_t.AFStatus$VH.get(seg);
    }
    public static void AFStatus$set( MemorySegment seg, short x) {
        libraw_ricoh_makernotes_t.AFStatus$VH.set(seg, x);
    }
    public static short AFStatus$get(MemorySegment seg, long index) {
        return (short)libraw_ricoh_makernotes_t.AFStatus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AFStatus$set(MemorySegment seg, long index, short x) {
        libraw_ricoh_makernotes_t.AFStatus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment AFAreaXPosition$slice(MemorySegment seg) {
        return seg.asSlice(4, 8);
    }
    public static MemorySegment AFAreaYPosition$slice(MemorySegment seg) {
        return seg.asSlice(12, 8);
    }
    static final VarHandle AFAreaMode$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("AFAreaMode"));
    public static VarHandle AFAreaMode$VH() {
        return libraw_ricoh_makernotes_t.AFAreaMode$VH;
    }
    public static short AFAreaMode$get(MemorySegment seg) {
        return (short)libraw_ricoh_makernotes_t.AFAreaMode$VH.get(seg);
    }
    public static void AFAreaMode$set( MemorySegment seg, short x) {
        libraw_ricoh_makernotes_t.AFAreaMode$VH.set(seg, x);
    }
    public static short AFAreaMode$get(MemorySegment seg, long index) {
        return (short)libraw_ricoh_makernotes_t.AFAreaMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AFAreaMode$set(MemorySegment seg, long index, short x) {
        libraw_ricoh_makernotes_t.AFAreaMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SensorWidth$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("SensorWidth"));
    public static VarHandle SensorWidth$VH() {
        return libraw_ricoh_makernotes_t.SensorWidth$VH;
    }
    public static int SensorWidth$get(MemorySegment seg) {
        return (int)libraw_ricoh_makernotes_t.SensorWidth$VH.get(seg);
    }
    public static void SensorWidth$set( MemorySegment seg, int x) {
        libraw_ricoh_makernotes_t.SensorWidth$VH.set(seg, x);
    }
    public static int SensorWidth$get(MemorySegment seg, long index) {
        return (int)libraw_ricoh_makernotes_t.SensorWidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SensorWidth$set(MemorySegment seg, long index, int x) {
        libraw_ricoh_makernotes_t.SensorWidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SensorHeight$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("SensorHeight"));
    public static VarHandle SensorHeight$VH() {
        return libraw_ricoh_makernotes_t.SensorHeight$VH;
    }
    public static int SensorHeight$get(MemorySegment seg) {
        return (int)libraw_ricoh_makernotes_t.SensorHeight$VH.get(seg);
    }
    public static void SensorHeight$set( MemorySegment seg, int x) {
        libraw_ricoh_makernotes_t.SensorHeight$VH.set(seg, x);
    }
    public static int SensorHeight$get(MemorySegment seg, long index) {
        return (int)libraw_ricoh_makernotes_t.SensorHeight$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SensorHeight$set(MemorySegment seg, long index, int x) {
        libraw_ricoh_makernotes_t.SensorHeight$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CroppedImageWidth$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("CroppedImageWidth"));
    public static VarHandle CroppedImageWidth$VH() {
        return libraw_ricoh_makernotes_t.CroppedImageWidth$VH;
    }
    public static int CroppedImageWidth$get(MemorySegment seg) {
        return (int)libraw_ricoh_makernotes_t.CroppedImageWidth$VH.get(seg);
    }
    public static void CroppedImageWidth$set( MemorySegment seg, int x) {
        libraw_ricoh_makernotes_t.CroppedImageWidth$VH.set(seg, x);
    }
    public static int CroppedImageWidth$get(MemorySegment seg, long index) {
        return (int)libraw_ricoh_makernotes_t.CroppedImageWidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CroppedImageWidth$set(MemorySegment seg, long index, int x) {
        libraw_ricoh_makernotes_t.CroppedImageWidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CroppedImageHeight$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("CroppedImageHeight"));
    public static VarHandle CroppedImageHeight$VH() {
        return libraw_ricoh_makernotes_t.CroppedImageHeight$VH;
    }
    public static int CroppedImageHeight$get(MemorySegment seg) {
        return (int)libraw_ricoh_makernotes_t.CroppedImageHeight$VH.get(seg);
    }
    public static void CroppedImageHeight$set( MemorySegment seg, int x) {
        libraw_ricoh_makernotes_t.CroppedImageHeight$VH.set(seg, x);
    }
    public static int CroppedImageHeight$get(MemorySegment seg, long index) {
        return (int)libraw_ricoh_makernotes_t.CroppedImageHeight$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CroppedImageHeight$set(MemorySegment seg, long index, int x) {
        libraw_ricoh_makernotes_t.CroppedImageHeight$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle WideAdapter$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("WideAdapter"));
    public static VarHandle WideAdapter$VH() {
        return libraw_ricoh_makernotes_t.WideAdapter$VH;
    }
    public static short WideAdapter$get(MemorySegment seg) {
        return (short)libraw_ricoh_makernotes_t.WideAdapter$VH.get(seg);
    }
    public static void WideAdapter$set( MemorySegment seg, short x) {
        libraw_ricoh_makernotes_t.WideAdapter$VH.set(seg, x);
    }
    public static short WideAdapter$get(MemorySegment seg, long index) {
        return (short)libraw_ricoh_makernotes_t.WideAdapter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void WideAdapter$set(MemorySegment seg, long index, short x) {
        libraw_ricoh_makernotes_t.WideAdapter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CropMode$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("CropMode"));
    public static VarHandle CropMode$VH() {
        return libraw_ricoh_makernotes_t.CropMode$VH;
    }
    public static short CropMode$get(MemorySegment seg) {
        return (short)libraw_ricoh_makernotes_t.CropMode$VH.get(seg);
    }
    public static void CropMode$set( MemorySegment seg, short x) {
        libraw_ricoh_makernotes_t.CropMode$VH.set(seg, x);
    }
    public static short CropMode$get(MemorySegment seg, long index) {
        return (short)libraw_ricoh_makernotes_t.CropMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CropMode$set(MemorySegment seg, long index, short x) {
        libraw_ricoh_makernotes_t.CropMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NDFilter$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("NDFilter"));
    public static VarHandle NDFilter$VH() {
        return libraw_ricoh_makernotes_t.NDFilter$VH;
    }
    public static short NDFilter$get(MemorySegment seg) {
        return (short)libraw_ricoh_makernotes_t.NDFilter$VH.get(seg);
    }
    public static void NDFilter$set( MemorySegment seg, short x) {
        libraw_ricoh_makernotes_t.NDFilter$VH.set(seg, x);
    }
    public static short NDFilter$get(MemorySegment seg, long index) {
        return (short)libraw_ricoh_makernotes_t.NDFilter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NDFilter$set(MemorySegment seg, long index, short x) {
        libraw_ricoh_makernotes_t.NDFilter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AutoBracketing$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("AutoBracketing"));
    public static VarHandle AutoBracketing$VH() {
        return libraw_ricoh_makernotes_t.AutoBracketing$VH;
    }
    public static short AutoBracketing$get(MemorySegment seg) {
        return (short)libraw_ricoh_makernotes_t.AutoBracketing$VH.get(seg);
    }
    public static void AutoBracketing$set( MemorySegment seg, short x) {
        libraw_ricoh_makernotes_t.AutoBracketing$VH.set(seg, x);
    }
    public static short AutoBracketing$get(MemorySegment seg, long index) {
        return (short)libraw_ricoh_makernotes_t.AutoBracketing$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AutoBracketing$set(MemorySegment seg, long index, short x) {
        libraw_ricoh_makernotes_t.AutoBracketing$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MacroMode$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("MacroMode"));
    public static VarHandle MacroMode$VH() {
        return libraw_ricoh_makernotes_t.MacroMode$VH;
    }
    public static short MacroMode$get(MemorySegment seg) {
        return (short)libraw_ricoh_makernotes_t.MacroMode$VH.get(seg);
    }
    public static void MacroMode$set( MemorySegment seg, short x) {
        libraw_ricoh_makernotes_t.MacroMode$VH.set(seg, x);
    }
    public static short MacroMode$get(MemorySegment seg, long index) {
        return (short)libraw_ricoh_makernotes_t.MacroMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MacroMode$set(MemorySegment seg, long index, short x) {
        libraw_ricoh_makernotes_t.MacroMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashMode$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("FlashMode"));
    public static VarHandle FlashMode$VH() {
        return libraw_ricoh_makernotes_t.FlashMode$VH;
    }
    public static short FlashMode$get(MemorySegment seg) {
        return (short)libraw_ricoh_makernotes_t.FlashMode$VH.get(seg);
    }
    public static void FlashMode$set( MemorySegment seg, short x) {
        libraw_ricoh_makernotes_t.FlashMode$VH.set(seg, x);
    }
    public static short FlashMode$get(MemorySegment seg, long index) {
        return (short)libraw_ricoh_makernotes_t.FlashMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashMode$set(MemorySegment seg, long index, short x) {
        libraw_ricoh_makernotes_t.FlashMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashExposureComp$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("FlashExposureComp"));
    public static VarHandle FlashExposureComp$VH() {
        return libraw_ricoh_makernotes_t.FlashExposureComp$VH;
    }
    public static double FlashExposureComp$get(MemorySegment seg) {
        return (double)libraw_ricoh_makernotes_t.FlashExposureComp$VH.get(seg);
    }
    public static void FlashExposureComp$set( MemorySegment seg, double x) {
        libraw_ricoh_makernotes_t.FlashExposureComp$VH.set(seg, x);
    }
    public static double FlashExposureComp$get(MemorySegment seg, long index) {
        return (double)libraw_ricoh_makernotes_t.FlashExposureComp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashExposureComp$set(MemorySegment seg, long index, double x) {
        libraw_ricoh_makernotes_t.FlashExposureComp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ManualFlashOutput$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("ManualFlashOutput"));
    public static VarHandle ManualFlashOutput$VH() {
        return libraw_ricoh_makernotes_t.ManualFlashOutput$VH;
    }
    public static double ManualFlashOutput$get(MemorySegment seg) {
        return (double)libraw_ricoh_makernotes_t.ManualFlashOutput$VH.get(seg);
    }
    public static void ManualFlashOutput$set( MemorySegment seg, double x) {
        libraw_ricoh_makernotes_t.ManualFlashOutput$VH.set(seg, x);
    }
    public static double ManualFlashOutput$get(MemorySegment seg, long index) {
        return (double)libraw_ricoh_makernotes_t.ManualFlashOutput$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ManualFlashOutput$set(MemorySegment seg, long index, double x) {
        libraw_ricoh_makernotes_t.ManualFlashOutput$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


