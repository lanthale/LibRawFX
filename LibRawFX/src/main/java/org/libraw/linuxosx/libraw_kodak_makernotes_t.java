// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_kodak_makernotes_t {
 *     unsigned short BlackLevelTop;
 *     unsigned short BlackLevelBottom;
 *     short offset_left;
 *     short offset_top;
 *     unsigned short clipBlack;
 *     unsigned short clipWhite;
 *     float  romm_camDaylight[3][3];
 *     float  romm_camTungsten[3][3];
 *     float  romm_camFluorescent[3][3];
 *     float  romm_camFlash[3][3];
 *     float  romm_camCustom[3][3];
 *     float  romm_camAuto[3][3];
 *     unsigned short val018percent;
 *     unsigned short val100percent;
 *     unsigned short val170percent;
 *     short MakerNoteKodak8a;
 *     float ISOCalibrationGain;
 *     float AnalogISO;
 * };
 * }
 */
public class libraw_kodak_makernotes_t {

    public static MemoryLayout $LAYOUT() {
        return constants$48.const$3;
    }
    public static VarHandle BlackLevelTop$VH() {
        return constants$48.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short BlackLevelTop;
     * }
     */
    public static short BlackLevelTop$get(MemorySegment seg) {
        return (short)constants$48.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short BlackLevelTop;
     * }
     */
    public static void BlackLevelTop$set(MemorySegment seg, short x) {
        constants$48.const$4.set(seg, x);
    }
    public static short BlackLevelTop$get(MemorySegment seg, long index) {
        return (short)constants$48.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void BlackLevelTop$set(MemorySegment seg, long index, short x) {
        constants$48.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BlackLevelBottom$VH() {
        return constants$48.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short BlackLevelBottom;
     * }
     */
    public static short BlackLevelBottom$get(MemorySegment seg) {
        return (short)constants$48.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short BlackLevelBottom;
     * }
     */
    public static void BlackLevelBottom$set(MemorySegment seg, short x) {
        constants$48.const$5.set(seg, x);
    }
    public static short BlackLevelBottom$get(MemorySegment seg, long index) {
        return (short)constants$48.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void BlackLevelBottom$set(MemorySegment seg, long index, short x) {
        constants$48.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle offset_left$VH() {
        return constants$49.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short offset_left;
     * }
     */
    public static short offset_left$get(MemorySegment seg) {
        return (short)constants$49.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short offset_left;
     * }
     */
    public static void offset_left$set(MemorySegment seg, short x) {
        constants$49.const$0.set(seg, x);
    }
    public static short offset_left$get(MemorySegment seg, long index) {
        return (short)constants$49.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void offset_left$set(MemorySegment seg, long index, short x) {
        constants$49.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle offset_top$VH() {
        return constants$49.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short offset_top;
     * }
     */
    public static short offset_top$get(MemorySegment seg) {
        return (short)constants$49.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short offset_top;
     * }
     */
    public static void offset_top$set(MemorySegment seg, short x) {
        constants$49.const$1.set(seg, x);
    }
    public static short offset_top$get(MemorySegment seg, long index) {
        return (short)constants$49.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void offset_top$set(MemorySegment seg, long index, short x) {
        constants$49.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle clipBlack$VH() {
        return constants$49.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short clipBlack;
     * }
     */
    public static short clipBlack$get(MemorySegment seg) {
        return (short)constants$49.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short clipBlack;
     * }
     */
    public static void clipBlack$set(MemorySegment seg, short x) {
        constants$49.const$2.set(seg, x);
    }
    public static short clipBlack$get(MemorySegment seg, long index) {
        return (short)constants$49.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void clipBlack$set(MemorySegment seg, long index, short x) {
        constants$49.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle clipWhite$VH() {
        return constants$49.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short clipWhite;
     * }
     */
    public static short clipWhite$get(MemorySegment seg) {
        return (short)constants$49.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short clipWhite;
     * }
     */
    public static void clipWhite$set(MemorySegment seg, short x) {
        constants$49.const$3.set(seg, x);
    }
    public static short clipWhite$get(MemorySegment seg, long index) {
        return (short)constants$49.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void clipWhite$set(MemorySegment seg, long index, short x) {
        constants$49.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment romm_camDaylight$slice(MemorySegment seg) {
        return seg.asSlice(12, 36);
    }
    public static MemorySegment romm_camTungsten$slice(MemorySegment seg) {
        return seg.asSlice(48, 36);
    }
    public static MemorySegment romm_camFluorescent$slice(MemorySegment seg) {
        return seg.asSlice(84, 36);
    }
    public static MemorySegment romm_camFlash$slice(MemorySegment seg) {
        return seg.asSlice(120, 36);
    }
    public static MemorySegment romm_camCustom$slice(MemorySegment seg) {
        return seg.asSlice(156, 36);
    }
    public static MemorySegment romm_camAuto$slice(MemorySegment seg) {
        return seg.asSlice(192, 36);
    }
    public static VarHandle val018percent$VH() {
        return constants$49.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short val018percent;
     * }
     */
    public static short val018percent$get(MemorySegment seg) {
        return (short)constants$49.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short val018percent;
     * }
     */
    public static void val018percent$set(MemorySegment seg, short x) {
        constants$49.const$4.set(seg, x);
    }
    public static short val018percent$get(MemorySegment seg, long index) {
        return (short)constants$49.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void val018percent$set(MemorySegment seg, long index, short x) {
        constants$49.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle val100percent$VH() {
        return constants$49.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short val100percent;
     * }
     */
    public static short val100percent$get(MemorySegment seg) {
        return (short)constants$49.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short val100percent;
     * }
     */
    public static void val100percent$set(MemorySegment seg, short x) {
        constants$49.const$5.set(seg, x);
    }
    public static short val100percent$get(MemorySegment seg, long index) {
        return (short)constants$49.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void val100percent$set(MemorySegment seg, long index, short x) {
        constants$49.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle val170percent$VH() {
        return constants$50.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short val170percent;
     * }
     */
    public static short val170percent$get(MemorySegment seg) {
        return (short)constants$50.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short val170percent;
     * }
     */
    public static void val170percent$set(MemorySegment seg, short x) {
        constants$50.const$0.set(seg, x);
    }
    public static short val170percent$get(MemorySegment seg, long index) {
        return (short)constants$50.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void val170percent$set(MemorySegment seg, long index, short x) {
        constants$50.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MakerNoteKodak8a$VH() {
        return constants$50.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short MakerNoteKodak8a;
     * }
     */
    public static short MakerNoteKodak8a$get(MemorySegment seg) {
        return (short)constants$50.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short MakerNoteKodak8a;
     * }
     */
    public static void MakerNoteKodak8a$set(MemorySegment seg, short x) {
        constants$50.const$1.set(seg, x);
    }
    public static short MakerNoteKodak8a$get(MemorySegment seg, long index) {
        return (short)constants$50.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void MakerNoteKodak8a$set(MemorySegment seg, long index, short x) {
        constants$50.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ISOCalibrationGain$VH() {
        return constants$50.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float ISOCalibrationGain;
     * }
     */
    public static float ISOCalibrationGain$get(MemorySegment seg) {
        return (float)constants$50.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float ISOCalibrationGain;
     * }
     */
    public static void ISOCalibrationGain$set(MemorySegment seg, float x) {
        constants$50.const$2.set(seg, x);
    }
    public static float ISOCalibrationGain$get(MemorySegment seg, long index) {
        return (float)constants$50.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ISOCalibrationGain$set(MemorySegment seg, long index, float x) {
        constants$50.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AnalogISO$VH() {
        return constants$50.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float AnalogISO;
     * }
     */
    public static float AnalogISO$get(MemorySegment seg) {
        return (float)constants$50.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float AnalogISO;
     * }
     */
    public static void AnalogISO$set(MemorySegment seg, float x) {
        constants$50.const$3.set(seg, x);
    }
    public static float AnalogISO$get(MemorySegment seg, long index) {
        return (float)constants$50.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void AnalogISO$set(MemorySegment seg, long index, float x) {
        constants$50.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


