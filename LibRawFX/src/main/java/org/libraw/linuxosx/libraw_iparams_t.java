// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class libraw_iparams_t {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(4, C_CHAR).withName("guard"),
        MemoryLayout.sequenceLayout(64, C_CHAR).withName("make"),
        MemoryLayout.sequenceLayout(64, C_CHAR).withName("model"),
        MemoryLayout.sequenceLayout(64, C_CHAR).withName("software"),
        MemoryLayout.sequenceLayout(64, C_CHAR).withName("normalized_make"),
        MemoryLayout.sequenceLayout(64, C_CHAR).withName("normalized_model"),
        C_INT.withName("maker_index"),
        C_INT.withName("raw_count"),
        C_INT.withName("dng_version"),
        C_INT.withName("is_foveon"),
        C_INT.withName("colors"),
        C_INT.withName("filters"),
        MemoryLayout.sequenceLayout(6, MemoryLayout.sequenceLayout(6, C_CHAR)).withName("xtrans"),
        MemoryLayout.sequenceLayout(6, MemoryLayout.sequenceLayout(6, C_CHAR)).withName("xtrans_abs"),
        MemoryLayout.sequenceLayout(5, C_CHAR).withName("cdesc"),
        MemoryLayout.paddingLayout(24),
        C_INT.withName("xmplen"),
        C_POINTER.withName("xmpdata")
    );
    public static MemoryLayout $LAYOUT() {
        return libraw_iparams_t.$struct$LAYOUT;
    }
    public static MemorySegment guard$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    public static MemorySegment make$slice(MemorySegment seg) {
        return seg.asSlice(4, 64);
    }
    public static MemorySegment model$slice(MemorySegment seg) {
        return seg.asSlice(68, 64);
    }
    public static MemorySegment software$slice(MemorySegment seg) {
        return seg.asSlice(132, 64);
    }
    public static MemorySegment normalized_make$slice(MemorySegment seg) {
        return seg.asSlice(196, 64);
    }
    public static MemorySegment normalized_model$slice(MemorySegment seg) {
        return seg.asSlice(260, 64);
    }
    static final VarHandle maker_index$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("maker_index"));
    public static VarHandle maker_index$VH() {
        return libraw_iparams_t.maker_index$VH;
    }
    public static int maker_index$get(MemorySegment seg) {
        return (int)libraw_iparams_t.maker_index$VH.get(seg);
    }
    public static void maker_index$set( MemorySegment seg, int x) {
        libraw_iparams_t.maker_index$VH.set(seg, x);
    }
    public static int maker_index$get(MemorySegment seg, long index) {
        return (int)libraw_iparams_t.maker_index$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void maker_index$set(MemorySegment seg, long index, int x) {
        libraw_iparams_t.maker_index$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle raw_count$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("raw_count"));
    public static VarHandle raw_count$VH() {
        return libraw_iparams_t.raw_count$VH;
    }
    public static int raw_count$get(MemorySegment seg) {
        return (int)libraw_iparams_t.raw_count$VH.get(seg);
    }
    public static void raw_count$set( MemorySegment seg, int x) {
        libraw_iparams_t.raw_count$VH.set(seg, x);
    }
    public static int raw_count$get(MemorySegment seg, long index) {
        return (int)libraw_iparams_t.raw_count$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void raw_count$set(MemorySegment seg, long index, int x) {
        libraw_iparams_t.raw_count$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dng_version$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dng_version"));
    public static VarHandle dng_version$VH() {
        return libraw_iparams_t.dng_version$VH;
    }
    public static int dng_version$get(MemorySegment seg) {
        return (int)libraw_iparams_t.dng_version$VH.get(seg);
    }
    public static void dng_version$set( MemorySegment seg, int x) {
        libraw_iparams_t.dng_version$VH.set(seg, x);
    }
    public static int dng_version$get(MemorySegment seg, long index) {
        return (int)libraw_iparams_t.dng_version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dng_version$set(MemorySegment seg, long index, int x) {
        libraw_iparams_t.dng_version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle is_foveon$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("is_foveon"));
    public static VarHandle is_foveon$VH() {
        return libraw_iparams_t.is_foveon$VH;
    }
    public static int is_foveon$get(MemorySegment seg) {
        return (int)libraw_iparams_t.is_foveon$VH.get(seg);
    }
    public static void is_foveon$set( MemorySegment seg, int x) {
        libraw_iparams_t.is_foveon$VH.set(seg, x);
    }
    public static int is_foveon$get(MemorySegment seg, long index) {
        return (int)libraw_iparams_t.is_foveon$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_foveon$set(MemorySegment seg, long index, int x) {
        libraw_iparams_t.is_foveon$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle colors$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("colors"));
    public static VarHandle colors$VH() {
        return libraw_iparams_t.colors$VH;
    }
    public static int colors$get(MemorySegment seg) {
        return (int)libraw_iparams_t.colors$VH.get(seg);
    }
    public static void colors$set( MemorySegment seg, int x) {
        libraw_iparams_t.colors$VH.set(seg, x);
    }
    public static int colors$get(MemorySegment seg, long index) {
        return (int)libraw_iparams_t.colors$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void colors$set(MemorySegment seg, long index, int x) {
        libraw_iparams_t.colors$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle filters$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("filters"));
    public static VarHandle filters$VH() {
        return libraw_iparams_t.filters$VH;
    }
    public static int filters$get(MemorySegment seg) {
        return (int)libraw_iparams_t.filters$VH.get(seg);
    }
    public static void filters$set( MemorySegment seg, int x) {
        libraw_iparams_t.filters$VH.set(seg, x);
    }
    public static int filters$get(MemorySegment seg, long index) {
        return (int)libraw_iparams_t.filters$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void filters$set(MemorySegment seg, long index, int x) {
        libraw_iparams_t.filters$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment xtrans$slice(MemorySegment seg) {
        return seg.asSlice(348, 36);
    }
    public static MemorySegment xtrans_abs$slice(MemorySegment seg) {
        return seg.asSlice(384, 36);
    }
    public static MemorySegment cdesc$slice(MemorySegment seg) {
        return seg.asSlice(420, 5);
    }
    static final VarHandle xmplen$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("xmplen"));
    public static VarHandle xmplen$VH() {
        return libraw_iparams_t.xmplen$VH;
    }
    public static int xmplen$get(MemorySegment seg) {
        return (int)libraw_iparams_t.xmplen$VH.get(seg);
    }
    public static void xmplen$set( MemorySegment seg, int x) {
        libraw_iparams_t.xmplen$VH.set(seg, x);
    }
    public static int xmplen$get(MemorySegment seg, long index) {
        return (int)libraw_iparams_t.xmplen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void xmplen$set(MemorySegment seg, long index, int x) {
        libraw_iparams_t.xmplen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle xmpdata$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("xmpdata")));
    public static VarHandle xmpdata$VH() {
        return libraw_iparams_t.xmpdata$VH;
    }
    public static MemoryAddress xmpdata$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_iparams_t.xmpdata$VH.get(seg);
    }
    public static void xmpdata$set( MemorySegment seg, MemoryAddress x) {
        libraw_iparams_t.xmpdata$VH.set(seg, x);
    }
    public static MemoryAddress xmpdata$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_iparams_t.xmpdata$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void xmpdata$set(MemorySegment seg, long index, MemoryAddress x) {
        libraw_iparams_t.xmpdata$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


