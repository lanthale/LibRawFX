// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*libraw_set_dataerror_handler$func)(void*,char*,int);
 * }
 */
public interface libraw_set_dataerror_handler$func {

    void apply(java.lang.foreign.MemorySegment data, java.lang.foreign.MemorySegment file, int offset);
    static MemorySegment allocate(libraw_set_dataerror_handler$func fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$120.const$2, fi, constants$2.const$4, scope);
    }
    static libraw_set_dataerror_handler$func ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _data, java.lang.foreign.MemorySegment _file, int _offset) -> {
            try {
                constants$3.const$0.invokeExact(symbol, _data, _file, _offset);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


