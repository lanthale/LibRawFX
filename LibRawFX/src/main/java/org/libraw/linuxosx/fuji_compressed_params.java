// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct fuji_compressed_params {
 *     struct fuji_q_table qt[4];
 *     void* buf;
 *     int max_bits;
 *     int min_value;
 *     int max_value;
 *     unsigned short line_width;
 * };
 * }
 */
public class fuji_compressed_params {

    public static MemoryLayout $LAYOUT() {
        return constants$91.const$3;
    }
    public static MemorySegment qt$slice(MemorySegment seg) {
        return seg.asSlice(0, 128);
    }
    public static VarHandle buf$VH() {
        return constants$91.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* buf;
     * }
     */
    public static MemorySegment buf$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$91.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* buf;
     * }
     */
    public static void buf$set(MemorySegment seg, MemorySegment x) {
        constants$91.const$4.set(seg, x);
    }
    public static MemorySegment buf$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$91.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void buf$set(MemorySegment seg, long index, MemorySegment x) {
        constants$91.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_bits$VH() {
        return constants$91.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int max_bits;
     * }
     */
    public static int max_bits$get(MemorySegment seg) {
        return (int)constants$91.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int max_bits;
     * }
     */
    public static void max_bits$set(MemorySegment seg, int x) {
        constants$91.const$5.set(seg, x);
    }
    public static int max_bits$get(MemorySegment seg, long index) {
        return (int)constants$91.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void max_bits$set(MemorySegment seg, long index, int x) {
        constants$91.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle min_value$VH() {
        return constants$92.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int min_value;
     * }
     */
    public static int min_value$get(MemorySegment seg) {
        return (int)constants$92.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int min_value;
     * }
     */
    public static void min_value$set(MemorySegment seg, int x) {
        constants$92.const$0.set(seg, x);
    }
    public static int min_value$get(MemorySegment seg, long index) {
        return (int)constants$92.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void min_value$set(MemorySegment seg, long index, int x) {
        constants$92.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_value$VH() {
        return constants$92.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int max_value;
     * }
     */
    public static int max_value$get(MemorySegment seg) {
        return (int)constants$92.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int max_value;
     * }
     */
    public static void max_value$set(MemorySegment seg, int x) {
        constants$92.const$1.set(seg, x);
    }
    public static int max_value$get(MemorySegment seg, long index) {
        return (int)constants$92.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void max_value$set(MemorySegment seg, long index, int x) {
        constants$92.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle line_width$VH() {
        return constants$92.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short line_width;
     * }
     */
    public static short line_width$get(MemorySegment seg) {
        return (short)constants$92.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short line_width;
     * }
     */
    public static void line_width$set(MemorySegment seg, short x) {
        constants$92.const$2.set(seg, x);
    }
    public static short line_width$get(MemorySegment seg, long index) {
        return (short)constants$92.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void line_width$set(MemorySegment seg, long index, short x) {
        constants$92.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


