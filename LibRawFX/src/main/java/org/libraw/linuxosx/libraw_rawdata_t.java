// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class libraw_rawdata_t {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("raw_alloc"),
        C_POINTER.withName("raw_image"),
        C_POINTER.withName("color4_image"),
        C_POINTER.withName("color3_image"),
        C_POINTER.withName("float_image"),
        C_POINTER.withName("float3_image"),
        C_POINTER.withName("float4_image"),
        C_POINTER.withName("ph1_cblack"),
        C_POINTER.withName("ph1_rblack"),
        MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(4, C_CHAR).withName("guard"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("make"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("model"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("software"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("normalized_make"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("normalized_model"),
            C_INT.withName("maker_index"),
            C_INT.withName("raw_count"),
            C_INT.withName("dng_version"),
            C_INT.withName("is_foveon"),
            C_INT.withName("colors"),
            C_INT.withName("filters"),
            MemoryLayout.sequenceLayout(6, MemoryLayout.sequenceLayout(6, C_CHAR)).withName("xtrans"),
            MemoryLayout.sequenceLayout(6, MemoryLayout.sequenceLayout(6, C_CHAR)).withName("xtrans_abs"),
            MemoryLayout.sequenceLayout(5, C_CHAR).withName("cdesc"),
            MemoryLayout.paddingLayout(24),
            C_INT.withName("xmplen"),
            C_POINTER.withName("xmpdata")
        ).withName("iparams"),
        MemoryLayout.structLayout(
            C_SHORT.withName("raw_height"),
            C_SHORT.withName("raw_width"),
            C_SHORT.withName("height"),
            C_SHORT.withName("width"),
            C_SHORT.withName("top_margin"),
            C_SHORT.withName("left_margin"),
            C_SHORT.withName("iheight"),
            C_SHORT.withName("iwidth"),
            C_INT.withName("raw_pitch"),
            MemoryLayout.paddingLayout(32),
            C_DOUBLE.withName("pixel_aspect"),
            C_INT.withName("flip"),
            MemoryLayout.sequenceLayout(8, MemoryLayout.sequenceLayout(4, C_INT)).withName("mask"),
            C_SHORT.withName("raw_aspect"),
            MemoryLayout.sequenceLayout(2, MemoryLayout.structLayout(
                C_SHORT.withName("cleft"),
                C_SHORT.withName("ctop"),
                C_SHORT.withName("cwidth"),
                C_SHORT.withName("cheight")
            )).withName("raw_inset_crops"),
            MemoryLayout.paddingLayout(16)
        ).withName("sizes"),
        MemoryLayout.structLayout(
            C_INT.withName("mix_green"),
            C_INT.withName("raw_color"),
            C_INT.withName("zero_is_bad"),
            C_SHORT.withName("shrink"),
            C_SHORT.withName("fuji_width")
        ).withName("ioparams"),
        MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(65536, C_SHORT).withName("curve"),
            MemoryLayout.sequenceLayout(4104, C_INT).withName("cblack"),
            C_INT.withName("black"),
            C_INT.withName("data_maximum"),
            C_INT.withName("maximum"),
            MemoryLayout.paddingLayout(32),
            MemoryLayout.sequenceLayout(4, C_LONG).withName("linear_max"),
            C_FLOAT.withName("fmaximum"),
            C_FLOAT.withName("fnorm"),
            MemoryLayout.sequenceLayout(8, MemoryLayout.sequenceLayout(8, C_SHORT)).withName("white"),
            MemoryLayout.sequenceLayout(4, C_FLOAT).withName("cam_mul"),
            MemoryLayout.sequenceLayout(4, C_FLOAT).withName("pre_mul"),
            MemoryLayout.sequenceLayout(3, MemoryLayout.sequenceLayout(4, C_FLOAT)).withName("cmatrix"),
            MemoryLayout.sequenceLayout(3, MemoryLayout.sequenceLayout(4, C_FLOAT)).withName("ccm"),
            MemoryLayout.sequenceLayout(3, MemoryLayout.sequenceLayout(4, C_FLOAT)).withName("rgb_cam"),
            MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(3, C_FLOAT)).withName("cam_xyz"),
            MemoryLayout.structLayout(
                C_INT.withName("format"),
                C_INT.withName("key_off"),
                C_INT.withName("tag_21a"),
                C_INT.withName("t_black"),
                C_INT.withName("split_col"),
                C_INT.withName("black_col"),
                C_INT.withName("split_row"),
                C_INT.withName("black_row"),
                C_FLOAT.withName("tag_210")
            ).withName("phase_one_data"),
            C_FLOAT.withName("flash_used"),
            C_FLOAT.withName("canon_ev"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("model2"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("UniqueCameraModel"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("LocalizedCameraModel"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("ImageUniqueID"),
            MemoryLayout.sequenceLayout(17, C_CHAR).withName("RawDataUniqueID"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("OriginalRawFileName"),
            MemoryLayout.paddingLayout(24),
            C_POINTER.withName("profile"),
            C_INT.withName("profile_length"),
            MemoryLayout.sequenceLayout(8, C_INT).withName("black_stat"),
            MemoryLayout.sequenceLayout(2, MemoryLayout.structLayout(
                C_INT.withName("parsedfields"),
                C_SHORT.withName("illuminant"),
                MemoryLayout.paddingLayout(16),
                MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(4, C_FLOAT)).withName("calibration"),
                MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(3, C_FLOAT)).withName("colormatrix"),
                MemoryLayout.sequenceLayout(3, MemoryLayout.sequenceLayout(4, C_FLOAT)).withName("forwardmatrix")
            )).withName("dng_color"),
            MemoryLayout.structLayout(
                C_INT.withName("parsedfields"),
                MemoryLayout.sequenceLayout(4104, C_INT).withName("dng_cblack"),
                C_INT.withName("dng_black"),
                MemoryLayout.sequenceLayout(4104, C_FLOAT).withName("dng_fcblack"),
                C_FLOAT.withName("dng_fblack"),
                MemoryLayout.sequenceLayout(4, C_INT).withName("dng_whitelevel"),
                MemoryLayout.sequenceLayout(4, C_SHORT).withName("default_crop"),
                MemoryLayout.sequenceLayout(4, C_FLOAT).withName("user_crop"),
                C_INT.withName("preview_colorspace"),
                MemoryLayout.sequenceLayout(4, C_FLOAT).withName("analogbalance"),
                MemoryLayout.sequenceLayout(4, C_FLOAT).withName("asshotneutral"),
                C_FLOAT.withName("baseline_exposure"),
                C_FLOAT.withName("LinearResponseLimit")
            ).withName("dng_levels"),
            MemoryLayout.sequenceLayout(256, MemoryLayout.sequenceLayout(4, C_INT)).withName("WB_Coeffs"),
            MemoryLayout.sequenceLayout(64, MemoryLayout.sequenceLayout(5, C_FLOAT)).withName("WBCT_Coeffs"),
            C_INT.withName("as_shot_wb_applied"),
            MemoryLayout.sequenceLayout(2, MemoryLayout.structLayout(
                MemoryLayout.sequenceLayout(9, C_FLOAT).withName("romm_cam")
            )).withName("P1_color"),
            C_INT.withName("raw_bps"),
            C_INT.withName("ExifColorSpace")
        ).withName("color")
    );
    public static MemoryLayout $LAYOUT() {
        return libraw_rawdata_t.$struct$LAYOUT;
    }
    static final VarHandle raw_alloc$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("raw_alloc")));
    public static VarHandle raw_alloc$VH() {
        return libraw_rawdata_t.raw_alloc$VH;
    }
    public static MemoryAddress raw_alloc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_rawdata_t.raw_alloc$VH.get(seg);
    }
    public static void raw_alloc$set( MemorySegment seg, MemoryAddress x) {
        libraw_rawdata_t.raw_alloc$VH.set(seg, x);
    }
    public static MemoryAddress raw_alloc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_rawdata_t.raw_alloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void raw_alloc$set(MemorySegment seg, long index, MemoryAddress x) {
        libraw_rawdata_t.raw_alloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle raw_image$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("raw_image")));
    public static VarHandle raw_image$VH() {
        return libraw_rawdata_t.raw_image$VH;
    }
    public static MemoryAddress raw_image$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_rawdata_t.raw_image$VH.get(seg);
    }
    public static void raw_image$set( MemorySegment seg, MemoryAddress x) {
        libraw_rawdata_t.raw_image$VH.set(seg, x);
    }
    public static MemoryAddress raw_image$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_rawdata_t.raw_image$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void raw_image$set(MemorySegment seg, long index, MemoryAddress x) {
        libraw_rawdata_t.raw_image$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle color4_image$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("color4_image")));
    public static VarHandle color4_image$VH() {
        return libraw_rawdata_t.color4_image$VH;
    }
    public static MemoryAddress color4_image$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_rawdata_t.color4_image$VH.get(seg);
    }
    public static void color4_image$set( MemorySegment seg, MemoryAddress x) {
        libraw_rawdata_t.color4_image$VH.set(seg, x);
    }
    public static MemoryAddress color4_image$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_rawdata_t.color4_image$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void color4_image$set(MemorySegment seg, long index, MemoryAddress x) {
        libraw_rawdata_t.color4_image$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle color3_image$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("color3_image")));
    public static VarHandle color3_image$VH() {
        return libraw_rawdata_t.color3_image$VH;
    }
    public static MemoryAddress color3_image$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_rawdata_t.color3_image$VH.get(seg);
    }
    public static void color3_image$set( MemorySegment seg, MemoryAddress x) {
        libraw_rawdata_t.color3_image$VH.set(seg, x);
    }
    public static MemoryAddress color3_image$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_rawdata_t.color3_image$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void color3_image$set(MemorySegment seg, long index, MemoryAddress x) {
        libraw_rawdata_t.color3_image$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle float_image$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("float_image")));
    public static VarHandle float_image$VH() {
        return libraw_rawdata_t.float_image$VH;
    }
    public static MemoryAddress float_image$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_rawdata_t.float_image$VH.get(seg);
    }
    public static void float_image$set( MemorySegment seg, MemoryAddress x) {
        libraw_rawdata_t.float_image$VH.set(seg, x);
    }
    public static MemoryAddress float_image$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_rawdata_t.float_image$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void float_image$set(MemorySegment seg, long index, MemoryAddress x) {
        libraw_rawdata_t.float_image$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle float3_image$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("float3_image")));
    public static VarHandle float3_image$VH() {
        return libraw_rawdata_t.float3_image$VH;
    }
    public static MemoryAddress float3_image$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_rawdata_t.float3_image$VH.get(seg);
    }
    public static void float3_image$set( MemorySegment seg, MemoryAddress x) {
        libraw_rawdata_t.float3_image$VH.set(seg, x);
    }
    public static MemoryAddress float3_image$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_rawdata_t.float3_image$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void float3_image$set(MemorySegment seg, long index, MemoryAddress x) {
        libraw_rawdata_t.float3_image$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle float4_image$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("float4_image")));
    public static VarHandle float4_image$VH() {
        return libraw_rawdata_t.float4_image$VH;
    }
    public static MemoryAddress float4_image$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_rawdata_t.float4_image$VH.get(seg);
    }
    public static void float4_image$set( MemorySegment seg, MemoryAddress x) {
        libraw_rawdata_t.float4_image$VH.set(seg, x);
    }
    public static MemoryAddress float4_image$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_rawdata_t.float4_image$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void float4_image$set(MemorySegment seg, long index, MemoryAddress x) {
        libraw_rawdata_t.float4_image$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ph1_cblack$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ph1_cblack")));
    public static VarHandle ph1_cblack$VH() {
        return libraw_rawdata_t.ph1_cblack$VH;
    }
    public static MemoryAddress ph1_cblack$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_rawdata_t.ph1_cblack$VH.get(seg);
    }
    public static void ph1_cblack$set( MemorySegment seg, MemoryAddress x) {
        libraw_rawdata_t.ph1_cblack$VH.set(seg, x);
    }
    public static MemoryAddress ph1_cblack$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_rawdata_t.ph1_cblack$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ph1_cblack$set(MemorySegment seg, long index, MemoryAddress x) {
        libraw_rawdata_t.ph1_cblack$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ph1_rblack$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ph1_rblack")));
    public static VarHandle ph1_rblack$VH() {
        return libraw_rawdata_t.ph1_rblack$VH;
    }
    public static MemoryAddress ph1_rblack$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_rawdata_t.ph1_rblack$VH.get(seg);
    }
    public static void ph1_rblack$set( MemorySegment seg, MemoryAddress x) {
        libraw_rawdata_t.ph1_rblack$VH.set(seg, x);
    }
    public static MemoryAddress ph1_rblack$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_rawdata_t.ph1_rblack$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ph1_rblack$set(MemorySegment seg, long index, MemoryAddress x) {
        libraw_rawdata_t.ph1_rblack$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment iparams$slice(MemorySegment seg) {
        return seg.asSlice(72, 440);
    }
    public static MemorySegment sizes$slice(MemorySegment seg) {
        return seg.asSlice(512, 184);
    }
    public static MemorySegment ioparams$slice(MemorySegment seg) {
        return seg.asSlice(696, 16);
    }
    public static MemorySegment color$slice(MemorySegment seg) {
        return seg.asSlice(712, 187048);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


