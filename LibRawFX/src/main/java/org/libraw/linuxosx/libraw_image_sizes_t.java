// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_image_sizes_t {
 *     unsigned short raw_height;
 *     unsigned short raw_width;
 *     unsigned short height;
 *     unsigned short width;
 *     unsigned short top_margin;
 *     unsigned short left_margin;
 *     unsigned short iheight;
 *     unsigned short iwidth;
 *     unsigned int raw_pitch;
 *     double pixel_aspect;
 *     int flip;
 *     int  mask[8][4];
 *     unsigned short raw_aspect;
 *     struct libraw_raw_inset_crop_t raw_inset_crops[2];
 * };
 * }
 */
public class libraw_image_sizes_t {

    public static MemoryLayout $LAYOUT() {
        return constants$14.const$2;
    }
    public static VarHandle raw_height$VH() {
        return constants$14.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short raw_height;
     * }
     */
    public static short raw_height$get(MemorySegment seg) {
        return (short)constants$14.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short raw_height;
     * }
     */
    public static void raw_height$set(MemorySegment seg, short x) {
        constants$14.const$3.set(seg, x);
    }
    public static short raw_height$get(MemorySegment seg, long index) {
        return (short)constants$14.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void raw_height$set(MemorySegment seg, long index, short x) {
        constants$14.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle raw_width$VH() {
        return constants$14.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short raw_width;
     * }
     */
    public static short raw_width$get(MemorySegment seg) {
        return (short)constants$14.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short raw_width;
     * }
     */
    public static void raw_width$set(MemorySegment seg, short x) {
        constants$14.const$4.set(seg, x);
    }
    public static short raw_width$get(MemorySegment seg, long index) {
        return (short)constants$14.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void raw_width$set(MemorySegment seg, long index, short x) {
        constants$14.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle height$VH() {
        return constants$14.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short height;
     * }
     */
    public static short height$get(MemorySegment seg) {
        return (short)constants$14.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short height;
     * }
     */
    public static void height$set(MemorySegment seg, short x) {
        constants$14.const$5.set(seg, x);
    }
    public static short height$get(MemorySegment seg, long index) {
        return (short)constants$14.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, short x) {
        constants$14.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle width$VH() {
        return constants$15.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short width;
     * }
     */
    public static short width$get(MemorySegment seg) {
        return (short)constants$15.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short width;
     * }
     */
    public static void width$set(MemorySegment seg, short x) {
        constants$15.const$0.set(seg, x);
    }
    public static short width$get(MemorySegment seg, long index) {
        return (short)constants$15.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, short x) {
        constants$15.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle top_margin$VH() {
        return constants$15.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short top_margin;
     * }
     */
    public static short top_margin$get(MemorySegment seg) {
        return (short)constants$15.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short top_margin;
     * }
     */
    public static void top_margin$set(MemorySegment seg, short x) {
        constants$15.const$1.set(seg, x);
    }
    public static short top_margin$get(MemorySegment seg, long index) {
        return (short)constants$15.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void top_margin$set(MemorySegment seg, long index, short x) {
        constants$15.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle left_margin$VH() {
        return constants$15.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short left_margin;
     * }
     */
    public static short left_margin$get(MemorySegment seg) {
        return (short)constants$15.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short left_margin;
     * }
     */
    public static void left_margin$set(MemorySegment seg, short x) {
        constants$15.const$2.set(seg, x);
    }
    public static short left_margin$get(MemorySegment seg, long index) {
        return (short)constants$15.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void left_margin$set(MemorySegment seg, long index, short x) {
        constants$15.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle iheight$VH() {
        return constants$15.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short iheight;
     * }
     */
    public static short iheight$get(MemorySegment seg) {
        return (short)constants$15.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short iheight;
     * }
     */
    public static void iheight$set(MemorySegment seg, short x) {
        constants$15.const$3.set(seg, x);
    }
    public static short iheight$get(MemorySegment seg, long index) {
        return (short)constants$15.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void iheight$set(MemorySegment seg, long index, short x) {
        constants$15.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle iwidth$VH() {
        return constants$15.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short iwidth;
     * }
     */
    public static short iwidth$get(MemorySegment seg) {
        return (short)constants$15.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short iwidth;
     * }
     */
    public static void iwidth$set(MemorySegment seg, short x) {
        constants$15.const$4.set(seg, x);
    }
    public static short iwidth$get(MemorySegment seg, long index) {
        return (short)constants$15.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void iwidth$set(MemorySegment seg, long index, short x) {
        constants$15.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle raw_pitch$VH() {
        return constants$15.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int raw_pitch;
     * }
     */
    public static int raw_pitch$get(MemorySegment seg) {
        return (int)constants$15.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int raw_pitch;
     * }
     */
    public static void raw_pitch$set(MemorySegment seg, int x) {
        constants$15.const$5.set(seg, x);
    }
    public static int raw_pitch$get(MemorySegment seg, long index) {
        return (int)constants$15.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void raw_pitch$set(MemorySegment seg, long index, int x) {
        constants$15.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pixel_aspect$VH() {
        return constants$16.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double pixel_aspect;
     * }
     */
    public static double pixel_aspect$get(MemorySegment seg) {
        return (double)constants$16.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double pixel_aspect;
     * }
     */
    public static void pixel_aspect$set(MemorySegment seg, double x) {
        constants$16.const$0.set(seg, x);
    }
    public static double pixel_aspect$get(MemorySegment seg, long index) {
        return (double)constants$16.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pixel_aspect$set(MemorySegment seg, long index, double x) {
        constants$16.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle flip$VH() {
        return constants$16.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int flip;
     * }
     */
    public static int flip$get(MemorySegment seg) {
        return (int)constants$16.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int flip;
     * }
     */
    public static void flip$set(MemorySegment seg, int x) {
        constants$16.const$1.set(seg, x);
    }
    public static int flip$get(MemorySegment seg, long index) {
        return (int)constants$16.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void flip$set(MemorySegment seg, long index, int x) {
        constants$16.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment mask$slice(MemorySegment seg) {
        return seg.asSlice(36, 128);
    }
    public static VarHandle raw_aspect$VH() {
        return constants$16.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short raw_aspect;
     * }
     */
    public static short raw_aspect$get(MemorySegment seg) {
        return (short)constants$16.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short raw_aspect;
     * }
     */
    public static void raw_aspect$set(MemorySegment seg, short x) {
        constants$16.const$2.set(seg, x);
    }
    public static short raw_aspect$get(MemorySegment seg, long index) {
        return (short)constants$16.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void raw_aspect$set(MemorySegment seg, long index, short x) {
        constants$16.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment raw_inset_crops$slice(MemorySegment seg) {
        return seg.asSlice(166, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


