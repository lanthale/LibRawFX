// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class libraw_fuji_info_t {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_FLOAT.withName("ExpoMidPointShift"),
        C_SHORT.withName("DynamicRange"),
        C_SHORT.withName("FilmMode"),
        C_SHORT.withName("DynamicRangeSetting"),
        C_SHORT.withName("DevelopmentDynamicRange"),
        C_SHORT.withName("AutoDynamicRange"),
        C_SHORT.withName("DRangePriority"),
        C_SHORT.withName("DRangePriorityAuto"),
        C_SHORT.withName("DRangePriorityFixed"),
        C_FLOAT.withName("BrightnessCompensation"),
        C_SHORT.withName("FocusMode"),
        C_SHORT.withName("AFMode"),
        MemoryLayout.sequenceLayout(2, C_SHORT).withName("FocusPixel"),
        C_SHORT.withName("PrioritySettings"),
        MemoryLayout.paddingLayout(16),
        C_INT.withName("FocusSettings"),
        C_INT.withName("AF_C_Settings"),
        C_SHORT.withName("FocusWarning"),
        MemoryLayout.sequenceLayout(3, C_SHORT).withName("ImageStabilization"),
        C_SHORT.withName("FlashMode"),
        C_SHORT.withName("WB_Preset"),
        C_SHORT.withName("ShutterType"),
        C_SHORT.withName("ExrMode"),
        C_SHORT.withName("Macro"),
        MemoryLayout.paddingLayout(16),
        C_INT.withName("Rating"),
        C_SHORT.withName("CropMode"),
        MemoryLayout.sequenceLayout(13, C_CHAR).withName("SerialSignature"),
        MemoryLayout.sequenceLayout(5, C_CHAR).withName("SensorID"),
        MemoryLayout.sequenceLayout(5, C_CHAR).withName("RAFVersion"),
        MemoryLayout.paddingLayout(24),
        C_INT.withName("RAFDataGeneration"),
        C_SHORT.withName("RAFDataVersion"),
        MemoryLayout.paddingLayout(16),
        C_INT.withName("isTSNERDTS"),
        C_SHORT.withName("DriveMode"),
        MemoryLayout.sequenceLayout(9, C_SHORT).withName("BlackLevel"),
        MemoryLayout.sequenceLayout(32, C_INT).withName("RAFData_ImageSizeTable"),
        C_INT.withName("AutoBracketing"),
        C_INT.withName("SequenceNumber"),
        C_INT.withName("SeriesLength"),
        MemoryLayout.sequenceLayout(2, C_FLOAT).withName("PixelShiftOffset"),
        C_INT.withName("ImageCount")
    );
    public static MemoryLayout $LAYOUT() {
        return libraw_fuji_info_t.$struct$LAYOUT;
    }
    static final VarHandle ExpoMidPointShift$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("ExpoMidPointShift"));
    public static VarHandle ExpoMidPointShift$VH() {
        return libraw_fuji_info_t.ExpoMidPointShift$VH;
    }
    public static float ExpoMidPointShift$get(MemorySegment seg) {
        return (float)libraw_fuji_info_t.ExpoMidPointShift$VH.get(seg);
    }
    public static void ExpoMidPointShift$set( MemorySegment seg, float x) {
        libraw_fuji_info_t.ExpoMidPointShift$VH.set(seg, x);
    }
    public static float ExpoMidPointShift$get(MemorySegment seg, long index) {
        return (float)libraw_fuji_info_t.ExpoMidPointShift$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExpoMidPointShift$set(MemorySegment seg, long index, float x) {
        libraw_fuji_info_t.ExpoMidPointShift$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DynamicRange$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("DynamicRange"));
    public static VarHandle DynamicRange$VH() {
        return libraw_fuji_info_t.DynamicRange$VH;
    }
    public static short DynamicRange$get(MemorySegment seg) {
        return (short)libraw_fuji_info_t.DynamicRange$VH.get(seg);
    }
    public static void DynamicRange$set( MemorySegment seg, short x) {
        libraw_fuji_info_t.DynamicRange$VH.set(seg, x);
    }
    public static short DynamicRange$get(MemorySegment seg, long index) {
        return (short)libraw_fuji_info_t.DynamicRange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DynamicRange$set(MemorySegment seg, long index, short x) {
        libraw_fuji_info_t.DynamicRange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FilmMode$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("FilmMode"));
    public static VarHandle FilmMode$VH() {
        return libraw_fuji_info_t.FilmMode$VH;
    }
    public static short FilmMode$get(MemorySegment seg) {
        return (short)libraw_fuji_info_t.FilmMode$VH.get(seg);
    }
    public static void FilmMode$set( MemorySegment seg, short x) {
        libraw_fuji_info_t.FilmMode$VH.set(seg, x);
    }
    public static short FilmMode$get(MemorySegment seg, long index) {
        return (short)libraw_fuji_info_t.FilmMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FilmMode$set(MemorySegment seg, long index, short x) {
        libraw_fuji_info_t.FilmMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DynamicRangeSetting$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("DynamicRangeSetting"));
    public static VarHandle DynamicRangeSetting$VH() {
        return libraw_fuji_info_t.DynamicRangeSetting$VH;
    }
    public static short DynamicRangeSetting$get(MemorySegment seg) {
        return (short)libraw_fuji_info_t.DynamicRangeSetting$VH.get(seg);
    }
    public static void DynamicRangeSetting$set( MemorySegment seg, short x) {
        libraw_fuji_info_t.DynamicRangeSetting$VH.set(seg, x);
    }
    public static short DynamicRangeSetting$get(MemorySegment seg, long index) {
        return (short)libraw_fuji_info_t.DynamicRangeSetting$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DynamicRangeSetting$set(MemorySegment seg, long index, short x) {
        libraw_fuji_info_t.DynamicRangeSetting$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DevelopmentDynamicRange$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("DevelopmentDynamicRange"));
    public static VarHandle DevelopmentDynamicRange$VH() {
        return libraw_fuji_info_t.DevelopmentDynamicRange$VH;
    }
    public static short DevelopmentDynamicRange$get(MemorySegment seg) {
        return (short)libraw_fuji_info_t.DevelopmentDynamicRange$VH.get(seg);
    }
    public static void DevelopmentDynamicRange$set( MemorySegment seg, short x) {
        libraw_fuji_info_t.DevelopmentDynamicRange$VH.set(seg, x);
    }
    public static short DevelopmentDynamicRange$get(MemorySegment seg, long index) {
        return (short)libraw_fuji_info_t.DevelopmentDynamicRange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DevelopmentDynamicRange$set(MemorySegment seg, long index, short x) {
        libraw_fuji_info_t.DevelopmentDynamicRange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AutoDynamicRange$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("AutoDynamicRange"));
    public static VarHandle AutoDynamicRange$VH() {
        return libraw_fuji_info_t.AutoDynamicRange$VH;
    }
    public static short AutoDynamicRange$get(MemorySegment seg) {
        return (short)libraw_fuji_info_t.AutoDynamicRange$VH.get(seg);
    }
    public static void AutoDynamicRange$set( MemorySegment seg, short x) {
        libraw_fuji_info_t.AutoDynamicRange$VH.set(seg, x);
    }
    public static short AutoDynamicRange$get(MemorySegment seg, long index) {
        return (short)libraw_fuji_info_t.AutoDynamicRange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AutoDynamicRange$set(MemorySegment seg, long index, short x) {
        libraw_fuji_info_t.AutoDynamicRange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DRangePriority$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("DRangePriority"));
    public static VarHandle DRangePriority$VH() {
        return libraw_fuji_info_t.DRangePriority$VH;
    }
    public static short DRangePriority$get(MemorySegment seg) {
        return (short)libraw_fuji_info_t.DRangePriority$VH.get(seg);
    }
    public static void DRangePriority$set( MemorySegment seg, short x) {
        libraw_fuji_info_t.DRangePriority$VH.set(seg, x);
    }
    public static short DRangePriority$get(MemorySegment seg, long index) {
        return (short)libraw_fuji_info_t.DRangePriority$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DRangePriority$set(MemorySegment seg, long index, short x) {
        libraw_fuji_info_t.DRangePriority$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DRangePriorityAuto$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("DRangePriorityAuto"));
    public static VarHandle DRangePriorityAuto$VH() {
        return libraw_fuji_info_t.DRangePriorityAuto$VH;
    }
    public static short DRangePriorityAuto$get(MemorySegment seg) {
        return (short)libraw_fuji_info_t.DRangePriorityAuto$VH.get(seg);
    }
    public static void DRangePriorityAuto$set( MemorySegment seg, short x) {
        libraw_fuji_info_t.DRangePriorityAuto$VH.set(seg, x);
    }
    public static short DRangePriorityAuto$get(MemorySegment seg, long index) {
        return (short)libraw_fuji_info_t.DRangePriorityAuto$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DRangePriorityAuto$set(MemorySegment seg, long index, short x) {
        libraw_fuji_info_t.DRangePriorityAuto$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DRangePriorityFixed$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("DRangePriorityFixed"));
    public static VarHandle DRangePriorityFixed$VH() {
        return libraw_fuji_info_t.DRangePriorityFixed$VH;
    }
    public static short DRangePriorityFixed$get(MemorySegment seg) {
        return (short)libraw_fuji_info_t.DRangePriorityFixed$VH.get(seg);
    }
    public static void DRangePriorityFixed$set( MemorySegment seg, short x) {
        libraw_fuji_info_t.DRangePriorityFixed$VH.set(seg, x);
    }
    public static short DRangePriorityFixed$get(MemorySegment seg, long index) {
        return (short)libraw_fuji_info_t.DRangePriorityFixed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DRangePriorityFixed$set(MemorySegment seg, long index, short x) {
        libraw_fuji_info_t.DRangePriorityFixed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BrightnessCompensation$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("BrightnessCompensation"));
    public static VarHandle BrightnessCompensation$VH() {
        return libraw_fuji_info_t.BrightnessCompensation$VH;
    }
    public static float BrightnessCompensation$get(MemorySegment seg) {
        return (float)libraw_fuji_info_t.BrightnessCompensation$VH.get(seg);
    }
    public static void BrightnessCompensation$set( MemorySegment seg, float x) {
        libraw_fuji_info_t.BrightnessCompensation$VH.set(seg, x);
    }
    public static float BrightnessCompensation$get(MemorySegment seg, long index) {
        return (float)libraw_fuji_info_t.BrightnessCompensation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BrightnessCompensation$set(MemorySegment seg, long index, float x) {
        libraw_fuji_info_t.BrightnessCompensation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FocusMode$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("FocusMode"));
    public static VarHandle FocusMode$VH() {
        return libraw_fuji_info_t.FocusMode$VH;
    }
    public static short FocusMode$get(MemorySegment seg) {
        return (short)libraw_fuji_info_t.FocusMode$VH.get(seg);
    }
    public static void FocusMode$set( MemorySegment seg, short x) {
        libraw_fuji_info_t.FocusMode$VH.set(seg, x);
    }
    public static short FocusMode$get(MemorySegment seg, long index) {
        return (short)libraw_fuji_info_t.FocusMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FocusMode$set(MemorySegment seg, long index, short x) {
        libraw_fuji_info_t.FocusMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AFMode$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("AFMode"));
    public static VarHandle AFMode$VH() {
        return libraw_fuji_info_t.AFMode$VH;
    }
    public static short AFMode$get(MemorySegment seg) {
        return (short)libraw_fuji_info_t.AFMode$VH.get(seg);
    }
    public static void AFMode$set( MemorySegment seg, short x) {
        libraw_fuji_info_t.AFMode$VH.set(seg, x);
    }
    public static short AFMode$get(MemorySegment seg, long index) {
        return (short)libraw_fuji_info_t.AFMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AFMode$set(MemorySegment seg, long index, short x) {
        libraw_fuji_info_t.AFMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment FocusPixel$slice(MemorySegment seg) {
        return seg.asSlice(28, 4);
    }
    static final VarHandle PrioritySettings$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("PrioritySettings"));
    public static VarHandle PrioritySettings$VH() {
        return libraw_fuji_info_t.PrioritySettings$VH;
    }
    public static short PrioritySettings$get(MemorySegment seg) {
        return (short)libraw_fuji_info_t.PrioritySettings$VH.get(seg);
    }
    public static void PrioritySettings$set( MemorySegment seg, short x) {
        libraw_fuji_info_t.PrioritySettings$VH.set(seg, x);
    }
    public static short PrioritySettings$get(MemorySegment seg, long index) {
        return (short)libraw_fuji_info_t.PrioritySettings$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PrioritySettings$set(MemorySegment seg, long index, short x) {
        libraw_fuji_info_t.PrioritySettings$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FocusSettings$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("FocusSettings"));
    public static VarHandle FocusSettings$VH() {
        return libraw_fuji_info_t.FocusSettings$VH;
    }
    public static int FocusSettings$get(MemorySegment seg) {
        return (int)libraw_fuji_info_t.FocusSettings$VH.get(seg);
    }
    public static void FocusSettings$set( MemorySegment seg, int x) {
        libraw_fuji_info_t.FocusSettings$VH.set(seg, x);
    }
    public static int FocusSettings$get(MemorySegment seg, long index) {
        return (int)libraw_fuji_info_t.FocusSettings$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FocusSettings$set(MemorySegment seg, long index, int x) {
        libraw_fuji_info_t.FocusSettings$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AF_C_Settings$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("AF_C_Settings"));
    public static VarHandle AF_C_Settings$VH() {
        return libraw_fuji_info_t.AF_C_Settings$VH;
    }
    public static int AF_C_Settings$get(MemorySegment seg) {
        return (int)libraw_fuji_info_t.AF_C_Settings$VH.get(seg);
    }
    public static void AF_C_Settings$set( MemorySegment seg, int x) {
        libraw_fuji_info_t.AF_C_Settings$VH.set(seg, x);
    }
    public static int AF_C_Settings$get(MemorySegment seg, long index) {
        return (int)libraw_fuji_info_t.AF_C_Settings$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AF_C_Settings$set(MemorySegment seg, long index, int x) {
        libraw_fuji_info_t.AF_C_Settings$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FocusWarning$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("FocusWarning"));
    public static VarHandle FocusWarning$VH() {
        return libraw_fuji_info_t.FocusWarning$VH;
    }
    public static short FocusWarning$get(MemorySegment seg) {
        return (short)libraw_fuji_info_t.FocusWarning$VH.get(seg);
    }
    public static void FocusWarning$set( MemorySegment seg, short x) {
        libraw_fuji_info_t.FocusWarning$VH.set(seg, x);
    }
    public static short FocusWarning$get(MemorySegment seg, long index) {
        return (short)libraw_fuji_info_t.FocusWarning$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FocusWarning$set(MemorySegment seg, long index, short x) {
        libraw_fuji_info_t.FocusWarning$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ImageStabilization$slice(MemorySegment seg) {
        return seg.asSlice(46, 6);
    }
    static final VarHandle FlashMode$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("FlashMode"));
    public static VarHandle FlashMode$VH() {
        return libraw_fuji_info_t.FlashMode$VH;
    }
    public static short FlashMode$get(MemorySegment seg) {
        return (short)libraw_fuji_info_t.FlashMode$VH.get(seg);
    }
    public static void FlashMode$set( MemorySegment seg, short x) {
        libraw_fuji_info_t.FlashMode$VH.set(seg, x);
    }
    public static short FlashMode$get(MemorySegment seg, long index) {
        return (short)libraw_fuji_info_t.FlashMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashMode$set(MemorySegment seg, long index, short x) {
        libraw_fuji_info_t.FlashMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle WB_Preset$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("WB_Preset"));
    public static VarHandle WB_Preset$VH() {
        return libraw_fuji_info_t.WB_Preset$VH;
    }
    public static short WB_Preset$get(MemorySegment seg) {
        return (short)libraw_fuji_info_t.WB_Preset$VH.get(seg);
    }
    public static void WB_Preset$set( MemorySegment seg, short x) {
        libraw_fuji_info_t.WB_Preset$VH.set(seg, x);
    }
    public static short WB_Preset$get(MemorySegment seg, long index) {
        return (short)libraw_fuji_info_t.WB_Preset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void WB_Preset$set(MemorySegment seg, long index, short x) {
        libraw_fuji_info_t.WB_Preset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ShutterType$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("ShutterType"));
    public static VarHandle ShutterType$VH() {
        return libraw_fuji_info_t.ShutterType$VH;
    }
    public static short ShutterType$get(MemorySegment seg) {
        return (short)libraw_fuji_info_t.ShutterType$VH.get(seg);
    }
    public static void ShutterType$set( MemorySegment seg, short x) {
        libraw_fuji_info_t.ShutterType$VH.set(seg, x);
    }
    public static short ShutterType$get(MemorySegment seg, long index) {
        return (short)libraw_fuji_info_t.ShutterType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ShutterType$set(MemorySegment seg, long index, short x) {
        libraw_fuji_info_t.ShutterType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ExrMode$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("ExrMode"));
    public static VarHandle ExrMode$VH() {
        return libraw_fuji_info_t.ExrMode$VH;
    }
    public static short ExrMode$get(MemorySegment seg) {
        return (short)libraw_fuji_info_t.ExrMode$VH.get(seg);
    }
    public static void ExrMode$set( MemorySegment seg, short x) {
        libraw_fuji_info_t.ExrMode$VH.set(seg, x);
    }
    public static short ExrMode$get(MemorySegment seg, long index) {
        return (short)libraw_fuji_info_t.ExrMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExrMode$set(MemorySegment seg, long index, short x) {
        libraw_fuji_info_t.ExrMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Macro$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("Macro"));
    public static VarHandle Macro$VH() {
        return libraw_fuji_info_t.Macro$VH;
    }
    public static short Macro$get(MemorySegment seg) {
        return (short)libraw_fuji_info_t.Macro$VH.get(seg);
    }
    public static void Macro$set( MemorySegment seg, short x) {
        libraw_fuji_info_t.Macro$VH.set(seg, x);
    }
    public static short Macro$get(MemorySegment seg, long index) {
        return (short)libraw_fuji_info_t.Macro$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Macro$set(MemorySegment seg, long index, short x) {
        libraw_fuji_info_t.Macro$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Rating$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Rating"));
    public static VarHandle Rating$VH() {
        return libraw_fuji_info_t.Rating$VH;
    }
    public static int Rating$get(MemorySegment seg) {
        return (int)libraw_fuji_info_t.Rating$VH.get(seg);
    }
    public static void Rating$set( MemorySegment seg, int x) {
        libraw_fuji_info_t.Rating$VH.set(seg, x);
    }
    public static int Rating$get(MemorySegment seg, long index) {
        return (int)libraw_fuji_info_t.Rating$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Rating$set(MemorySegment seg, long index, int x) {
        libraw_fuji_info_t.Rating$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CropMode$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("CropMode"));
    public static VarHandle CropMode$VH() {
        return libraw_fuji_info_t.CropMode$VH;
    }
    public static short CropMode$get(MemorySegment seg) {
        return (short)libraw_fuji_info_t.CropMode$VH.get(seg);
    }
    public static void CropMode$set( MemorySegment seg, short x) {
        libraw_fuji_info_t.CropMode$VH.set(seg, x);
    }
    public static short CropMode$get(MemorySegment seg, long index) {
        return (short)libraw_fuji_info_t.CropMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CropMode$set(MemorySegment seg, long index, short x) {
        libraw_fuji_info_t.CropMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment SerialSignature$slice(MemorySegment seg) {
        return seg.asSlice(70, 13);
    }
    public static MemorySegment SensorID$slice(MemorySegment seg) {
        return seg.asSlice(83, 5);
    }
    public static MemorySegment RAFVersion$slice(MemorySegment seg) {
        return seg.asSlice(88, 5);
    }
    static final VarHandle RAFDataGeneration$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("RAFDataGeneration"));
    public static VarHandle RAFDataGeneration$VH() {
        return libraw_fuji_info_t.RAFDataGeneration$VH;
    }
    public static int RAFDataGeneration$get(MemorySegment seg) {
        return (int)libraw_fuji_info_t.RAFDataGeneration$VH.get(seg);
    }
    public static void RAFDataGeneration$set( MemorySegment seg, int x) {
        libraw_fuji_info_t.RAFDataGeneration$VH.set(seg, x);
    }
    public static int RAFDataGeneration$get(MemorySegment seg, long index) {
        return (int)libraw_fuji_info_t.RAFDataGeneration$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RAFDataGeneration$set(MemorySegment seg, long index, int x) {
        libraw_fuji_info_t.RAFDataGeneration$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RAFDataVersion$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("RAFDataVersion"));
    public static VarHandle RAFDataVersion$VH() {
        return libraw_fuji_info_t.RAFDataVersion$VH;
    }
    public static short RAFDataVersion$get(MemorySegment seg) {
        return (short)libraw_fuji_info_t.RAFDataVersion$VH.get(seg);
    }
    public static void RAFDataVersion$set( MemorySegment seg, short x) {
        libraw_fuji_info_t.RAFDataVersion$VH.set(seg, x);
    }
    public static short RAFDataVersion$get(MemorySegment seg, long index) {
        return (short)libraw_fuji_info_t.RAFDataVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RAFDataVersion$set(MemorySegment seg, long index, short x) {
        libraw_fuji_info_t.RAFDataVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle isTSNERDTS$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("isTSNERDTS"));
    public static VarHandle isTSNERDTS$VH() {
        return libraw_fuji_info_t.isTSNERDTS$VH;
    }
    public static int isTSNERDTS$get(MemorySegment seg) {
        return (int)libraw_fuji_info_t.isTSNERDTS$VH.get(seg);
    }
    public static void isTSNERDTS$set( MemorySegment seg, int x) {
        libraw_fuji_info_t.isTSNERDTS$VH.set(seg, x);
    }
    public static int isTSNERDTS$get(MemorySegment seg, long index) {
        return (int)libraw_fuji_info_t.isTSNERDTS$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void isTSNERDTS$set(MemorySegment seg, long index, int x) {
        libraw_fuji_info_t.isTSNERDTS$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DriveMode$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("DriveMode"));
    public static VarHandle DriveMode$VH() {
        return libraw_fuji_info_t.DriveMode$VH;
    }
    public static short DriveMode$get(MemorySegment seg) {
        return (short)libraw_fuji_info_t.DriveMode$VH.get(seg);
    }
    public static void DriveMode$set( MemorySegment seg, short x) {
        libraw_fuji_info_t.DriveMode$VH.set(seg, x);
    }
    public static short DriveMode$get(MemorySegment seg, long index) {
        return (short)libraw_fuji_info_t.DriveMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DriveMode$set(MemorySegment seg, long index, short x) {
        libraw_fuji_info_t.DriveMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment BlackLevel$slice(MemorySegment seg) {
        return seg.asSlice(110, 18);
    }
    public static MemorySegment RAFData_ImageSizeTable$slice(MemorySegment seg) {
        return seg.asSlice(128, 128);
    }
    static final VarHandle AutoBracketing$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("AutoBracketing"));
    public static VarHandle AutoBracketing$VH() {
        return libraw_fuji_info_t.AutoBracketing$VH;
    }
    public static int AutoBracketing$get(MemorySegment seg) {
        return (int)libraw_fuji_info_t.AutoBracketing$VH.get(seg);
    }
    public static void AutoBracketing$set( MemorySegment seg, int x) {
        libraw_fuji_info_t.AutoBracketing$VH.set(seg, x);
    }
    public static int AutoBracketing$get(MemorySegment seg, long index) {
        return (int)libraw_fuji_info_t.AutoBracketing$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AutoBracketing$set(MemorySegment seg, long index, int x) {
        libraw_fuji_info_t.AutoBracketing$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SequenceNumber$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("SequenceNumber"));
    public static VarHandle SequenceNumber$VH() {
        return libraw_fuji_info_t.SequenceNumber$VH;
    }
    public static int SequenceNumber$get(MemorySegment seg) {
        return (int)libraw_fuji_info_t.SequenceNumber$VH.get(seg);
    }
    public static void SequenceNumber$set( MemorySegment seg, int x) {
        libraw_fuji_info_t.SequenceNumber$VH.set(seg, x);
    }
    public static int SequenceNumber$get(MemorySegment seg, long index) {
        return (int)libraw_fuji_info_t.SequenceNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SequenceNumber$set(MemorySegment seg, long index, int x) {
        libraw_fuji_info_t.SequenceNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SeriesLength$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("SeriesLength"));
    public static VarHandle SeriesLength$VH() {
        return libraw_fuji_info_t.SeriesLength$VH;
    }
    public static int SeriesLength$get(MemorySegment seg) {
        return (int)libraw_fuji_info_t.SeriesLength$VH.get(seg);
    }
    public static void SeriesLength$set( MemorySegment seg, int x) {
        libraw_fuji_info_t.SeriesLength$VH.set(seg, x);
    }
    public static int SeriesLength$get(MemorySegment seg, long index) {
        return (int)libraw_fuji_info_t.SeriesLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SeriesLength$set(MemorySegment seg, long index, int x) {
        libraw_fuji_info_t.SeriesLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment PixelShiftOffset$slice(MemorySegment seg) {
        return seg.asSlice(268, 8);
    }
    static final VarHandle ImageCount$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImageCount"));
    public static VarHandle ImageCount$VH() {
        return libraw_fuji_info_t.ImageCount$VH;
    }
    public static int ImageCount$get(MemorySegment seg) {
        return (int)libraw_fuji_info_t.ImageCount$VH.get(seg);
    }
    public static void ImageCount$set( MemorySegment seg, int x) {
        libraw_fuji_info_t.ImageCount$VH.set(seg, x);
    }
    public static int ImageCount$get(MemorySegment seg, long index) {
        return (int)libraw_fuji_info_t.ImageCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ImageCount$set(MemorySegment seg, long index, int x) {
        libraw_fuji_info_t.ImageCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


