// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_fuji_info_t {
 *     float ExpoMidPointShift;
 *     unsigned short DynamicRange;
 *     unsigned short FilmMode;
 *     unsigned short DynamicRangeSetting;
 *     unsigned short DevelopmentDynamicRange;
 *     unsigned short AutoDynamicRange;
 *     unsigned short DRangePriority;
 *     unsigned short DRangePriorityAuto;
 *     unsigned short DRangePriorityFixed;
 *     float BrightnessCompensation;
 *     unsigned short FocusMode;
 *     unsigned short AFMode;
 *     unsigned short FocusPixel[2];
 *     unsigned short PrioritySettings;
 *     unsigned int FocusSettings;
 *     unsigned int AF_C_Settings;
 *     unsigned short FocusWarning;
 *     unsigned short ImageStabilization[3];
 *     unsigned short FlashMode;
 *     unsigned short WB_Preset;
 *     unsigned short ShutterType;
 *     unsigned short ExrMode;
 *     unsigned short Macro;
 *     unsigned int Rating;
 *     unsigned short CropMode;
 *     char SerialSignature[13];
 *     char SensorID[5];
 *     char RAFVersion[5];
 *     int RAFDataGeneration;
 *     unsigned short RAFDataVersion;
 *     int isTSNERDTS;
 *     short DriveMode;
 *     unsigned short BlackLevel[9];
 *     unsigned int RAFData_ImageSizeTable[32];
 *     int AutoBracketing;
 *     int SequenceNumber;
 *     int SeriesLength;
 *     float PixelShiftOffset[2];
 *     int ImageCount;
 * };
 * }
 */
public class libraw_fuji_info_t {

    public static MemoryLayout $LAYOUT() {
        return constants$27.const$2;
    }
    public static VarHandle ExpoMidPointShift$VH() {
        return constants$27.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float ExpoMidPointShift;
     * }
     */
    public static float ExpoMidPointShift$get(MemorySegment seg) {
        return (float)constants$27.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float ExpoMidPointShift;
     * }
     */
    public static void ExpoMidPointShift$set(MemorySegment seg, float x) {
        constants$27.const$3.set(seg, x);
    }
    public static float ExpoMidPointShift$get(MemorySegment seg, long index) {
        return (float)constants$27.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ExpoMidPointShift$set(MemorySegment seg, long index, float x) {
        constants$27.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DynamicRange$VH() {
        return constants$27.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short DynamicRange;
     * }
     */
    public static short DynamicRange$get(MemorySegment seg) {
        return (short)constants$27.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short DynamicRange;
     * }
     */
    public static void DynamicRange$set(MemorySegment seg, short x) {
        constants$27.const$4.set(seg, x);
    }
    public static short DynamicRange$get(MemorySegment seg, long index) {
        return (short)constants$27.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void DynamicRange$set(MemorySegment seg, long index, short x) {
        constants$27.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FilmMode$VH() {
        return constants$27.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short FilmMode;
     * }
     */
    public static short FilmMode$get(MemorySegment seg) {
        return (short)constants$27.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short FilmMode;
     * }
     */
    public static void FilmMode$set(MemorySegment seg, short x) {
        constants$27.const$5.set(seg, x);
    }
    public static short FilmMode$get(MemorySegment seg, long index) {
        return (short)constants$27.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void FilmMode$set(MemorySegment seg, long index, short x) {
        constants$27.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DynamicRangeSetting$VH() {
        return constants$28.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short DynamicRangeSetting;
     * }
     */
    public static short DynamicRangeSetting$get(MemorySegment seg) {
        return (short)constants$28.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short DynamicRangeSetting;
     * }
     */
    public static void DynamicRangeSetting$set(MemorySegment seg, short x) {
        constants$28.const$0.set(seg, x);
    }
    public static short DynamicRangeSetting$get(MemorySegment seg, long index) {
        return (short)constants$28.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void DynamicRangeSetting$set(MemorySegment seg, long index, short x) {
        constants$28.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DevelopmentDynamicRange$VH() {
        return constants$28.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short DevelopmentDynamicRange;
     * }
     */
    public static short DevelopmentDynamicRange$get(MemorySegment seg) {
        return (short)constants$28.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short DevelopmentDynamicRange;
     * }
     */
    public static void DevelopmentDynamicRange$set(MemorySegment seg, short x) {
        constants$28.const$1.set(seg, x);
    }
    public static short DevelopmentDynamicRange$get(MemorySegment seg, long index) {
        return (short)constants$28.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void DevelopmentDynamicRange$set(MemorySegment seg, long index, short x) {
        constants$28.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AutoDynamicRange$VH() {
        return constants$28.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short AutoDynamicRange;
     * }
     */
    public static short AutoDynamicRange$get(MemorySegment seg) {
        return (short)constants$28.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short AutoDynamicRange;
     * }
     */
    public static void AutoDynamicRange$set(MemorySegment seg, short x) {
        constants$28.const$2.set(seg, x);
    }
    public static short AutoDynamicRange$get(MemorySegment seg, long index) {
        return (short)constants$28.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void AutoDynamicRange$set(MemorySegment seg, long index, short x) {
        constants$28.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DRangePriority$VH() {
        return constants$28.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short DRangePriority;
     * }
     */
    public static short DRangePriority$get(MemorySegment seg) {
        return (short)constants$28.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short DRangePriority;
     * }
     */
    public static void DRangePriority$set(MemorySegment seg, short x) {
        constants$28.const$3.set(seg, x);
    }
    public static short DRangePriority$get(MemorySegment seg, long index) {
        return (short)constants$28.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void DRangePriority$set(MemorySegment seg, long index, short x) {
        constants$28.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DRangePriorityAuto$VH() {
        return constants$28.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short DRangePriorityAuto;
     * }
     */
    public static short DRangePriorityAuto$get(MemorySegment seg) {
        return (short)constants$28.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short DRangePriorityAuto;
     * }
     */
    public static void DRangePriorityAuto$set(MemorySegment seg, short x) {
        constants$28.const$4.set(seg, x);
    }
    public static short DRangePriorityAuto$get(MemorySegment seg, long index) {
        return (short)constants$28.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void DRangePriorityAuto$set(MemorySegment seg, long index, short x) {
        constants$28.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DRangePriorityFixed$VH() {
        return constants$28.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short DRangePriorityFixed;
     * }
     */
    public static short DRangePriorityFixed$get(MemorySegment seg) {
        return (short)constants$28.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short DRangePriorityFixed;
     * }
     */
    public static void DRangePriorityFixed$set(MemorySegment seg, short x) {
        constants$28.const$5.set(seg, x);
    }
    public static short DRangePriorityFixed$get(MemorySegment seg, long index) {
        return (short)constants$28.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void DRangePriorityFixed$set(MemorySegment seg, long index, short x) {
        constants$28.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BrightnessCompensation$VH() {
        return constants$29.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float BrightnessCompensation;
     * }
     */
    public static float BrightnessCompensation$get(MemorySegment seg) {
        return (float)constants$29.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float BrightnessCompensation;
     * }
     */
    public static void BrightnessCompensation$set(MemorySegment seg, float x) {
        constants$29.const$0.set(seg, x);
    }
    public static float BrightnessCompensation$get(MemorySegment seg, long index) {
        return (float)constants$29.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void BrightnessCompensation$set(MemorySegment seg, long index, float x) {
        constants$29.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FocusMode$VH() {
        return constants$29.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short FocusMode;
     * }
     */
    public static short FocusMode$get(MemorySegment seg) {
        return (short)constants$29.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short FocusMode;
     * }
     */
    public static void FocusMode$set(MemorySegment seg, short x) {
        constants$29.const$1.set(seg, x);
    }
    public static short FocusMode$get(MemorySegment seg, long index) {
        return (short)constants$29.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void FocusMode$set(MemorySegment seg, long index, short x) {
        constants$29.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AFMode$VH() {
        return constants$29.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short AFMode;
     * }
     */
    public static short AFMode$get(MemorySegment seg) {
        return (short)constants$29.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short AFMode;
     * }
     */
    public static void AFMode$set(MemorySegment seg, short x) {
        constants$29.const$2.set(seg, x);
    }
    public static short AFMode$get(MemorySegment seg, long index) {
        return (short)constants$29.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void AFMode$set(MemorySegment seg, long index, short x) {
        constants$29.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment FocusPixel$slice(MemorySegment seg) {
        return seg.asSlice(28, 4);
    }
    public static VarHandle PrioritySettings$VH() {
        return constants$29.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short PrioritySettings;
     * }
     */
    public static short PrioritySettings$get(MemorySegment seg) {
        return (short)constants$29.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short PrioritySettings;
     * }
     */
    public static void PrioritySettings$set(MemorySegment seg, short x) {
        constants$29.const$3.set(seg, x);
    }
    public static short PrioritySettings$get(MemorySegment seg, long index) {
        return (short)constants$29.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void PrioritySettings$set(MemorySegment seg, long index, short x) {
        constants$29.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FocusSettings$VH() {
        return constants$29.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int FocusSettings;
     * }
     */
    public static int FocusSettings$get(MemorySegment seg) {
        return (int)constants$29.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int FocusSettings;
     * }
     */
    public static void FocusSettings$set(MemorySegment seg, int x) {
        constants$29.const$4.set(seg, x);
    }
    public static int FocusSettings$get(MemorySegment seg, long index) {
        return (int)constants$29.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void FocusSettings$set(MemorySegment seg, long index, int x) {
        constants$29.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AF_C_Settings$VH() {
        return constants$29.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int AF_C_Settings;
     * }
     */
    public static int AF_C_Settings$get(MemorySegment seg) {
        return (int)constants$29.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int AF_C_Settings;
     * }
     */
    public static void AF_C_Settings$set(MemorySegment seg, int x) {
        constants$29.const$5.set(seg, x);
    }
    public static int AF_C_Settings$get(MemorySegment seg, long index) {
        return (int)constants$29.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void AF_C_Settings$set(MemorySegment seg, long index, int x) {
        constants$29.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FocusWarning$VH() {
        return constants$30.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short FocusWarning;
     * }
     */
    public static short FocusWarning$get(MemorySegment seg) {
        return (short)constants$30.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short FocusWarning;
     * }
     */
    public static void FocusWarning$set(MemorySegment seg, short x) {
        constants$30.const$0.set(seg, x);
    }
    public static short FocusWarning$get(MemorySegment seg, long index) {
        return (short)constants$30.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void FocusWarning$set(MemorySegment seg, long index, short x) {
        constants$30.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ImageStabilization$slice(MemorySegment seg) {
        return seg.asSlice(46, 6);
    }
    public static VarHandle FlashMode$VH() {
        return constants$30.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short FlashMode;
     * }
     */
    public static short FlashMode$get(MemorySegment seg) {
        return (short)constants$30.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short FlashMode;
     * }
     */
    public static void FlashMode$set(MemorySegment seg, short x) {
        constants$30.const$1.set(seg, x);
    }
    public static short FlashMode$get(MemorySegment seg, long index) {
        return (short)constants$30.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashMode$set(MemorySegment seg, long index, short x) {
        constants$30.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle WB_Preset$VH() {
        return constants$30.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short WB_Preset;
     * }
     */
    public static short WB_Preset$get(MemorySegment seg) {
        return (short)constants$30.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short WB_Preset;
     * }
     */
    public static void WB_Preset$set(MemorySegment seg, short x) {
        constants$30.const$2.set(seg, x);
    }
    public static short WB_Preset$get(MemorySegment seg, long index) {
        return (short)constants$30.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void WB_Preset$set(MemorySegment seg, long index, short x) {
        constants$30.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ShutterType$VH() {
        return constants$30.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ShutterType;
     * }
     */
    public static short ShutterType$get(MemorySegment seg) {
        return (short)constants$30.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ShutterType;
     * }
     */
    public static void ShutterType$set(MemorySegment seg, short x) {
        constants$30.const$3.set(seg, x);
    }
    public static short ShutterType$get(MemorySegment seg, long index) {
        return (short)constants$30.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ShutterType$set(MemorySegment seg, long index, short x) {
        constants$30.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ExrMode$VH() {
        return constants$30.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ExrMode;
     * }
     */
    public static short ExrMode$get(MemorySegment seg) {
        return (short)constants$30.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ExrMode;
     * }
     */
    public static void ExrMode$set(MemorySegment seg, short x) {
        constants$30.const$4.set(seg, x);
    }
    public static short ExrMode$get(MemorySegment seg, long index) {
        return (short)constants$30.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ExrMode$set(MemorySegment seg, long index, short x) {
        constants$30.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Macro$VH() {
        return constants$30.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short Macro;
     * }
     */
    public static short Macro$get(MemorySegment seg) {
        return (short)constants$30.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short Macro;
     * }
     */
    public static void Macro$set(MemorySegment seg, short x) {
        constants$30.const$5.set(seg, x);
    }
    public static short Macro$get(MemorySegment seg, long index) {
        return (short)constants$30.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void Macro$set(MemorySegment seg, long index, short x) {
        constants$30.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Rating$VH() {
        return constants$31.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int Rating;
     * }
     */
    public static int Rating$get(MemorySegment seg) {
        return (int)constants$31.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int Rating;
     * }
     */
    public static void Rating$set(MemorySegment seg, int x) {
        constants$31.const$0.set(seg, x);
    }
    public static int Rating$get(MemorySegment seg, long index) {
        return (int)constants$31.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Rating$set(MemorySegment seg, long index, int x) {
        constants$31.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CropMode$VH() {
        return constants$31.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short CropMode;
     * }
     */
    public static short CropMode$get(MemorySegment seg) {
        return (short)constants$31.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short CropMode;
     * }
     */
    public static void CropMode$set(MemorySegment seg, short x) {
        constants$31.const$1.set(seg, x);
    }
    public static short CropMode$get(MemorySegment seg, long index) {
        return (short)constants$31.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void CropMode$set(MemorySegment seg, long index, short x) {
        constants$31.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment SerialSignature$slice(MemorySegment seg) {
        return seg.asSlice(70, 13);
    }
    public static MemorySegment SensorID$slice(MemorySegment seg) {
        return seg.asSlice(83, 5);
    }
    public static MemorySegment RAFVersion$slice(MemorySegment seg) {
        return seg.asSlice(88, 5);
    }
    public static VarHandle RAFDataGeneration$VH() {
        return constants$31.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int RAFDataGeneration;
     * }
     */
    public static int RAFDataGeneration$get(MemorySegment seg) {
        return (int)constants$31.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int RAFDataGeneration;
     * }
     */
    public static void RAFDataGeneration$set(MemorySegment seg, int x) {
        constants$31.const$2.set(seg, x);
    }
    public static int RAFDataGeneration$get(MemorySegment seg, long index) {
        return (int)constants$31.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void RAFDataGeneration$set(MemorySegment seg, long index, int x) {
        constants$31.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle RAFDataVersion$VH() {
        return constants$31.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short RAFDataVersion;
     * }
     */
    public static short RAFDataVersion$get(MemorySegment seg) {
        return (short)constants$31.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short RAFDataVersion;
     * }
     */
    public static void RAFDataVersion$set(MemorySegment seg, short x) {
        constants$31.const$3.set(seg, x);
    }
    public static short RAFDataVersion$get(MemorySegment seg, long index) {
        return (short)constants$31.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void RAFDataVersion$set(MemorySegment seg, long index, short x) {
        constants$31.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle isTSNERDTS$VH() {
        return constants$31.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int isTSNERDTS;
     * }
     */
    public static int isTSNERDTS$get(MemorySegment seg) {
        return (int)constants$31.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int isTSNERDTS;
     * }
     */
    public static void isTSNERDTS$set(MemorySegment seg, int x) {
        constants$31.const$4.set(seg, x);
    }
    public static int isTSNERDTS$get(MemorySegment seg, long index) {
        return (int)constants$31.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void isTSNERDTS$set(MemorySegment seg, long index, int x) {
        constants$31.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle DriveMode$VH() {
        return constants$31.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short DriveMode;
     * }
     */
    public static short DriveMode$get(MemorySegment seg) {
        return (short)constants$31.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short DriveMode;
     * }
     */
    public static void DriveMode$set(MemorySegment seg, short x) {
        constants$31.const$5.set(seg, x);
    }
    public static short DriveMode$get(MemorySegment seg, long index) {
        return (short)constants$31.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void DriveMode$set(MemorySegment seg, long index, short x) {
        constants$31.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment BlackLevel$slice(MemorySegment seg) {
        return seg.asSlice(110, 18);
    }
    public static MemorySegment RAFData_ImageSizeTable$slice(MemorySegment seg) {
        return seg.asSlice(128, 128);
    }
    public static VarHandle AutoBracketing$VH() {
        return constants$32.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int AutoBracketing;
     * }
     */
    public static int AutoBracketing$get(MemorySegment seg) {
        return (int)constants$32.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int AutoBracketing;
     * }
     */
    public static void AutoBracketing$set(MemorySegment seg, int x) {
        constants$32.const$0.set(seg, x);
    }
    public static int AutoBracketing$get(MemorySegment seg, long index) {
        return (int)constants$32.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void AutoBracketing$set(MemorySegment seg, long index, int x) {
        constants$32.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SequenceNumber$VH() {
        return constants$32.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int SequenceNumber;
     * }
     */
    public static int SequenceNumber$get(MemorySegment seg) {
        return (int)constants$32.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int SequenceNumber;
     * }
     */
    public static void SequenceNumber$set(MemorySegment seg, int x) {
        constants$32.const$1.set(seg, x);
    }
    public static int SequenceNumber$get(MemorySegment seg, long index) {
        return (int)constants$32.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SequenceNumber$set(MemorySegment seg, long index, int x) {
        constants$32.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle SeriesLength$VH() {
        return constants$32.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int SeriesLength;
     * }
     */
    public static int SeriesLength$get(MemorySegment seg) {
        return (int)constants$32.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int SeriesLength;
     * }
     */
    public static void SeriesLength$set(MemorySegment seg, int x) {
        constants$32.const$2.set(seg, x);
    }
    public static int SeriesLength$get(MemorySegment seg, long index) {
        return (int)constants$32.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SeriesLength$set(MemorySegment seg, long index, int x) {
        constants$32.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment PixelShiftOffset$slice(MemorySegment seg) {
        return seg.asSlice(268, 8);
    }
    public static VarHandle ImageCount$VH() {
        return constants$32.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int ImageCount;
     * }
     */
    public static int ImageCount$get(MemorySegment seg) {
        return (int)constants$32.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int ImageCount;
     * }
     */
    public static void ImageCount$set(MemorySegment seg, int x) {
        constants$32.const$3.set(seg, x);
    }
    public static int ImageCount$get(MemorySegment seg, long index) {
        return (int)constants$32.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ImageCount$set(MemorySegment seg, long index, int x) {
        constants$32.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


