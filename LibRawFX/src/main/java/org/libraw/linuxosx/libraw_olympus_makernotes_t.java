// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_olympus_makernotes_t {
 *     char CameraType2[6];
 *     unsigned short ValidBits;
 *     int SensorCalibration[2];
 *     unsigned short DriveMode[5];
 *     unsigned short ColorSpace;
 *     unsigned short FocusMode[2];
 *     unsigned short AutoFocus;
 *     unsigned short AFPoint;
 *     unsigned int AFAreas[64];
 *     double AFPointSelected[5];
 *     unsigned short AFResult;
 *     unsigned char AFFineTune;
 *     short AFFineTuneAdj[3];
 *     unsigned int SpecialMode[3];
 *     unsigned short ZoomStepCount;
 *     unsigned short FocusStepCount;
 *     unsigned short FocusStepInfinity;
 *     unsigned short FocusStepNear;
 *     double FocusDistance;
 *     unsigned short AspectFrame[4];
 *     unsigned int StackedImage[2];
 *     unsigned char isLiveND;
 *     unsigned int LiveNDfactor;
 *     unsigned short Panorama_mode;
 *     unsigned short Panorama_frameNum;
 * };
 * }
 */
public class libraw_olympus_makernotes_t {

    public static MemoryLayout $LAYOUT() {
        return constants$39.const$5;
    }
    public static MemorySegment CameraType2$slice(MemorySegment seg) {
        return seg.asSlice(0, 6);
    }
    public static VarHandle ValidBits$VH() {
        return constants$40.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ValidBits;
     * }
     */
    public static short ValidBits$get(MemorySegment seg) {
        return (short)constants$40.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ValidBits;
     * }
     */
    public static void ValidBits$set(MemorySegment seg, short x) {
        constants$40.const$0.set(seg, x);
    }
    public static short ValidBits$get(MemorySegment seg, long index) {
        return (short)constants$40.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ValidBits$set(MemorySegment seg, long index, short x) {
        constants$40.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment SensorCalibration$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static MemorySegment DriveMode$slice(MemorySegment seg) {
        return seg.asSlice(16, 10);
    }
    public static VarHandle ColorSpace$VH() {
        return constants$40.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ColorSpace;
     * }
     */
    public static short ColorSpace$get(MemorySegment seg) {
        return (short)constants$40.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ColorSpace;
     * }
     */
    public static void ColorSpace$set(MemorySegment seg, short x) {
        constants$40.const$1.set(seg, x);
    }
    public static short ColorSpace$get(MemorySegment seg, long index) {
        return (short)constants$40.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ColorSpace$set(MemorySegment seg, long index, short x) {
        constants$40.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment FocusMode$slice(MemorySegment seg) {
        return seg.asSlice(28, 4);
    }
    public static VarHandle AutoFocus$VH() {
        return constants$40.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short AutoFocus;
     * }
     */
    public static short AutoFocus$get(MemorySegment seg) {
        return (short)constants$40.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short AutoFocus;
     * }
     */
    public static void AutoFocus$set(MemorySegment seg, short x) {
        constants$40.const$2.set(seg, x);
    }
    public static short AutoFocus$get(MemorySegment seg, long index) {
        return (short)constants$40.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void AutoFocus$set(MemorySegment seg, long index, short x) {
        constants$40.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AFPoint$VH() {
        return constants$40.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short AFPoint;
     * }
     */
    public static short AFPoint$get(MemorySegment seg) {
        return (short)constants$40.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short AFPoint;
     * }
     */
    public static void AFPoint$set(MemorySegment seg, short x) {
        constants$40.const$3.set(seg, x);
    }
    public static short AFPoint$get(MemorySegment seg, long index) {
        return (short)constants$40.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void AFPoint$set(MemorySegment seg, long index, short x) {
        constants$40.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment AFAreas$slice(MemorySegment seg) {
        return seg.asSlice(36, 256);
    }
    public static MemorySegment AFPointSelected$slice(MemorySegment seg) {
        return seg.asSlice(296, 40);
    }
    public static VarHandle AFResult$VH() {
        return constants$40.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short AFResult;
     * }
     */
    public static short AFResult$get(MemorySegment seg) {
        return (short)constants$40.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short AFResult;
     * }
     */
    public static void AFResult$set(MemorySegment seg, short x) {
        constants$40.const$4.set(seg, x);
    }
    public static short AFResult$get(MemorySegment seg, long index) {
        return (short)constants$40.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void AFResult$set(MemorySegment seg, long index, short x) {
        constants$40.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AFFineTune$VH() {
        return constants$40.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char AFFineTune;
     * }
     */
    public static byte AFFineTune$get(MemorySegment seg) {
        return (byte)constants$40.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char AFFineTune;
     * }
     */
    public static void AFFineTune$set(MemorySegment seg, byte x) {
        constants$40.const$5.set(seg, x);
    }
    public static byte AFFineTune$get(MemorySegment seg, long index) {
        return (byte)constants$40.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void AFFineTune$set(MemorySegment seg, long index, byte x) {
        constants$40.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment AFFineTuneAdj$slice(MemorySegment seg) {
        return seg.asSlice(340, 6);
    }
    public static MemorySegment SpecialMode$slice(MemorySegment seg) {
        return seg.asSlice(348, 12);
    }
    public static VarHandle ZoomStepCount$VH() {
        return constants$41.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ZoomStepCount;
     * }
     */
    public static short ZoomStepCount$get(MemorySegment seg) {
        return (short)constants$41.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ZoomStepCount;
     * }
     */
    public static void ZoomStepCount$set(MemorySegment seg, short x) {
        constants$41.const$0.set(seg, x);
    }
    public static short ZoomStepCount$get(MemorySegment seg, long index) {
        return (short)constants$41.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ZoomStepCount$set(MemorySegment seg, long index, short x) {
        constants$41.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FocusStepCount$VH() {
        return constants$41.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short FocusStepCount;
     * }
     */
    public static short FocusStepCount$get(MemorySegment seg) {
        return (short)constants$41.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short FocusStepCount;
     * }
     */
    public static void FocusStepCount$set(MemorySegment seg, short x) {
        constants$41.const$1.set(seg, x);
    }
    public static short FocusStepCount$get(MemorySegment seg, long index) {
        return (short)constants$41.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void FocusStepCount$set(MemorySegment seg, long index, short x) {
        constants$41.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FocusStepInfinity$VH() {
        return constants$41.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short FocusStepInfinity;
     * }
     */
    public static short FocusStepInfinity$get(MemorySegment seg) {
        return (short)constants$41.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short FocusStepInfinity;
     * }
     */
    public static void FocusStepInfinity$set(MemorySegment seg, short x) {
        constants$41.const$2.set(seg, x);
    }
    public static short FocusStepInfinity$get(MemorySegment seg, long index) {
        return (short)constants$41.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void FocusStepInfinity$set(MemorySegment seg, long index, short x) {
        constants$41.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FocusStepNear$VH() {
        return constants$41.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short FocusStepNear;
     * }
     */
    public static short FocusStepNear$get(MemorySegment seg) {
        return (short)constants$41.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short FocusStepNear;
     * }
     */
    public static void FocusStepNear$set(MemorySegment seg, short x) {
        constants$41.const$3.set(seg, x);
    }
    public static short FocusStepNear$get(MemorySegment seg, long index) {
        return (short)constants$41.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void FocusStepNear$set(MemorySegment seg, long index, short x) {
        constants$41.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FocusDistance$VH() {
        return constants$41.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double FocusDistance;
     * }
     */
    public static double FocusDistance$get(MemorySegment seg) {
        return (double)constants$41.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double FocusDistance;
     * }
     */
    public static void FocusDistance$set(MemorySegment seg, double x) {
        constants$41.const$4.set(seg, x);
    }
    public static double FocusDistance$get(MemorySegment seg, long index) {
        return (double)constants$41.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void FocusDistance$set(MemorySegment seg, long index, double x) {
        constants$41.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment AspectFrame$slice(MemorySegment seg) {
        return seg.asSlice(376, 8);
    }
    public static MemorySegment StackedImage$slice(MemorySegment seg) {
        return seg.asSlice(384, 8);
    }
    public static VarHandle isLiveND$VH() {
        return constants$41.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char isLiveND;
     * }
     */
    public static byte isLiveND$get(MemorySegment seg) {
        return (byte)constants$41.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char isLiveND;
     * }
     */
    public static void isLiveND$set(MemorySegment seg, byte x) {
        constants$41.const$5.set(seg, x);
    }
    public static byte isLiveND$get(MemorySegment seg, long index) {
        return (byte)constants$41.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void isLiveND$set(MemorySegment seg, long index, byte x) {
        constants$41.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LiveNDfactor$VH() {
        return constants$42.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int LiveNDfactor;
     * }
     */
    public static int LiveNDfactor$get(MemorySegment seg) {
        return (int)constants$42.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int LiveNDfactor;
     * }
     */
    public static void LiveNDfactor$set(MemorySegment seg, int x) {
        constants$42.const$0.set(seg, x);
    }
    public static int LiveNDfactor$get(MemorySegment seg, long index) {
        return (int)constants$42.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void LiveNDfactor$set(MemorySegment seg, long index, int x) {
        constants$42.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Panorama_mode$VH() {
        return constants$42.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short Panorama_mode;
     * }
     */
    public static short Panorama_mode$get(MemorySegment seg) {
        return (short)constants$42.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short Panorama_mode;
     * }
     */
    public static void Panorama_mode$set(MemorySegment seg, short x) {
        constants$42.const$1.set(seg, x);
    }
    public static short Panorama_mode$get(MemorySegment seg, long index) {
        return (short)constants$42.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Panorama_mode$set(MemorySegment seg, long index, short x) {
        constants$42.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle Panorama_frameNum$VH() {
        return constants$42.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short Panorama_frameNum;
     * }
     */
    public static short Panorama_frameNum$get(MemorySegment seg) {
        return (short)constants$42.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short Panorama_frameNum;
     * }
     */
    public static void Panorama_frameNum$set(MemorySegment seg, short x) {
        constants$42.const$2.set(seg, x);
    }
    public static short Panorama_frameNum$get(MemorySegment seg, long index) {
        return (short)constants$42.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Panorama_frameNum$set(MemorySegment seg, long index, short x) {
        constants$42.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


