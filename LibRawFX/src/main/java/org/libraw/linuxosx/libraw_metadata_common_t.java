// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_metadata_common_t {
 *     float FlashEC;
 *     float FlashGN;
 *     float CameraTemperature;
 *     float SensorTemperature;
 *     float SensorTemperature2;
 *     float LensTemperature;
 *     float AmbientTemperature;
 *     float BatteryTemperature;
 *     float exifAmbientTemperature;
 *     float exifHumidity;
 *     float exifPressure;
 *     float exifWaterDepth;
 *     float exifAcceleration;
 *     float exifCameraElevationAngle;
 *     float real_ISO;
 *     float exifExposureIndex;
 *     unsigned short ColorSpace;
 *     char firmware[128];
 *     float ExposureCalibrationShift;
 *     struct libraw_afinfo_item_t afdata[4];
 *     int afcount;
 * };
 * }
 */
public class libraw_metadata_common_t {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_FLOAT$LAYOUT.withName("FlashEC"),
        Constants$root.C_FLOAT$LAYOUT.withName("FlashGN"),
        Constants$root.C_FLOAT$LAYOUT.withName("CameraTemperature"),
        Constants$root.C_FLOAT$LAYOUT.withName("SensorTemperature"),
        Constants$root.C_FLOAT$LAYOUT.withName("SensorTemperature2"),
        Constants$root.C_FLOAT$LAYOUT.withName("LensTemperature"),
        Constants$root.C_FLOAT$LAYOUT.withName("AmbientTemperature"),
        Constants$root.C_FLOAT$LAYOUT.withName("BatteryTemperature"),
        Constants$root.C_FLOAT$LAYOUT.withName("exifAmbientTemperature"),
        Constants$root.C_FLOAT$LAYOUT.withName("exifHumidity"),
        Constants$root.C_FLOAT$LAYOUT.withName("exifPressure"),
        Constants$root.C_FLOAT$LAYOUT.withName("exifWaterDepth"),
        Constants$root.C_FLOAT$LAYOUT.withName("exifAcceleration"),
        Constants$root.C_FLOAT$LAYOUT.withName("exifCameraElevationAngle"),
        Constants$root.C_FLOAT$LAYOUT.withName("real_ISO"),
        Constants$root.C_FLOAT$LAYOUT.withName("exifExposureIndex"),
        Constants$root.C_SHORT$LAYOUT.withName("ColorSpace"),
        MemoryLayout.sequenceLayout(128, Constants$root.C_CHAR$LAYOUT).withName("firmware"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_FLOAT$LAYOUT.withName("ExposureCalibrationShift"),
        MemoryLayout.sequenceLayout(4, MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("AFInfoData_tag"),
            Constants$root.C_SHORT$LAYOUT.withName("AFInfoData_order"),
            MemoryLayout.paddingLayout(16),
            Constants$root.C_INT$LAYOUT.withName("AFInfoData_version"),
            Constants$root.C_INT$LAYOUT.withName("AFInfoData_length"),
            Constants$root.C_POINTER$LAYOUT.withName("AFInfoData")
        ).withName("libraw_afinfo_item_t")).withName("afdata"),
        Constants$root.C_INT$LAYOUT.withName("afcount"),
        MemoryLayout.paddingLayout(32)
    ).withName("libraw_metadata_common_t");
    public static MemoryLayout $LAYOUT() {
        return libraw_metadata_common_t.$struct$LAYOUT;
    }
    static final VarHandle FlashEC$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlashEC"));
    public static VarHandle FlashEC$VH() {
        return libraw_metadata_common_t.FlashEC$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float FlashEC;
     * }
     */
    public static float FlashEC$get(MemorySegment seg) {
        return (float)libraw_metadata_common_t.FlashEC$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float FlashEC;
     * }
     */
    public static void FlashEC$set(MemorySegment seg, float x) {
        libraw_metadata_common_t.FlashEC$VH.set(seg, x);
    }
    public static float FlashEC$get(MemorySegment seg, long index) {
        return (float)libraw_metadata_common_t.FlashEC$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashEC$set(MemorySegment seg, long index, float x) {
        libraw_metadata_common_t.FlashEC$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashGN$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlashGN"));
    public static VarHandle FlashGN$VH() {
        return libraw_metadata_common_t.FlashGN$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float FlashGN;
     * }
     */
    public static float FlashGN$get(MemorySegment seg) {
        return (float)libraw_metadata_common_t.FlashGN$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float FlashGN;
     * }
     */
    public static void FlashGN$set(MemorySegment seg, float x) {
        libraw_metadata_common_t.FlashGN$VH.set(seg, x);
    }
    public static float FlashGN$get(MemorySegment seg, long index) {
        return (float)libraw_metadata_common_t.FlashGN$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashGN$set(MemorySegment seg, long index, float x) {
        libraw_metadata_common_t.FlashGN$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CameraTemperature$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CameraTemperature"));
    public static VarHandle CameraTemperature$VH() {
        return libraw_metadata_common_t.CameraTemperature$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float CameraTemperature;
     * }
     */
    public static float CameraTemperature$get(MemorySegment seg) {
        return (float)libraw_metadata_common_t.CameraTemperature$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float CameraTemperature;
     * }
     */
    public static void CameraTemperature$set(MemorySegment seg, float x) {
        libraw_metadata_common_t.CameraTemperature$VH.set(seg, x);
    }
    public static float CameraTemperature$get(MemorySegment seg, long index) {
        return (float)libraw_metadata_common_t.CameraTemperature$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CameraTemperature$set(MemorySegment seg, long index, float x) {
        libraw_metadata_common_t.CameraTemperature$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SensorTemperature$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SensorTemperature"));
    public static VarHandle SensorTemperature$VH() {
        return libraw_metadata_common_t.SensorTemperature$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float SensorTemperature;
     * }
     */
    public static float SensorTemperature$get(MemorySegment seg) {
        return (float)libraw_metadata_common_t.SensorTemperature$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float SensorTemperature;
     * }
     */
    public static void SensorTemperature$set(MemorySegment seg, float x) {
        libraw_metadata_common_t.SensorTemperature$VH.set(seg, x);
    }
    public static float SensorTemperature$get(MemorySegment seg, long index) {
        return (float)libraw_metadata_common_t.SensorTemperature$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SensorTemperature$set(MemorySegment seg, long index, float x) {
        libraw_metadata_common_t.SensorTemperature$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SensorTemperature2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SensorTemperature2"));
    public static VarHandle SensorTemperature2$VH() {
        return libraw_metadata_common_t.SensorTemperature2$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float SensorTemperature2;
     * }
     */
    public static float SensorTemperature2$get(MemorySegment seg) {
        return (float)libraw_metadata_common_t.SensorTemperature2$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float SensorTemperature2;
     * }
     */
    public static void SensorTemperature2$set(MemorySegment seg, float x) {
        libraw_metadata_common_t.SensorTemperature2$VH.set(seg, x);
    }
    public static float SensorTemperature2$get(MemorySegment seg, long index) {
        return (float)libraw_metadata_common_t.SensorTemperature2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SensorTemperature2$set(MemorySegment seg, long index, float x) {
        libraw_metadata_common_t.SensorTemperature2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LensTemperature$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LensTemperature"));
    public static VarHandle LensTemperature$VH() {
        return libraw_metadata_common_t.LensTemperature$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float LensTemperature;
     * }
     */
    public static float LensTemperature$get(MemorySegment seg) {
        return (float)libraw_metadata_common_t.LensTemperature$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float LensTemperature;
     * }
     */
    public static void LensTemperature$set(MemorySegment seg, float x) {
        libraw_metadata_common_t.LensTemperature$VH.set(seg, x);
    }
    public static float LensTemperature$get(MemorySegment seg, long index) {
        return (float)libraw_metadata_common_t.LensTemperature$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LensTemperature$set(MemorySegment seg, long index, float x) {
        libraw_metadata_common_t.LensTemperature$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AmbientTemperature$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AmbientTemperature"));
    public static VarHandle AmbientTemperature$VH() {
        return libraw_metadata_common_t.AmbientTemperature$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float AmbientTemperature;
     * }
     */
    public static float AmbientTemperature$get(MemorySegment seg) {
        return (float)libraw_metadata_common_t.AmbientTemperature$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float AmbientTemperature;
     * }
     */
    public static void AmbientTemperature$set(MemorySegment seg, float x) {
        libraw_metadata_common_t.AmbientTemperature$VH.set(seg, x);
    }
    public static float AmbientTemperature$get(MemorySegment seg, long index) {
        return (float)libraw_metadata_common_t.AmbientTemperature$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AmbientTemperature$set(MemorySegment seg, long index, float x) {
        libraw_metadata_common_t.AmbientTemperature$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BatteryTemperature$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BatteryTemperature"));
    public static VarHandle BatteryTemperature$VH() {
        return libraw_metadata_common_t.BatteryTemperature$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float BatteryTemperature;
     * }
     */
    public static float BatteryTemperature$get(MemorySegment seg) {
        return (float)libraw_metadata_common_t.BatteryTemperature$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float BatteryTemperature;
     * }
     */
    public static void BatteryTemperature$set(MemorySegment seg, float x) {
        libraw_metadata_common_t.BatteryTemperature$VH.set(seg, x);
    }
    public static float BatteryTemperature$get(MemorySegment seg, long index) {
        return (float)libraw_metadata_common_t.BatteryTemperature$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BatteryTemperature$set(MemorySegment seg, long index, float x) {
        libraw_metadata_common_t.BatteryTemperature$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle exifAmbientTemperature$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("exifAmbientTemperature"));
    public static VarHandle exifAmbientTemperature$VH() {
        return libraw_metadata_common_t.exifAmbientTemperature$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float exifAmbientTemperature;
     * }
     */
    public static float exifAmbientTemperature$get(MemorySegment seg) {
        return (float)libraw_metadata_common_t.exifAmbientTemperature$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float exifAmbientTemperature;
     * }
     */
    public static void exifAmbientTemperature$set(MemorySegment seg, float x) {
        libraw_metadata_common_t.exifAmbientTemperature$VH.set(seg, x);
    }
    public static float exifAmbientTemperature$get(MemorySegment seg, long index) {
        return (float)libraw_metadata_common_t.exifAmbientTemperature$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void exifAmbientTemperature$set(MemorySegment seg, long index, float x) {
        libraw_metadata_common_t.exifAmbientTemperature$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle exifHumidity$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("exifHumidity"));
    public static VarHandle exifHumidity$VH() {
        return libraw_metadata_common_t.exifHumidity$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float exifHumidity;
     * }
     */
    public static float exifHumidity$get(MemorySegment seg) {
        return (float)libraw_metadata_common_t.exifHumidity$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float exifHumidity;
     * }
     */
    public static void exifHumidity$set(MemorySegment seg, float x) {
        libraw_metadata_common_t.exifHumidity$VH.set(seg, x);
    }
    public static float exifHumidity$get(MemorySegment seg, long index) {
        return (float)libraw_metadata_common_t.exifHumidity$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void exifHumidity$set(MemorySegment seg, long index, float x) {
        libraw_metadata_common_t.exifHumidity$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle exifPressure$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("exifPressure"));
    public static VarHandle exifPressure$VH() {
        return libraw_metadata_common_t.exifPressure$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float exifPressure;
     * }
     */
    public static float exifPressure$get(MemorySegment seg) {
        return (float)libraw_metadata_common_t.exifPressure$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float exifPressure;
     * }
     */
    public static void exifPressure$set(MemorySegment seg, float x) {
        libraw_metadata_common_t.exifPressure$VH.set(seg, x);
    }
    public static float exifPressure$get(MemorySegment seg, long index) {
        return (float)libraw_metadata_common_t.exifPressure$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void exifPressure$set(MemorySegment seg, long index, float x) {
        libraw_metadata_common_t.exifPressure$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle exifWaterDepth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("exifWaterDepth"));
    public static VarHandle exifWaterDepth$VH() {
        return libraw_metadata_common_t.exifWaterDepth$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float exifWaterDepth;
     * }
     */
    public static float exifWaterDepth$get(MemorySegment seg) {
        return (float)libraw_metadata_common_t.exifWaterDepth$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float exifWaterDepth;
     * }
     */
    public static void exifWaterDepth$set(MemorySegment seg, float x) {
        libraw_metadata_common_t.exifWaterDepth$VH.set(seg, x);
    }
    public static float exifWaterDepth$get(MemorySegment seg, long index) {
        return (float)libraw_metadata_common_t.exifWaterDepth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void exifWaterDepth$set(MemorySegment seg, long index, float x) {
        libraw_metadata_common_t.exifWaterDepth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle exifAcceleration$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("exifAcceleration"));
    public static VarHandle exifAcceleration$VH() {
        return libraw_metadata_common_t.exifAcceleration$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float exifAcceleration;
     * }
     */
    public static float exifAcceleration$get(MemorySegment seg) {
        return (float)libraw_metadata_common_t.exifAcceleration$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float exifAcceleration;
     * }
     */
    public static void exifAcceleration$set(MemorySegment seg, float x) {
        libraw_metadata_common_t.exifAcceleration$VH.set(seg, x);
    }
    public static float exifAcceleration$get(MemorySegment seg, long index) {
        return (float)libraw_metadata_common_t.exifAcceleration$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void exifAcceleration$set(MemorySegment seg, long index, float x) {
        libraw_metadata_common_t.exifAcceleration$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle exifCameraElevationAngle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("exifCameraElevationAngle"));
    public static VarHandle exifCameraElevationAngle$VH() {
        return libraw_metadata_common_t.exifCameraElevationAngle$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float exifCameraElevationAngle;
     * }
     */
    public static float exifCameraElevationAngle$get(MemorySegment seg) {
        return (float)libraw_metadata_common_t.exifCameraElevationAngle$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float exifCameraElevationAngle;
     * }
     */
    public static void exifCameraElevationAngle$set(MemorySegment seg, float x) {
        libraw_metadata_common_t.exifCameraElevationAngle$VH.set(seg, x);
    }
    public static float exifCameraElevationAngle$get(MemorySegment seg, long index) {
        return (float)libraw_metadata_common_t.exifCameraElevationAngle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void exifCameraElevationAngle$set(MemorySegment seg, long index, float x) {
        libraw_metadata_common_t.exifCameraElevationAngle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle real_ISO$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("real_ISO"));
    public static VarHandle real_ISO$VH() {
        return libraw_metadata_common_t.real_ISO$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float real_ISO;
     * }
     */
    public static float real_ISO$get(MemorySegment seg) {
        return (float)libraw_metadata_common_t.real_ISO$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float real_ISO;
     * }
     */
    public static void real_ISO$set(MemorySegment seg, float x) {
        libraw_metadata_common_t.real_ISO$VH.set(seg, x);
    }
    public static float real_ISO$get(MemorySegment seg, long index) {
        return (float)libraw_metadata_common_t.real_ISO$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void real_ISO$set(MemorySegment seg, long index, float x) {
        libraw_metadata_common_t.real_ISO$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle exifExposureIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("exifExposureIndex"));
    public static VarHandle exifExposureIndex$VH() {
        return libraw_metadata_common_t.exifExposureIndex$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float exifExposureIndex;
     * }
     */
    public static float exifExposureIndex$get(MemorySegment seg) {
        return (float)libraw_metadata_common_t.exifExposureIndex$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float exifExposureIndex;
     * }
     */
    public static void exifExposureIndex$set(MemorySegment seg, float x) {
        libraw_metadata_common_t.exifExposureIndex$VH.set(seg, x);
    }
    public static float exifExposureIndex$get(MemorySegment seg, long index) {
        return (float)libraw_metadata_common_t.exifExposureIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void exifExposureIndex$set(MemorySegment seg, long index, float x) {
        libraw_metadata_common_t.exifExposureIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ColorSpace$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ColorSpace"));
    public static VarHandle ColorSpace$VH() {
        return libraw_metadata_common_t.ColorSpace$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ColorSpace;
     * }
     */
    public static short ColorSpace$get(MemorySegment seg) {
        return (short)libraw_metadata_common_t.ColorSpace$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ColorSpace;
     * }
     */
    public static void ColorSpace$set(MemorySegment seg, short x) {
        libraw_metadata_common_t.ColorSpace$VH.set(seg, x);
    }
    public static short ColorSpace$get(MemorySegment seg, long index) {
        return (short)libraw_metadata_common_t.ColorSpace$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ColorSpace$set(MemorySegment seg, long index, short x) {
        libraw_metadata_common_t.ColorSpace$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment firmware$slice(MemorySegment seg) {
        return seg.asSlice(66, 128);
    }
    static final VarHandle ExposureCalibrationShift$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ExposureCalibrationShift"));
    public static VarHandle ExposureCalibrationShift$VH() {
        return libraw_metadata_common_t.ExposureCalibrationShift$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float ExposureCalibrationShift;
     * }
     */
    public static float ExposureCalibrationShift$get(MemorySegment seg) {
        return (float)libraw_metadata_common_t.ExposureCalibrationShift$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float ExposureCalibrationShift;
     * }
     */
    public static void ExposureCalibrationShift$set(MemorySegment seg, float x) {
        libraw_metadata_common_t.ExposureCalibrationShift$VH.set(seg, x);
    }
    public static float ExposureCalibrationShift$get(MemorySegment seg, long index) {
        return (float)libraw_metadata_common_t.ExposureCalibrationShift$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExposureCalibrationShift$set(MemorySegment seg, long index, float x) {
        libraw_metadata_common_t.ExposureCalibrationShift$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment afdata$slice(MemorySegment seg) {
        return seg.asSlice(200, 96);
    }
    static final VarHandle afcount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("afcount"));
    public static VarHandle afcount$VH() {
        return libraw_metadata_common_t.afcount$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int afcount;
     * }
     */
    public static int afcount$get(MemorySegment seg) {
        return (int)libraw_metadata_common_t.afcount$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int afcount;
     * }
     */
    public static void afcount$set(MemorySegment seg, int x) {
        libraw_metadata_common_t.afcount$VH.set(seg, x);
    }
    public static int afcount$get(MemorySegment seg, long index) {
        return (int)libraw_metadata_common_t.afcount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void afcount$set(MemorySegment seg, long index, int x) {
        libraw_metadata_common_t.afcount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


