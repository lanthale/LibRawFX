// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_raw_inset_crop_t {
 *     unsigned short cleft;
 *     unsigned short ctop;
 *     unsigned short cwidth;
 *     unsigned short cheight;
 * };
 * }
 */
public class libraw_raw_inset_crop_t {

    public static MemoryLayout $LAYOUT() {
        return constants$13.const$3;
    }
    public static VarHandle cleft$VH() {
        return constants$13.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short cleft;
     * }
     */
    public static short cleft$get(MemorySegment seg) {
        return (short)constants$13.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short cleft;
     * }
     */
    public static void cleft$set(MemorySegment seg, short x) {
        constants$13.const$4.set(seg, x);
    }
    public static short cleft$get(MemorySegment seg, long index) {
        return (short)constants$13.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void cleft$set(MemorySegment seg, long index, short x) {
        constants$13.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ctop$VH() {
        return constants$13.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ctop;
     * }
     */
    public static short ctop$get(MemorySegment seg) {
        return (short)constants$13.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ctop;
     * }
     */
    public static void ctop$set(MemorySegment seg, short x) {
        constants$13.const$5.set(seg, x);
    }
    public static short ctop$get(MemorySegment seg, long index) {
        return (short)constants$13.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ctop$set(MemorySegment seg, long index, short x) {
        constants$13.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cwidth$VH() {
        return constants$14.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short cwidth;
     * }
     */
    public static short cwidth$get(MemorySegment seg) {
        return (short)constants$14.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short cwidth;
     * }
     */
    public static void cwidth$set(MemorySegment seg, short x) {
        constants$14.const$0.set(seg, x);
    }
    public static short cwidth$get(MemorySegment seg, long index) {
        return (short)constants$14.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void cwidth$set(MemorySegment seg, long index, short x) {
        constants$14.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cheight$VH() {
        return constants$14.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short cheight;
     * }
     */
    public static short cheight$get(MemorySegment seg) {
        return (short)constants$14.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short cheight;
     * }
     */
    public static void cheight$set(MemorySegment seg, short x) {
        constants$14.const$1.set(seg, x);
    }
    public static short cheight$get(MemorySegment seg, long index) {
        return (short)constants$14.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void cheight$set(MemorySegment seg, long index, short x) {
        constants$14.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


