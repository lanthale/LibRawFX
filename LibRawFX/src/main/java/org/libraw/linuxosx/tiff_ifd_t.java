// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tiff_ifd_t {
 *     int t_width;
 *     int t_height;
 *     int bps;
 *     int comp;
 *     int phint;
 *     int offset;
 *     int t_flip;
 *     int samples;
 *     int bytes;
 *     int extrasamples;
 *     int t_tile_width;
 *     int t_tile_length;
 *     int sample_format;
 *     int predictor;
 *     int rows_per_strip;
 *     int* strip_offsets;
 *     int strip_offsets_count;
 *     int* strip_byte_counts;
 *     int strip_byte_counts_count;
 *     unsigned int t_filters;
 *     int t_vwidth;
 *     int t_vheight;
 *     int t_lm;
 *     int t_tm;
 *     int t_fuji_width;
 *     float t_shutter;
 *     long long opcode2_offset;
 *     long long lineartable_offset;
 *     int lineartable_len;
 *     struct libraw_dng_color_t dng_color[2];
 *     struct libraw_dng_levels_t dng_levels;
 *     int newsubfiletype;
 * };
 * }
 */
public class tiff_ifd_t {

    public static MemoryLayout $LAYOUT() {
        return constants$106.const$1;
    }
    public static VarHandle t_width$VH() {
        return constants$106.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int t_width;
     * }
     */
    public static int t_width$get(MemorySegment seg) {
        return (int)constants$106.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int t_width;
     * }
     */
    public static void t_width$set(MemorySegment seg, int x) {
        constants$106.const$2.set(seg, x);
    }
    public static int t_width$get(MemorySegment seg, long index) {
        return (int)constants$106.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void t_width$set(MemorySegment seg, long index, int x) {
        constants$106.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle t_height$VH() {
        return constants$106.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int t_height;
     * }
     */
    public static int t_height$get(MemorySegment seg) {
        return (int)constants$106.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int t_height;
     * }
     */
    public static void t_height$set(MemorySegment seg, int x) {
        constants$106.const$3.set(seg, x);
    }
    public static int t_height$get(MemorySegment seg, long index) {
        return (int)constants$106.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void t_height$set(MemorySegment seg, long index, int x) {
        constants$106.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bps$VH() {
        return constants$106.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int bps;
     * }
     */
    public static int bps$get(MemorySegment seg) {
        return (int)constants$106.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int bps;
     * }
     */
    public static void bps$set(MemorySegment seg, int x) {
        constants$106.const$4.set(seg, x);
    }
    public static int bps$get(MemorySegment seg, long index) {
        return (int)constants$106.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void bps$set(MemorySegment seg, long index, int x) {
        constants$106.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle comp$VH() {
        return constants$106.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int comp;
     * }
     */
    public static int comp$get(MemorySegment seg) {
        return (int)constants$106.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int comp;
     * }
     */
    public static void comp$set(MemorySegment seg, int x) {
        constants$106.const$5.set(seg, x);
    }
    public static int comp$get(MemorySegment seg, long index) {
        return (int)constants$106.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void comp$set(MemorySegment seg, long index, int x) {
        constants$106.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle phint$VH() {
        return constants$107.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int phint;
     * }
     */
    public static int phint$get(MemorySegment seg) {
        return (int)constants$107.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int phint;
     * }
     */
    public static void phint$set(MemorySegment seg, int x) {
        constants$107.const$0.set(seg, x);
    }
    public static int phint$get(MemorySegment seg, long index) {
        return (int)constants$107.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void phint$set(MemorySegment seg, long index, int x) {
        constants$107.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle offset$VH() {
        return constants$107.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int offset;
     * }
     */
    public static int offset$get(MemorySegment seg) {
        return (int)constants$107.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int offset;
     * }
     */
    public static void offset$set(MemorySegment seg, int x) {
        constants$107.const$1.set(seg, x);
    }
    public static int offset$get(MemorySegment seg, long index) {
        return (int)constants$107.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void offset$set(MemorySegment seg, long index, int x) {
        constants$107.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle t_flip$VH() {
        return constants$107.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int t_flip;
     * }
     */
    public static int t_flip$get(MemorySegment seg) {
        return (int)constants$107.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int t_flip;
     * }
     */
    public static void t_flip$set(MemorySegment seg, int x) {
        constants$107.const$2.set(seg, x);
    }
    public static int t_flip$get(MemorySegment seg, long index) {
        return (int)constants$107.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void t_flip$set(MemorySegment seg, long index, int x) {
        constants$107.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle samples$VH() {
        return constants$107.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int samples;
     * }
     */
    public static int samples$get(MemorySegment seg) {
        return (int)constants$107.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int samples;
     * }
     */
    public static void samples$set(MemorySegment seg, int x) {
        constants$107.const$3.set(seg, x);
    }
    public static int samples$get(MemorySegment seg, long index) {
        return (int)constants$107.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void samples$set(MemorySegment seg, long index, int x) {
        constants$107.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bytes$VH() {
        return constants$107.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int bytes;
     * }
     */
    public static int bytes$get(MemorySegment seg) {
        return (int)constants$107.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int bytes;
     * }
     */
    public static void bytes$set(MemorySegment seg, int x) {
        constants$107.const$4.set(seg, x);
    }
    public static int bytes$get(MemorySegment seg, long index) {
        return (int)constants$107.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void bytes$set(MemorySegment seg, long index, int x) {
        constants$107.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extrasamples$VH() {
        return constants$107.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int extrasamples;
     * }
     */
    public static int extrasamples$get(MemorySegment seg) {
        return (int)constants$107.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int extrasamples;
     * }
     */
    public static void extrasamples$set(MemorySegment seg, int x) {
        constants$107.const$5.set(seg, x);
    }
    public static int extrasamples$get(MemorySegment seg, long index) {
        return (int)constants$107.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void extrasamples$set(MemorySegment seg, long index, int x) {
        constants$107.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle t_tile_width$VH() {
        return constants$108.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int t_tile_width;
     * }
     */
    public static int t_tile_width$get(MemorySegment seg) {
        return (int)constants$108.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int t_tile_width;
     * }
     */
    public static void t_tile_width$set(MemorySegment seg, int x) {
        constants$108.const$0.set(seg, x);
    }
    public static int t_tile_width$get(MemorySegment seg, long index) {
        return (int)constants$108.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void t_tile_width$set(MemorySegment seg, long index, int x) {
        constants$108.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle t_tile_length$VH() {
        return constants$108.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int t_tile_length;
     * }
     */
    public static int t_tile_length$get(MemorySegment seg) {
        return (int)constants$108.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int t_tile_length;
     * }
     */
    public static void t_tile_length$set(MemorySegment seg, int x) {
        constants$108.const$1.set(seg, x);
    }
    public static int t_tile_length$get(MemorySegment seg, long index) {
        return (int)constants$108.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void t_tile_length$set(MemorySegment seg, long index, int x) {
        constants$108.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sample_format$VH() {
        return constants$108.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int sample_format;
     * }
     */
    public static int sample_format$get(MemorySegment seg) {
        return (int)constants$108.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int sample_format;
     * }
     */
    public static void sample_format$set(MemorySegment seg, int x) {
        constants$108.const$2.set(seg, x);
    }
    public static int sample_format$get(MemorySegment seg, long index) {
        return (int)constants$108.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void sample_format$set(MemorySegment seg, long index, int x) {
        constants$108.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle predictor$VH() {
        return constants$108.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int predictor;
     * }
     */
    public static int predictor$get(MemorySegment seg) {
        return (int)constants$108.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int predictor;
     * }
     */
    public static void predictor$set(MemorySegment seg, int x) {
        constants$108.const$3.set(seg, x);
    }
    public static int predictor$get(MemorySegment seg, long index) {
        return (int)constants$108.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void predictor$set(MemorySegment seg, long index, int x) {
        constants$108.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rows_per_strip$VH() {
        return constants$108.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int rows_per_strip;
     * }
     */
    public static int rows_per_strip$get(MemorySegment seg) {
        return (int)constants$108.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int rows_per_strip;
     * }
     */
    public static void rows_per_strip$set(MemorySegment seg, int x) {
        constants$108.const$4.set(seg, x);
    }
    public static int rows_per_strip$get(MemorySegment seg, long index) {
        return (int)constants$108.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void rows_per_strip$set(MemorySegment seg, long index, int x) {
        constants$108.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle strip_offsets$VH() {
        return constants$108.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int* strip_offsets;
     * }
     */
    public static MemorySegment strip_offsets$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$108.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int* strip_offsets;
     * }
     */
    public static void strip_offsets$set(MemorySegment seg, MemorySegment x) {
        constants$108.const$5.set(seg, x);
    }
    public static MemorySegment strip_offsets$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$108.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void strip_offsets$set(MemorySegment seg, long index, MemorySegment x) {
        constants$108.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle strip_offsets_count$VH() {
        return constants$109.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int strip_offsets_count;
     * }
     */
    public static int strip_offsets_count$get(MemorySegment seg) {
        return (int)constants$109.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int strip_offsets_count;
     * }
     */
    public static void strip_offsets_count$set(MemorySegment seg, int x) {
        constants$109.const$0.set(seg, x);
    }
    public static int strip_offsets_count$get(MemorySegment seg, long index) {
        return (int)constants$109.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void strip_offsets_count$set(MemorySegment seg, long index, int x) {
        constants$109.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle strip_byte_counts$VH() {
        return constants$109.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int* strip_byte_counts;
     * }
     */
    public static MemorySegment strip_byte_counts$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$109.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int* strip_byte_counts;
     * }
     */
    public static void strip_byte_counts$set(MemorySegment seg, MemorySegment x) {
        constants$109.const$1.set(seg, x);
    }
    public static MemorySegment strip_byte_counts$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$109.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void strip_byte_counts$set(MemorySegment seg, long index, MemorySegment x) {
        constants$109.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle strip_byte_counts_count$VH() {
        return constants$109.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int strip_byte_counts_count;
     * }
     */
    public static int strip_byte_counts_count$get(MemorySegment seg) {
        return (int)constants$109.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int strip_byte_counts_count;
     * }
     */
    public static void strip_byte_counts_count$set(MemorySegment seg, int x) {
        constants$109.const$2.set(seg, x);
    }
    public static int strip_byte_counts_count$get(MemorySegment seg, long index) {
        return (int)constants$109.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void strip_byte_counts_count$set(MemorySegment seg, long index, int x) {
        constants$109.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle t_filters$VH() {
        return constants$109.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int t_filters;
     * }
     */
    public static int t_filters$get(MemorySegment seg) {
        return (int)constants$109.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int t_filters;
     * }
     */
    public static void t_filters$set(MemorySegment seg, int x) {
        constants$109.const$3.set(seg, x);
    }
    public static int t_filters$get(MemorySegment seg, long index) {
        return (int)constants$109.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void t_filters$set(MemorySegment seg, long index, int x) {
        constants$109.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle t_vwidth$VH() {
        return constants$109.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int t_vwidth;
     * }
     */
    public static int t_vwidth$get(MemorySegment seg) {
        return (int)constants$109.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int t_vwidth;
     * }
     */
    public static void t_vwidth$set(MemorySegment seg, int x) {
        constants$109.const$4.set(seg, x);
    }
    public static int t_vwidth$get(MemorySegment seg, long index) {
        return (int)constants$109.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void t_vwidth$set(MemorySegment seg, long index, int x) {
        constants$109.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle t_vheight$VH() {
        return constants$109.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int t_vheight;
     * }
     */
    public static int t_vheight$get(MemorySegment seg) {
        return (int)constants$109.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int t_vheight;
     * }
     */
    public static void t_vheight$set(MemorySegment seg, int x) {
        constants$109.const$5.set(seg, x);
    }
    public static int t_vheight$get(MemorySegment seg, long index) {
        return (int)constants$109.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void t_vheight$set(MemorySegment seg, long index, int x) {
        constants$109.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle t_lm$VH() {
        return constants$110.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int t_lm;
     * }
     */
    public static int t_lm$get(MemorySegment seg) {
        return (int)constants$110.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int t_lm;
     * }
     */
    public static void t_lm$set(MemorySegment seg, int x) {
        constants$110.const$0.set(seg, x);
    }
    public static int t_lm$get(MemorySegment seg, long index) {
        return (int)constants$110.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void t_lm$set(MemorySegment seg, long index, int x) {
        constants$110.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle t_tm$VH() {
        return constants$110.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int t_tm;
     * }
     */
    public static int t_tm$get(MemorySegment seg) {
        return (int)constants$110.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int t_tm;
     * }
     */
    public static void t_tm$set(MemorySegment seg, int x) {
        constants$110.const$1.set(seg, x);
    }
    public static int t_tm$get(MemorySegment seg, long index) {
        return (int)constants$110.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void t_tm$set(MemorySegment seg, long index, int x) {
        constants$110.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle t_fuji_width$VH() {
        return constants$110.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int t_fuji_width;
     * }
     */
    public static int t_fuji_width$get(MemorySegment seg) {
        return (int)constants$110.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int t_fuji_width;
     * }
     */
    public static void t_fuji_width$set(MemorySegment seg, int x) {
        constants$110.const$2.set(seg, x);
    }
    public static int t_fuji_width$get(MemorySegment seg, long index) {
        return (int)constants$110.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void t_fuji_width$set(MemorySegment seg, long index, int x) {
        constants$110.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle t_shutter$VH() {
        return constants$110.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float t_shutter;
     * }
     */
    public static float t_shutter$get(MemorySegment seg) {
        return (float)constants$110.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float t_shutter;
     * }
     */
    public static void t_shutter$set(MemorySegment seg, float x) {
        constants$110.const$3.set(seg, x);
    }
    public static float t_shutter$get(MemorySegment seg, long index) {
        return (float)constants$110.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void t_shutter$set(MemorySegment seg, long index, float x) {
        constants$110.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle opcode2_offset$VH() {
        return constants$110.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long opcode2_offset;
     * }
     */
    public static long opcode2_offset$get(MemorySegment seg) {
        return (long)constants$110.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long opcode2_offset;
     * }
     */
    public static void opcode2_offset$set(MemorySegment seg, long x) {
        constants$110.const$4.set(seg, x);
    }
    public static long opcode2_offset$get(MemorySegment seg, long index) {
        return (long)constants$110.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void opcode2_offset$set(MemorySegment seg, long index, long x) {
        constants$110.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lineartable_offset$VH() {
        return constants$110.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long lineartable_offset;
     * }
     */
    public static long lineartable_offset$get(MemorySegment seg) {
        return (long)constants$110.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long lineartable_offset;
     * }
     */
    public static void lineartable_offset$set(MemorySegment seg, long x) {
        constants$110.const$5.set(seg, x);
    }
    public static long lineartable_offset$get(MemorySegment seg, long index) {
        return (long)constants$110.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void lineartable_offset$set(MemorySegment seg, long index, long x) {
        constants$110.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lineartable_len$VH() {
        return constants$111.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int lineartable_len;
     * }
     */
    public static int lineartable_len$get(MemorySegment seg) {
        return (int)constants$111.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int lineartable_len;
     * }
     */
    public static void lineartable_len$set(MemorySegment seg, int x) {
        constants$111.const$0.set(seg, x);
    }
    public static int lineartable_len$get(MemorySegment seg, long index) {
        return (int)constants$111.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void lineartable_len$set(MemorySegment seg, long index, int x) {
        constants$111.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment dng_color$slice(MemorySegment seg) {
        return seg.asSlice(140, 336);
    }
    public static MemorySegment dng_levels$slice(MemorySegment seg) {
        return seg.asSlice(476, 32928);
    }
    public static VarHandle newsubfiletype$VH() {
        return constants$111.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int newsubfiletype;
     * }
     */
    public static int newsubfiletype$get(MemorySegment seg) {
        return (int)constants$111.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int newsubfiletype;
     * }
     */
    public static void newsubfiletype$set(MemorySegment seg, int x) {
        constants$111.const$1.set(seg, x);
    }
    public static int newsubfiletype$get(MemorySegment seg, long index) {
        return (int)constants$111.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void newsubfiletype$set(MemorySegment seg, long index, int x) {
        constants$111.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


