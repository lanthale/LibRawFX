// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class tiff_ifd_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("t_width"),
        Constants$root.C_INT$LAYOUT.withName("t_height"),
        Constants$root.C_INT$LAYOUT.withName("bps"),
        Constants$root.C_INT$LAYOUT.withName("comp"),
        Constants$root.C_INT$LAYOUT.withName("phint"),
        Constants$root.C_INT$LAYOUT.withName("offset"),
        Constants$root.C_INT$LAYOUT.withName("t_flip"),
        Constants$root.C_INT$LAYOUT.withName("samples"),
        Constants$root.C_INT$LAYOUT.withName("bytes"),
        Constants$root.C_INT$LAYOUT.withName("extrasamples"),
        Constants$root.C_INT$LAYOUT.withName("t_tile_width"),
        Constants$root.C_INT$LAYOUT.withName("t_tile_length"),
        Constants$root.C_INT$LAYOUT.withName("sample_format"),
        Constants$root.C_INT$LAYOUT.withName("predictor"),
        Constants$root.C_INT$LAYOUT.withName("rows_per_strip"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("strip_offsets"),
        Constants$root.C_INT$LAYOUT.withName("strip_offsets_count"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("strip_byte_counts"),
        Constants$root.C_INT$LAYOUT.withName("strip_byte_counts_count"),
        Constants$root.C_INT$LAYOUT.withName("t_filters"),
        Constants$root.C_INT$LAYOUT.withName("t_vwidth"),
        Constants$root.C_INT$LAYOUT.withName("t_vheight"),
        Constants$root.C_INT$LAYOUT.withName("t_lm"),
        Constants$root.C_INT$LAYOUT.withName("t_tm"),
        Constants$root.C_INT$LAYOUT.withName("t_fuji_width"),
        Constants$root.C_FLOAT$LAYOUT.withName("t_shutter"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("opcode2_offset"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("lineartable_offset"),
        Constants$root.C_INT$LAYOUT.withName("lineartable_len"),
        MemoryLayout.sequenceLayout(2, MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("parsedfields"),
            Constants$root.C_SHORT$LAYOUT.withName("illuminant"),
            MemoryLayout.paddingLayout(16),
            MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT)).withName("calibration"),
            MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(3, Constants$root.C_FLOAT$LAYOUT)).withName("colormatrix"),
            MemoryLayout.sequenceLayout(3, MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT)).withName("forwardmatrix")
        )).withName("dng_color"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("parsedfields"),
            MemoryLayout.sequenceLayout(4104, Constants$root.C_INT$LAYOUT).withName("dng_cblack"),
            Constants$root.C_INT$LAYOUT.withName("dng_black"),
            MemoryLayout.sequenceLayout(4104, Constants$root.C_FLOAT$LAYOUT).withName("dng_fcblack"),
            Constants$root.C_FLOAT$LAYOUT.withName("dng_fblack"),
            MemoryLayout.sequenceLayout(4, Constants$root.C_INT$LAYOUT).withName("dng_whitelevel"),
            MemoryLayout.sequenceLayout(4, Constants$root.C_SHORT$LAYOUT).withName("default_crop"),
            MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("user_crop"),
            Constants$root.C_INT$LAYOUT.withName("preview_colorspace"),
            MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("analogbalance"),
            MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("asshotneutral"),
            Constants$root.C_FLOAT$LAYOUT.withName("baseline_exposure"),
            Constants$root.C_FLOAT$LAYOUT.withName("LinearResponseLimit")
        ).withName("dng_levels"),
        Constants$root.C_INT$LAYOUT.withName("newsubfiletype")
    ).withName("tiff_ifd_t");
    public static MemoryLayout $LAYOUT() {
        return tiff_ifd_t.$struct$LAYOUT;
    }
    static final VarHandle t_width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("t_width"));
    public static VarHandle t_width$VH() {
        return tiff_ifd_t.t_width$VH;
    }
    public static int t_width$get(MemorySegment seg) {
        return (int)tiff_ifd_t.t_width$VH.get(seg);
    }
    public static void t_width$set( MemorySegment seg, int x) {
        tiff_ifd_t.t_width$VH.set(seg, x);
    }
    public static int t_width$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.t_width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void t_width$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.t_width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle t_height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("t_height"));
    public static VarHandle t_height$VH() {
        return tiff_ifd_t.t_height$VH;
    }
    public static int t_height$get(MemorySegment seg) {
        return (int)tiff_ifd_t.t_height$VH.get(seg);
    }
    public static void t_height$set( MemorySegment seg, int x) {
        tiff_ifd_t.t_height$VH.set(seg, x);
    }
    public static int t_height$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.t_height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void t_height$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.t_height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bps$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bps"));
    public static VarHandle bps$VH() {
        return tiff_ifd_t.bps$VH;
    }
    public static int bps$get(MemorySegment seg) {
        return (int)tiff_ifd_t.bps$VH.get(seg);
    }
    public static void bps$set( MemorySegment seg, int x) {
        tiff_ifd_t.bps$VH.set(seg, x);
    }
    public static int bps$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.bps$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bps$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.bps$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle comp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("comp"));
    public static VarHandle comp$VH() {
        return tiff_ifd_t.comp$VH;
    }
    public static int comp$get(MemorySegment seg) {
        return (int)tiff_ifd_t.comp$VH.get(seg);
    }
    public static void comp$set( MemorySegment seg, int x) {
        tiff_ifd_t.comp$VH.set(seg, x);
    }
    public static int comp$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.comp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void comp$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.comp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle phint$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("phint"));
    public static VarHandle phint$VH() {
        return tiff_ifd_t.phint$VH;
    }
    public static int phint$get(MemorySegment seg) {
        return (int)tiff_ifd_t.phint$VH.get(seg);
    }
    public static void phint$set( MemorySegment seg, int x) {
        tiff_ifd_t.phint$VH.set(seg, x);
    }
    public static int phint$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.phint$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void phint$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.phint$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("offset"));
    public static VarHandle offset$VH() {
        return tiff_ifd_t.offset$VH;
    }
    public static int offset$get(MemorySegment seg) {
        return (int)tiff_ifd_t.offset$VH.get(seg);
    }
    public static void offset$set( MemorySegment seg, int x) {
        tiff_ifd_t.offset$VH.set(seg, x);
    }
    public static int offset$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void offset$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle t_flip$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("t_flip"));
    public static VarHandle t_flip$VH() {
        return tiff_ifd_t.t_flip$VH;
    }
    public static int t_flip$get(MemorySegment seg) {
        return (int)tiff_ifd_t.t_flip$VH.get(seg);
    }
    public static void t_flip$set( MemorySegment seg, int x) {
        tiff_ifd_t.t_flip$VH.set(seg, x);
    }
    public static int t_flip$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.t_flip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void t_flip$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.t_flip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle samples$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("samples"));
    public static VarHandle samples$VH() {
        return tiff_ifd_t.samples$VH;
    }
    public static int samples$get(MemorySegment seg) {
        return (int)tiff_ifd_t.samples$VH.get(seg);
    }
    public static void samples$set( MemorySegment seg, int x) {
        tiff_ifd_t.samples$VH.set(seg, x);
    }
    public static int samples$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.samples$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void samples$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.samples$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bytes"));
    public static VarHandle bytes$VH() {
        return tiff_ifd_t.bytes$VH;
    }
    public static int bytes$get(MemorySegment seg) {
        return (int)tiff_ifd_t.bytes$VH.get(seg);
    }
    public static void bytes$set( MemorySegment seg, int x) {
        tiff_ifd_t.bytes$VH.set(seg, x);
    }
    public static int bytes$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.bytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bytes$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.bytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle extrasamples$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("extrasamples"));
    public static VarHandle extrasamples$VH() {
        return tiff_ifd_t.extrasamples$VH;
    }
    public static int extrasamples$get(MemorySegment seg) {
        return (int)tiff_ifd_t.extrasamples$VH.get(seg);
    }
    public static void extrasamples$set( MemorySegment seg, int x) {
        tiff_ifd_t.extrasamples$VH.set(seg, x);
    }
    public static int extrasamples$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.extrasamples$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void extrasamples$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.extrasamples$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle t_tile_width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("t_tile_width"));
    public static VarHandle t_tile_width$VH() {
        return tiff_ifd_t.t_tile_width$VH;
    }
    public static int t_tile_width$get(MemorySegment seg) {
        return (int)tiff_ifd_t.t_tile_width$VH.get(seg);
    }
    public static void t_tile_width$set( MemorySegment seg, int x) {
        tiff_ifd_t.t_tile_width$VH.set(seg, x);
    }
    public static int t_tile_width$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.t_tile_width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void t_tile_width$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.t_tile_width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle t_tile_length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("t_tile_length"));
    public static VarHandle t_tile_length$VH() {
        return tiff_ifd_t.t_tile_length$VH;
    }
    public static int t_tile_length$get(MemorySegment seg) {
        return (int)tiff_ifd_t.t_tile_length$VH.get(seg);
    }
    public static void t_tile_length$set( MemorySegment seg, int x) {
        tiff_ifd_t.t_tile_length$VH.set(seg, x);
    }
    public static int t_tile_length$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.t_tile_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void t_tile_length$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.t_tile_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sample_format$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sample_format"));
    public static VarHandle sample_format$VH() {
        return tiff_ifd_t.sample_format$VH;
    }
    public static int sample_format$get(MemorySegment seg) {
        return (int)tiff_ifd_t.sample_format$VH.get(seg);
    }
    public static void sample_format$set( MemorySegment seg, int x) {
        tiff_ifd_t.sample_format$VH.set(seg, x);
    }
    public static int sample_format$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.sample_format$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sample_format$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.sample_format$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle predictor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("predictor"));
    public static VarHandle predictor$VH() {
        return tiff_ifd_t.predictor$VH;
    }
    public static int predictor$get(MemorySegment seg) {
        return (int)tiff_ifd_t.predictor$VH.get(seg);
    }
    public static void predictor$set( MemorySegment seg, int x) {
        tiff_ifd_t.predictor$VH.set(seg, x);
    }
    public static int predictor$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.predictor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void predictor$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.predictor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rows_per_strip$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rows_per_strip"));
    public static VarHandle rows_per_strip$VH() {
        return tiff_ifd_t.rows_per_strip$VH;
    }
    public static int rows_per_strip$get(MemorySegment seg) {
        return (int)tiff_ifd_t.rows_per_strip$VH.get(seg);
    }
    public static void rows_per_strip$set( MemorySegment seg, int x) {
        tiff_ifd_t.rows_per_strip$VH.set(seg, x);
    }
    public static int rows_per_strip$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.rows_per_strip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rows_per_strip$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.rows_per_strip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle strip_offsets$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("strip_offsets"));
    public static VarHandle strip_offsets$VH() {
        return tiff_ifd_t.strip_offsets$VH;
    }
    public static MemoryAddress strip_offsets$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tiff_ifd_t.strip_offsets$VH.get(seg);
    }
    public static void strip_offsets$set( MemorySegment seg, MemoryAddress x) {
        tiff_ifd_t.strip_offsets$VH.set(seg, x);
    }
    public static MemoryAddress strip_offsets$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tiff_ifd_t.strip_offsets$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void strip_offsets$set(MemorySegment seg, long index, MemoryAddress x) {
        tiff_ifd_t.strip_offsets$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle strip_offsets_count$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("strip_offsets_count"));
    public static VarHandle strip_offsets_count$VH() {
        return tiff_ifd_t.strip_offsets_count$VH;
    }
    public static int strip_offsets_count$get(MemorySegment seg) {
        return (int)tiff_ifd_t.strip_offsets_count$VH.get(seg);
    }
    public static void strip_offsets_count$set( MemorySegment seg, int x) {
        tiff_ifd_t.strip_offsets_count$VH.set(seg, x);
    }
    public static int strip_offsets_count$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.strip_offsets_count$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void strip_offsets_count$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.strip_offsets_count$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle strip_byte_counts$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("strip_byte_counts"));
    public static VarHandle strip_byte_counts$VH() {
        return tiff_ifd_t.strip_byte_counts$VH;
    }
    public static MemoryAddress strip_byte_counts$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tiff_ifd_t.strip_byte_counts$VH.get(seg);
    }
    public static void strip_byte_counts$set( MemorySegment seg, MemoryAddress x) {
        tiff_ifd_t.strip_byte_counts$VH.set(seg, x);
    }
    public static MemoryAddress strip_byte_counts$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tiff_ifd_t.strip_byte_counts$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void strip_byte_counts$set(MemorySegment seg, long index, MemoryAddress x) {
        tiff_ifd_t.strip_byte_counts$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle strip_byte_counts_count$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("strip_byte_counts_count"));
    public static VarHandle strip_byte_counts_count$VH() {
        return tiff_ifd_t.strip_byte_counts_count$VH;
    }
    public static int strip_byte_counts_count$get(MemorySegment seg) {
        return (int)tiff_ifd_t.strip_byte_counts_count$VH.get(seg);
    }
    public static void strip_byte_counts_count$set( MemorySegment seg, int x) {
        tiff_ifd_t.strip_byte_counts_count$VH.set(seg, x);
    }
    public static int strip_byte_counts_count$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.strip_byte_counts_count$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void strip_byte_counts_count$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.strip_byte_counts_count$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle t_filters$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("t_filters"));
    public static VarHandle t_filters$VH() {
        return tiff_ifd_t.t_filters$VH;
    }
    public static int t_filters$get(MemorySegment seg) {
        return (int)tiff_ifd_t.t_filters$VH.get(seg);
    }
    public static void t_filters$set( MemorySegment seg, int x) {
        tiff_ifd_t.t_filters$VH.set(seg, x);
    }
    public static int t_filters$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.t_filters$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void t_filters$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.t_filters$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle t_vwidth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("t_vwidth"));
    public static VarHandle t_vwidth$VH() {
        return tiff_ifd_t.t_vwidth$VH;
    }
    public static int t_vwidth$get(MemorySegment seg) {
        return (int)tiff_ifd_t.t_vwidth$VH.get(seg);
    }
    public static void t_vwidth$set( MemorySegment seg, int x) {
        tiff_ifd_t.t_vwidth$VH.set(seg, x);
    }
    public static int t_vwidth$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.t_vwidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void t_vwidth$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.t_vwidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle t_vheight$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("t_vheight"));
    public static VarHandle t_vheight$VH() {
        return tiff_ifd_t.t_vheight$VH;
    }
    public static int t_vheight$get(MemorySegment seg) {
        return (int)tiff_ifd_t.t_vheight$VH.get(seg);
    }
    public static void t_vheight$set( MemorySegment seg, int x) {
        tiff_ifd_t.t_vheight$VH.set(seg, x);
    }
    public static int t_vheight$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.t_vheight$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void t_vheight$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.t_vheight$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle t_lm$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("t_lm"));
    public static VarHandle t_lm$VH() {
        return tiff_ifd_t.t_lm$VH;
    }
    public static int t_lm$get(MemorySegment seg) {
        return (int)tiff_ifd_t.t_lm$VH.get(seg);
    }
    public static void t_lm$set( MemorySegment seg, int x) {
        tiff_ifd_t.t_lm$VH.set(seg, x);
    }
    public static int t_lm$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.t_lm$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void t_lm$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.t_lm$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle t_tm$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("t_tm"));
    public static VarHandle t_tm$VH() {
        return tiff_ifd_t.t_tm$VH;
    }
    public static int t_tm$get(MemorySegment seg) {
        return (int)tiff_ifd_t.t_tm$VH.get(seg);
    }
    public static void t_tm$set( MemorySegment seg, int x) {
        tiff_ifd_t.t_tm$VH.set(seg, x);
    }
    public static int t_tm$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.t_tm$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void t_tm$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.t_tm$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle t_fuji_width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("t_fuji_width"));
    public static VarHandle t_fuji_width$VH() {
        return tiff_ifd_t.t_fuji_width$VH;
    }
    public static int t_fuji_width$get(MemorySegment seg) {
        return (int)tiff_ifd_t.t_fuji_width$VH.get(seg);
    }
    public static void t_fuji_width$set( MemorySegment seg, int x) {
        tiff_ifd_t.t_fuji_width$VH.set(seg, x);
    }
    public static int t_fuji_width$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.t_fuji_width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void t_fuji_width$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.t_fuji_width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle t_shutter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("t_shutter"));
    public static VarHandle t_shutter$VH() {
        return tiff_ifd_t.t_shutter$VH;
    }
    public static float t_shutter$get(MemorySegment seg) {
        return (float)tiff_ifd_t.t_shutter$VH.get(seg);
    }
    public static void t_shutter$set( MemorySegment seg, float x) {
        tiff_ifd_t.t_shutter$VH.set(seg, x);
    }
    public static float t_shutter$get(MemorySegment seg, long index) {
        return (float)tiff_ifd_t.t_shutter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void t_shutter$set(MemorySegment seg, long index, float x) {
        tiff_ifd_t.t_shutter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle opcode2_offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("opcode2_offset"));
    public static VarHandle opcode2_offset$VH() {
        return tiff_ifd_t.opcode2_offset$VH;
    }
    public static long opcode2_offset$get(MemorySegment seg) {
        return (long)tiff_ifd_t.opcode2_offset$VH.get(seg);
    }
    public static void opcode2_offset$set( MemorySegment seg, long x) {
        tiff_ifd_t.opcode2_offset$VH.set(seg, x);
    }
    public static long opcode2_offset$get(MemorySegment seg, long index) {
        return (long)tiff_ifd_t.opcode2_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void opcode2_offset$set(MemorySegment seg, long index, long x) {
        tiff_ifd_t.opcode2_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lineartable_offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lineartable_offset"));
    public static VarHandle lineartable_offset$VH() {
        return tiff_ifd_t.lineartable_offset$VH;
    }
    public static long lineartable_offset$get(MemorySegment seg) {
        return (long)tiff_ifd_t.lineartable_offset$VH.get(seg);
    }
    public static void lineartable_offset$set( MemorySegment seg, long x) {
        tiff_ifd_t.lineartable_offset$VH.set(seg, x);
    }
    public static long lineartable_offset$get(MemorySegment seg, long index) {
        return (long)tiff_ifd_t.lineartable_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lineartable_offset$set(MemorySegment seg, long index, long x) {
        tiff_ifd_t.lineartable_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lineartable_len$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lineartable_len"));
    public static VarHandle lineartable_len$VH() {
        return tiff_ifd_t.lineartable_len$VH;
    }
    public static int lineartable_len$get(MemorySegment seg) {
        return (int)tiff_ifd_t.lineartable_len$VH.get(seg);
    }
    public static void lineartable_len$set( MemorySegment seg, int x) {
        tiff_ifd_t.lineartable_len$VH.set(seg, x);
    }
    public static int lineartable_len$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.lineartable_len$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lineartable_len$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.lineartable_len$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment dng_color$slice(MemorySegment seg) {
        return seg.asSlice(140, 336);
    }
    public static MemorySegment dng_levels$slice(MemorySegment seg) {
        return seg.asSlice(476, 32928);
    }
    static final VarHandle newsubfiletype$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("newsubfiletype"));
    public static VarHandle newsubfiletype$VH() {
        return tiff_ifd_t.newsubfiletype$VH;
    }
    public static int newsubfiletype$get(MemorySegment seg) {
        return (int)tiff_ifd_t.newsubfiletype$VH.get(seg);
    }
    public static void newsubfiletype$set( MemorySegment seg, int x) {
        tiff_ifd_t.newsubfiletype$VH.set(seg, x);
    }
    public static int newsubfiletype$get(MemorySegment seg, long index) {
        return (int)tiff_ifd_t.newsubfiletype$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void newsubfiletype$set(MemorySegment seg, long index, int x) {
        tiff_ifd_t.newsubfiletype$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


