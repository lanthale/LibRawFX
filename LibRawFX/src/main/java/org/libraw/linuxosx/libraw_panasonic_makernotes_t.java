// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_panasonic_makernotes_t {
 *     unsigned short Compression;
 *     unsigned short BlackLevelDim;
 *     float BlackLevel[8];
 *     unsigned int Multishot;
 *     float gamma;
 *     int HighISOMultiplier[3];
 *     short FocusStepNear;
 *     short FocusStepCount;
 *     unsigned int ZoomPosition;
 *     unsigned int LensManufacturer;
 * };
 * }
 */
public class libraw_panasonic_makernotes_t {

    public static MemoryLayout $LAYOUT() {
        return constants$42.const$3;
    }
    public static VarHandle Compression$VH() {
        return constants$42.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short Compression;
     * }
     */
    public static short Compression$get(MemorySegment seg) {
        return (short)constants$42.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short Compression;
     * }
     */
    public static void Compression$set(MemorySegment seg, short x) {
        constants$42.const$4.set(seg, x);
    }
    public static short Compression$get(MemorySegment seg, long index) {
        return (short)constants$42.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Compression$set(MemorySegment seg, long index, short x) {
        constants$42.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle BlackLevelDim$VH() {
        return constants$42.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short BlackLevelDim;
     * }
     */
    public static short BlackLevelDim$get(MemorySegment seg) {
        return (short)constants$42.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short BlackLevelDim;
     * }
     */
    public static void BlackLevelDim$set(MemorySegment seg, short x) {
        constants$42.const$5.set(seg, x);
    }
    public static short BlackLevelDim$get(MemorySegment seg, long index) {
        return (short)constants$42.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void BlackLevelDim$set(MemorySegment seg, long index, short x) {
        constants$42.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment BlackLevel$slice(MemorySegment seg) {
        return seg.asSlice(4, 32);
    }
    public static VarHandle Multishot$VH() {
        return constants$43.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int Multishot;
     * }
     */
    public static int Multishot$get(MemorySegment seg) {
        return (int)constants$43.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int Multishot;
     * }
     */
    public static void Multishot$set(MemorySegment seg, int x) {
        constants$43.const$0.set(seg, x);
    }
    public static int Multishot$get(MemorySegment seg, long index) {
        return (int)constants$43.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Multishot$set(MemorySegment seg, long index, int x) {
        constants$43.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle gamma$VH() {
        return constants$43.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float gamma;
     * }
     */
    public static float gamma$get(MemorySegment seg) {
        return (float)constants$43.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float gamma;
     * }
     */
    public static void gamma$set(MemorySegment seg, float x) {
        constants$43.const$1.set(seg, x);
    }
    public static float gamma$get(MemorySegment seg, long index) {
        return (float)constants$43.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void gamma$set(MemorySegment seg, long index, float x) {
        constants$43.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment HighISOMultiplier$slice(MemorySegment seg) {
        return seg.asSlice(44, 12);
    }
    public static VarHandle FocusStepNear$VH() {
        return constants$43.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short FocusStepNear;
     * }
     */
    public static short FocusStepNear$get(MemorySegment seg) {
        return (short)constants$43.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short FocusStepNear;
     * }
     */
    public static void FocusStepNear$set(MemorySegment seg, short x) {
        constants$43.const$2.set(seg, x);
    }
    public static short FocusStepNear$get(MemorySegment seg, long index) {
        return (short)constants$43.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void FocusStepNear$set(MemorySegment seg, long index, short x) {
        constants$43.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle FocusStepCount$VH() {
        return constants$43.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short FocusStepCount;
     * }
     */
    public static short FocusStepCount$get(MemorySegment seg) {
        return (short)constants$43.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short FocusStepCount;
     * }
     */
    public static void FocusStepCount$set(MemorySegment seg, short x) {
        constants$43.const$3.set(seg, x);
    }
    public static short FocusStepCount$get(MemorySegment seg, long index) {
        return (short)constants$43.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void FocusStepCount$set(MemorySegment seg, long index, short x) {
        constants$43.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ZoomPosition$VH() {
        return constants$43.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int ZoomPosition;
     * }
     */
    public static int ZoomPosition$get(MemorySegment seg) {
        return (int)constants$43.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int ZoomPosition;
     * }
     */
    public static void ZoomPosition$set(MemorySegment seg, int x) {
        constants$43.const$4.set(seg, x);
    }
    public static int ZoomPosition$get(MemorySegment seg, long index) {
        return (int)constants$43.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ZoomPosition$set(MemorySegment seg, long index, int x) {
        constants$43.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LensManufacturer$VH() {
        return constants$43.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int LensManufacturer;
     * }
     */
    public static int LensManufacturer$get(MemorySegment seg) {
        return (int)constants$43.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int LensManufacturer;
     * }
     */
    public static void LensManufacturer$set(MemorySegment seg, int x) {
        constants$43.const$5.set(seg, x);
    }
    public static int LensManufacturer$get(MemorySegment seg, long index) {
        return (int)constants$43.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void LensManufacturer$set(MemorySegment seg, long index, int x) {
        constants$43.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


