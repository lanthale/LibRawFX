// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*progress_callback)(void* data,enum LibRaw_progress stage,int iteration,int expected);
 * }
 */
public interface progress_callback {

    int apply(java.lang.foreign.MemorySegment data, int stage, int iteration, int expected);
    static MemorySegment allocate(progress_callback fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$3.const$3, fi, constants$3.const$2, scope);
    }
    static progress_callback ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _data, int _stage, int _iteration, int _expected) -> {
            try {
                return (int)constants$3.const$4.invokeExact(symbol, _data, _stage, _iteration, _expected);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


