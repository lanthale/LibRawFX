// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class libraw_imgother_t {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_FLOAT.withName("iso_speed"),
        C_FLOAT.withName("shutter"),
        C_FLOAT.withName("aperture"),
        C_FLOAT.withName("focal_len"),
        C_LONG.withName("timestamp"),
        C_INT.withName("shot_order"),
        MemoryLayout.sequenceLayout(32, C_INT).withName("gpsdata"),
        MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(3, C_FLOAT).withName("latitude"),
            MemoryLayout.sequenceLayout(3, C_FLOAT).withName("longitude"),
            MemoryLayout.sequenceLayout(3, C_FLOAT).withName("gpstimestamp"),
            C_FLOAT.withName("altitude"),
            C_CHAR.withName("altref"),
            C_CHAR.withName("latref"),
            C_CHAR.withName("longref"),
            C_CHAR.withName("gpsstatus"),
            C_CHAR.withName("gpsparsed"),
            MemoryLayout.paddingLayout(24)
        ).withName("parsed_gps"),
        MemoryLayout.sequenceLayout(512, C_CHAR).withName("desc"),
        MemoryLayout.sequenceLayout(64, C_CHAR).withName("artist"),
        MemoryLayout.sequenceLayout(4, C_FLOAT).withName("analogbalance"),
        MemoryLayout.paddingLayout(32)
    );
    public static MemoryLayout $LAYOUT() {
        return libraw_imgother_t.$struct$LAYOUT;
    }
    static final VarHandle iso_speed$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("iso_speed"));
    public static VarHandle iso_speed$VH() {
        return libraw_imgother_t.iso_speed$VH;
    }
    public static float iso_speed$get(MemorySegment seg) {
        return (float)libraw_imgother_t.iso_speed$VH.get(seg);
    }
    public static void iso_speed$set( MemorySegment seg, float x) {
        libraw_imgother_t.iso_speed$VH.set(seg, x);
    }
    public static float iso_speed$get(MemorySegment seg, long index) {
        return (float)libraw_imgother_t.iso_speed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iso_speed$set(MemorySegment seg, long index, float x) {
        libraw_imgother_t.iso_speed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle shutter$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("shutter"));
    public static VarHandle shutter$VH() {
        return libraw_imgother_t.shutter$VH;
    }
    public static float shutter$get(MemorySegment seg) {
        return (float)libraw_imgother_t.shutter$VH.get(seg);
    }
    public static void shutter$set( MemorySegment seg, float x) {
        libraw_imgother_t.shutter$VH.set(seg, x);
    }
    public static float shutter$get(MemorySegment seg, long index) {
        return (float)libraw_imgother_t.shutter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void shutter$set(MemorySegment seg, long index, float x) {
        libraw_imgother_t.shutter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle aperture$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("aperture"));
    public static VarHandle aperture$VH() {
        return libraw_imgother_t.aperture$VH;
    }
    public static float aperture$get(MemorySegment seg) {
        return (float)libraw_imgother_t.aperture$VH.get(seg);
    }
    public static void aperture$set( MemorySegment seg, float x) {
        libraw_imgother_t.aperture$VH.set(seg, x);
    }
    public static float aperture$get(MemorySegment seg, long index) {
        return (float)libraw_imgother_t.aperture$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void aperture$set(MemorySegment seg, long index, float x) {
        libraw_imgother_t.aperture$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle focal_len$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("focal_len"));
    public static VarHandle focal_len$VH() {
        return libraw_imgother_t.focal_len$VH;
    }
    public static float focal_len$get(MemorySegment seg) {
        return (float)libraw_imgother_t.focal_len$VH.get(seg);
    }
    public static void focal_len$set( MemorySegment seg, float x) {
        libraw_imgother_t.focal_len$VH.set(seg, x);
    }
    public static float focal_len$get(MemorySegment seg, long index) {
        return (float)libraw_imgother_t.focal_len$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void focal_len$set(MemorySegment seg, long index, float x) {
        libraw_imgother_t.focal_len$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle timestamp$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("timestamp"));
    public static VarHandle timestamp$VH() {
        return libraw_imgother_t.timestamp$VH;
    }
    public static long timestamp$get(MemorySegment seg) {
        return (long)libraw_imgother_t.timestamp$VH.get(seg);
    }
    public static void timestamp$set( MemorySegment seg, long x) {
        libraw_imgother_t.timestamp$VH.set(seg, x);
    }
    public static long timestamp$get(MemorySegment seg, long index) {
        return (long)libraw_imgother_t.timestamp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void timestamp$set(MemorySegment seg, long index, long x) {
        libraw_imgother_t.timestamp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle shot_order$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("shot_order"));
    public static VarHandle shot_order$VH() {
        return libraw_imgother_t.shot_order$VH;
    }
    public static int shot_order$get(MemorySegment seg) {
        return (int)libraw_imgother_t.shot_order$VH.get(seg);
    }
    public static void shot_order$set( MemorySegment seg, int x) {
        libraw_imgother_t.shot_order$VH.set(seg, x);
    }
    public static int shot_order$get(MemorySegment seg, long index) {
        return (int)libraw_imgother_t.shot_order$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void shot_order$set(MemorySegment seg, long index, int x) {
        libraw_imgother_t.shot_order$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment gpsdata$slice(MemorySegment seg) {
        return seg.asSlice(28, 128);
    }
    public static MemorySegment parsed_gps$slice(MemorySegment seg) {
        return seg.asSlice(156, 48);
    }
    public static MemorySegment desc$slice(MemorySegment seg) {
        return seg.asSlice(204, 512);
    }
    public static MemorySegment artist$slice(MemorySegment seg) {
        return seg.asSlice(716, 64);
    }
    public static MemorySegment analogbalance$slice(MemorySegment seg) {
        return seg.asSlice(780, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


