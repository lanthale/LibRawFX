// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_imgother_t {
 *     float iso_speed;
 *     float shutter;
 *     float aperture;
 *     float focal_len;
 *     long long timestamp;
 *     unsigned int shot_order;
 *     unsigned int gpsdata[32];
 *     struct libraw_gps_info_t parsed_gps;
 *     char desc[512];
 *     char artist[64];
 *     float analogbalance[4];
 * };
 * }
 */
public class libraw_imgother_t {

    public static MemoryLayout $LAYOUT() {
        return constants$63.const$3;
    }
    public static VarHandle iso_speed$VH() {
        return constants$63.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float iso_speed;
     * }
     */
    public static float iso_speed$get(MemorySegment seg) {
        return (float)constants$63.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float iso_speed;
     * }
     */
    public static void iso_speed$set(MemorySegment seg, float x) {
        constants$63.const$4.set(seg, x);
    }
    public static float iso_speed$get(MemorySegment seg, long index) {
        return (float)constants$63.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void iso_speed$set(MemorySegment seg, long index, float x) {
        constants$63.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shutter$VH() {
        return constants$63.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float shutter;
     * }
     */
    public static float shutter$get(MemorySegment seg) {
        return (float)constants$63.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float shutter;
     * }
     */
    public static void shutter$set(MemorySegment seg, float x) {
        constants$63.const$5.set(seg, x);
    }
    public static float shutter$get(MemorySegment seg, long index) {
        return (float)constants$63.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void shutter$set(MemorySegment seg, long index, float x) {
        constants$63.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle aperture$VH() {
        return constants$64.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float aperture;
     * }
     */
    public static float aperture$get(MemorySegment seg) {
        return (float)constants$64.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float aperture;
     * }
     */
    public static void aperture$set(MemorySegment seg, float x) {
        constants$64.const$0.set(seg, x);
    }
    public static float aperture$get(MemorySegment seg, long index) {
        return (float)constants$64.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void aperture$set(MemorySegment seg, long index, float x) {
        constants$64.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle focal_len$VH() {
        return constants$64.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float focal_len;
     * }
     */
    public static float focal_len$get(MemorySegment seg) {
        return (float)constants$64.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float focal_len;
     * }
     */
    public static void focal_len$set(MemorySegment seg, float x) {
        constants$64.const$1.set(seg, x);
    }
    public static float focal_len$get(MemorySegment seg, long index) {
        return (float)constants$64.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void focal_len$set(MemorySegment seg, long index, float x) {
        constants$64.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle timestamp$VH() {
        return constants$64.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long timestamp;
     * }
     */
    public static long timestamp$get(MemorySegment seg) {
        return (long)constants$64.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long timestamp;
     * }
     */
    public static void timestamp$set(MemorySegment seg, long x) {
        constants$64.const$2.set(seg, x);
    }
    public static long timestamp$get(MemorySegment seg, long index) {
        return (long)constants$64.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void timestamp$set(MemorySegment seg, long index, long x) {
        constants$64.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shot_order$VH() {
        return constants$64.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int shot_order;
     * }
     */
    public static int shot_order$get(MemorySegment seg) {
        return (int)constants$64.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int shot_order;
     * }
     */
    public static void shot_order$set(MemorySegment seg, int x) {
        constants$64.const$3.set(seg, x);
    }
    public static int shot_order$get(MemorySegment seg, long index) {
        return (int)constants$64.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void shot_order$set(MemorySegment seg, long index, int x) {
        constants$64.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment gpsdata$slice(MemorySegment seg) {
        return seg.asSlice(28, 128);
    }
    public static MemorySegment parsed_gps$slice(MemorySegment seg) {
        return seg.asSlice(156, 48);
    }
    public static MemorySegment desc$slice(MemorySegment seg) {
        return seg.asSlice(204, 512);
    }
    public static MemorySegment artist$slice(MemorySegment seg) {
        return seg.asSlice(716, 64);
    }
    public static MemorySegment analogbalance$slice(MemorySegment seg) {
        return seg.asSlice(780, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


