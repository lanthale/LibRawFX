// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_dng_levels_t {
 *     unsigned int parsedfields;
 *     unsigned int dng_cblack[4104];
 *     unsigned int dng_black;
 *     float dng_fcblack[4104];
 *     float dng_fblack;
 *     unsigned int dng_whitelevel[4];
 *     unsigned short default_crop[4];
 *     float user_crop[4];
 *     unsigned int preview_colorspace;
 *     float analogbalance[4];
 *     float asshotneutral[4];
 *     float baseline_exposure;
 *     float LinearResponseLimit;
 * };
 * }
 */
public class libraw_dng_levels_t {

    public static MemoryLayout $LAYOUT() {
        return constants$19.const$3;
    }
    public static VarHandle parsedfields$VH() {
        return constants$19.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int parsedfields;
     * }
     */
    public static int parsedfields$get(MemorySegment seg) {
        return (int)constants$19.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int parsedfields;
     * }
     */
    public static void parsedfields$set(MemorySegment seg, int x) {
        constants$19.const$4.set(seg, x);
    }
    public static int parsedfields$get(MemorySegment seg, long index) {
        return (int)constants$19.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void parsedfields$set(MemorySegment seg, long index, int x) {
        constants$19.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment dng_cblack$slice(MemorySegment seg) {
        return seg.asSlice(4, 16416);
    }
    public static VarHandle dng_black$VH() {
        return constants$19.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int dng_black;
     * }
     */
    public static int dng_black$get(MemorySegment seg) {
        return (int)constants$19.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int dng_black;
     * }
     */
    public static void dng_black$set(MemorySegment seg, int x) {
        constants$19.const$5.set(seg, x);
    }
    public static int dng_black$get(MemorySegment seg, long index) {
        return (int)constants$19.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dng_black$set(MemorySegment seg, long index, int x) {
        constants$19.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment dng_fcblack$slice(MemorySegment seg) {
        return seg.asSlice(16424, 16416);
    }
    public static VarHandle dng_fblack$VH() {
        return constants$20.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float dng_fblack;
     * }
     */
    public static float dng_fblack$get(MemorySegment seg) {
        return (float)constants$20.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float dng_fblack;
     * }
     */
    public static void dng_fblack$set(MemorySegment seg, float x) {
        constants$20.const$0.set(seg, x);
    }
    public static float dng_fblack$get(MemorySegment seg, long index) {
        return (float)constants$20.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dng_fblack$set(MemorySegment seg, long index, float x) {
        constants$20.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment dng_whitelevel$slice(MemorySegment seg) {
        return seg.asSlice(32844, 16);
    }
    public static MemorySegment default_crop$slice(MemorySegment seg) {
        return seg.asSlice(32860, 8);
    }
    public static MemorySegment user_crop$slice(MemorySegment seg) {
        return seg.asSlice(32868, 16);
    }
    public static VarHandle preview_colorspace$VH() {
        return constants$20.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int preview_colorspace;
     * }
     */
    public static int preview_colorspace$get(MemorySegment seg) {
        return (int)constants$20.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int preview_colorspace;
     * }
     */
    public static void preview_colorspace$set(MemorySegment seg, int x) {
        constants$20.const$1.set(seg, x);
    }
    public static int preview_colorspace$get(MemorySegment seg, long index) {
        return (int)constants$20.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void preview_colorspace$set(MemorySegment seg, long index, int x) {
        constants$20.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment analogbalance$slice(MemorySegment seg) {
        return seg.asSlice(32888, 16);
    }
    public static MemorySegment asshotneutral$slice(MemorySegment seg) {
        return seg.asSlice(32904, 16);
    }
    public static VarHandle baseline_exposure$VH() {
        return constants$20.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float baseline_exposure;
     * }
     */
    public static float baseline_exposure$get(MemorySegment seg) {
        return (float)constants$20.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float baseline_exposure;
     * }
     */
    public static void baseline_exposure$set(MemorySegment seg, float x) {
        constants$20.const$2.set(seg, x);
    }
    public static float baseline_exposure$get(MemorySegment seg, long index) {
        return (float)constants$20.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void baseline_exposure$set(MemorySegment seg, long index, float x) {
        constants$20.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle LinearResponseLimit$VH() {
        return constants$20.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float LinearResponseLimit;
     * }
     */
    public static float LinearResponseLimit$get(MemorySegment seg) {
        return (float)constants$20.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float LinearResponseLimit;
     * }
     */
    public static void LinearResponseLimit$set(MemorySegment seg, float x) {
        constants$20.const$3.set(seg, x);
    }
    public static float LinearResponseLimit$get(MemorySegment seg, long index) {
        return (float)constants$20.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void LinearResponseLimit$set(MemorySegment seg, long index, float x) {
        constants$20.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


