// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class libraw_lensinfo_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_FLOAT$LAYOUT.withName("MinFocal"),
        Constants$root.C_FLOAT$LAYOUT.withName("MaxFocal"),
        Constants$root.C_FLOAT$LAYOUT.withName("MaxAp4MinFocal"),
        Constants$root.C_FLOAT$LAYOUT.withName("MaxAp4MaxFocal"),
        Constants$root.C_FLOAT$LAYOUT.withName("EXIF_MaxAp"),
        MemoryLayout.sequenceLayout(128, Constants$root.C_CHAR$LAYOUT).withName("LensMake"),
        MemoryLayout.sequenceLayout(128, Constants$root.C_CHAR$LAYOUT).withName("Lens"),
        MemoryLayout.sequenceLayout(128, Constants$root.C_CHAR$LAYOUT).withName("LensSerial"),
        MemoryLayout.sequenceLayout(128, Constants$root.C_CHAR$LAYOUT).withName("InternalLensSerial"),
        Constants$root.C_SHORT$LAYOUT.withName("FocalLengthIn35mmFormat"),
        MemoryLayout.paddingLayout(16),
        MemoryLayout.structLayout(
            Constants$root.C_FLOAT$LAYOUT.withName("EffectiveMaxAp"),
            Constants$root.C_CHAR$LAYOUT.withName("LensIDNumber"),
            Constants$root.C_CHAR$LAYOUT.withName("LensFStops"),
            Constants$root.C_CHAR$LAYOUT.withName("MCUVersion"),
            Constants$root.C_CHAR$LAYOUT.withName("LensType")
        ).withName("nikon"),
        MemoryLayout.structLayout(
            Constants$root.C_FLOAT$LAYOUT.withName("MinFocal"),
            Constants$root.C_FLOAT$LAYOUT.withName("MaxFocal"),
            Constants$root.C_FLOAT$LAYOUT.withName("MaxAp4MinFocal"),
            Constants$root.C_FLOAT$LAYOUT.withName("MaxAp4MaxFocal")
        ).withName("dng"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("LensID"),
            MemoryLayout.sequenceLayout(128, Constants$root.C_CHAR$LAYOUT).withName("Lens"),
            Constants$root.C_SHORT$LAYOUT.withName("LensFormat"),
            Constants$root.C_SHORT$LAYOUT.withName("LensMount"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_LONG_LONG$LAYOUT.withName("CamID"),
            Constants$root.C_SHORT$LAYOUT.withName("CameraFormat"),
            Constants$root.C_SHORT$LAYOUT.withName("CameraMount"),
            MemoryLayout.sequenceLayout(64, Constants$root.C_CHAR$LAYOUT).withName("body"),
            Constants$root.C_SHORT$LAYOUT.withName("FocalType"),
            MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("LensFeatures_pre"),
            MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("LensFeatures_suf"),
            MemoryLayout.paddingLayout(16),
            Constants$root.C_FLOAT$LAYOUT.withName("MinFocal"),
            Constants$root.C_FLOAT$LAYOUT.withName("MaxFocal"),
            Constants$root.C_FLOAT$LAYOUT.withName("MaxAp4MinFocal"),
            Constants$root.C_FLOAT$LAYOUT.withName("MaxAp4MaxFocal"),
            Constants$root.C_FLOAT$LAYOUT.withName("MinAp4MinFocal"),
            Constants$root.C_FLOAT$LAYOUT.withName("MinAp4MaxFocal"),
            Constants$root.C_FLOAT$LAYOUT.withName("MaxAp"),
            Constants$root.C_FLOAT$LAYOUT.withName("MinAp"),
            Constants$root.C_FLOAT$LAYOUT.withName("CurFocal"),
            Constants$root.C_FLOAT$LAYOUT.withName("CurAp"),
            Constants$root.C_FLOAT$LAYOUT.withName("MaxAp4CurFocal"),
            Constants$root.C_FLOAT$LAYOUT.withName("MinAp4CurFocal"),
            Constants$root.C_FLOAT$LAYOUT.withName("MinFocusDistance"),
            Constants$root.C_FLOAT$LAYOUT.withName("FocusRangeIndex"),
            Constants$root.C_FLOAT$LAYOUT.withName("LensFStops"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_LONG_LONG$LAYOUT.withName("TeleconverterID"),
            MemoryLayout.sequenceLayout(128, Constants$root.C_CHAR$LAYOUT).withName("Teleconverter"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("AdapterID"),
            MemoryLayout.sequenceLayout(128, Constants$root.C_CHAR$LAYOUT).withName("Adapter"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("AttachmentID"),
            MemoryLayout.sequenceLayout(128, Constants$root.C_CHAR$LAYOUT).withName("Attachment"),
            Constants$root.C_SHORT$LAYOUT.withName("FocalUnits"),
            MemoryLayout.paddingLayout(16),
            Constants$root.C_FLOAT$LAYOUT.withName("FocalLengthIn35mmFormat")
        ).withName("makernotes")
    );
    public static MemoryLayout $LAYOUT() {
        return libraw_lensinfo_t.$struct$LAYOUT;
    }
    static final VarHandle MinFocal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MinFocal"));
    public static VarHandle MinFocal$VH() {
        return libraw_lensinfo_t.MinFocal$VH;
    }
    public static float MinFocal$get(MemorySegment seg) {
        return (float)libraw_lensinfo_t.MinFocal$VH.get(seg);
    }
    public static void MinFocal$set( MemorySegment seg, float x) {
        libraw_lensinfo_t.MinFocal$VH.set(seg, x);
    }
    public static float MinFocal$get(MemorySegment seg, long index) {
        return (float)libraw_lensinfo_t.MinFocal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MinFocal$set(MemorySegment seg, long index, float x) {
        libraw_lensinfo_t.MinFocal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaxFocal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaxFocal"));
    public static VarHandle MaxFocal$VH() {
        return libraw_lensinfo_t.MaxFocal$VH;
    }
    public static float MaxFocal$get(MemorySegment seg) {
        return (float)libraw_lensinfo_t.MaxFocal$VH.get(seg);
    }
    public static void MaxFocal$set( MemorySegment seg, float x) {
        libraw_lensinfo_t.MaxFocal$VH.set(seg, x);
    }
    public static float MaxFocal$get(MemorySegment seg, long index) {
        return (float)libraw_lensinfo_t.MaxFocal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxFocal$set(MemorySegment seg, long index, float x) {
        libraw_lensinfo_t.MaxFocal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaxAp4MinFocal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaxAp4MinFocal"));
    public static VarHandle MaxAp4MinFocal$VH() {
        return libraw_lensinfo_t.MaxAp4MinFocal$VH;
    }
    public static float MaxAp4MinFocal$get(MemorySegment seg) {
        return (float)libraw_lensinfo_t.MaxAp4MinFocal$VH.get(seg);
    }
    public static void MaxAp4MinFocal$set( MemorySegment seg, float x) {
        libraw_lensinfo_t.MaxAp4MinFocal$VH.set(seg, x);
    }
    public static float MaxAp4MinFocal$get(MemorySegment seg, long index) {
        return (float)libraw_lensinfo_t.MaxAp4MinFocal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxAp4MinFocal$set(MemorySegment seg, long index, float x) {
        libraw_lensinfo_t.MaxAp4MinFocal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaxAp4MaxFocal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaxAp4MaxFocal"));
    public static VarHandle MaxAp4MaxFocal$VH() {
        return libraw_lensinfo_t.MaxAp4MaxFocal$VH;
    }
    public static float MaxAp4MaxFocal$get(MemorySegment seg) {
        return (float)libraw_lensinfo_t.MaxAp4MaxFocal$VH.get(seg);
    }
    public static void MaxAp4MaxFocal$set( MemorySegment seg, float x) {
        libraw_lensinfo_t.MaxAp4MaxFocal$VH.set(seg, x);
    }
    public static float MaxAp4MaxFocal$get(MemorySegment seg, long index) {
        return (float)libraw_lensinfo_t.MaxAp4MaxFocal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxAp4MaxFocal$set(MemorySegment seg, long index, float x) {
        libraw_lensinfo_t.MaxAp4MaxFocal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle EXIF_MaxAp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EXIF_MaxAp"));
    public static VarHandle EXIF_MaxAp$VH() {
        return libraw_lensinfo_t.EXIF_MaxAp$VH;
    }
    public static float EXIF_MaxAp$get(MemorySegment seg) {
        return (float)libraw_lensinfo_t.EXIF_MaxAp$VH.get(seg);
    }
    public static void EXIF_MaxAp$set( MemorySegment seg, float x) {
        libraw_lensinfo_t.EXIF_MaxAp$VH.set(seg, x);
    }
    public static float EXIF_MaxAp$get(MemorySegment seg, long index) {
        return (float)libraw_lensinfo_t.EXIF_MaxAp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EXIF_MaxAp$set(MemorySegment seg, long index, float x) {
        libraw_lensinfo_t.EXIF_MaxAp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment LensMake$slice(MemorySegment seg) {
        return seg.asSlice(20, 128);
    }
    public static MemorySegment Lens$slice(MemorySegment seg) {
        return seg.asSlice(148, 128);
    }
    public static MemorySegment LensSerial$slice(MemorySegment seg) {
        return seg.asSlice(276, 128);
    }
    public static MemorySegment InternalLensSerial$slice(MemorySegment seg) {
        return seg.asSlice(404, 128);
    }
    static final VarHandle FocalLengthIn35mmFormat$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FocalLengthIn35mmFormat"));
    public static VarHandle FocalLengthIn35mmFormat$VH() {
        return libraw_lensinfo_t.FocalLengthIn35mmFormat$VH;
    }
    public static short FocalLengthIn35mmFormat$get(MemorySegment seg) {
        return (short)libraw_lensinfo_t.FocalLengthIn35mmFormat$VH.get(seg);
    }
    public static void FocalLengthIn35mmFormat$set( MemorySegment seg, short x) {
        libraw_lensinfo_t.FocalLengthIn35mmFormat$VH.set(seg, x);
    }
    public static short FocalLengthIn35mmFormat$get(MemorySegment seg, long index) {
        return (short)libraw_lensinfo_t.FocalLengthIn35mmFormat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FocalLengthIn35mmFormat$set(MemorySegment seg, long index, short x) {
        libraw_lensinfo_t.FocalLengthIn35mmFormat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment nikon$slice(MemorySegment seg) {
        return seg.asSlice(536, 8);
    }
    public static MemorySegment dng$slice(MemorySegment seg) {
        return seg.asSlice(544, 16);
    }
    public static MemorySegment makernotes$slice(MemorySegment seg) {
        return seg.asSlice(560, 736);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


