// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_data_t {
 *     unsigned short *image[4];
 *     struct libraw_image_sizes_t sizes;
 *     struct libraw_iparams_t idata;
 *     struct libraw_lensinfo_t lens;
 *     struct libraw_makernotes_t makernotes;
 *     struct libraw_shootinginfo_t shootinginfo;
 *     struct libraw_output_params_t params;
 *     struct libraw_raw_unpack_params_t rawparams;
 *     unsigned int progress_flags;
 *     unsigned int process_warnings;
 *     struct libraw_colordata_t color;
 *     struct libraw_imgother_t other;
 *     struct libraw_thumbnail_t thumbnail;
 *     struct libraw_rawdata_t rawdata;
 *     void* parent_class;
 * };
 * }
 */
public class libraw_data_t {

    public static MemoryLayout $LAYOUT() {
        return constants$89.const$3;
    }
    public static VarHandle image$VH() {
        return constants$89.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short *image[4];
     * }
     */
    public static MemorySegment image$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$89.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short *image[4];
     * }
     */
    public static void image$set(MemorySegment seg, MemorySegment x) {
        constants$89.const$4.set(seg, x);
    }
    public static MemorySegment image$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$89.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void image$set(MemorySegment seg, long index, MemorySegment x) {
        constants$89.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment sizes$slice(MemorySegment seg) {
        return seg.asSlice(8, 184);
    }
    public static MemorySegment idata$slice(MemorySegment seg) {
        return seg.asSlice(192, 440);
    }
    public static MemorySegment lens$slice(MemorySegment seg) {
        return seg.asSlice(632, 1296);
    }
    public static MemorySegment makernotes$slice(MemorySegment seg) {
        return seg.asSlice(1928, 2944);
    }
    public static MemorySegment shootinginfo$slice(MemorySegment seg) {
        return seg.asSlice(4872, 142);
    }
    public static MemorySegment params$slice(MemorySegment seg) {
        return seg.asSlice(5016, 304);
    }
    public static MemorySegment rawparams$slice(MemorySegment seg) {
        return seg.asSlice(5320, 48);
    }
    public static VarHandle progress_flags$VH() {
        return constants$89.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int progress_flags;
     * }
     */
    public static int progress_flags$get(MemorySegment seg) {
        return (int)constants$89.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int progress_flags;
     * }
     */
    public static void progress_flags$set(MemorySegment seg, int x) {
        constants$89.const$5.set(seg, x);
    }
    public static int progress_flags$get(MemorySegment seg, long index) {
        return (int)constants$89.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void progress_flags$set(MemorySegment seg, long index, int x) {
        constants$89.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle process_warnings$VH() {
        return constants$90.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int process_warnings;
     * }
     */
    public static int process_warnings$get(MemorySegment seg) {
        return (int)constants$90.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int process_warnings;
     * }
     */
    public static void process_warnings$set(MemorySegment seg, int x) {
        constants$90.const$0.set(seg, x);
    }
    public static int process_warnings$get(MemorySegment seg, long index) {
        return (int)constants$90.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void process_warnings$set(MemorySegment seg, long index, int x) {
        constants$90.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment color$slice(MemorySegment seg) {
        return seg.asSlice(5376, 187032);
    }
    public static MemorySegment other$slice(MemorySegment seg) {
        return seg.asSlice(192408, 800);
    }
    public static MemorySegment thumbnail$slice(MemorySegment seg) {
        return seg.asSlice(193208, 24);
    }
    public static MemorySegment rawdata$slice(MemorySegment seg) {
        return seg.asSlice(193232, 187744);
    }
    public static VarHandle parent_class$VH() {
        return constants$90.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* parent_class;
     * }
     */
    public static MemorySegment parent_class$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$90.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* parent_class;
     * }
     */
    public static void parent_class$set(MemorySegment seg, MemorySegment x) {
        constants$90.const$1.set(seg, x);
    }
    public static MemorySegment parent_class$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$90.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void parent_class$set(MemorySegment seg, long index, MemorySegment x) {
        constants$90.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


