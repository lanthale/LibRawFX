// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct unpacker_data_t {
 *     short order;
 *     unsigned short sraw_mul[4];
 *     unsigned short cr2_slice[3];
 *     unsigned int kodak_cbpp;
 *     long long strip_offset;
 *     long long data_offset;
 *     long long meta_offset;
 *     long long exif_offset;
 *     long long ifd0_offset;
 *     unsigned int data_size;
 *     unsigned int meta_length;
 *     unsigned int cr3_exif_length;
 *     unsigned int cr3_ifd0_length;
 *     unsigned int thumb_misc;
 *     unsigned int fuji_layout;
 *     unsigned int tiff_samples;
 *     unsigned int tiff_bps;
 *     unsigned int tiff_compress;
 *     unsigned int tiff_sampleformat;
 *     unsigned int zero_after_ff;
 *     unsigned int tile_width;
 *     unsigned int tile_length;
 *     unsigned int load_flags;
 *     unsigned int data_error;
 *     int hasselblad_parser_flag;
 *     long long posRAFData;
 *     unsigned int lenRAFData;
 *     int fuji_total_lines;
 *     int fuji_total_blocks;
 *     int fuji_block_width;
 *     int fuji_bits;
 *     int fuji_raw_type;
 *     int fuji_lossless;
 *     int pana_encoding;
 *     int pana_bpp;
 *     struct crx_data_header_t crx_header[16];
 *     int crx_track_selected;
 *     short CR3_CTMDtag;
 *     short CR3_Version;
 *     int CM_found;
 *     unsigned int is_NikonTransfer;
 *     unsigned int is_Olympus;
 *     int OlympusDNG_SubDirOffsetValid;
 *     unsigned int is_Sony;
 *     unsigned int is_pana_raw;
 *     unsigned int is_PentaxRicohMakernotes;
 *     unsigned int dng_frames[20];
 *     unsigned short raw_stride;
 * };
 * }
 */
public class unpacker_data_t {

    public static MemoryLayout $LAYOUT() {
        return constants$98.const$1;
    }
    public static VarHandle order$VH() {
        return constants$98.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short order;
     * }
     */
    public static short order$get(MemorySegment seg) {
        return (short)constants$98.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short order;
     * }
     */
    public static void order$set(MemorySegment seg, short x) {
        constants$98.const$2.set(seg, x);
    }
    public static short order$get(MemorySegment seg, long index) {
        return (short)constants$98.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void order$set(MemorySegment seg, long index, short x) {
        constants$98.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment sraw_mul$slice(MemorySegment seg) {
        return seg.asSlice(2, 8);
    }
    public static MemorySegment cr2_slice$slice(MemorySegment seg) {
        return seg.asSlice(10, 6);
    }
    public static VarHandle kodak_cbpp$VH() {
        return constants$98.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int kodak_cbpp;
     * }
     */
    public static int kodak_cbpp$get(MemorySegment seg) {
        return (int)constants$98.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int kodak_cbpp;
     * }
     */
    public static void kodak_cbpp$set(MemorySegment seg, int x) {
        constants$98.const$3.set(seg, x);
    }
    public static int kodak_cbpp$get(MemorySegment seg, long index) {
        return (int)constants$98.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void kodak_cbpp$set(MemorySegment seg, long index, int x) {
        constants$98.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle strip_offset$VH() {
        return constants$98.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long strip_offset;
     * }
     */
    public static long strip_offset$get(MemorySegment seg) {
        return (long)constants$98.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long strip_offset;
     * }
     */
    public static void strip_offset$set(MemorySegment seg, long x) {
        constants$98.const$4.set(seg, x);
    }
    public static long strip_offset$get(MemorySegment seg, long index) {
        return (long)constants$98.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void strip_offset$set(MemorySegment seg, long index, long x) {
        constants$98.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle data_offset$VH() {
        return constants$98.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long data_offset;
     * }
     */
    public static long data_offset$get(MemorySegment seg) {
        return (long)constants$98.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long data_offset;
     * }
     */
    public static void data_offset$set(MemorySegment seg, long x) {
        constants$98.const$5.set(seg, x);
    }
    public static long data_offset$get(MemorySegment seg, long index) {
        return (long)constants$98.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void data_offset$set(MemorySegment seg, long index, long x) {
        constants$98.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle meta_offset$VH() {
        return constants$99.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long meta_offset;
     * }
     */
    public static long meta_offset$get(MemorySegment seg) {
        return (long)constants$99.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long meta_offset;
     * }
     */
    public static void meta_offset$set(MemorySegment seg, long x) {
        constants$99.const$0.set(seg, x);
    }
    public static long meta_offset$get(MemorySegment seg, long index) {
        return (long)constants$99.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void meta_offset$set(MemorySegment seg, long index, long x) {
        constants$99.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle exif_offset$VH() {
        return constants$99.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long exif_offset;
     * }
     */
    public static long exif_offset$get(MemorySegment seg) {
        return (long)constants$99.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long exif_offset;
     * }
     */
    public static void exif_offset$set(MemorySegment seg, long x) {
        constants$99.const$1.set(seg, x);
    }
    public static long exif_offset$get(MemorySegment seg, long index) {
        return (long)constants$99.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void exif_offset$set(MemorySegment seg, long index, long x) {
        constants$99.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ifd0_offset$VH() {
        return constants$99.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long ifd0_offset;
     * }
     */
    public static long ifd0_offset$get(MemorySegment seg) {
        return (long)constants$99.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long ifd0_offset;
     * }
     */
    public static void ifd0_offset$set(MemorySegment seg, long x) {
        constants$99.const$2.set(seg, x);
    }
    public static long ifd0_offset$get(MemorySegment seg, long index) {
        return (long)constants$99.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ifd0_offset$set(MemorySegment seg, long index, long x) {
        constants$99.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle data_size$VH() {
        return constants$99.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int data_size;
     * }
     */
    public static int data_size$get(MemorySegment seg) {
        return (int)constants$99.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int data_size;
     * }
     */
    public static void data_size$set(MemorySegment seg, int x) {
        constants$99.const$3.set(seg, x);
    }
    public static int data_size$get(MemorySegment seg, long index) {
        return (int)constants$99.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void data_size$set(MemorySegment seg, long index, int x) {
        constants$99.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle meta_length$VH() {
        return constants$99.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int meta_length;
     * }
     */
    public static int meta_length$get(MemorySegment seg) {
        return (int)constants$99.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int meta_length;
     * }
     */
    public static void meta_length$set(MemorySegment seg, int x) {
        constants$99.const$4.set(seg, x);
    }
    public static int meta_length$get(MemorySegment seg, long index) {
        return (int)constants$99.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void meta_length$set(MemorySegment seg, long index, int x) {
        constants$99.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cr3_exif_length$VH() {
        return constants$99.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int cr3_exif_length;
     * }
     */
    public static int cr3_exif_length$get(MemorySegment seg) {
        return (int)constants$99.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int cr3_exif_length;
     * }
     */
    public static void cr3_exif_length$set(MemorySegment seg, int x) {
        constants$99.const$5.set(seg, x);
    }
    public static int cr3_exif_length$get(MemorySegment seg, long index) {
        return (int)constants$99.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cr3_exif_length$set(MemorySegment seg, long index, int x) {
        constants$99.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cr3_ifd0_length$VH() {
        return constants$100.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int cr3_ifd0_length;
     * }
     */
    public static int cr3_ifd0_length$get(MemorySegment seg) {
        return (int)constants$100.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int cr3_ifd0_length;
     * }
     */
    public static void cr3_ifd0_length$set(MemorySegment seg, int x) {
        constants$100.const$0.set(seg, x);
    }
    public static int cr3_ifd0_length$get(MemorySegment seg, long index) {
        return (int)constants$100.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void cr3_ifd0_length$set(MemorySegment seg, long index, int x) {
        constants$100.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle thumb_misc$VH() {
        return constants$100.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int thumb_misc;
     * }
     */
    public static int thumb_misc$get(MemorySegment seg) {
        return (int)constants$100.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int thumb_misc;
     * }
     */
    public static void thumb_misc$set(MemorySegment seg, int x) {
        constants$100.const$1.set(seg, x);
    }
    public static int thumb_misc$get(MemorySegment seg, long index) {
        return (int)constants$100.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void thumb_misc$set(MemorySegment seg, long index, int x) {
        constants$100.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fuji_layout$VH() {
        return constants$100.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int fuji_layout;
     * }
     */
    public static int fuji_layout$get(MemorySegment seg) {
        return (int)constants$100.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int fuji_layout;
     * }
     */
    public static void fuji_layout$set(MemorySegment seg, int x) {
        constants$100.const$2.set(seg, x);
    }
    public static int fuji_layout$get(MemorySegment seg, long index) {
        return (int)constants$100.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void fuji_layout$set(MemorySegment seg, long index, int x) {
        constants$100.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tiff_samples$VH() {
        return constants$100.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int tiff_samples;
     * }
     */
    public static int tiff_samples$get(MemorySegment seg) {
        return (int)constants$100.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int tiff_samples;
     * }
     */
    public static void tiff_samples$set(MemorySegment seg, int x) {
        constants$100.const$3.set(seg, x);
    }
    public static int tiff_samples$get(MemorySegment seg, long index) {
        return (int)constants$100.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void tiff_samples$set(MemorySegment seg, long index, int x) {
        constants$100.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tiff_bps$VH() {
        return constants$100.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int tiff_bps;
     * }
     */
    public static int tiff_bps$get(MemorySegment seg) {
        return (int)constants$100.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int tiff_bps;
     * }
     */
    public static void tiff_bps$set(MemorySegment seg, int x) {
        constants$100.const$4.set(seg, x);
    }
    public static int tiff_bps$get(MemorySegment seg, long index) {
        return (int)constants$100.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void tiff_bps$set(MemorySegment seg, long index, int x) {
        constants$100.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tiff_compress$VH() {
        return constants$100.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int tiff_compress;
     * }
     */
    public static int tiff_compress$get(MemorySegment seg) {
        return (int)constants$100.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int tiff_compress;
     * }
     */
    public static void tiff_compress$set(MemorySegment seg, int x) {
        constants$100.const$5.set(seg, x);
    }
    public static int tiff_compress$get(MemorySegment seg, long index) {
        return (int)constants$100.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void tiff_compress$set(MemorySegment seg, long index, int x) {
        constants$100.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tiff_sampleformat$VH() {
        return constants$101.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int tiff_sampleformat;
     * }
     */
    public static int tiff_sampleformat$get(MemorySegment seg) {
        return (int)constants$101.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int tiff_sampleformat;
     * }
     */
    public static void tiff_sampleformat$set(MemorySegment seg, int x) {
        constants$101.const$0.set(seg, x);
    }
    public static int tiff_sampleformat$get(MemorySegment seg, long index) {
        return (int)constants$101.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void tiff_sampleformat$set(MemorySegment seg, long index, int x) {
        constants$101.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle zero_after_ff$VH() {
        return constants$101.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int zero_after_ff;
     * }
     */
    public static int zero_after_ff$get(MemorySegment seg) {
        return (int)constants$101.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int zero_after_ff;
     * }
     */
    public static void zero_after_ff$set(MemorySegment seg, int x) {
        constants$101.const$1.set(seg, x);
    }
    public static int zero_after_ff$get(MemorySegment seg, long index) {
        return (int)constants$101.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void zero_after_ff$set(MemorySegment seg, long index, int x) {
        constants$101.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tile_width$VH() {
        return constants$101.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int tile_width;
     * }
     */
    public static int tile_width$get(MemorySegment seg) {
        return (int)constants$101.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int tile_width;
     * }
     */
    public static void tile_width$set(MemorySegment seg, int x) {
        constants$101.const$2.set(seg, x);
    }
    public static int tile_width$get(MemorySegment seg, long index) {
        return (int)constants$101.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void tile_width$set(MemorySegment seg, long index, int x) {
        constants$101.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tile_length$VH() {
        return constants$101.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int tile_length;
     * }
     */
    public static int tile_length$get(MemorySegment seg) {
        return (int)constants$101.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int tile_length;
     * }
     */
    public static void tile_length$set(MemorySegment seg, int x) {
        constants$101.const$3.set(seg, x);
    }
    public static int tile_length$get(MemorySegment seg, long index) {
        return (int)constants$101.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void tile_length$set(MemorySegment seg, long index, int x) {
        constants$101.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle load_flags$VH() {
        return constants$101.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int load_flags;
     * }
     */
    public static int load_flags$get(MemorySegment seg) {
        return (int)constants$101.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int load_flags;
     * }
     */
    public static void load_flags$set(MemorySegment seg, int x) {
        constants$101.const$4.set(seg, x);
    }
    public static int load_flags$get(MemorySegment seg, long index) {
        return (int)constants$101.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void load_flags$set(MemorySegment seg, long index, int x) {
        constants$101.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle data_error$VH() {
        return constants$101.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int data_error;
     * }
     */
    public static int data_error$get(MemorySegment seg) {
        return (int)constants$101.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int data_error;
     * }
     */
    public static void data_error$set(MemorySegment seg, int x) {
        constants$101.const$5.set(seg, x);
    }
    public static int data_error$get(MemorySegment seg, long index) {
        return (int)constants$101.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void data_error$set(MemorySegment seg, long index, int x) {
        constants$101.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hasselblad_parser_flag$VH() {
        return constants$102.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int hasselblad_parser_flag;
     * }
     */
    public static int hasselblad_parser_flag$get(MemorySegment seg) {
        return (int)constants$102.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int hasselblad_parser_flag;
     * }
     */
    public static void hasselblad_parser_flag$set(MemorySegment seg, int x) {
        constants$102.const$0.set(seg, x);
    }
    public static int hasselblad_parser_flag$get(MemorySegment seg, long index) {
        return (int)constants$102.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void hasselblad_parser_flag$set(MemorySegment seg, long index, int x) {
        constants$102.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle posRAFData$VH() {
        return constants$102.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long posRAFData;
     * }
     */
    public static long posRAFData$get(MemorySegment seg) {
        return (long)constants$102.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long posRAFData;
     * }
     */
    public static void posRAFData$set(MemorySegment seg, long x) {
        constants$102.const$1.set(seg, x);
    }
    public static long posRAFData$get(MemorySegment seg, long index) {
        return (long)constants$102.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void posRAFData$set(MemorySegment seg, long index, long x) {
        constants$102.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lenRAFData$VH() {
        return constants$102.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int lenRAFData;
     * }
     */
    public static int lenRAFData$get(MemorySegment seg) {
        return (int)constants$102.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int lenRAFData;
     * }
     */
    public static void lenRAFData$set(MemorySegment seg, int x) {
        constants$102.const$2.set(seg, x);
    }
    public static int lenRAFData$get(MemorySegment seg, long index) {
        return (int)constants$102.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void lenRAFData$set(MemorySegment seg, long index, int x) {
        constants$102.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fuji_total_lines$VH() {
        return constants$102.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int fuji_total_lines;
     * }
     */
    public static int fuji_total_lines$get(MemorySegment seg) {
        return (int)constants$102.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int fuji_total_lines;
     * }
     */
    public static void fuji_total_lines$set(MemorySegment seg, int x) {
        constants$102.const$3.set(seg, x);
    }
    public static int fuji_total_lines$get(MemorySegment seg, long index) {
        return (int)constants$102.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void fuji_total_lines$set(MemorySegment seg, long index, int x) {
        constants$102.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fuji_total_blocks$VH() {
        return constants$102.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int fuji_total_blocks;
     * }
     */
    public static int fuji_total_blocks$get(MemorySegment seg) {
        return (int)constants$102.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int fuji_total_blocks;
     * }
     */
    public static void fuji_total_blocks$set(MemorySegment seg, int x) {
        constants$102.const$4.set(seg, x);
    }
    public static int fuji_total_blocks$get(MemorySegment seg, long index) {
        return (int)constants$102.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void fuji_total_blocks$set(MemorySegment seg, long index, int x) {
        constants$102.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fuji_block_width$VH() {
        return constants$102.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int fuji_block_width;
     * }
     */
    public static int fuji_block_width$get(MemorySegment seg) {
        return (int)constants$102.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int fuji_block_width;
     * }
     */
    public static void fuji_block_width$set(MemorySegment seg, int x) {
        constants$102.const$5.set(seg, x);
    }
    public static int fuji_block_width$get(MemorySegment seg, long index) {
        return (int)constants$102.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void fuji_block_width$set(MemorySegment seg, long index, int x) {
        constants$102.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fuji_bits$VH() {
        return constants$103.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int fuji_bits;
     * }
     */
    public static int fuji_bits$get(MemorySegment seg) {
        return (int)constants$103.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int fuji_bits;
     * }
     */
    public static void fuji_bits$set(MemorySegment seg, int x) {
        constants$103.const$0.set(seg, x);
    }
    public static int fuji_bits$get(MemorySegment seg, long index) {
        return (int)constants$103.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void fuji_bits$set(MemorySegment seg, long index, int x) {
        constants$103.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fuji_raw_type$VH() {
        return constants$103.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int fuji_raw_type;
     * }
     */
    public static int fuji_raw_type$get(MemorySegment seg) {
        return (int)constants$103.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int fuji_raw_type;
     * }
     */
    public static void fuji_raw_type$set(MemorySegment seg, int x) {
        constants$103.const$1.set(seg, x);
    }
    public static int fuji_raw_type$get(MemorySegment seg, long index) {
        return (int)constants$103.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void fuji_raw_type$set(MemorySegment seg, long index, int x) {
        constants$103.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fuji_lossless$VH() {
        return constants$103.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int fuji_lossless;
     * }
     */
    public static int fuji_lossless$get(MemorySegment seg) {
        return (int)constants$103.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int fuji_lossless;
     * }
     */
    public static void fuji_lossless$set(MemorySegment seg, int x) {
        constants$103.const$2.set(seg, x);
    }
    public static int fuji_lossless$get(MemorySegment seg, long index) {
        return (int)constants$103.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void fuji_lossless$set(MemorySegment seg, long index, int x) {
        constants$103.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pana_encoding$VH() {
        return constants$103.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int pana_encoding;
     * }
     */
    public static int pana_encoding$get(MemorySegment seg) {
        return (int)constants$103.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int pana_encoding;
     * }
     */
    public static void pana_encoding$set(MemorySegment seg, int x) {
        constants$103.const$3.set(seg, x);
    }
    public static int pana_encoding$get(MemorySegment seg, long index) {
        return (int)constants$103.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pana_encoding$set(MemorySegment seg, long index, int x) {
        constants$103.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pana_bpp$VH() {
        return constants$103.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int pana_bpp;
     * }
     */
    public static int pana_bpp$get(MemorySegment seg) {
        return (int)constants$103.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int pana_bpp;
     * }
     */
    public static void pana_bpp$set(MemorySegment seg, int x) {
        constants$103.const$4.set(seg, x);
    }
    public static int pana_bpp$get(MemorySegment seg, long index) {
        return (int)constants$103.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pana_bpp$set(MemorySegment seg, long index, int x) {
        constants$103.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment crx_header$slice(MemorySegment seg) {
        return seg.asSlice(176, 1152);
    }
    public static VarHandle crx_track_selected$VH() {
        return constants$103.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int crx_track_selected;
     * }
     */
    public static int crx_track_selected$get(MemorySegment seg) {
        return (int)constants$103.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int crx_track_selected;
     * }
     */
    public static void crx_track_selected$set(MemorySegment seg, int x) {
        constants$103.const$5.set(seg, x);
    }
    public static int crx_track_selected$get(MemorySegment seg, long index) {
        return (int)constants$103.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void crx_track_selected$set(MemorySegment seg, long index, int x) {
        constants$103.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CR3_CTMDtag$VH() {
        return constants$104.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short CR3_CTMDtag;
     * }
     */
    public static short CR3_CTMDtag$get(MemorySegment seg) {
        return (short)constants$104.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short CR3_CTMDtag;
     * }
     */
    public static void CR3_CTMDtag$set(MemorySegment seg, short x) {
        constants$104.const$0.set(seg, x);
    }
    public static short CR3_CTMDtag$get(MemorySegment seg, long index) {
        return (short)constants$104.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CR3_CTMDtag$set(MemorySegment seg, long index, short x) {
        constants$104.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CR3_Version$VH() {
        return constants$104.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short CR3_Version;
     * }
     */
    public static short CR3_Version$get(MemorySegment seg) {
        return (short)constants$104.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short CR3_Version;
     * }
     */
    public static void CR3_Version$set(MemorySegment seg, short x) {
        constants$104.const$1.set(seg, x);
    }
    public static short CR3_Version$get(MemorySegment seg, long index) {
        return (short)constants$104.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void CR3_Version$set(MemorySegment seg, long index, short x) {
        constants$104.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle CM_found$VH() {
        return constants$104.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int CM_found;
     * }
     */
    public static int CM_found$get(MemorySegment seg) {
        return (int)constants$104.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int CM_found;
     * }
     */
    public static void CM_found$set(MemorySegment seg, int x) {
        constants$104.const$2.set(seg, x);
    }
    public static int CM_found$get(MemorySegment seg, long index) {
        return (int)constants$104.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CM_found$set(MemorySegment seg, long index, int x) {
        constants$104.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle is_NikonTransfer$VH() {
        return constants$104.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int is_NikonTransfer;
     * }
     */
    public static int is_NikonTransfer$get(MemorySegment seg) {
        return (int)constants$104.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int is_NikonTransfer;
     * }
     */
    public static void is_NikonTransfer$set(MemorySegment seg, int x) {
        constants$104.const$3.set(seg, x);
    }
    public static int is_NikonTransfer$get(MemorySegment seg, long index) {
        return (int)constants$104.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void is_NikonTransfer$set(MemorySegment seg, long index, int x) {
        constants$104.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle is_Olympus$VH() {
        return constants$104.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int is_Olympus;
     * }
     */
    public static int is_Olympus$get(MemorySegment seg) {
        return (int)constants$104.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int is_Olympus;
     * }
     */
    public static void is_Olympus$set(MemorySegment seg, int x) {
        constants$104.const$4.set(seg, x);
    }
    public static int is_Olympus$get(MemorySegment seg, long index) {
        return (int)constants$104.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void is_Olympus$set(MemorySegment seg, long index, int x) {
        constants$104.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle OlympusDNG_SubDirOffsetValid$VH() {
        return constants$104.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int OlympusDNG_SubDirOffsetValid;
     * }
     */
    public static int OlympusDNG_SubDirOffsetValid$get(MemorySegment seg) {
        return (int)constants$104.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int OlympusDNG_SubDirOffsetValid;
     * }
     */
    public static void OlympusDNG_SubDirOffsetValid$set(MemorySegment seg, int x) {
        constants$104.const$5.set(seg, x);
    }
    public static int OlympusDNG_SubDirOffsetValid$get(MemorySegment seg, long index) {
        return (int)constants$104.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void OlympusDNG_SubDirOffsetValid$set(MemorySegment seg, long index, int x) {
        constants$104.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle is_Sony$VH() {
        return constants$105.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int is_Sony;
     * }
     */
    public static int is_Sony$get(MemorySegment seg) {
        return (int)constants$105.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int is_Sony;
     * }
     */
    public static void is_Sony$set(MemorySegment seg, int x) {
        constants$105.const$0.set(seg, x);
    }
    public static int is_Sony$get(MemorySegment seg, long index) {
        return (int)constants$105.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void is_Sony$set(MemorySegment seg, long index, int x) {
        constants$105.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle is_pana_raw$VH() {
        return constants$105.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int is_pana_raw;
     * }
     */
    public static int is_pana_raw$get(MemorySegment seg) {
        return (int)constants$105.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int is_pana_raw;
     * }
     */
    public static void is_pana_raw$set(MemorySegment seg, int x) {
        constants$105.const$1.set(seg, x);
    }
    public static int is_pana_raw$get(MemorySegment seg, long index) {
        return (int)constants$105.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void is_pana_raw$set(MemorySegment seg, long index, int x) {
        constants$105.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle is_PentaxRicohMakernotes$VH() {
        return constants$105.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int is_PentaxRicohMakernotes;
     * }
     */
    public static int is_PentaxRicohMakernotes$get(MemorySegment seg) {
        return (int)constants$105.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int is_PentaxRicohMakernotes;
     * }
     */
    public static void is_PentaxRicohMakernotes$set(MemorySegment seg, int x) {
        constants$105.const$2.set(seg, x);
    }
    public static int is_PentaxRicohMakernotes$get(MemorySegment seg, long index) {
        return (int)constants$105.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void is_PentaxRicohMakernotes$set(MemorySegment seg, long index, int x) {
        constants$105.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment dng_frames$slice(MemorySegment seg) {
        return seg.asSlice(1364, 80);
    }
    public static VarHandle raw_stride$VH() {
        return constants$105.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short raw_stride;
     * }
     */
    public static short raw_stride$get(MemorySegment seg) {
        return (short)constants$105.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short raw_stride;
     * }
     */
    public static void raw_stride$set(MemorySegment seg, short x) {
        constants$105.const$3.set(seg, x);
    }
    public static short raw_stride$get(MemorySegment seg, long index) {
        return (short)constants$105.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void raw_stride$set(MemorySegment seg, long index, short x) {
        constants$105.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


