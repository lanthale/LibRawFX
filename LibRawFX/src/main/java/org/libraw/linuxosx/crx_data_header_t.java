// Generated by jextract

package org.libraw.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct crx_data_header_t {
 *     int version;
 *     int f_width;
 *     int f_height;
 *     int tileWidth;
 *     int tileHeight;
 *     int nBits;
 *     int nPlanes;
 *     int cfaLayout;
 *     int encType;
 *     int imageLevels;
 *     int hasTileCols;
 *     int hasTileRows;
 *     int mdatHdrSize;
 *     unsigned int MediaSize;
 *     long long MediaOffset;
 *     unsigned int MediaType;
 * };
 * }
 */
public class crx_data_header_t {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("version"),
        Constants$root.C_INT$LAYOUT.withName("f_width"),
        Constants$root.C_INT$LAYOUT.withName("f_height"),
        Constants$root.C_INT$LAYOUT.withName("tileWidth"),
        Constants$root.C_INT$LAYOUT.withName("tileHeight"),
        Constants$root.C_INT$LAYOUT.withName("nBits"),
        Constants$root.C_INT$LAYOUT.withName("nPlanes"),
        Constants$root.C_INT$LAYOUT.withName("cfaLayout"),
        Constants$root.C_INT$LAYOUT.withName("encType"),
        Constants$root.C_INT$LAYOUT.withName("imageLevels"),
        Constants$root.C_INT$LAYOUT.withName("hasTileCols"),
        Constants$root.C_INT$LAYOUT.withName("hasTileRows"),
        Constants$root.C_INT$LAYOUT.withName("mdatHdrSize"),
        Constants$root.C_INT$LAYOUT.withName("MediaSize"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("MediaOffset"),
        Constants$root.C_INT$LAYOUT.withName("MediaType"),
        MemoryLayout.paddingLayout(32)
    ).withName("crx_data_header_t");
    public static MemoryLayout $LAYOUT() {
        return crx_data_header_t.$struct$LAYOUT;
    }
    static final VarHandle version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("version"));
    public static VarHandle version$VH() {
        return crx_data_header_t.version$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int version;
     * }
     */
    public static int version$get(MemorySegment seg) {
        return (int)crx_data_header_t.version$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int version;
     * }
     */
    public static void version$set(MemorySegment seg, int x) {
        crx_data_header_t.version$VH.set(seg, x);
    }
    public static int version$get(MemorySegment seg, long index) {
        return (int)crx_data_header_t.version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, int x) {
        crx_data_header_t.version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle f_width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("f_width"));
    public static VarHandle f_width$VH() {
        return crx_data_header_t.f_width$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int f_width;
     * }
     */
    public static int f_width$get(MemorySegment seg) {
        return (int)crx_data_header_t.f_width$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int f_width;
     * }
     */
    public static void f_width$set(MemorySegment seg, int x) {
        crx_data_header_t.f_width$VH.set(seg, x);
    }
    public static int f_width$get(MemorySegment seg, long index) {
        return (int)crx_data_header_t.f_width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void f_width$set(MemorySegment seg, long index, int x) {
        crx_data_header_t.f_width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle f_height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("f_height"));
    public static VarHandle f_height$VH() {
        return crx_data_header_t.f_height$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int f_height;
     * }
     */
    public static int f_height$get(MemorySegment seg) {
        return (int)crx_data_header_t.f_height$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int f_height;
     * }
     */
    public static void f_height$set(MemorySegment seg, int x) {
        crx_data_header_t.f_height$VH.set(seg, x);
    }
    public static int f_height$get(MemorySegment seg, long index) {
        return (int)crx_data_header_t.f_height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void f_height$set(MemorySegment seg, long index, int x) {
        crx_data_header_t.f_height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tileWidth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tileWidth"));
    public static VarHandle tileWidth$VH() {
        return crx_data_header_t.tileWidth$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int tileWidth;
     * }
     */
    public static int tileWidth$get(MemorySegment seg) {
        return (int)crx_data_header_t.tileWidth$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int tileWidth;
     * }
     */
    public static void tileWidth$set(MemorySegment seg, int x) {
        crx_data_header_t.tileWidth$VH.set(seg, x);
    }
    public static int tileWidth$get(MemorySegment seg, long index) {
        return (int)crx_data_header_t.tileWidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tileWidth$set(MemorySegment seg, long index, int x) {
        crx_data_header_t.tileWidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tileHeight$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tileHeight"));
    public static VarHandle tileHeight$VH() {
        return crx_data_header_t.tileHeight$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int tileHeight;
     * }
     */
    public static int tileHeight$get(MemorySegment seg) {
        return (int)crx_data_header_t.tileHeight$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int tileHeight;
     * }
     */
    public static void tileHeight$set(MemorySegment seg, int x) {
        crx_data_header_t.tileHeight$VH.set(seg, x);
    }
    public static int tileHeight$get(MemorySegment seg, long index) {
        return (int)crx_data_header_t.tileHeight$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tileHeight$set(MemorySegment seg, long index, int x) {
        crx_data_header_t.tileHeight$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nBits$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nBits"));
    public static VarHandle nBits$VH() {
        return crx_data_header_t.nBits$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int nBits;
     * }
     */
    public static int nBits$get(MemorySegment seg) {
        return (int)crx_data_header_t.nBits$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int nBits;
     * }
     */
    public static void nBits$set(MemorySegment seg, int x) {
        crx_data_header_t.nBits$VH.set(seg, x);
    }
    public static int nBits$get(MemorySegment seg, long index) {
        return (int)crx_data_header_t.nBits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nBits$set(MemorySegment seg, long index, int x) {
        crx_data_header_t.nBits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nPlanes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nPlanes"));
    public static VarHandle nPlanes$VH() {
        return crx_data_header_t.nPlanes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int nPlanes;
     * }
     */
    public static int nPlanes$get(MemorySegment seg) {
        return (int)crx_data_header_t.nPlanes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int nPlanes;
     * }
     */
    public static void nPlanes$set(MemorySegment seg, int x) {
        crx_data_header_t.nPlanes$VH.set(seg, x);
    }
    public static int nPlanes$get(MemorySegment seg, long index) {
        return (int)crx_data_header_t.nPlanes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nPlanes$set(MemorySegment seg, long index, int x) {
        crx_data_header_t.nPlanes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cfaLayout$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cfaLayout"));
    public static VarHandle cfaLayout$VH() {
        return crx_data_header_t.cfaLayout$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int cfaLayout;
     * }
     */
    public static int cfaLayout$get(MemorySegment seg) {
        return (int)crx_data_header_t.cfaLayout$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int cfaLayout;
     * }
     */
    public static void cfaLayout$set(MemorySegment seg, int x) {
        crx_data_header_t.cfaLayout$VH.set(seg, x);
    }
    public static int cfaLayout$get(MemorySegment seg, long index) {
        return (int)crx_data_header_t.cfaLayout$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cfaLayout$set(MemorySegment seg, long index, int x) {
        crx_data_header_t.cfaLayout$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle encType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("encType"));
    public static VarHandle encType$VH() {
        return crx_data_header_t.encType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int encType;
     * }
     */
    public static int encType$get(MemorySegment seg) {
        return (int)crx_data_header_t.encType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int encType;
     * }
     */
    public static void encType$set(MemorySegment seg, int x) {
        crx_data_header_t.encType$VH.set(seg, x);
    }
    public static int encType$get(MemorySegment seg, long index) {
        return (int)crx_data_header_t.encType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void encType$set(MemorySegment seg, long index, int x) {
        crx_data_header_t.encType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle imageLevels$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("imageLevels"));
    public static VarHandle imageLevels$VH() {
        return crx_data_header_t.imageLevels$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int imageLevels;
     * }
     */
    public static int imageLevels$get(MemorySegment seg) {
        return (int)crx_data_header_t.imageLevels$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int imageLevels;
     * }
     */
    public static void imageLevels$set(MemorySegment seg, int x) {
        crx_data_header_t.imageLevels$VH.set(seg, x);
    }
    public static int imageLevels$get(MemorySegment seg, long index) {
        return (int)crx_data_header_t.imageLevels$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void imageLevels$set(MemorySegment seg, long index, int x) {
        crx_data_header_t.imageLevels$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hasTileCols$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hasTileCols"));
    public static VarHandle hasTileCols$VH() {
        return crx_data_header_t.hasTileCols$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int hasTileCols;
     * }
     */
    public static int hasTileCols$get(MemorySegment seg) {
        return (int)crx_data_header_t.hasTileCols$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int hasTileCols;
     * }
     */
    public static void hasTileCols$set(MemorySegment seg, int x) {
        crx_data_header_t.hasTileCols$VH.set(seg, x);
    }
    public static int hasTileCols$get(MemorySegment seg, long index) {
        return (int)crx_data_header_t.hasTileCols$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hasTileCols$set(MemorySegment seg, long index, int x) {
        crx_data_header_t.hasTileCols$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hasTileRows$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hasTileRows"));
    public static VarHandle hasTileRows$VH() {
        return crx_data_header_t.hasTileRows$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int hasTileRows;
     * }
     */
    public static int hasTileRows$get(MemorySegment seg) {
        return (int)crx_data_header_t.hasTileRows$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int hasTileRows;
     * }
     */
    public static void hasTileRows$set(MemorySegment seg, int x) {
        crx_data_header_t.hasTileRows$VH.set(seg, x);
    }
    public static int hasTileRows$get(MemorySegment seg, long index) {
        return (int)crx_data_header_t.hasTileRows$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hasTileRows$set(MemorySegment seg, long index, int x) {
        crx_data_header_t.hasTileRows$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mdatHdrSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mdatHdrSize"));
    public static VarHandle mdatHdrSize$VH() {
        return crx_data_header_t.mdatHdrSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int mdatHdrSize;
     * }
     */
    public static int mdatHdrSize$get(MemorySegment seg) {
        return (int)crx_data_header_t.mdatHdrSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int mdatHdrSize;
     * }
     */
    public static void mdatHdrSize$set(MemorySegment seg, int x) {
        crx_data_header_t.mdatHdrSize$VH.set(seg, x);
    }
    public static int mdatHdrSize$get(MemorySegment seg, long index) {
        return (int)crx_data_header_t.mdatHdrSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mdatHdrSize$set(MemorySegment seg, long index, int x) {
        crx_data_header_t.mdatHdrSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MediaSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MediaSize"));
    public static VarHandle MediaSize$VH() {
        return crx_data_header_t.MediaSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int MediaSize;
     * }
     */
    public static int MediaSize$get(MemorySegment seg) {
        return (int)crx_data_header_t.MediaSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int MediaSize;
     * }
     */
    public static void MediaSize$set(MemorySegment seg, int x) {
        crx_data_header_t.MediaSize$VH.set(seg, x);
    }
    public static int MediaSize$get(MemorySegment seg, long index) {
        return (int)crx_data_header_t.MediaSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MediaSize$set(MemorySegment seg, long index, int x) {
        crx_data_header_t.MediaSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MediaOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MediaOffset"));
    public static VarHandle MediaOffset$VH() {
        return crx_data_header_t.MediaOffset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long MediaOffset;
     * }
     */
    public static long MediaOffset$get(MemorySegment seg) {
        return (long)crx_data_header_t.MediaOffset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long MediaOffset;
     * }
     */
    public static void MediaOffset$set(MemorySegment seg, long x) {
        crx_data_header_t.MediaOffset$VH.set(seg, x);
    }
    public static long MediaOffset$get(MemorySegment seg, long index) {
        return (long)crx_data_header_t.MediaOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MediaOffset$set(MemorySegment seg, long index, long x) {
        crx_data_header_t.MediaOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MediaType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MediaType"));
    public static VarHandle MediaType$VH() {
        return crx_data_header_t.MediaType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int MediaType;
     * }
     */
    public static int MediaType$get(MemorySegment seg) {
        return (int)crx_data_header_t.MediaType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int MediaType;
     * }
     */
    public static void MediaType$set(MemorySegment seg, int x) {
        crx_data_header_t.MediaType$VH.set(seg, x);
    }
    public static int MediaType$get(MemorySegment seg, long index) {
        return (int)crx_data_header_t.MediaType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MediaType$set(MemorySegment seg, long index, int x) {
        crx_data_header_t.MediaType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1); }
}


