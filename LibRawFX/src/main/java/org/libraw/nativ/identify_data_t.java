// Generated by jextract

package org.libraw.nativ;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     unsigned int olympus_exif_cfa;
 *     unsigned long long unique_id;
 *     unsigned long long OlyID;
 *     unsigned int tiff_nifds;
 *     int tiff_flip;
 *     int metadata_blocks;
 * }
 * }
 */
public class identify_data_t {

    identify_data_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        libraw_h.C_INT.withName("olympus_exif_cfa"),
        MemoryLayout.paddingLayout(4),
        libraw_h.C_LONG_LONG.withName("unique_id"),
        libraw_h.C_LONG_LONG.withName("OlyID"),
        libraw_h.C_INT.withName("tiff_nifds"),
        libraw_h.C_INT.withName("tiff_flip"),
        libraw_h.C_INT.withName("metadata_blocks"),
        MemoryLayout.paddingLayout(4)
    ).withName("$anon$106:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt olympus_exif_cfa$LAYOUT = (OfInt)$LAYOUT.select(groupElement("olympus_exif_cfa"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int olympus_exif_cfa
     * }
     */
    public static final OfInt olympus_exif_cfa$layout() {
        return olympus_exif_cfa$LAYOUT;
    }

    private static final long olympus_exif_cfa$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int olympus_exif_cfa
     * }
     */
    public static final long olympus_exif_cfa$offset() {
        return olympus_exif_cfa$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int olympus_exif_cfa
     * }
     */
    public static int olympus_exif_cfa(MemorySegment struct) {
        return struct.get(olympus_exif_cfa$LAYOUT, olympus_exif_cfa$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int olympus_exif_cfa
     * }
     */
    public static void olympus_exif_cfa(MemorySegment struct, int fieldValue) {
        struct.set(olympus_exif_cfa$LAYOUT, olympus_exif_cfa$OFFSET, fieldValue);
    }

    private static final OfLong unique_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("unique_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long long unique_id
     * }
     */
    public static final OfLong unique_id$layout() {
        return unique_id$LAYOUT;
    }

    private static final long unique_id$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long long unique_id
     * }
     */
    public static final long unique_id$offset() {
        return unique_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long long unique_id
     * }
     */
    public static long unique_id(MemorySegment struct) {
        return struct.get(unique_id$LAYOUT, unique_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long long unique_id
     * }
     */
    public static void unique_id(MemorySegment struct, long fieldValue) {
        struct.set(unique_id$LAYOUT, unique_id$OFFSET, fieldValue);
    }

    private static final OfLong OlyID$LAYOUT = (OfLong)$LAYOUT.select(groupElement("OlyID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long long OlyID
     * }
     */
    public static final OfLong OlyID$layout() {
        return OlyID$LAYOUT;
    }

    private static final long OlyID$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long long OlyID
     * }
     */
    public static final long OlyID$offset() {
        return OlyID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long long OlyID
     * }
     */
    public static long OlyID(MemorySegment struct) {
        return struct.get(OlyID$LAYOUT, OlyID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long long OlyID
     * }
     */
    public static void OlyID(MemorySegment struct, long fieldValue) {
        struct.set(OlyID$LAYOUT, OlyID$OFFSET, fieldValue);
    }

    private static final OfInt tiff_nifds$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tiff_nifds"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int tiff_nifds
     * }
     */
    public static final OfInt tiff_nifds$layout() {
        return tiff_nifds$LAYOUT;
    }

    private static final long tiff_nifds$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int tiff_nifds
     * }
     */
    public static final long tiff_nifds$offset() {
        return tiff_nifds$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int tiff_nifds
     * }
     */
    public static int tiff_nifds(MemorySegment struct) {
        return struct.get(tiff_nifds$LAYOUT, tiff_nifds$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int tiff_nifds
     * }
     */
    public static void tiff_nifds(MemorySegment struct, int fieldValue) {
        struct.set(tiff_nifds$LAYOUT, tiff_nifds$OFFSET, fieldValue);
    }

    private static final OfInt tiff_flip$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tiff_flip"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int tiff_flip
     * }
     */
    public static final OfInt tiff_flip$layout() {
        return tiff_flip$LAYOUT;
    }

    private static final long tiff_flip$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int tiff_flip
     * }
     */
    public static final long tiff_flip$offset() {
        return tiff_flip$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int tiff_flip
     * }
     */
    public static int tiff_flip(MemorySegment struct) {
        return struct.get(tiff_flip$LAYOUT, tiff_flip$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int tiff_flip
     * }
     */
    public static void tiff_flip(MemorySegment struct, int fieldValue) {
        struct.set(tiff_flip$LAYOUT, tiff_flip$OFFSET, fieldValue);
    }

    private static final OfInt metadata_blocks$LAYOUT = (OfInt)$LAYOUT.select(groupElement("metadata_blocks"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int metadata_blocks
     * }
     */
    public static final OfInt metadata_blocks$layout() {
        return metadata_blocks$LAYOUT;
    }

    private static final long metadata_blocks$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int metadata_blocks
     * }
     */
    public static final long metadata_blocks$offset() {
        return metadata_blocks$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int metadata_blocks
     * }
     */
    public static int metadata_blocks(MemorySegment struct) {
        return struct.get(metadata_blocks$LAYOUT, metadata_blocks$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int metadata_blocks
     * }
     */
    public static void metadata_blocks(MemorySegment struct, int fieldValue) {
        struct.set(metadata_blocks$LAYOUT, metadata_blocks$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size @code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size @code elementCount} using {@code allocator}.
     * The returned segment has size @code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size @code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size @code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

