// Generated by jextract

package org.libraw.nativ;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     uchar DriveMode[4];
 *     ushort FocusMode[2];
 *     ushort AFPointSelected[2];
 *     ushort AFPointSelected_Area;
 *     int AFPointsInFocus_version;
 *     unsigned int AFPointsInFocus;
 *     ushort FocusPosition;
 *     short AFAdjustment;
 *     uchar AFPointMode;
 *     uchar MultiExposure;
 *     ushort Quality;
 * }
 * }
 */
public class libraw_pentax_makernotes_t {

    libraw_pentax_makernotes_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(4, libraw_h.C_CHAR).withName("DriveMode"),
        MemoryLayout.sequenceLayout(2, libraw_h.C_SHORT).withName("FocusMode"),
        MemoryLayout.sequenceLayout(2, libraw_h.C_SHORT).withName("AFPointSelected"),
        libraw_h.C_SHORT.withName("AFPointSelected_Area"),
        MemoryLayout.paddingLayout(2),
        libraw_h.C_INT.withName("AFPointsInFocus_version"),
        libraw_h.C_INT.withName("AFPointsInFocus"),
        libraw_h.C_SHORT.withName("FocusPosition"),
        libraw_h.C_SHORT.withName("AFAdjustment"),
        libraw_h.C_CHAR.withName("AFPointMode"),
        libraw_h.C_CHAR.withName("MultiExposure"),
        libraw_h.C_SHORT.withName("Quality")
    ).withName("$anon$569:11");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout DriveMode$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("DriveMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uchar DriveMode[4]
     * }
     */
    public static final SequenceLayout DriveMode$layout() {
        return DriveMode$LAYOUT;
    }

    private static final long DriveMode$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uchar DriveMode[4]
     * }
     */
    public static final long DriveMode$offset() {
        return DriveMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uchar DriveMode[4]
     * }
     */
    public static MemorySegment DriveMode(MemorySegment struct) {
        return struct.asSlice(DriveMode$OFFSET, DriveMode$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uchar DriveMode[4]
     * }
     */
    public static void DriveMode(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DriveMode$OFFSET, DriveMode$LAYOUT.byteSize());
    }

    private static long[] DriveMode$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uchar DriveMode[4]
     * }
     */
    public static long[] DriveMode$dimensions() {
        return DriveMode$DIMS;
    }
    private static final VarHandle DriveMode$ELEM_HANDLE = DriveMode$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uchar DriveMode[4]
     * }
     */
    public static byte DriveMode(MemorySegment struct, long index0) {
        return (byte)DriveMode$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uchar DriveMode[4]
     * }
     */
    public static void DriveMode(MemorySegment struct, long index0, byte fieldValue) {
        DriveMode$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout FocusMode$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("FocusMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort FocusMode[2]
     * }
     */
    public static final SequenceLayout FocusMode$layout() {
        return FocusMode$LAYOUT;
    }

    private static final long FocusMode$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort FocusMode[2]
     * }
     */
    public static final long FocusMode$offset() {
        return FocusMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort FocusMode[2]
     * }
     */
    public static MemorySegment FocusMode(MemorySegment struct) {
        return struct.asSlice(FocusMode$OFFSET, FocusMode$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort FocusMode[2]
     * }
     */
    public static void FocusMode(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, FocusMode$OFFSET, FocusMode$LAYOUT.byteSize());
    }

    private static long[] FocusMode$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ushort FocusMode[2]
     * }
     */
    public static long[] FocusMode$dimensions() {
        return FocusMode$DIMS;
    }
    private static final VarHandle FocusMode$ELEM_HANDLE = FocusMode$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ushort FocusMode[2]
     * }
     */
    public static short FocusMode(MemorySegment struct, long index0) {
        return (short)FocusMode$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ushort FocusMode[2]
     * }
     */
    public static void FocusMode(MemorySegment struct, long index0, short fieldValue) {
        FocusMode$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout AFPointSelected$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("AFPointSelected"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort AFPointSelected[2]
     * }
     */
    public static final SequenceLayout AFPointSelected$layout() {
        return AFPointSelected$LAYOUT;
    }

    private static final long AFPointSelected$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort AFPointSelected[2]
     * }
     */
    public static final long AFPointSelected$offset() {
        return AFPointSelected$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort AFPointSelected[2]
     * }
     */
    public static MemorySegment AFPointSelected(MemorySegment struct) {
        return struct.asSlice(AFPointSelected$OFFSET, AFPointSelected$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort AFPointSelected[2]
     * }
     */
    public static void AFPointSelected(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, AFPointSelected$OFFSET, AFPointSelected$LAYOUT.byteSize());
    }

    private static long[] AFPointSelected$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ushort AFPointSelected[2]
     * }
     */
    public static long[] AFPointSelected$dimensions() {
        return AFPointSelected$DIMS;
    }
    private static final VarHandle AFPointSelected$ELEM_HANDLE = AFPointSelected$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ushort AFPointSelected[2]
     * }
     */
    public static short AFPointSelected(MemorySegment struct, long index0) {
        return (short)AFPointSelected$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ushort AFPointSelected[2]
     * }
     */
    public static void AFPointSelected(MemorySegment struct, long index0, short fieldValue) {
        AFPointSelected$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfShort AFPointSelected_Area$LAYOUT = (OfShort)$LAYOUT.select(groupElement("AFPointSelected_Area"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort AFPointSelected_Area
     * }
     */
    public static final OfShort AFPointSelected_Area$layout() {
        return AFPointSelected_Area$LAYOUT;
    }

    private static final long AFPointSelected_Area$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort AFPointSelected_Area
     * }
     */
    public static final long AFPointSelected_Area$offset() {
        return AFPointSelected_Area$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort AFPointSelected_Area
     * }
     */
    public static short AFPointSelected_Area(MemorySegment struct) {
        return struct.get(AFPointSelected_Area$LAYOUT, AFPointSelected_Area$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort AFPointSelected_Area
     * }
     */
    public static void AFPointSelected_Area(MemorySegment struct, short fieldValue) {
        struct.set(AFPointSelected_Area$LAYOUT, AFPointSelected_Area$OFFSET, fieldValue);
    }

    private static final OfInt AFPointsInFocus_version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("AFPointsInFocus_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int AFPointsInFocus_version
     * }
     */
    public static final OfInt AFPointsInFocus_version$layout() {
        return AFPointsInFocus_version$LAYOUT;
    }

    private static final long AFPointsInFocus_version$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int AFPointsInFocus_version
     * }
     */
    public static final long AFPointsInFocus_version$offset() {
        return AFPointsInFocus_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int AFPointsInFocus_version
     * }
     */
    public static int AFPointsInFocus_version(MemorySegment struct) {
        return struct.get(AFPointsInFocus_version$LAYOUT, AFPointsInFocus_version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int AFPointsInFocus_version
     * }
     */
    public static void AFPointsInFocus_version(MemorySegment struct, int fieldValue) {
        struct.set(AFPointsInFocus_version$LAYOUT, AFPointsInFocus_version$OFFSET, fieldValue);
    }

    private static final OfInt AFPointsInFocus$LAYOUT = (OfInt)$LAYOUT.select(groupElement("AFPointsInFocus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int AFPointsInFocus
     * }
     */
    public static final OfInt AFPointsInFocus$layout() {
        return AFPointsInFocus$LAYOUT;
    }

    private static final long AFPointsInFocus$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int AFPointsInFocus
     * }
     */
    public static final long AFPointsInFocus$offset() {
        return AFPointsInFocus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int AFPointsInFocus
     * }
     */
    public static int AFPointsInFocus(MemorySegment struct) {
        return struct.get(AFPointsInFocus$LAYOUT, AFPointsInFocus$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int AFPointsInFocus
     * }
     */
    public static void AFPointsInFocus(MemorySegment struct, int fieldValue) {
        struct.set(AFPointsInFocus$LAYOUT, AFPointsInFocus$OFFSET, fieldValue);
    }

    private static final OfShort FocusPosition$LAYOUT = (OfShort)$LAYOUT.select(groupElement("FocusPosition"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort FocusPosition
     * }
     */
    public static final OfShort FocusPosition$layout() {
        return FocusPosition$LAYOUT;
    }

    private static final long FocusPosition$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort FocusPosition
     * }
     */
    public static final long FocusPosition$offset() {
        return FocusPosition$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort FocusPosition
     * }
     */
    public static short FocusPosition(MemorySegment struct) {
        return struct.get(FocusPosition$LAYOUT, FocusPosition$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort FocusPosition
     * }
     */
    public static void FocusPosition(MemorySegment struct, short fieldValue) {
        struct.set(FocusPosition$LAYOUT, FocusPosition$OFFSET, fieldValue);
    }

    private static final OfShort AFAdjustment$LAYOUT = (OfShort)$LAYOUT.select(groupElement("AFAdjustment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short AFAdjustment
     * }
     */
    public static final OfShort AFAdjustment$layout() {
        return AFAdjustment$LAYOUT;
    }

    private static final long AFAdjustment$OFFSET = 26;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short AFAdjustment
     * }
     */
    public static final long AFAdjustment$offset() {
        return AFAdjustment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short AFAdjustment
     * }
     */
    public static short AFAdjustment(MemorySegment struct) {
        return struct.get(AFAdjustment$LAYOUT, AFAdjustment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short AFAdjustment
     * }
     */
    public static void AFAdjustment(MemorySegment struct, short fieldValue) {
        struct.set(AFAdjustment$LAYOUT, AFAdjustment$OFFSET, fieldValue);
    }

    private static final OfByte AFPointMode$LAYOUT = (OfByte)$LAYOUT.select(groupElement("AFPointMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uchar AFPointMode
     * }
     */
    public static final OfByte AFPointMode$layout() {
        return AFPointMode$LAYOUT;
    }

    private static final long AFPointMode$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uchar AFPointMode
     * }
     */
    public static final long AFPointMode$offset() {
        return AFPointMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uchar AFPointMode
     * }
     */
    public static byte AFPointMode(MemorySegment struct) {
        return struct.get(AFPointMode$LAYOUT, AFPointMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uchar AFPointMode
     * }
     */
    public static void AFPointMode(MemorySegment struct, byte fieldValue) {
        struct.set(AFPointMode$LAYOUT, AFPointMode$OFFSET, fieldValue);
    }

    private static final OfByte MultiExposure$LAYOUT = (OfByte)$LAYOUT.select(groupElement("MultiExposure"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uchar MultiExposure
     * }
     */
    public static final OfByte MultiExposure$layout() {
        return MultiExposure$LAYOUT;
    }

    private static final long MultiExposure$OFFSET = 29;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uchar MultiExposure
     * }
     */
    public static final long MultiExposure$offset() {
        return MultiExposure$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uchar MultiExposure
     * }
     */
    public static byte MultiExposure(MemorySegment struct) {
        return struct.get(MultiExposure$LAYOUT, MultiExposure$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uchar MultiExposure
     * }
     */
    public static void MultiExposure(MemorySegment struct, byte fieldValue) {
        struct.set(MultiExposure$LAYOUT, MultiExposure$OFFSET, fieldValue);
    }

    private static final OfShort Quality$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Quality"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort Quality
     * }
     */
    public static final OfShort Quality$layout() {
        return Quality$LAYOUT;
    }

    private static final long Quality$OFFSET = 30;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort Quality
     * }
     */
    public static final long Quality$offset() {
        return Quality$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort Quality
     * }
     */
    public static short Quality(MemorySegment struct) {
        return struct.get(Quality$LAYOUT, Quality$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort Quality
     * }
     */
    public static void Quality(MemorySegment struct, short fieldValue) {
        struct.set(Quality$LAYOUT, Quality$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size @code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size @code elementCount} using {@code allocator}.
     * The returned segment has size @code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size @code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size @code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

