// Generated by jextract

package org.libraw.nativ;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     char Software[64];
 *     char SystemType[64];
 *     char FirmwareString[256];
 *     char SystemModel[64];
 * }
 * }
 */
public class libraw_p1_makernotes_t {

    libraw_p1_makernotes_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(64, libraw_h.C_CHAR).withName("Software"),
        MemoryLayout.sequenceLayout(64, libraw_h.C_CHAR).withName("SystemType"),
        MemoryLayout.sequenceLayout(256, libraw_h.C_CHAR).withName("FirmwareString"),
        MemoryLayout.sequenceLayout(64, libraw_h.C_CHAR).withName("SystemModel")
    ).withName("$anon$634:11");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout Software$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Software"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char Software[64]
     * }
     */
    public static final SequenceLayout Software$layout() {
        return Software$LAYOUT;
    }

    private static final long Software$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char Software[64]
     * }
     */
    public static final long Software$offset() {
        return Software$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char Software[64]
     * }
     */
    public static MemorySegment Software(MemorySegment struct) {
        return struct.asSlice(Software$OFFSET, Software$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char Software[64]
     * }
     */
    public static void Software(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Software$OFFSET, Software$LAYOUT.byteSize());
    }

    private static long[] Software$DIMS = { 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char Software[64]
     * }
     */
    public static long[] Software$dimensions() {
        return Software$DIMS;
    }
    private static final VarHandle Software$ELEM_HANDLE = Software$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char Software[64]
     * }
     */
    public static byte Software(MemorySegment struct, long index0) {
        return (byte)Software$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char Software[64]
     * }
     */
    public static void Software(MemorySegment struct, long index0, byte fieldValue) {
        Software$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout SystemType$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("SystemType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char SystemType[64]
     * }
     */
    public static final SequenceLayout SystemType$layout() {
        return SystemType$LAYOUT;
    }

    private static final long SystemType$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char SystemType[64]
     * }
     */
    public static final long SystemType$offset() {
        return SystemType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char SystemType[64]
     * }
     */
    public static MemorySegment SystemType(MemorySegment struct) {
        return struct.asSlice(SystemType$OFFSET, SystemType$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char SystemType[64]
     * }
     */
    public static void SystemType(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SystemType$OFFSET, SystemType$LAYOUT.byteSize());
    }

    private static long[] SystemType$DIMS = { 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char SystemType[64]
     * }
     */
    public static long[] SystemType$dimensions() {
        return SystemType$DIMS;
    }
    private static final VarHandle SystemType$ELEM_HANDLE = SystemType$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char SystemType[64]
     * }
     */
    public static byte SystemType(MemorySegment struct, long index0) {
        return (byte)SystemType$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char SystemType[64]
     * }
     */
    public static void SystemType(MemorySegment struct, long index0, byte fieldValue) {
        SystemType$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout FirmwareString$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("FirmwareString"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char FirmwareString[256]
     * }
     */
    public static final SequenceLayout FirmwareString$layout() {
        return FirmwareString$LAYOUT;
    }

    private static final long FirmwareString$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char FirmwareString[256]
     * }
     */
    public static final long FirmwareString$offset() {
        return FirmwareString$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char FirmwareString[256]
     * }
     */
    public static MemorySegment FirmwareString(MemorySegment struct) {
        return struct.asSlice(FirmwareString$OFFSET, FirmwareString$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char FirmwareString[256]
     * }
     */
    public static void FirmwareString(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, FirmwareString$OFFSET, FirmwareString$LAYOUT.byteSize());
    }

    private static long[] FirmwareString$DIMS = { 256 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char FirmwareString[256]
     * }
     */
    public static long[] FirmwareString$dimensions() {
        return FirmwareString$DIMS;
    }
    private static final VarHandle FirmwareString$ELEM_HANDLE = FirmwareString$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char FirmwareString[256]
     * }
     */
    public static byte FirmwareString(MemorySegment struct, long index0) {
        return (byte)FirmwareString$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char FirmwareString[256]
     * }
     */
    public static void FirmwareString(MemorySegment struct, long index0, byte fieldValue) {
        FirmwareString$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout SystemModel$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("SystemModel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char SystemModel[64]
     * }
     */
    public static final SequenceLayout SystemModel$layout() {
        return SystemModel$LAYOUT;
    }

    private static final long SystemModel$OFFSET = 384;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char SystemModel[64]
     * }
     */
    public static final long SystemModel$offset() {
        return SystemModel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char SystemModel[64]
     * }
     */
    public static MemorySegment SystemModel(MemorySegment struct) {
        return struct.asSlice(SystemModel$OFFSET, SystemModel$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char SystemModel[64]
     * }
     */
    public static void SystemModel(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SystemModel$OFFSET, SystemModel$LAYOUT.byteSize());
    }

    private static long[] SystemModel$DIMS = { 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char SystemModel[64]
     * }
     */
    public static long[] SystemModel$dimensions() {
        return SystemModel$DIMS;
    }
    private static final VarHandle SystemModel$ELEM_HANDLE = SystemModel$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char SystemModel[64]
     * }
     */
    public static byte SystemModel(MemorySegment struct, long index0) {
        return (byte)SystemModel$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char SystemModel[64]
     * }
     */
    public static void SystemModel(MemorySegment struct, long index0, byte fieldValue) {
        SystemModel$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

