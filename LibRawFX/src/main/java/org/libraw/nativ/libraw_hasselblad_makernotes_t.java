// Generated by jextract

package org.libraw.nativ;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     int BaseISO;
 *     double Gain;
 *     char Sensor[8];
 *     char SensorUnit[64];
 *     char HostBody[64];
 *     int SensorCode;
 *     int SensorSubCode;
 *     int CoatingCode;
 *     int uncropped;
 *     char CaptureSequenceInitiator[32];
 *     char SensorUnitConnector[64];
 *     int format;
 *     int nIFD_CM[2];
 *     int RecommendedCrop[2];
 *     double mnColorMatrix[4][3];
 * }
 * }
 */
public class libraw_hasselblad_makernotes_t {

    libraw_hasselblad_makernotes_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        libraw_h.C_INT.withName("BaseISO"),
        MemoryLayout.paddingLayout(4),
        libraw_h.C_DOUBLE.withName("Gain"),
        MemoryLayout.sequenceLayout(8, libraw_h.C_CHAR).withName("Sensor"),
        MemoryLayout.sequenceLayout(64, libraw_h.C_CHAR).withName("SensorUnit"),
        MemoryLayout.sequenceLayout(64, libraw_h.C_CHAR).withName("HostBody"),
        libraw_h.C_INT.withName("SensorCode"),
        libraw_h.C_INT.withName("SensorSubCode"),
        libraw_h.C_INT.withName("CoatingCode"),
        libraw_h.C_INT.withName("uncropped"),
        MemoryLayout.sequenceLayout(32, libraw_h.C_CHAR).withName("CaptureSequenceInitiator"),
        MemoryLayout.sequenceLayout(64, libraw_h.C_CHAR).withName("SensorUnitConnector"),
        libraw_h.C_INT.withName("format"),
        MemoryLayout.sequenceLayout(2, libraw_h.C_INT).withName("nIFD_CM"),
        MemoryLayout.sequenceLayout(2, libraw_h.C_INT).withName("RecommendedCrop"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(3, libraw_h.C_DOUBLE)).withName("mnColorMatrix")
    ).withName("$anon$321:11");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt BaseISO$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BaseISO"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int BaseISO
     * }
     */
    public static final OfInt BaseISO$layout() {
        return BaseISO$LAYOUT;
    }

    private static final long BaseISO$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int BaseISO
     * }
     */
    public static final long BaseISO$offset() {
        return BaseISO$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int BaseISO
     * }
     */
    public static int BaseISO(MemorySegment struct) {
        return struct.get(BaseISO$LAYOUT, BaseISO$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int BaseISO
     * }
     */
    public static void BaseISO(MemorySegment struct, int fieldValue) {
        struct.set(BaseISO$LAYOUT, BaseISO$OFFSET, fieldValue);
    }

    private static final OfDouble Gain$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("Gain"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double Gain
     * }
     */
    public static final OfDouble Gain$layout() {
        return Gain$LAYOUT;
    }

    private static final long Gain$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double Gain
     * }
     */
    public static final long Gain$offset() {
        return Gain$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double Gain
     * }
     */
    public static double Gain(MemorySegment struct) {
        return struct.get(Gain$LAYOUT, Gain$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double Gain
     * }
     */
    public static void Gain(MemorySegment struct, double fieldValue) {
        struct.set(Gain$LAYOUT, Gain$OFFSET, fieldValue);
    }

    private static final SequenceLayout Sensor$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Sensor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char Sensor[8]
     * }
     */
    public static final SequenceLayout Sensor$layout() {
        return Sensor$LAYOUT;
    }

    private static final long Sensor$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char Sensor[8]
     * }
     */
    public static final long Sensor$offset() {
        return Sensor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char Sensor[8]
     * }
     */
    public static MemorySegment Sensor(MemorySegment struct) {
        return struct.asSlice(Sensor$OFFSET, Sensor$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char Sensor[8]
     * }
     */
    public static void Sensor(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Sensor$OFFSET, Sensor$LAYOUT.byteSize());
    }

    private static long[] Sensor$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char Sensor[8]
     * }
     */
    public static long[] Sensor$dimensions() {
        return Sensor$DIMS;
    }
    private static final VarHandle Sensor$ELEM_HANDLE = Sensor$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char Sensor[8]
     * }
     */
    public static byte Sensor(MemorySegment struct, long index0) {
        return (byte)Sensor$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char Sensor[8]
     * }
     */
    public static void Sensor(MemorySegment struct, long index0, byte fieldValue) {
        Sensor$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout SensorUnit$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("SensorUnit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char SensorUnit[64]
     * }
     */
    public static final SequenceLayout SensorUnit$layout() {
        return SensorUnit$LAYOUT;
    }

    private static final long SensorUnit$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char SensorUnit[64]
     * }
     */
    public static final long SensorUnit$offset() {
        return SensorUnit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char SensorUnit[64]
     * }
     */
    public static MemorySegment SensorUnit(MemorySegment struct) {
        return struct.asSlice(SensorUnit$OFFSET, SensorUnit$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char SensorUnit[64]
     * }
     */
    public static void SensorUnit(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SensorUnit$OFFSET, SensorUnit$LAYOUT.byteSize());
    }

    private static long[] SensorUnit$DIMS = { 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char SensorUnit[64]
     * }
     */
    public static long[] SensorUnit$dimensions() {
        return SensorUnit$DIMS;
    }
    private static final VarHandle SensorUnit$ELEM_HANDLE = SensorUnit$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char SensorUnit[64]
     * }
     */
    public static byte SensorUnit(MemorySegment struct, long index0) {
        return (byte)SensorUnit$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char SensorUnit[64]
     * }
     */
    public static void SensorUnit(MemorySegment struct, long index0, byte fieldValue) {
        SensorUnit$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout HostBody$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("HostBody"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char HostBody[64]
     * }
     */
    public static final SequenceLayout HostBody$layout() {
        return HostBody$LAYOUT;
    }

    private static final long HostBody$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char HostBody[64]
     * }
     */
    public static final long HostBody$offset() {
        return HostBody$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char HostBody[64]
     * }
     */
    public static MemorySegment HostBody(MemorySegment struct) {
        return struct.asSlice(HostBody$OFFSET, HostBody$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char HostBody[64]
     * }
     */
    public static void HostBody(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, HostBody$OFFSET, HostBody$LAYOUT.byteSize());
    }

    private static long[] HostBody$DIMS = { 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char HostBody[64]
     * }
     */
    public static long[] HostBody$dimensions() {
        return HostBody$DIMS;
    }
    private static final VarHandle HostBody$ELEM_HANDLE = HostBody$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char HostBody[64]
     * }
     */
    public static byte HostBody(MemorySegment struct, long index0) {
        return (byte)HostBody$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char HostBody[64]
     * }
     */
    public static void HostBody(MemorySegment struct, long index0, byte fieldValue) {
        HostBody$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt SensorCode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SensorCode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int SensorCode
     * }
     */
    public static final OfInt SensorCode$layout() {
        return SensorCode$LAYOUT;
    }

    private static final long SensorCode$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int SensorCode
     * }
     */
    public static final long SensorCode$offset() {
        return SensorCode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int SensorCode
     * }
     */
    public static int SensorCode(MemorySegment struct) {
        return struct.get(SensorCode$LAYOUT, SensorCode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int SensorCode
     * }
     */
    public static void SensorCode(MemorySegment struct, int fieldValue) {
        struct.set(SensorCode$LAYOUT, SensorCode$OFFSET, fieldValue);
    }

    private static final OfInt SensorSubCode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SensorSubCode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int SensorSubCode
     * }
     */
    public static final OfInt SensorSubCode$layout() {
        return SensorSubCode$LAYOUT;
    }

    private static final long SensorSubCode$OFFSET = 156;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int SensorSubCode
     * }
     */
    public static final long SensorSubCode$offset() {
        return SensorSubCode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int SensorSubCode
     * }
     */
    public static int SensorSubCode(MemorySegment struct) {
        return struct.get(SensorSubCode$LAYOUT, SensorSubCode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int SensorSubCode
     * }
     */
    public static void SensorSubCode(MemorySegment struct, int fieldValue) {
        struct.set(SensorSubCode$LAYOUT, SensorSubCode$OFFSET, fieldValue);
    }

    private static final OfInt CoatingCode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("CoatingCode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int CoatingCode
     * }
     */
    public static final OfInt CoatingCode$layout() {
        return CoatingCode$LAYOUT;
    }

    private static final long CoatingCode$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int CoatingCode
     * }
     */
    public static final long CoatingCode$offset() {
        return CoatingCode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int CoatingCode
     * }
     */
    public static int CoatingCode(MemorySegment struct) {
        return struct.get(CoatingCode$LAYOUT, CoatingCode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int CoatingCode
     * }
     */
    public static void CoatingCode(MemorySegment struct, int fieldValue) {
        struct.set(CoatingCode$LAYOUT, CoatingCode$OFFSET, fieldValue);
    }

    private static final OfInt uncropped$LAYOUT = (OfInt)$LAYOUT.select(groupElement("uncropped"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int uncropped
     * }
     */
    public static final OfInt uncropped$layout() {
        return uncropped$LAYOUT;
    }

    private static final long uncropped$OFFSET = 164;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int uncropped
     * }
     */
    public static final long uncropped$offset() {
        return uncropped$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int uncropped
     * }
     */
    public static int uncropped(MemorySegment struct) {
        return struct.get(uncropped$LAYOUT, uncropped$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int uncropped
     * }
     */
    public static void uncropped(MemorySegment struct, int fieldValue) {
        struct.set(uncropped$LAYOUT, uncropped$OFFSET, fieldValue);
    }

    private static final SequenceLayout CaptureSequenceInitiator$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("CaptureSequenceInitiator"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char CaptureSequenceInitiator[32]
     * }
     */
    public static final SequenceLayout CaptureSequenceInitiator$layout() {
        return CaptureSequenceInitiator$LAYOUT;
    }

    private static final long CaptureSequenceInitiator$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char CaptureSequenceInitiator[32]
     * }
     */
    public static final long CaptureSequenceInitiator$offset() {
        return CaptureSequenceInitiator$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char CaptureSequenceInitiator[32]
     * }
     */
    public static MemorySegment CaptureSequenceInitiator(MemorySegment struct) {
        return struct.asSlice(CaptureSequenceInitiator$OFFSET, CaptureSequenceInitiator$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char CaptureSequenceInitiator[32]
     * }
     */
    public static void CaptureSequenceInitiator(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, CaptureSequenceInitiator$OFFSET, CaptureSequenceInitiator$LAYOUT.byteSize());
    }

    private static long[] CaptureSequenceInitiator$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char CaptureSequenceInitiator[32]
     * }
     */
    public static long[] CaptureSequenceInitiator$dimensions() {
        return CaptureSequenceInitiator$DIMS;
    }
    private static final VarHandle CaptureSequenceInitiator$ELEM_HANDLE = CaptureSequenceInitiator$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char CaptureSequenceInitiator[32]
     * }
     */
    public static byte CaptureSequenceInitiator(MemorySegment struct, long index0) {
        return (byte)CaptureSequenceInitiator$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char CaptureSequenceInitiator[32]
     * }
     */
    public static void CaptureSequenceInitiator(MemorySegment struct, long index0, byte fieldValue) {
        CaptureSequenceInitiator$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout SensorUnitConnector$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("SensorUnitConnector"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char SensorUnitConnector[64]
     * }
     */
    public static final SequenceLayout SensorUnitConnector$layout() {
        return SensorUnitConnector$LAYOUT;
    }

    private static final long SensorUnitConnector$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char SensorUnitConnector[64]
     * }
     */
    public static final long SensorUnitConnector$offset() {
        return SensorUnitConnector$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char SensorUnitConnector[64]
     * }
     */
    public static MemorySegment SensorUnitConnector(MemorySegment struct) {
        return struct.asSlice(SensorUnitConnector$OFFSET, SensorUnitConnector$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char SensorUnitConnector[64]
     * }
     */
    public static void SensorUnitConnector(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SensorUnitConnector$OFFSET, SensorUnitConnector$LAYOUT.byteSize());
    }

    private static long[] SensorUnitConnector$DIMS = { 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char SensorUnitConnector[64]
     * }
     */
    public static long[] SensorUnitConnector$dimensions() {
        return SensorUnitConnector$DIMS;
    }
    private static final VarHandle SensorUnitConnector$ELEM_HANDLE = SensorUnitConnector$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char SensorUnitConnector[64]
     * }
     */
    public static byte SensorUnitConnector(MemorySegment struct, long index0) {
        return (byte)SensorUnitConnector$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char SensorUnitConnector[64]
     * }
     */
    public static void SensorUnitConnector(MemorySegment struct, long index0, byte fieldValue) {
        SensorUnitConnector$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt format$LAYOUT = (OfInt)$LAYOUT.select(groupElement("format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int format
     * }
     */
    public static final OfInt format$layout() {
        return format$LAYOUT;
    }

    private static final long format$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int format
     * }
     */
    public static final long format$offset() {
        return format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int format
     * }
     */
    public static int format(MemorySegment struct) {
        return struct.get(format$LAYOUT, format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int format
     * }
     */
    public static void format(MemorySegment struct, int fieldValue) {
        struct.set(format$LAYOUT, format$OFFSET, fieldValue);
    }

    private static final SequenceLayout nIFD_CM$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("nIFD_CM"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int nIFD_CM[2]
     * }
     */
    public static final SequenceLayout nIFD_CM$layout() {
        return nIFD_CM$LAYOUT;
    }

    private static final long nIFD_CM$OFFSET = 268;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int nIFD_CM[2]
     * }
     */
    public static final long nIFD_CM$offset() {
        return nIFD_CM$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int nIFD_CM[2]
     * }
     */
    public static MemorySegment nIFD_CM(MemorySegment struct) {
        return struct.asSlice(nIFD_CM$OFFSET, nIFD_CM$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int nIFD_CM[2]
     * }
     */
    public static void nIFD_CM(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, nIFD_CM$OFFSET, nIFD_CM$LAYOUT.byteSize());
    }

    private static long[] nIFD_CM$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int nIFD_CM[2]
     * }
     */
    public static long[] nIFD_CM$dimensions() {
        return nIFD_CM$DIMS;
    }
    private static final VarHandle nIFD_CM$ELEM_HANDLE = nIFD_CM$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int nIFD_CM[2]
     * }
     */
    public static int nIFD_CM(MemorySegment struct, long index0) {
        return (int)nIFD_CM$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int nIFD_CM[2]
     * }
     */
    public static void nIFD_CM(MemorySegment struct, long index0, int fieldValue) {
        nIFD_CM$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout RecommendedCrop$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("RecommendedCrop"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int RecommendedCrop[2]
     * }
     */
    public static final SequenceLayout RecommendedCrop$layout() {
        return RecommendedCrop$LAYOUT;
    }

    private static final long RecommendedCrop$OFFSET = 276;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int RecommendedCrop[2]
     * }
     */
    public static final long RecommendedCrop$offset() {
        return RecommendedCrop$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int RecommendedCrop[2]
     * }
     */
    public static MemorySegment RecommendedCrop(MemorySegment struct) {
        return struct.asSlice(RecommendedCrop$OFFSET, RecommendedCrop$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int RecommendedCrop[2]
     * }
     */
    public static void RecommendedCrop(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, RecommendedCrop$OFFSET, RecommendedCrop$LAYOUT.byteSize());
    }

    private static long[] RecommendedCrop$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int RecommendedCrop[2]
     * }
     */
    public static long[] RecommendedCrop$dimensions() {
        return RecommendedCrop$DIMS;
    }
    private static final VarHandle RecommendedCrop$ELEM_HANDLE = RecommendedCrop$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int RecommendedCrop[2]
     * }
     */
    public static int RecommendedCrop(MemorySegment struct, long index0) {
        return (int)RecommendedCrop$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int RecommendedCrop[2]
     * }
     */
    public static void RecommendedCrop(MemorySegment struct, long index0, int fieldValue) {
        RecommendedCrop$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout mnColorMatrix$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("mnColorMatrix"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double mnColorMatrix[4][3]
     * }
     */
    public static final SequenceLayout mnColorMatrix$layout() {
        return mnColorMatrix$LAYOUT;
    }

    private static final long mnColorMatrix$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double mnColorMatrix[4][3]
     * }
     */
    public static final long mnColorMatrix$offset() {
        return mnColorMatrix$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double mnColorMatrix[4][3]
     * }
     */
    public static MemorySegment mnColorMatrix(MemorySegment struct) {
        return struct.asSlice(mnColorMatrix$OFFSET, mnColorMatrix$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double mnColorMatrix[4][3]
     * }
     */
    public static void mnColorMatrix(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, mnColorMatrix$OFFSET, mnColorMatrix$LAYOUT.byteSize());
    }

    private static long[] mnColorMatrix$DIMS = { 4, 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * double mnColorMatrix[4][3]
     * }
     */
    public static long[] mnColorMatrix$dimensions() {
        return mnColorMatrix$DIMS;
    }
    private static final VarHandle mnColorMatrix$ELEM_HANDLE = mnColorMatrix$LAYOUT.varHandle(sequenceElement(), sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * double mnColorMatrix[4][3]
     * }
     */
    public static double mnColorMatrix(MemorySegment struct, long index0, long index1) {
        return (double)mnColorMatrix$ELEM_HANDLE.get(struct, 0L, index0, index1);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * double mnColorMatrix[4][3]
     * }
     */
    public static void mnColorMatrix(MemorySegment struct, long index0, long index1, double fieldValue) {
        mnColorMatrix$ELEM_HANDLE.set(struct, 0L, index0, index1, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size @code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size @code elementCount} using {@code allocator}.
     * The returned segment has size @code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size @code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size @code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

