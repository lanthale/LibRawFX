// Generated by jextract

package org.libraw.nativ;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     float MinFocal;
 *     float MaxFocal;
 *     float MaxAp4MinFocal;
 *     float MaxAp4MaxFocal;
 * }
 * }
 */
public class libraw_dnglens_t {

    libraw_dnglens_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        libraw_h.C_FLOAT.withName("MinFocal"),
        libraw_h.C_FLOAT.withName("MaxFocal"),
        libraw_h.C_FLOAT.withName("MaxAp4MinFocal"),
        libraw_h.C_FLOAT.withName("MaxAp4MaxFocal")
    ).withName("$anon$1013:11");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfFloat MinFocal$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("MinFocal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float MinFocal
     * }
     */
    public static final OfFloat MinFocal$layout() {
        return MinFocal$LAYOUT;
    }

    private static final long MinFocal$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float MinFocal
     * }
     */
    public static final long MinFocal$offset() {
        return MinFocal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float MinFocal
     * }
     */
    public static float MinFocal(MemorySegment struct) {
        return struct.get(MinFocal$LAYOUT, MinFocal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float MinFocal
     * }
     */
    public static void MinFocal(MemorySegment struct, float fieldValue) {
        struct.set(MinFocal$LAYOUT, MinFocal$OFFSET, fieldValue);
    }

    private static final OfFloat MaxFocal$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("MaxFocal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float MaxFocal
     * }
     */
    public static final OfFloat MaxFocal$layout() {
        return MaxFocal$LAYOUT;
    }

    private static final long MaxFocal$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float MaxFocal
     * }
     */
    public static final long MaxFocal$offset() {
        return MaxFocal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float MaxFocal
     * }
     */
    public static float MaxFocal(MemorySegment struct) {
        return struct.get(MaxFocal$LAYOUT, MaxFocal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float MaxFocal
     * }
     */
    public static void MaxFocal(MemorySegment struct, float fieldValue) {
        struct.set(MaxFocal$LAYOUT, MaxFocal$OFFSET, fieldValue);
    }

    private static final OfFloat MaxAp4MinFocal$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("MaxAp4MinFocal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float MaxAp4MinFocal
     * }
     */
    public static final OfFloat MaxAp4MinFocal$layout() {
        return MaxAp4MinFocal$LAYOUT;
    }

    private static final long MaxAp4MinFocal$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float MaxAp4MinFocal
     * }
     */
    public static final long MaxAp4MinFocal$offset() {
        return MaxAp4MinFocal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float MaxAp4MinFocal
     * }
     */
    public static float MaxAp4MinFocal(MemorySegment struct) {
        return struct.get(MaxAp4MinFocal$LAYOUT, MaxAp4MinFocal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float MaxAp4MinFocal
     * }
     */
    public static void MaxAp4MinFocal(MemorySegment struct, float fieldValue) {
        struct.set(MaxAp4MinFocal$LAYOUT, MaxAp4MinFocal$OFFSET, fieldValue);
    }

    private static final OfFloat MaxAp4MaxFocal$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("MaxAp4MaxFocal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float MaxAp4MaxFocal
     * }
     */
    public static final OfFloat MaxAp4MaxFocal$layout() {
        return MaxAp4MaxFocal$LAYOUT;
    }

    private static final long MaxAp4MaxFocal$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float MaxAp4MaxFocal
     * }
     */
    public static final long MaxAp4MaxFocal$offset() {
        return MaxAp4MaxFocal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float MaxAp4MaxFocal
     * }
     */
    public static float MaxAp4MaxFocal(MemorySegment struct) {
        return struct.get(MaxAp4MaxFocal$LAYOUT, MaxAp4MaxFocal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float MaxAp4MaxFocal
     * }
     */
    public static void MaxAp4MaxFocal(MemorySegment struct, float fieldValue) {
        struct.set(MaxAp4MaxFocal$LAYOUT, MaxAp4MaxFocal$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size @code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size @code elementCount} using {@code allocator}.
     * The returned segment has size @code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size @code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size @code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

