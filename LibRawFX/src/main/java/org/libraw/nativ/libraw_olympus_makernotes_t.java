// Generated by jextract

package org.libraw.nativ;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     char CameraType2[6];
 *     ushort ValidBits;
 *     int SensorCalibration[2];
 *     ushort DriveMode[5];
 *     ushort ColorSpace;
 *     ushort FocusMode[2];
 *     ushort AutoFocus;
 *     ushort AFPoint;
 *     unsigned int AFAreas[64];
 *     double AFPointSelected[5];
 *     ushort AFResult;
 *     uchar AFFineTune;
 *     short AFFineTuneAdj[3];
 *     unsigned int SpecialMode[3];
 *     ushort ZoomStepCount;
 *     ushort FocusStepCount;
 *     ushort FocusStepInfinity;
 *     ushort FocusStepNear;
 *     double FocusDistance;
 *     ushort AspectFrame[4];
 *     unsigned int StackedImage[2];
 *     uchar isLiveND;
 *     unsigned int LiveNDfactor;
 *     ushort Panorama_mode;
 *     ushort Panorama_frameNum;
 * }
 * }
 */
public class libraw_olympus_makernotes_t {

    libraw_olympus_makernotes_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(6, libraw_h.C_CHAR).withName("CameraType2"),
        libraw_h.C_SHORT.withName("ValidBits"),
        MemoryLayout.sequenceLayout(2, libraw_h.C_INT).withName("SensorCalibration"),
        MemoryLayout.sequenceLayout(5, libraw_h.C_SHORT).withName("DriveMode"),
        libraw_h.C_SHORT.withName("ColorSpace"),
        MemoryLayout.sequenceLayout(2, libraw_h.C_SHORT).withName("FocusMode"),
        libraw_h.C_SHORT.withName("AutoFocus"),
        libraw_h.C_SHORT.withName("AFPoint"),
        MemoryLayout.sequenceLayout(64, libraw_h.C_INT).withName("AFAreas"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.sequenceLayout(5, libraw_h.C_DOUBLE).withName("AFPointSelected"),
        libraw_h.C_SHORT.withName("AFResult"),
        libraw_h.C_CHAR.withName("AFFineTune"),
        MemoryLayout.paddingLayout(1),
        MemoryLayout.sequenceLayout(3, libraw_h.C_SHORT).withName("AFFineTuneAdj"),
        MemoryLayout.paddingLayout(2),
        MemoryLayout.sequenceLayout(3, libraw_h.C_INT).withName("SpecialMode"),
        libraw_h.C_SHORT.withName("ZoomStepCount"),
        libraw_h.C_SHORT.withName("FocusStepCount"),
        libraw_h.C_SHORT.withName("FocusStepInfinity"),
        libraw_h.C_SHORT.withName("FocusStepNear"),
        libraw_h.C_DOUBLE.withName("FocusDistance"),
        MemoryLayout.sequenceLayout(4, libraw_h.C_SHORT).withName("AspectFrame"),
        MemoryLayout.sequenceLayout(2, libraw_h.C_INT).withName("StackedImage"),
        libraw_h.C_CHAR.withName("isLiveND"),
        MemoryLayout.paddingLayout(3),
        libraw_h.C_INT.withName("LiveNDfactor"),
        libraw_h.C_SHORT.withName("Panorama_mode"),
        libraw_h.C_SHORT.withName("Panorama_frameNum"),
        MemoryLayout.paddingLayout(4)
    ).withName("$anon$519:11");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout CameraType2$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("CameraType2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char CameraType2[6]
     * }
     */
    public static final SequenceLayout CameraType2$layout() {
        return CameraType2$LAYOUT;
    }

    private static final long CameraType2$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char CameraType2[6]
     * }
     */
    public static final long CameraType2$offset() {
        return CameraType2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char CameraType2[6]
     * }
     */
    public static MemorySegment CameraType2(MemorySegment struct) {
        return struct.asSlice(CameraType2$OFFSET, CameraType2$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char CameraType2[6]
     * }
     */
    public static void CameraType2(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, CameraType2$OFFSET, CameraType2$LAYOUT.byteSize());
    }

    private static long[] CameraType2$DIMS = { 6 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char CameraType2[6]
     * }
     */
    public static long[] CameraType2$dimensions() {
        return CameraType2$DIMS;
    }
    private static final VarHandle CameraType2$ELEM_HANDLE = CameraType2$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char CameraType2[6]
     * }
     */
    public static byte CameraType2(MemorySegment struct, long index0) {
        return (byte)CameraType2$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char CameraType2[6]
     * }
     */
    public static void CameraType2(MemorySegment struct, long index0, byte fieldValue) {
        CameraType2$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfShort ValidBits$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ValidBits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort ValidBits
     * }
     */
    public static final OfShort ValidBits$layout() {
        return ValidBits$LAYOUT;
    }

    private static final long ValidBits$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort ValidBits
     * }
     */
    public static final long ValidBits$offset() {
        return ValidBits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort ValidBits
     * }
     */
    public static short ValidBits(MemorySegment struct) {
        return struct.get(ValidBits$LAYOUT, ValidBits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort ValidBits
     * }
     */
    public static void ValidBits(MemorySegment struct, short fieldValue) {
        struct.set(ValidBits$LAYOUT, ValidBits$OFFSET, fieldValue);
    }

    private static final SequenceLayout SensorCalibration$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("SensorCalibration"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int SensorCalibration[2]
     * }
     */
    public static final SequenceLayout SensorCalibration$layout() {
        return SensorCalibration$LAYOUT;
    }

    private static final long SensorCalibration$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int SensorCalibration[2]
     * }
     */
    public static final long SensorCalibration$offset() {
        return SensorCalibration$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int SensorCalibration[2]
     * }
     */
    public static MemorySegment SensorCalibration(MemorySegment struct) {
        return struct.asSlice(SensorCalibration$OFFSET, SensorCalibration$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int SensorCalibration[2]
     * }
     */
    public static void SensorCalibration(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SensorCalibration$OFFSET, SensorCalibration$LAYOUT.byteSize());
    }

    private static long[] SensorCalibration$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int SensorCalibration[2]
     * }
     */
    public static long[] SensorCalibration$dimensions() {
        return SensorCalibration$DIMS;
    }
    private static final VarHandle SensorCalibration$ELEM_HANDLE = SensorCalibration$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int SensorCalibration[2]
     * }
     */
    public static int SensorCalibration(MemorySegment struct, long index0) {
        return (int)SensorCalibration$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int SensorCalibration[2]
     * }
     */
    public static void SensorCalibration(MemorySegment struct, long index0, int fieldValue) {
        SensorCalibration$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout DriveMode$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("DriveMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort DriveMode[5]
     * }
     */
    public static final SequenceLayout DriveMode$layout() {
        return DriveMode$LAYOUT;
    }

    private static final long DriveMode$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort DriveMode[5]
     * }
     */
    public static final long DriveMode$offset() {
        return DriveMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort DriveMode[5]
     * }
     */
    public static MemorySegment DriveMode(MemorySegment struct) {
        return struct.asSlice(DriveMode$OFFSET, DriveMode$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort DriveMode[5]
     * }
     */
    public static void DriveMode(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DriveMode$OFFSET, DriveMode$LAYOUT.byteSize());
    }

    private static long[] DriveMode$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ushort DriveMode[5]
     * }
     */
    public static long[] DriveMode$dimensions() {
        return DriveMode$DIMS;
    }
    private static final VarHandle DriveMode$ELEM_HANDLE = DriveMode$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ushort DriveMode[5]
     * }
     */
    public static short DriveMode(MemorySegment struct, long index0) {
        return (short)DriveMode$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ushort DriveMode[5]
     * }
     */
    public static void DriveMode(MemorySegment struct, long index0, short fieldValue) {
        DriveMode$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfShort ColorSpace$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ColorSpace"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort ColorSpace
     * }
     */
    public static final OfShort ColorSpace$layout() {
        return ColorSpace$LAYOUT;
    }

    private static final long ColorSpace$OFFSET = 26;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort ColorSpace
     * }
     */
    public static final long ColorSpace$offset() {
        return ColorSpace$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort ColorSpace
     * }
     */
    public static short ColorSpace(MemorySegment struct) {
        return struct.get(ColorSpace$LAYOUT, ColorSpace$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort ColorSpace
     * }
     */
    public static void ColorSpace(MemorySegment struct, short fieldValue) {
        struct.set(ColorSpace$LAYOUT, ColorSpace$OFFSET, fieldValue);
    }

    private static final SequenceLayout FocusMode$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("FocusMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort FocusMode[2]
     * }
     */
    public static final SequenceLayout FocusMode$layout() {
        return FocusMode$LAYOUT;
    }

    private static final long FocusMode$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort FocusMode[2]
     * }
     */
    public static final long FocusMode$offset() {
        return FocusMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort FocusMode[2]
     * }
     */
    public static MemorySegment FocusMode(MemorySegment struct) {
        return struct.asSlice(FocusMode$OFFSET, FocusMode$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort FocusMode[2]
     * }
     */
    public static void FocusMode(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, FocusMode$OFFSET, FocusMode$LAYOUT.byteSize());
    }

    private static long[] FocusMode$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ushort FocusMode[2]
     * }
     */
    public static long[] FocusMode$dimensions() {
        return FocusMode$DIMS;
    }
    private static final VarHandle FocusMode$ELEM_HANDLE = FocusMode$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ushort FocusMode[2]
     * }
     */
    public static short FocusMode(MemorySegment struct, long index0) {
        return (short)FocusMode$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ushort FocusMode[2]
     * }
     */
    public static void FocusMode(MemorySegment struct, long index0, short fieldValue) {
        FocusMode$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfShort AutoFocus$LAYOUT = (OfShort)$LAYOUT.select(groupElement("AutoFocus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort AutoFocus
     * }
     */
    public static final OfShort AutoFocus$layout() {
        return AutoFocus$LAYOUT;
    }

    private static final long AutoFocus$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort AutoFocus
     * }
     */
    public static final long AutoFocus$offset() {
        return AutoFocus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort AutoFocus
     * }
     */
    public static short AutoFocus(MemorySegment struct) {
        return struct.get(AutoFocus$LAYOUT, AutoFocus$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort AutoFocus
     * }
     */
    public static void AutoFocus(MemorySegment struct, short fieldValue) {
        struct.set(AutoFocus$LAYOUT, AutoFocus$OFFSET, fieldValue);
    }

    private static final OfShort AFPoint$LAYOUT = (OfShort)$LAYOUT.select(groupElement("AFPoint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort AFPoint
     * }
     */
    public static final OfShort AFPoint$layout() {
        return AFPoint$LAYOUT;
    }

    private static final long AFPoint$OFFSET = 34;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort AFPoint
     * }
     */
    public static final long AFPoint$offset() {
        return AFPoint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort AFPoint
     * }
     */
    public static short AFPoint(MemorySegment struct) {
        return struct.get(AFPoint$LAYOUT, AFPoint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort AFPoint
     * }
     */
    public static void AFPoint(MemorySegment struct, short fieldValue) {
        struct.set(AFPoint$LAYOUT, AFPoint$OFFSET, fieldValue);
    }

    private static final SequenceLayout AFAreas$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("AFAreas"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int AFAreas[64]
     * }
     */
    public static final SequenceLayout AFAreas$layout() {
        return AFAreas$LAYOUT;
    }

    private static final long AFAreas$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int AFAreas[64]
     * }
     */
    public static final long AFAreas$offset() {
        return AFAreas$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int AFAreas[64]
     * }
     */
    public static MemorySegment AFAreas(MemorySegment struct) {
        return struct.asSlice(AFAreas$OFFSET, AFAreas$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int AFAreas[64]
     * }
     */
    public static void AFAreas(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, AFAreas$OFFSET, AFAreas$LAYOUT.byteSize());
    }

    private static long[] AFAreas$DIMS = { 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned int AFAreas[64]
     * }
     */
    public static long[] AFAreas$dimensions() {
        return AFAreas$DIMS;
    }
    private static final VarHandle AFAreas$ELEM_HANDLE = AFAreas$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned int AFAreas[64]
     * }
     */
    public static int AFAreas(MemorySegment struct, long index0) {
        return (int)AFAreas$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned int AFAreas[64]
     * }
     */
    public static void AFAreas(MemorySegment struct, long index0, int fieldValue) {
        AFAreas$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout AFPointSelected$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("AFPointSelected"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double AFPointSelected[5]
     * }
     */
    public static final SequenceLayout AFPointSelected$layout() {
        return AFPointSelected$LAYOUT;
    }

    private static final long AFPointSelected$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double AFPointSelected[5]
     * }
     */
    public static final long AFPointSelected$offset() {
        return AFPointSelected$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double AFPointSelected[5]
     * }
     */
    public static MemorySegment AFPointSelected(MemorySegment struct) {
        return struct.asSlice(AFPointSelected$OFFSET, AFPointSelected$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double AFPointSelected[5]
     * }
     */
    public static void AFPointSelected(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, AFPointSelected$OFFSET, AFPointSelected$LAYOUT.byteSize());
    }

    private static long[] AFPointSelected$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * double AFPointSelected[5]
     * }
     */
    public static long[] AFPointSelected$dimensions() {
        return AFPointSelected$DIMS;
    }
    private static final VarHandle AFPointSelected$ELEM_HANDLE = AFPointSelected$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * double AFPointSelected[5]
     * }
     */
    public static double AFPointSelected(MemorySegment struct, long index0) {
        return (double)AFPointSelected$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * double AFPointSelected[5]
     * }
     */
    public static void AFPointSelected(MemorySegment struct, long index0, double fieldValue) {
        AFPointSelected$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfShort AFResult$LAYOUT = (OfShort)$LAYOUT.select(groupElement("AFResult"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort AFResult
     * }
     */
    public static final OfShort AFResult$layout() {
        return AFResult$LAYOUT;
    }

    private static final long AFResult$OFFSET = 336;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort AFResult
     * }
     */
    public static final long AFResult$offset() {
        return AFResult$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort AFResult
     * }
     */
    public static short AFResult(MemorySegment struct) {
        return struct.get(AFResult$LAYOUT, AFResult$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort AFResult
     * }
     */
    public static void AFResult(MemorySegment struct, short fieldValue) {
        struct.set(AFResult$LAYOUT, AFResult$OFFSET, fieldValue);
    }

    private static final OfByte AFFineTune$LAYOUT = (OfByte)$LAYOUT.select(groupElement("AFFineTune"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uchar AFFineTune
     * }
     */
    public static final OfByte AFFineTune$layout() {
        return AFFineTune$LAYOUT;
    }

    private static final long AFFineTune$OFFSET = 338;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uchar AFFineTune
     * }
     */
    public static final long AFFineTune$offset() {
        return AFFineTune$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uchar AFFineTune
     * }
     */
    public static byte AFFineTune(MemorySegment struct) {
        return struct.get(AFFineTune$LAYOUT, AFFineTune$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uchar AFFineTune
     * }
     */
    public static void AFFineTune(MemorySegment struct, byte fieldValue) {
        struct.set(AFFineTune$LAYOUT, AFFineTune$OFFSET, fieldValue);
    }

    private static final SequenceLayout AFFineTuneAdj$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("AFFineTuneAdj"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short AFFineTuneAdj[3]
     * }
     */
    public static final SequenceLayout AFFineTuneAdj$layout() {
        return AFFineTuneAdj$LAYOUT;
    }

    private static final long AFFineTuneAdj$OFFSET = 340;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short AFFineTuneAdj[3]
     * }
     */
    public static final long AFFineTuneAdj$offset() {
        return AFFineTuneAdj$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short AFFineTuneAdj[3]
     * }
     */
    public static MemorySegment AFFineTuneAdj(MemorySegment struct) {
        return struct.asSlice(AFFineTuneAdj$OFFSET, AFFineTuneAdj$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short AFFineTuneAdj[3]
     * }
     */
    public static void AFFineTuneAdj(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, AFFineTuneAdj$OFFSET, AFFineTuneAdj$LAYOUT.byteSize());
    }

    private static long[] AFFineTuneAdj$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * short AFFineTuneAdj[3]
     * }
     */
    public static long[] AFFineTuneAdj$dimensions() {
        return AFFineTuneAdj$DIMS;
    }
    private static final VarHandle AFFineTuneAdj$ELEM_HANDLE = AFFineTuneAdj$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * short AFFineTuneAdj[3]
     * }
     */
    public static short AFFineTuneAdj(MemorySegment struct, long index0) {
        return (short)AFFineTuneAdj$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * short AFFineTuneAdj[3]
     * }
     */
    public static void AFFineTuneAdj(MemorySegment struct, long index0, short fieldValue) {
        AFFineTuneAdj$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout SpecialMode$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("SpecialMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int SpecialMode[3]
     * }
     */
    public static final SequenceLayout SpecialMode$layout() {
        return SpecialMode$LAYOUT;
    }

    private static final long SpecialMode$OFFSET = 348;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int SpecialMode[3]
     * }
     */
    public static final long SpecialMode$offset() {
        return SpecialMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int SpecialMode[3]
     * }
     */
    public static MemorySegment SpecialMode(MemorySegment struct) {
        return struct.asSlice(SpecialMode$OFFSET, SpecialMode$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int SpecialMode[3]
     * }
     */
    public static void SpecialMode(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SpecialMode$OFFSET, SpecialMode$LAYOUT.byteSize());
    }

    private static long[] SpecialMode$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned int SpecialMode[3]
     * }
     */
    public static long[] SpecialMode$dimensions() {
        return SpecialMode$DIMS;
    }
    private static final VarHandle SpecialMode$ELEM_HANDLE = SpecialMode$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned int SpecialMode[3]
     * }
     */
    public static int SpecialMode(MemorySegment struct, long index0) {
        return (int)SpecialMode$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned int SpecialMode[3]
     * }
     */
    public static void SpecialMode(MemorySegment struct, long index0, int fieldValue) {
        SpecialMode$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfShort ZoomStepCount$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ZoomStepCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort ZoomStepCount
     * }
     */
    public static final OfShort ZoomStepCount$layout() {
        return ZoomStepCount$LAYOUT;
    }

    private static final long ZoomStepCount$OFFSET = 360;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort ZoomStepCount
     * }
     */
    public static final long ZoomStepCount$offset() {
        return ZoomStepCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort ZoomStepCount
     * }
     */
    public static short ZoomStepCount(MemorySegment struct) {
        return struct.get(ZoomStepCount$LAYOUT, ZoomStepCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort ZoomStepCount
     * }
     */
    public static void ZoomStepCount(MemorySegment struct, short fieldValue) {
        struct.set(ZoomStepCount$LAYOUT, ZoomStepCount$OFFSET, fieldValue);
    }

    private static final OfShort FocusStepCount$LAYOUT = (OfShort)$LAYOUT.select(groupElement("FocusStepCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort FocusStepCount
     * }
     */
    public static final OfShort FocusStepCount$layout() {
        return FocusStepCount$LAYOUT;
    }

    private static final long FocusStepCount$OFFSET = 362;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort FocusStepCount
     * }
     */
    public static final long FocusStepCount$offset() {
        return FocusStepCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort FocusStepCount
     * }
     */
    public static short FocusStepCount(MemorySegment struct) {
        return struct.get(FocusStepCount$LAYOUT, FocusStepCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort FocusStepCount
     * }
     */
    public static void FocusStepCount(MemorySegment struct, short fieldValue) {
        struct.set(FocusStepCount$LAYOUT, FocusStepCount$OFFSET, fieldValue);
    }

    private static final OfShort FocusStepInfinity$LAYOUT = (OfShort)$LAYOUT.select(groupElement("FocusStepInfinity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort FocusStepInfinity
     * }
     */
    public static final OfShort FocusStepInfinity$layout() {
        return FocusStepInfinity$LAYOUT;
    }

    private static final long FocusStepInfinity$OFFSET = 364;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort FocusStepInfinity
     * }
     */
    public static final long FocusStepInfinity$offset() {
        return FocusStepInfinity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort FocusStepInfinity
     * }
     */
    public static short FocusStepInfinity(MemorySegment struct) {
        return struct.get(FocusStepInfinity$LAYOUT, FocusStepInfinity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort FocusStepInfinity
     * }
     */
    public static void FocusStepInfinity(MemorySegment struct, short fieldValue) {
        struct.set(FocusStepInfinity$LAYOUT, FocusStepInfinity$OFFSET, fieldValue);
    }

    private static final OfShort FocusStepNear$LAYOUT = (OfShort)$LAYOUT.select(groupElement("FocusStepNear"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort FocusStepNear
     * }
     */
    public static final OfShort FocusStepNear$layout() {
        return FocusStepNear$LAYOUT;
    }

    private static final long FocusStepNear$OFFSET = 366;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort FocusStepNear
     * }
     */
    public static final long FocusStepNear$offset() {
        return FocusStepNear$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort FocusStepNear
     * }
     */
    public static short FocusStepNear(MemorySegment struct) {
        return struct.get(FocusStepNear$LAYOUT, FocusStepNear$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort FocusStepNear
     * }
     */
    public static void FocusStepNear(MemorySegment struct, short fieldValue) {
        struct.set(FocusStepNear$LAYOUT, FocusStepNear$OFFSET, fieldValue);
    }

    private static final OfDouble FocusDistance$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("FocusDistance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double FocusDistance
     * }
     */
    public static final OfDouble FocusDistance$layout() {
        return FocusDistance$LAYOUT;
    }

    private static final long FocusDistance$OFFSET = 368;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double FocusDistance
     * }
     */
    public static final long FocusDistance$offset() {
        return FocusDistance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double FocusDistance
     * }
     */
    public static double FocusDistance(MemorySegment struct) {
        return struct.get(FocusDistance$LAYOUT, FocusDistance$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double FocusDistance
     * }
     */
    public static void FocusDistance(MemorySegment struct, double fieldValue) {
        struct.set(FocusDistance$LAYOUT, FocusDistance$OFFSET, fieldValue);
    }

    private static final SequenceLayout AspectFrame$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("AspectFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort AspectFrame[4]
     * }
     */
    public static final SequenceLayout AspectFrame$layout() {
        return AspectFrame$LAYOUT;
    }

    private static final long AspectFrame$OFFSET = 376;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort AspectFrame[4]
     * }
     */
    public static final long AspectFrame$offset() {
        return AspectFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort AspectFrame[4]
     * }
     */
    public static MemorySegment AspectFrame(MemorySegment struct) {
        return struct.asSlice(AspectFrame$OFFSET, AspectFrame$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort AspectFrame[4]
     * }
     */
    public static void AspectFrame(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, AspectFrame$OFFSET, AspectFrame$LAYOUT.byteSize());
    }

    private static long[] AspectFrame$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ushort AspectFrame[4]
     * }
     */
    public static long[] AspectFrame$dimensions() {
        return AspectFrame$DIMS;
    }
    private static final VarHandle AspectFrame$ELEM_HANDLE = AspectFrame$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ushort AspectFrame[4]
     * }
     */
    public static short AspectFrame(MemorySegment struct, long index0) {
        return (short)AspectFrame$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ushort AspectFrame[4]
     * }
     */
    public static void AspectFrame(MemorySegment struct, long index0, short fieldValue) {
        AspectFrame$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout StackedImage$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("StackedImage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int StackedImage[2]
     * }
     */
    public static final SequenceLayout StackedImage$layout() {
        return StackedImage$LAYOUT;
    }

    private static final long StackedImage$OFFSET = 384;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int StackedImage[2]
     * }
     */
    public static final long StackedImage$offset() {
        return StackedImage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int StackedImage[2]
     * }
     */
    public static MemorySegment StackedImage(MemorySegment struct) {
        return struct.asSlice(StackedImage$OFFSET, StackedImage$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int StackedImage[2]
     * }
     */
    public static void StackedImage(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, StackedImage$OFFSET, StackedImage$LAYOUT.byteSize());
    }

    private static long[] StackedImage$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned int StackedImage[2]
     * }
     */
    public static long[] StackedImage$dimensions() {
        return StackedImage$DIMS;
    }
    private static final VarHandle StackedImage$ELEM_HANDLE = StackedImage$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned int StackedImage[2]
     * }
     */
    public static int StackedImage(MemorySegment struct, long index0) {
        return (int)StackedImage$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned int StackedImage[2]
     * }
     */
    public static void StackedImage(MemorySegment struct, long index0, int fieldValue) {
        StackedImage$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfByte isLiveND$LAYOUT = (OfByte)$LAYOUT.select(groupElement("isLiveND"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uchar isLiveND
     * }
     */
    public static final OfByte isLiveND$layout() {
        return isLiveND$LAYOUT;
    }

    private static final long isLiveND$OFFSET = 392;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uchar isLiveND
     * }
     */
    public static final long isLiveND$offset() {
        return isLiveND$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uchar isLiveND
     * }
     */
    public static byte isLiveND(MemorySegment struct) {
        return struct.get(isLiveND$LAYOUT, isLiveND$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uchar isLiveND
     * }
     */
    public static void isLiveND(MemorySegment struct, byte fieldValue) {
        struct.set(isLiveND$LAYOUT, isLiveND$OFFSET, fieldValue);
    }

    private static final OfInt LiveNDfactor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LiveNDfactor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int LiveNDfactor
     * }
     */
    public static final OfInt LiveNDfactor$layout() {
        return LiveNDfactor$LAYOUT;
    }

    private static final long LiveNDfactor$OFFSET = 396;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int LiveNDfactor
     * }
     */
    public static final long LiveNDfactor$offset() {
        return LiveNDfactor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int LiveNDfactor
     * }
     */
    public static int LiveNDfactor(MemorySegment struct) {
        return struct.get(LiveNDfactor$LAYOUT, LiveNDfactor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int LiveNDfactor
     * }
     */
    public static void LiveNDfactor(MemorySegment struct, int fieldValue) {
        struct.set(LiveNDfactor$LAYOUT, LiveNDfactor$OFFSET, fieldValue);
    }

    private static final OfShort Panorama_mode$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Panorama_mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort Panorama_mode
     * }
     */
    public static final OfShort Panorama_mode$layout() {
        return Panorama_mode$LAYOUT;
    }

    private static final long Panorama_mode$OFFSET = 400;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort Panorama_mode
     * }
     */
    public static final long Panorama_mode$offset() {
        return Panorama_mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort Panorama_mode
     * }
     */
    public static short Panorama_mode(MemorySegment struct) {
        return struct.get(Panorama_mode$LAYOUT, Panorama_mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort Panorama_mode
     * }
     */
    public static void Panorama_mode(MemorySegment struct, short fieldValue) {
        struct.set(Panorama_mode$LAYOUT, Panorama_mode$OFFSET, fieldValue);
    }

    private static final OfShort Panorama_frameNum$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Panorama_frameNum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort Panorama_frameNum
     * }
     */
    public static final OfShort Panorama_frameNum$layout() {
        return Panorama_frameNum$LAYOUT;
    }

    private static final long Panorama_frameNum$OFFSET = 402;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort Panorama_frameNum
     * }
     */
    public static final long Panorama_frameNum$offset() {
        return Panorama_frameNum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort Panorama_frameNum
     * }
     */
    public static short Panorama_frameNum(MemorySegment struct) {
        return struct.get(Panorama_frameNum$LAYOUT, Panorama_frameNum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort Panorama_frameNum
     * }
     */
    public static void Panorama_frameNum(MemorySegment struct, short fieldValue) {
        struct.set(Panorama_frameNum$LAYOUT, Panorama_frameNum$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

