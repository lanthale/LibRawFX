// Generated by jextract

package org.libraw.nativ;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct jhead {
 *     int algo;
 *     int bits;
 *     int high;
 *     int wide;
 *     int clrs;
 *     int sraw;
 *     int psv;
 *     int restart;
 *     int vpred[6];
 *     ushort quant[64];
 *     ushort idct[64];
 *     ushort *huff[20];
 *     ushort *free[20];
 *     ushort *row;
 * }
 * }
 */
public class jhead {

    jhead() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        libraw_h.C_INT.withName("algo"),
        libraw_h.C_INT.withName("bits"),
        libraw_h.C_INT.withName("high"),
        libraw_h.C_INT.withName("wide"),
        libraw_h.C_INT.withName("clrs"),
        libraw_h.C_INT.withName("sraw"),
        libraw_h.C_INT.withName("psv"),
        libraw_h.C_INT.withName("restart"),
        MemoryLayout.sequenceLayout(6, libraw_h.C_INT).withName("vpred"),
        MemoryLayout.sequenceLayout(64, libraw_h.C_SHORT).withName("quant"),
        MemoryLayout.sequenceLayout(64, libraw_h.C_SHORT).withName("idct"),
        MemoryLayout.sequenceLayout(20, libraw_h.C_POINTER).withName("huff"),
        MemoryLayout.sequenceLayout(20, libraw_h.C_POINTER).withName("free"),
        libraw_h.C_POINTER.withName("row")
    ).withName("jhead");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt algo$LAYOUT = (OfInt)$LAYOUT.select(groupElement("algo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int algo
     * }
     */
    public static final OfInt algo$layout() {
        return algo$LAYOUT;
    }

    private static final long algo$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int algo
     * }
     */
    public static final long algo$offset() {
        return algo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int algo
     * }
     */
    public static int algo(MemorySegment struct) {
        return struct.get(algo$LAYOUT, algo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int algo
     * }
     */
    public static void algo(MemorySegment struct, int fieldValue) {
        struct.set(algo$LAYOUT, algo$OFFSET, fieldValue);
    }

    private static final OfInt bits$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int bits
     * }
     */
    public static final OfInt bits$layout() {
        return bits$LAYOUT;
    }

    private static final long bits$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int bits
     * }
     */
    public static final long bits$offset() {
        return bits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int bits
     * }
     */
    public static int bits(MemorySegment struct) {
        return struct.get(bits$LAYOUT, bits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int bits
     * }
     */
    public static void bits(MemorySegment struct, int fieldValue) {
        struct.set(bits$LAYOUT, bits$OFFSET, fieldValue);
    }

    private static final OfInt high$LAYOUT = (OfInt)$LAYOUT.select(groupElement("high"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int high
     * }
     */
    public static final OfInt high$layout() {
        return high$LAYOUT;
    }

    private static final long high$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int high
     * }
     */
    public static final long high$offset() {
        return high$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int high
     * }
     */
    public static int high(MemorySegment struct) {
        return struct.get(high$LAYOUT, high$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int high
     * }
     */
    public static void high(MemorySegment struct, int fieldValue) {
        struct.set(high$LAYOUT, high$OFFSET, fieldValue);
    }

    private static final OfInt wide$LAYOUT = (OfInt)$LAYOUT.select(groupElement("wide"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int wide
     * }
     */
    public static final OfInt wide$layout() {
        return wide$LAYOUT;
    }

    private static final long wide$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int wide
     * }
     */
    public static final long wide$offset() {
        return wide$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int wide
     * }
     */
    public static int wide(MemorySegment struct) {
        return struct.get(wide$LAYOUT, wide$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int wide
     * }
     */
    public static void wide(MemorySegment struct, int fieldValue) {
        struct.set(wide$LAYOUT, wide$OFFSET, fieldValue);
    }

    private static final OfInt clrs$LAYOUT = (OfInt)$LAYOUT.select(groupElement("clrs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int clrs
     * }
     */
    public static final OfInt clrs$layout() {
        return clrs$LAYOUT;
    }

    private static final long clrs$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int clrs
     * }
     */
    public static final long clrs$offset() {
        return clrs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int clrs
     * }
     */
    public static int clrs(MemorySegment struct) {
        return struct.get(clrs$LAYOUT, clrs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int clrs
     * }
     */
    public static void clrs(MemorySegment struct, int fieldValue) {
        struct.set(clrs$LAYOUT, clrs$OFFSET, fieldValue);
    }

    private static final OfInt sraw$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sraw"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int sraw
     * }
     */
    public static final OfInt sraw$layout() {
        return sraw$LAYOUT;
    }

    private static final long sraw$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int sraw
     * }
     */
    public static final long sraw$offset() {
        return sraw$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int sraw
     * }
     */
    public static int sraw(MemorySegment struct) {
        return struct.get(sraw$LAYOUT, sraw$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int sraw
     * }
     */
    public static void sraw(MemorySegment struct, int fieldValue) {
        struct.set(sraw$LAYOUT, sraw$OFFSET, fieldValue);
    }

    private static final OfInt psv$LAYOUT = (OfInt)$LAYOUT.select(groupElement("psv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int psv
     * }
     */
    public static final OfInt psv$layout() {
        return psv$LAYOUT;
    }

    private static final long psv$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int psv
     * }
     */
    public static final long psv$offset() {
        return psv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int psv
     * }
     */
    public static int psv(MemorySegment struct) {
        return struct.get(psv$LAYOUT, psv$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int psv
     * }
     */
    public static void psv(MemorySegment struct, int fieldValue) {
        struct.set(psv$LAYOUT, psv$OFFSET, fieldValue);
    }

    private static final OfInt restart$LAYOUT = (OfInt)$LAYOUT.select(groupElement("restart"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int restart
     * }
     */
    public static final OfInt restart$layout() {
        return restart$LAYOUT;
    }

    private static final long restart$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int restart
     * }
     */
    public static final long restart$offset() {
        return restart$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int restart
     * }
     */
    public static int restart(MemorySegment struct) {
        return struct.get(restart$LAYOUT, restart$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int restart
     * }
     */
    public static void restart(MemorySegment struct, int fieldValue) {
        struct.set(restart$LAYOUT, restart$OFFSET, fieldValue);
    }

    private static final SequenceLayout vpred$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("vpred"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int vpred[6]
     * }
     */
    public static final SequenceLayout vpred$layout() {
        return vpred$LAYOUT;
    }

    private static final long vpred$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int vpred[6]
     * }
     */
    public static final long vpred$offset() {
        return vpred$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int vpred[6]
     * }
     */
    public static MemorySegment vpred(MemorySegment struct) {
        return struct.asSlice(vpred$OFFSET, vpred$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int vpred[6]
     * }
     */
    public static void vpred(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, vpred$OFFSET, vpred$LAYOUT.byteSize());
    }

    private static long[] vpred$DIMS = { 6 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int vpred[6]
     * }
     */
    public static long[] vpred$dimensions() {
        return vpred$DIMS;
    }
    private static final VarHandle vpred$ELEM_HANDLE = vpred$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int vpred[6]
     * }
     */
    public static int vpred(MemorySegment struct, long index0) {
        return (int)vpred$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int vpred[6]
     * }
     */
    public static void vpred(MemorySegment struct, long index0, int fieldValue) {
        vpred$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout quant$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("quant"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort quant[64]
     * }
     */
    public static final SequenceLayout quant$layout() {
        return quant$LAYOUT;
    }

    private static final long quant$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort quant[64]
     * }
     */
    public static final long quant$offset() {
        return quant$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort quant[64]
     * }
     */
    public static MemorySegment quant(MemorySegment struct) {
        return struct.asSlice(quant$OFFSET, quant$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort quant[64]
     * }
     */
    public static void quant(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, quant$OFFSET, quant$LAYOUT.byteSize());
    }

    private static long[] quant$DIMS = { 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ushort quant[64]
     * }
     */
    public static long[] quant$dimensions() {
        return quant$DIMS;
    }
    private static final VarHandle quant$ELEM_HANDLE = quant$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ushort quant[64]
     * }
     */
    public static short quant(MemorySegment struct, long index0) {
        return (short)quant$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ushort quant[64]
     * }
     */
    public static void quant(MemorySegment struct, long index0, short fieldValue) {
        quant$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout idct$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("idct"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort idct[64]
     * }
     */
    public static final SequenceLayout idct$layout() {
        return idct$LAYOUT;
    }

    private static final long idct$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort idct[64]
     * }
     */
    public static final long idct$offset() {
        return idct$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort idct[64]
     * }
     */
    public static MemorySegment idct(MemorySegment struct) {
        return struct.asSlice(idct$OFFSET, idct$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort idct[64]
     * }
     */
    public static void idct(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, idct$OFFSET, idct$LAYOUT.byteSize());
    }

    private static long[] idct$DIMS = { 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ushort idct[64]
     * }
     */
    public static long[] idct$dimensions() {
        return idct$DIMS;
    }
    private static final VarHandle idct$ELEM_HANDLE = idct$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ushort idct[64]
     * }
     */
    public static short idct(MemorySegment struct, long index0) {
        return (short)idct$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ushort idct[64]
     * }
     */
    public static void idct(MemorySegment struct, long index0, short fieldValue) {
        idct$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout huff$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("huff"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort *huff[20]
     * }
     */
    public static final SequenceLayout huff$layout() {
        return huff$LAYOUT;
    }

    private static final long huff$OFFSET = 312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort *huff[20]
     * }
     */
    public static final long huff$offset() {
        return huff$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort *huff[20]
     * }
     */
    public static MemorySegment huff(MemorySegment struct) {
        return struct.asSlice(huff$OFFSET, huff$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort *huff[20]
     * }
     */
    public static void huff(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, huff$OFFSET, huff$LAYOUT.byteSize());
    }

    private static long[] huff$DIMS = { 20 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ushort *huff[20]
     * }
     */
    public static long[] huff$dimensions() {
        return huff$DIMS;
    }
    private static final VarHandle huff$ELEM_HANDLE = huff$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ushort *huff[20]
     * }
     */
    public static MemorySegment huff(MemorySegment struct, long index0) {
        return (MemorySegment)huff$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ushort *huff[20]
     * }
     */
    public static void huff(MemorySegment struct, long index0, MemorySegment fieldValue) {
        huff$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout free$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort *free[20]
     * }
     */
    public static final SequenceLayout free$layout() {
        return free$LAYOUT;
    }

    private static final long free$OFFSET = 472;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort *free[20]
     * }
     */
    public static final long free$offset() {
        return free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort *free[20]
     * }
     */
    public static MemorySegment free(MemorySegment struct) {
        return struct.asSlice(free$OFFSET, free$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort *free[20]
     * }
     */
    public static void free(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, free$OFFSET, free$LAYOUT.byteSize());
    }

    private static long[] free$DIMS = { 20 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ushort *free[20]
     * }
     */
    public static long[] free$dimensions() {
        return free$DIMS;
    }
    private static final VarHandle free$ELEM_HANDLE = free$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ushort *free[20]
     * }
     */
    public static MemorySegment free(MemorySegment struct, long index0) {
        return (MemorySegment)free$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ushort *free[20]
     * }
     */
    public static void free(MemorySegment struct, long index0, MemorySegment fieldValue) {
        free$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final AddressLayout row$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("row"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort *row
     * }
     */
    public static final AddressLayout row$layout() {
        return row$LAYOUT;
    }

    private static final long row$OFFSET = 632;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort *row
     * }
     */
    public static final long row$offset() {
        return row$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort *row
     * }
     */
    public static MemorySegment row(MemorySegment struct) {
        return struct.get(row$LAYOUT, row$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort *row
     * }
     */
    public static void row(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(row$LAYOUT, row$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

