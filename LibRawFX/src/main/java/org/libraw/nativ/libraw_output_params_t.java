// Generated by jextract

package org.libraw.nativ;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     unsigned int greybox[4];
 *     unsigned int cropbox[4];
 *     double aber[4];
 *     double gamm[6];
 *     float user_mul[4];
 *     float bright;
 *     float threshold;
 *     int half_size;
 *     int four_color_rgb;
 *     int highlight;
 *     int use_auto_wb;
 *     int use_camera_wb;
 *     int use_camera_matrix;
 *     int output_color;
 *     char *output_profile;
 *     char *camera_profile;
 *     char *bad_pixels;
 *     char *dark_frame;
 *     int output_bps;
 *     int output_tiff;
 *     int output_flags;
 *     int user_flip;
 *     int user_qual;
 *     int user_black;
 *     int user_cblack[4];
 *     int user_sat;
 *     int med_passes;
 *     float auto_bright_thr;
 *     float adjust_maximum_thr;
 *     int no_auto_bright;
 *     int use_fuji_rotate;
 *     int green_matching;
 *     int dcb_iterations;
 *     int dcb_enhance_fl;
 *     int fbdd_noiserd;
 *     int exp_correc;
 *     float exp_shift;
 *     float exp_preser;
 *     int no_auto_scale;
 *     int no_interpolation;
 * }
 * }
 */
public class libraw_output_params_t {

    libraw_output_params_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(4, libraw_h.C_INT).withName("greybox"),
        MemoryLayout.sequenceLayout(4, libraw_h.C_INT).withName("cropbox"),
        MemoryLayout.sequenceLayout(4, libraw_h.C_DOUBLE).withName("aber"),
        MemoryLayout.sequenceLayout(6, libraw_h.C_DOUBLE).withName("gamm"),
        MemoryLayout.sequenceLayout(4, libraw_h.C_FLOAT).withName("user_mul"),
        libraw_h.C_FLOAT.withName("bright"),
        libraw_h.C_FLOAT.withName("threshold"),
        libraw_h.C_INT.withName("half_size"),
        libraw_h.C_INT.withName("four_color_rgb"),
        libraw_h.C_INT.withName("highlight"),
        libraw_h.C_INT.withName("use_auto_wb"),
        libraw_h.C_INT.withName("use_camera_wb"),
        libraw_h.C_INT.withName("use_camera_matrix"),
        libraw_h.C_INT.withName("output_color"),
        MemoryLayout.paddingLayout(4),
        libraw_h.C_POINTER.withName("output_profile"),
        libraw_h.C_POINTER.withName("camera_profile"),
        libraw_h.C_POINTER.withName("bad_pixels"),
        libraw_h.C_POINTER.withName("dark_frame"),
        libraw_h.C_INT.withName("output_bps"),
        libraw_h.C_INT.withName("output_tiff"),
        libraw_h.C_INT.withName("output_flags"),
        libraw_h.C_INT.withName("user_flip"),
        libraw_h.C_INT.withName("user_qual"),
        libraw_h.C_INT.withName("user_black"),
        MemoryLayout.sequenceLayout(4, libraw_h.C_INT).withName("user_cblack"),
        libraw_h.C_INT.withName("user_sat"),
        libraw_h.C_INT.withName("med_passes"),
        libraw_h.C_FLOAT.withName("auto_bright_thr"),
        libraw_h.C_FLOAT.withName("adjust_maximum_thr"),
        libraw_h.C_INT.withName("no_auto_bright"),
        libraw_h.C_INT.withName("use_fuji_rotate"),
        libraw_h.C_INT.withName("green_matching"),
        libraw_h.C_INT.withName("dcb_iterations"),
        libraw_h.C_INT.withName("dcb_enhance_fl"),
        libraw_h.C_INT.withName("fbdd_noiserd"),
        libraw_h.C_INT.withName("exp_correc"),
        libraw_h.C_FLOAT.withName("exp_shift"),
        libraw_h.C_FLOAT.withName("exp_preser"),
        libraw_h.C_INT.withName("no_auto_scale"),
        libraw_h.C_INT.withName("no_interpolation"),
        MemoryLayout.paddingLayout(4)
    ).withName("$anon$885:11");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout greybox$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("greybox"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int greybox[4]
     * }
     */
    public static final SequenceLayout greybox$layout() {
        return greybox$LAYOUT;
    }

    private static final long greybox$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int greybox[4]
     * }
     */
    public static final long greybox$offset() {
        return greybox$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int greybox[4]
     * }
     */
    public static MemorySegment greybox(MemorySegment struct) {
        return struct.asSlice(greybox$OFFSET, greybox$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int greybox[4]
     * }
     */
    public static void greybox(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, greybox$OFFSET, greybox$LAYOUT.byteSize());
    }

    private static long[] greybox$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned int greybox[4]
     * }
     */
    public static long[] greybox$dimensions() {
        return greybox$DIMS;
    }
    private static final VarHandle greybox$ELEM_HANDLE = greybox$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned int greybox[4]
     * }
     */
    public static int greybox(MemorySegment struct, long index0) {
        return (int)greybox$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned int greybox[4]
     * }
     */
    public static void greybox(MemorySegment struct, long index0, int fieldValue) {
        greybox$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout cropbox$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("cropbox"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int cropbox[4]
     * }
     */
    public static final SequenceLayout cropbox$layout() {
        return cropbox$LAYOUT;
    }

    private static final long cropbox$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int cropbox[4]
     * }
     */
    public static final long cropbox$offset() {
        return cropbox$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int cropbox[4]
     * }
     */
    public static MemorySegment cropbox(MemorySegment struct) {
        return struct.asSlice(cropbox$OFFSET, cropbox$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int cropbox[4]
     * }
     */
    public static void cropbox(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cropbox$OFFSET, cropbox$LAYOUT.byteSize());
    }

    private static long[] cropbox$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned int cropbox[4]
     * }
     */
    public static long[] cropbox$dimensions() {
        return cropbox$DIMS;
    }
    private static final VarHandle cropbox$ELEM_HANDLE = cropbox$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned int cropbox[4]
     * }
     */
    public static int cropbox(MemorySegment struct, long index0) {
        return (int)cropbox$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned int cropbox[4]
     * }
     */
    public static void cropbox(MemorySegment struct, long index0, int fieldValue) {
        cropbox$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout aber$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("aber"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double aber[4]
     * }
     */
    public static final SequenceLayout aber$layout() {
        return aber$LAYOUT;
    }

    private static final long aber$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double aber[4]
     * }
     */
    public static final long aber$offset() {
        return aber$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double aber[4]
     * }
     */
    public static MemorySegment aber(MemorySegment struct) {
        return struct.asSlice(aber$OFFSET, aber$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double aber[4]
     * }
     */
    public static void aber(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, aber$OFFSET, aber$LAYOUT.byteSize());
    }

    private static long[] aber$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * double aber[4]
     * }
     */
    public static long[] aber$dimensions() {
        return aber$DIMS;
    }
    private static final VarHandle aber$ELEM_HANDLE = aber$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * double aber[4]
     * }
     */
    public static double aber(MemorySegment struct, long index0) {
        return (double)aber$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * double aber[4]
     * }
     */
    public static void aber(MemorySegment struct, long index0, double fieldValue) {
        aber$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout gamm$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("gamm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double gamm[6]
     * }
     */
    public static final SequenceLayout gamm$layout() {
        return gamm$LAYOUT;
    }

    private static final long gamm$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double gamm[6]
     * }
     */
    public static final long gamm$offset() {
        return gamm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double gamm[6]
     * }
     */
    public static MemorySegment gamm(MemorySegment struct) {
        return struct.asSlice(gamm$OFFSET, gamm$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double gamm[6]
     * }
     */
    public static void gamm(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, gamm$OFFSET, gamm$LAYOUT.byteSize());
    }

    private static long[] gamm$DIMS = { 6 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * double gamm[6]
     * }
     */
    public static long[] gamm$dimensions() {
        return gamm$DIMS;
    }
    private static final VarHandle gamm$ELEM_HANDLE = gamm$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * double gamm[6]
     * }
     */
    public static double gamm(MemorySegment struct, long index0) {
        return (double)gamm$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * double gamm[6]
     * }
     */
    public static void gamm(MemorySegment struct, long index0, double fieldValue) {
        gamm$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout user_mul$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("user_mul"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float user_mul[4]
     * }
     */
    public static final SequenceLayout user_mul$layout() {
        return user_mul$LAYOUT;
    }

    private static final long user_mul$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float user_mul[4]
     * }
     */
    public static final long user_mul$offset() {
        return user_mul$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float user_mul[4]
     * }
     */
    public static MemorySegment user_mul(MemorySegment struct) {
        return struct.asSlice(user_mul$OFFSET, user_mul$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float user_mul[4]
     * }
     */
    public static void user_mul(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, user_mul$OFFSET, user_mul$LAYOUT.byteSize());
    }

    private static long[] user_mul$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float user_mul[4]
     * }
     */
    public static long[] user_mul$dimensions() {
        return user_mul$DIMS;
    }
    private static final VarHandle user_mul$ELEM_HANDLE = user_mul$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float user_mul[4]
     * }
     */
    public static float user_mul(MemorySegment struct, long index0) {
        return (float)user_mul$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float user_mul[4]
     * }
     */
    public static void user_mul(MemorySegment struct, long index0, float fieldValue) {
        user_mul$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfFloat bright$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("bright"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float bright
     * }
     */
    public static final OfFloat bright$layout() {
        return bright$LAYOUT;
    }

    private static final long bright$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float bright
     * }
     */
    public static final long bright$offset() {
        return bright$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float bright
     * }
     */
    public static float bright(MemorySegment struct) {
        return struct.get(bright$LAYOUT, bright$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float bright
     * }
     */
    public static void bright(MemorySegment struct, float fieldValue) {
        struct.set(bright$LAYOUT, bright$OFFSET, fieldValue);
    }

    private static final OfFloat threshold$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("threshold"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float threshold
     * }
     */
    public static final OfFloat threshold$layout() {
        return threshold$LAYOUT;
    }

    private static final long threshold$OFFSET = 132;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float threshold
     * }
     */
    public static final long threshold$offset() {
        return threshold$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float threshold
     * }
     */
    public static float threshold(MemorySegment struct) {
        return struct.get(threshold$LAYOUT, threshold$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float threshold
     * }
     */
    public static void threshold(MemorySegment struct, float fieldValue) {
        struct.set(threshold$LAYOUT, threshold$OFFSET, fieldValue);
    }

    private static final OfInt half_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("half_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int half_size
     * }
     */
    public static final OfInt half_size$layout() {
        return half_size$LAYOUT;
    }

    private static final long half_size$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int half_size
     * }
     */
    public static final long half_size$offset() {
        return half_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int half_size
     * }
     */
    public static int half_size(MemorySegment struct) {
        return struct.get(half_size$LAYOUT, half_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int half_size
     * }
     */
    public static void half_size(MemorySegment struct, int fieldValue) {
        struct.set(half_size$LAYOUT, half_size$OFFSET, fieldValue);
    }

    private static final OfInt four_color_rgb$LAYOUT = (OfInt)$LAYOUT.select(groupElement("four_color_rgb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int four_color_rgb
     * }
     */
    public static final OfInt four_color_rgb$layout() {
        return four_color_rgb$LAYOUT;
    }

    private static final long four_color_rgb$OFFSET = 140;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int four_color_rgb
     * }
     */
    public static final long four_color_rgb$offset() {
        return four_color_rgb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int four_color_rgb
     * }
     */
    public static int four_color_rgb(MemorySegment struct) {
        return struct.get(four_color_rgb$LAYOUT, four_color_rgb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int four_color_rgb
     * }
     */
    public static void four_color_rgb(MemorySegment struct, int fieldValue) {
        struct.set(four_color_rgb$LAYOUT, four_color_rgb$OFFSET, fieldValue);
    }

    private static final OfInt highlight$LAYOUT = (OfInt)$LAYOUT.select(groupElement("highlight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int highlight
     * }
     */
    public static final OfInt highlight$layout() {
        return highlight$LAYOUT;
    }

    private static final long highlight$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int highlight
     * }
     */
    public static final long highlight$offset() {
        return highlight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int highlight
     * }
     */
    public static int highlight(MemorySegment struct) {
        return struct.get(highlight$LAYOUT, highlight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int highlight
     * }
     */
    public static void highlight(MemorySegment struct, int fieldValue) {
        struct.set(highlight$LAYOUT, highlight$OFFSET, fieldValue);
    }

    private static final OfInt use_auto_wb$LAYOUT = (OfInt)$LAYOUT.select(groupElement("use_auto_wb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int use_auto_wb
     * }
     */
    public static final OfInt use_auto_wb$layout() {
        return use_auto_wb$LAYOUT;
    }

    private static final long use_auto_wb$OFFSET = 148;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int use_auto_wb
     * }
     */
    public static final long use_auto_wb$offset() {
        return use_auto_wb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int use_auto_wb
     * }
     */
    public static int use_auto_wb(MemorySegment struct) {
        return struct.get(use_auto_wb$LAYOUT, use_auto_wb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int use_auto_wb
     * }
     */
    public static void use_auto_wb(MemorySegment struct, int fieldValue) {
        struct.set(use_auto_wb$LAYOUT, use_auto_wb$OFFSET, fieldValue);
    }

    private static final OfInt use_camera_wb$LAYOUT = (OfInt)$LAYOUT.select(groupElement("use_camera_wb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int use_camera_wb
     * }
     */
    public static final OfInt use_camera_wb$layout() {
        return use_camera_wb$LAYOUT;
    }

    private static final long use_camera_wb$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int use_camera_wb
     * }
     */
    public static final long use_camera_wb$offset() {
        return use_camera_wb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int use_camera_wb
     * }
     */
    public static int use_camera_wb(MemorySegment struct) {
        return struct.get(use_camera_wb$LAYOUT, use_camera_wb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int use_camera_wb
     * }
     */
    public static void use_camera_wb(MemorySegment struct, int fieldValue) {
        struct.set(use_camera_wb$LAYOUT, use_camera_wb$OFFSET, fieldValue);
    }

    private static final OfInt use_camera_matrix$LAYOUT = (OfInt)$LAYOUT.select(groupElement("use_camera_matrix"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int use_camera_matrix
     * }
     */
    public static final OfInt use_camera_matrix$layout() {
        return use_camera_matrix$LAYOUT;
    }

    private static final long use_camera_matrix$OFFSET = 156;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int use_camera_matrix
     * }
     */
    public static final long use_camera_matrix$offset() {
        return use_camera_matrix$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int use_camera_matrix
     * }
     */
    public static int use_camera_matrix(MemorySegment struct) {
        return struct.get(use_camera_matrix$LAYOUT, use_camera_matrix$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int use_camera_matrix
     * }
     */
    public static void use_camera_matrix(MemorySegment struct, int fieldValue) {
        struct.set(use_camera_matrix$LAYOUT, use_camera_matrix$OFFSET, fieldValue);
    }

    private static final OfInt output_color$LAYOUT = (OfInt)$LAYOUT.select(groupElement("output_color"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int output_color
     * }
     */
    public static final OfInt output_color$layout() {
        return output_color$LAYOUT;
    }

    private static final long output_color$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int output_color
     * }
     */
    public static final long output_color$offset() {
        return output_color$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int output_color
     * }
     */
    public static int output_color(MemorySegment struct) {
        return struct.get(output_color$LAYOUT, output_color$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int output_color
     * }
     */
    public static void output_color(MemorySegment struct, int fieldValue) {
        struct.set(output_color$LAYOUT, output_color$OFFSET, fieldValue);
    }

    private static final AddressLayout output_profile$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("output_profile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *output_profile
     * }
     */
    public static final AddressLayout output_profile$layout() {
        return output_profile$LAYOUT;
    }

    private static final long output_profile$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *output_profile
     * }
     */
    public static final long output_profile$offset() {
        return output_profile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *output_profile
     * }
     */
    public static MemorySegment output_profile(MemorySegment struct) {
        return struct.get(output_profile$LAYOUT, output_profile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *output_profile
     * }
     */
    public static void output_profile(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(output_profile$LAYOUT, output_profile$OFFSET, fieldValue);
    }

    private static final AddressLayout camera_profile$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("camera_profile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *camera_profile
     * }
     */
    public static final AddressLayout camera_profile$layout() {
        return camera_profile$LAYOUT;
    }

    private static final long camera_profile$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *camera_profile
     * }
     */
    public static final long camera_profile$offset() {
        return camera_profile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *camera_profile
     * }
     */
    public static MemorySegment camera_profile(MemorySegment struct) {
        return struct.get(camera_profile$LAYOUT, camera_profile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *camera_profile
     * }
     */
    public static void camera_profile(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(camera_profile$LAYOUT, camera_profile$OFFSET, fieldValue);
    }

    private static final AddressLayout bad_pixels$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("bad_pixels"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *bad_pixels
     * }
     */
    public static final AddressLayout bad_pixels$layout() {
        return bad_pixels$LAYOUT;
    }

    private static final long bad_pixels$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *bad_pixels
     * }
     */
    public static final long bad_pixels$offset() {
        return bad_pixels$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *bad_pixels
     * }
     */
    public static MemorySegment bad_pixels(MemorySegment struct) {
        return struct.get(bad_pixels$LAYOUT, bad_pixels$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *bad_pixels
     * }
     */
    public static void bad_pixels(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(bad_pixels$LAYOUT, bad_pixels$OFFSET, fieldValue);
    }

    private static final AddressLayout dark_frame$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dark_frame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *dark_frame
     * }
     */
    public static final AddressLayout dark_frame$layout() {
        return dark_frame$LAYOUT;
    }

    private static final long dark_frame$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *dark_frame
     * }
     */
    public static final long dark_frame$offset() {
        return dark_frame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *dark_frame
     * }
     */
    public static MemorySegment dark_frame(MemorySegment struct) {
        return struct.get(dark_frame$LAYOUT, dark_frame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *dark_frame
     * }
     */
    public static void dark_frame(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dark_frame$LAYOUT, dark_frame$OFFSET, fieldValue);
    }

    private static final OfInt output_bps$LAYOUT = (OfInt)$LAYOUT.select(groupElement("output_bps"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int output_bps
     * }
     */
    public static final OfInt output_bps$layout() {
        return output_bps$LAYOUT;
    }

    private static final long output_bps$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int output_bps
     * }
     */
    public static final long output_bps$offset() {
        return output_bps$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int output_bps
     * }
     */
    public static int output_bps(MemorySegment struct) {
        return struct.get(output_bps$LAYOUT, output_bps$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int output_bps
     * }
     */
    public static void output_bps(MemorySegment struct, int fieldValue) {
        struct.set(output_bps$LAYOUT, output_bps$OFFSET, fieldValue);
    }

    private static final OfInt output_tiff$LAYOUT = (OfInt)$LAYOUT.select(groupElement("output_tiff"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int output_tiff
     * }
     */
    public static final OfInt output_tiff$layout() {
        return output_tiff$LAYOUT;
    }

    private static final long output_tiff$OFFSET = 204;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int output_tiff
     * }
     */
    public static final long output_tiff$offset() {
        return output_tiff$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int output_tiff
     * }
     */
    public static int output_tiff(MemorySegment struct) {
        return struct.get(output_tiff$LAYOUT, output_tiff$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int output_tiff
     * }
     */
    public static void output_tiff(MemorySegment struct, int fieldValue) {
        struct.set(output_tiff$LAYOUT, output_tiff$OFFSET, fieldValue);
    }

    private static final OfInt output_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("output_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int output_flags
     * }
     */
    public static final OfInt output_flags$layout() {
        return output_flags$LAYOUT;
    }

    private static final long output_flags$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int output_flags
     * }
     */
    public static final long output_flags$offset() {
        return output_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int output_flags
     * }
     */
    public static int output_flags(MemorySegment struct) {
        return struct.get(output_flags$LAYOUT, output_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int output_flags
     * }
     */
    public static void output_flags(MemorySegment struct, int fieldValue) {
        struct.set(output_flags$LAYOUT, output_flags$OFFSET, fieldValue);
    }

    private static final OfInt user_flip$LAYOUT = (OfInt)$LAYOUT.select(groupElement("user_flip"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int user_flip
     * }
     */
    public static final OfInt user_flip$layout() {
        return user_flip$LAYOUT;
    }

    private static final long user_flip$OFFSET = 212;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int user_flip
     * }
     */
    public static final long user_flip$offset() {
        return user_flip$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int user_flip
     * }
     */
    public static int user_flip(MemorySegment struct) {
        return struct.get(user_flip$LAYOUT, user_flip$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int user_flip
     * }
     */
    public static void user_flip(MemorySegment struct, int fieldValue) {
        struct.set(user_flip$LAYOUT, user_flip$OFFSET, fieldValue);
    }

    private static final OfInt user_qual$LAYOUT = (OfInt)$LAYOUT.select(groupElement("user_qual"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int user_qual
     * }
     */
    public static final OfInt user_qual$layout() {
        return user_qual$LAYOUT;
    }

    private static final long user_qual$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int user_qual
     * }
     */
    public static final long user_qual$offset() {
        return user_qual$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int user_qual
     * }
     */
    public static int user_qual(MemorySegment struct) {
        return struct.get(user_qual$LAYOUT, user_qual$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int user_qual
     * }
     */
    public static void user_qual(MemorySegment struct, int fieldValue) {
        struct.set(user_qual$LAYOUT, user_qual$OFFSET, fieldValue);
    }

    private static final OfInt user_black$LAYOUT = (OfInt)$LAYOUT.select(groupElement("user_black"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int user_black
     * }
     */
    public static final OfInt user_black$layout() {
        return user_black$LAYOUT;
    }

    private static final long user_black$OFFSET = 220;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int user_black
     * }
     */
    public static final long user_black$offset() {
        return user_black$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int user_black
     * }
     */
    public static int user_black(MemorySegment struct) {
        return struct.get(user_black$LAYOUT, user_black$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int user_black
     * }
     */
    public static void user_black(MemorySegment struct, int fieldValue) {
        struct.set(user_black$LAYOUT, user_black$OFFSET, fieldValue);
    }

    private static final SequenceLayout user_cblack$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("user_cblack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int user_cblack[4]
     * }
     */
    public static final SequenceLayout user_cblack$layout() {
        return user_cblack$LAYOUT;
    }

    private static final long user_cblack$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int user_cblack[4]
     * }
     */
    public static final long user_cblack$offset() {
        return user_cblack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int user_cblack[4]
     * }
     */
    public static MemorySegment user_cblack(MemorySegment struct) {
        return struct.asSlice(user_cblack$OFFSET, user_cblack$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int user_cblack[4]
     * }
     */
    public static void user_cblack(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, user_cblack$OFFSET, user_cblack$LAYOUT.byteSize());
    }

    private static long[] user_cblack$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int user_cblack[4]
     * }
     */
    public static long[] user_cblack$dimensions() {
        return user_cblack$DIMS;
    }
    private static final VarHandle user_cblack$ELEM_HANDLE = user_cblack$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int user_cblack[4]
     * }
     */
    public static int user_cblack(MemorySegment struct, long index0) {
        return (int)user_cblack$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int user_cblack[4]
     * }
     */
    public static void user_cblack(MemorySegment struct, long index0, int fieldValue) {
        user_cblack$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt user_sat$LAYOUT = (OfInt)$LAYOUT.select(groupElement("user_sat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int user_sat
     * }
     */
    public static final OfInt user_sat$layout() {
        return user_sat$LAYOUT;
    }

    private static final long user_sat$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int user_sat
     * }
     */
    public static final long user_sat$offset() {
        return user_sat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int user_sat
     * }
     */
    public static int user_sat(MemorySegment struct) {
        return struct.get(user_sat$LAYOUT, user_sat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int user_sat
     * }
     */
    public static void user_sat(MemorySegment struct, int fieldValue) {
        struct.set(user_sat$LAYOUT, user_sat$OFFSET, fieldValue);
    }

    private static final OfInt med_passes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("med_passes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int med_passes
     * }
     */
    public static final OfInt med_passes$layout() {
        return med_passes$LAYOUT;
    }

    private static final long med_passes$OFFSET = 244;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int med_passes
     * }
     */
    public static final long med_passes$offset() {
        return med_passes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int med_passes
     * }
     */
    public static int med_passes(MemorySegment struct) {
        return struct.get(med_passes$LAYOUT, med_passes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int med_passes
     * }
     */
    public static void med_passes(MemorySegment struct, int fieldValue) {
        struct.set(med_passes$LAYOUT, med_passes$OFFSET, fieldValue);
    }

    private static final OfFloat auto_bright_thr$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("auto_bright_thr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float auto_bright_thr
     * }
     */
    public static final OfFloat auto_bright_thr$layout() {
        return auto_bright_thr$LAYOUT;
    }

    private static final long auto_bright_thr$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float auto_bright_thr
     * }
     */
    public static final long auto_bright_thr$offset() {
        return auto_bright_thr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float auto_bright_thr
     * }
     */
    public static float auto_bright_thr(MemorySegment struct) {
        return struct.get(auto_bright_thr$LAYOUT, auto_bright_thr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float auto_bright_thr
     * }
     */
    public static void auto_bright_thr(MemorySegment struct, float fieldValue) {
        struct.set(auto_bright_thr$LAYOUT, auto_bright_thr$OFFSET, fieldValue);
    }

    private static final OfFloat adjust_maximum_thr$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("adjust_maximum_thr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float adjust_maximum_thr
     * }
     */
    public static final OfFloat adjust_maximum_thr$layout() {
        return adjust_maximum_thr$LAYOUT;
    }

    private static final long adjust_maximum_thr$OFFSET = 252;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float adjust_maximum_thr
     * }
     */
    public static final long adjust_maximum_thr$offset() {
        return adjust_maximum_thr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float adjust_maximum_thr
     * }
     */
    public static float adjust_maximum_thr(MemorySegment struct) {
        return struct.get(adjust_maximum_thr$LAYOUT, adjust_maximum_thr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float adjust_maximum_thr
     * }
     */
    public static void adjust_maximum_thr(MemorySegment struct, float fieldValue) {
        struct.set(adjust_maximum_thr$LAYOUT, adjust_maximum_thr$OFFSET, fieldValue);
    }

    private static final OfInt no_auto_bright$LAYOUT = (OfInt)$LAYOUT.select(groupElement("no_auto_bright"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int no_auto_bright
     * }
     */
    public static final OfInt no_auto_bright$layout() {
        return no_auto_bright$LAYOUT;
    }

    private static final long no_auto_bright$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int no_auto_bright
     * }
     */
    public static final long no_auto_bright$offset() {
        return no_auto_bright$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int no_auto_bright
     * }
     */
    public static int no_auto_bright(MemorySegment struct) {
        return struct.get(no_auto_bright$LAYOUT, no_auto_bright$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int no_auto_bright
     * }
     */
    public static void no_auto_bright(MemorySegment struct, int fieldValue) {
        struct.set(no_auto_bright$LAYOUT, no_auto_bright$OFFSET, fieldValue);
    }

    private static final OfInt use_fuji_rotate$LAYOUT = (OfInt)$LAYOUT.select(groupElement("use_fuji_rotate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int use_fuji_rotate
     * }
     */
    public static final OfInt use_fuji_rotate$layout() {
        return use_fuji_rotate$LAYOUT;
    }

    private static final long use_fuji_rotate$OFFSET = 260;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int use_fuji_rotate
     * }
     */
    public static final long use_fuji_rotate$offset() {
        return use_fuji_rotate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int use_fuji_rotate
     * }
     */
    public static int use_fuji_rotate(MemorySegment struct) {
        return struct.get(use_fuji_rotate$LAYOUT, use_fuji_rotate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int use_fuji_rotate
     * }
     */
    public static void use_fuji_rotate(MemorySegment struct, int fieldValue) {
        struct.set(use_fuji_rotate$LAYOUT, use_fuji_rotate$OFFSET, fieldValue);
    }

    private static final OfInt green_matching$LAYOUT = (OfInt)$LAYOUT.select(groupElement("green_matching"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int green_matching
     * }
     */
    public static final OfInt green_matching$layout() {
        return green_matching$LAYOUT;
    }

    private static final long green_matching$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int green_matching
     * }
     */
    public static final long green_matching$offset() {
        return green_matching$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int green_matching
     * }
     */
    public static int green_matching(MemorySegment struct) {
        return struct.get(green_matching$LAYOUT, green_matching$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int green_matching
     * }
     */
    public static void green_matching(MemorySegment struct, int fieldValue) {
        struct.set(green_matching$LAYOUT, green_matching$OFFSET, fieldValue);
    }

    private static final OfInt dcb_iterations$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dcb_iterations"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dcb_iterations
     * }
     */
    public static final OfInt dcb_iterations$layout() {
        return dcb_iterations$LAYOUT;
    }

    private static final long dcb_iterations$OFFSET = 268;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dcb_iterations
     * }
     */
    public static final long dcb_iterations$offset() {
        return dcb_iterations$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dcb_iterations
     * }
     */
    public static int dcb_iterations(MemorySegment struct) {
        return struct.get(dcb_iterations$LAYOUT, dcb_iterations$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dcb_iterations
     * }
     */
    public static void dcb_iterations(MemorySegment struct, int fieldValue) {
        struct.set(dcb_iterations$LAYOUT, dcb_iterations$OFFSET, fieldValue);
    }

    private static final OfInt dcb_enhance_fl$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dcb_enhance_fl"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dcb_enhance_fl
     * }
     */
    public static final OfInt dcb_enhance_fl$layout() {
        return dcb_enhance_fl$LAYOUT;
    }

    private static final long dcb_enhance_fl$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dcb_enhance_fl
     * }
     */
    public static final long dcb_enhance_fl$offset() {
        return dcb_enhance_fl$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dcb_enhance_fl
     * }
     */
    public static int dcb_enhance_fl(MemorySegment struct) {
        return struct.get(dcb_enhance_fl$LAYOUT, dcb_enhance_fl$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dcb_enhance_fl
     * }
     */
    public static void dcb_enhance_fl(MemorySegment struct, int fieldValue) {
        struct.set(dcb_enhance_fl$LAYOUT, dcb_enhance_fl$OFFSET, fieldValue);
    }

    private static final OfInt fbdd_noiserd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fbdd_noiserd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int fbdd_noiserd
     * }
     */
    public static final OfInt fbdd_noiserd$layout() {
        return fbdd_noiserd$LAYOUT;
    }

    private static final long fbdd_noiserd$OFFSET = 276;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int fbdd_noiserd
     * }
     */
    public static final long fbdd_noiserd$offset() {
        return fbdd_noiserd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int fbdd_noiserd
     * }
     */
    public static int fbdd_noiserd(MemorySegment struct) {
        return struct.get(fbdd_noiserd$LAYOUT, fbdd_noiserd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int fbdd_noiserd
     * }
     */
    public static void fbdd_noiserd(MemorySegment struct, int fieldValue) {
        struct.set(fbdd_noiserd$LAYOUT, fbdd_noiserd$OFFSET, fieldValue);
    }

    private static final OfInt exp_correc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("exp_correc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int exp_correc
     * }
     */
    public static final OfInt exp_correc$layout() {
        return exp_correc$LAYOUT;
    }

    private static final long exp_correc$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int exp_correc
     * }
     */
    public static final long exp_correc$offset() {
        return exp_correc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int exp_correc
     * }
     */
    public static int exp_correc(MemorySegment struct) {
        return struct.get(exp_correc$LAYOUT, exp_correc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int exp_correc
     * }
     */
    public static void exp_correc(MemorySegment struct, int fieldValue) {
        struct.set(exp_correc$LAYOUT, exp_correc$OFFSET, fieldValue);
    }

    private static final OfFloat exp_shift$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("exp_shift"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float exp_shift
     * }
     */
    public static final OfFloat exp_shift$layout() {
        return exp_shift$LAYOUT;
    }

    private static final long exp_shift$OFFSET = 284;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float exp_shift
     * }
     */
    public static final long exp_shift$offset() {
        return exp_shift$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float exp_shift
     * }
     */
    public static float exp_shift(MemorySegment struct) {
        return struct.get(exp_shift$LAYOUT, exp_shift$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float exp_shift
     * }
     */
    public static void exp_shift(MemorySegment struct, float fieldValue) {
        struct.set(exp_shift$LAYOUT, exp_shift$OFFSET, fieldValue);
    }

    private static final OfFloat exp_preser$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("exp_preser"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float exp_preser
     * }
     */
    public static final OfFloat exp_preser$layout() {
        return exp_preser$LAYOUT;
    }

    private static final long exp_preser$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float exp_preser
     * }
     */
    public static final long exp_preser$offset() {
        return exp_preser$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float exp_preser
     * }
     */
    public static float exp_preser(MemorySegment struct) {
        return struct.get(exp_preser$LAYOUT, exp_preser$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float exp_preser
     * }
     */
    public static void exp_preser(MemorySegment struct, float fieldValue) {
        struct.set(exp_preser$LAYOUT, exp_preser$OFFSET, fieldValue);
    }

    private static final OfInt no_auto_scale$LAYOUT = (OfInt)$LAYOUT.select(groupElement("no_auto_scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int no_auto_scale
     * }
     */
    public static final OfInt no_auto_scale$layout() {
        return no_auto_scale$LAYOUT;
    }

    private static final long no_auto_scale$OFFSET = 292;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int no_auto_scale
     * }
     */
    public static final long no_auto_scale$offset() {
        return no_auto_scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int no_auto_scale
     * }
     */
    public static int no_auto_scale(MemorySegment struct) {
        return struct.get(no_auto_scale$LAYOUT, no_auto_scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int no_auto_scale
     * }
     */
    public static void no_auto_scale(MemorySegment struct, int fieldValue) {
        struct.set(no_auto_scale$LAYOUT, no_auto_scale$OFFSET, fieldValue);
    }

    private static final OfInt no_interpolation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("no_interpolation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int no_interpolation
     * }
     */
    public static final OfInt no_interpolation$layout() {
        return no_interpolation$LAYOUT;
    }

    private static final long no_interpolation$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int no_interpolation
     * }
     */
    public static final long no_interpolation$offset() {
        return no_interpolation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int no_interpolation
     * }
     */
    public static int no_interpolation(MemorySegment struct) {
        return struct.get(no_interpolation$LAYOUT, no_interpolation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int no_interpolation
     * }
     */
    public static void no_interpolation(MemorySegment struct, int fieldValue) {
        struct.set(no_interpolation$LAYOUT, no_interpolation$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

