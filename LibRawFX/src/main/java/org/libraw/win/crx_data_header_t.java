// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct crx_data_header_t {
 *     int version;
 *     int f_width;
 *     int f_height;
 *     int tileWidth;
 *     int tileHeight;
 *     int nBits;
 *     int nPlanes;
 *     int cfaLayout;
 *     int encType;
 *     int imageLevels;
 *     int hasTileCols;
 *     int hasTileRows;
 *     int mdatHdrSize;
 *     unsigned int MediaSize;
 *     long long MediaOffset;
 *     unsigned int MediaType;
 * };
 * }
 */
public class crx_data_header_t {

    public static MemoryLayout $LAYOUT() {
        return constants$95.const$2;
    }
    public static VarHandle version$VH() {
        return constants$95.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int version;
     * }
     */
    public static int version$get(MemorySegment seg) {
        return (int)constants$95.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int version;
     * }
     */
    public static void version$set(MemorySegment seg, int x) {
        constants$95.const$3.set(seg, x);
    }
    public static int version$get(MemorySegment seg, long index) {
        return (int)constants$95.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, int x) {
        constants$95.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle f_width$VH() {
        return constants$95.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int f_width;
     * }
     */
    public static int f_width$get(MemorySegment seg) {
        return (int)constants$95.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int f_width;
     * }
     */
    public static void f_width$set(MemorySegment seg, int x) {
        constants$95.const$4.set(seg, x);
    }
    public static int f_width$get(MemorySegment seg, long index) {
        return (int)constants$95.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void f_width$set(MemorySegment seg, long index, int x) {
        constants$95.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle f_height$VH() {
        return constants$95.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int f_height;
     * }
     */
    public static int f_height$get(MemorySegment seg) {
        return (int)constants$95.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int f_height;
     * }
     */
    public static void f_height$set(MemorySegment seg, int x) {
        constants$95.const$5.set(seg, x);
    }
    public static int f_height$get(MemorySegment seg, long index) {
        return (int)constants$95.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void f_height$set(MemorySegment seg, long index, int x) {
        constants$95.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tileWidth$VH() {
        return constants$96.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int tileWidth;
     * }
     */
    public static int tileWidth$get(MemorySegment seg) {
        return (int)constants$96.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int tileWidth;
     * }
     */
    public static void tileWidth$set(MemorySegment seg, int x) {
        constants$96.const$0.set(seg, x);
    }
    public static int tileWidth$get(MemorySegment seg, long index) {
        return (int)constants$96.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void tileWidth$set(MemorySegment seg, long index, int x) {
        constants$96.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tileHeight$VH() {
        return constants$96.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int tileHeight;
     * }
     */
    public static int tileHeight$get(MemorySegment seg) {
        return (int)constants$96.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int tileHeight;
     * }
     */
    public static void tileHeight$set(MemorySegment seg, int x) {
        constants$96.const$1.set(seg, x);
    }
    public static int tileHeight$get(MemorySegment seg, long index) {
        return (int)constants$96.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void tileHeight$set(MemorySegment seg, long index, int x) {
        constants$96.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nBits$VH() {
        return constants$96.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int nBits;
     * }
     */
    public static int nBits$get(MemorySegment seg) {
        return (int)constants$96.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int nBits;
     * }
     */
    public static void nBits$set(MemorySegment seg, int x) {
        constants$96.const$2.set(seg, x);
    }
    public static int nBits$get(MemorySegment seg, long index) {
        return (int)constants$96.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void nBits$set(MemorySegment seg, long index, int x) {
        constants$96.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nPlanes$VH() {
        return constants$96.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int nPlanes;
     * }
     */
    public static int nPlanes$get(MemorySegment seg) {
        return (int)constants$96.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int nPlanes;
     * }
     */
    public static void nPlanes$set(MemorySegment seg, int x) {
        constants$96.const$3.set(seg, x);
    }
    public static int nPlanes$get(MemorySegment seg, long index) {
        return (int)constants$96.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void nPlanes$set(MemorySegment seg, long index, int x) {
        constants$96.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cfaLayout$VH() {
        return constants$96.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int cfaLayout;
     * }
     */
    public static int cfaLayout$get(MemorySegment seg) {
        return (int)constants$96.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int cfaLayout;
     * }
     */
    public static void cfaLayout$set(MemorySegment seg, int x) {
        constants$96.const$4.set(seg, x);
    }
    public static int cfaLayout$get(MemorySegment seg, long index) {
        return (int)constants$96.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void cfaLayout$set(MemorySegment seg, long index, int x) {
        constants$96.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle encType$VH() {
        return constants$96.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int encType;
     * }
     */
    public static int encType$get(MemorySegment seg) {
        return (int)constants$96.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int encType;
     * }
     */
    public static void encType$set(MemorySegment seg, int x) {
        constants$96.const$5.set(seg, x);
    }
    public static int encType$get(MemorySegment seg, long index) {
        return (int)constants$96.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void encType$set(MemorySegment seg, long index, int x) {
        constants$96.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle imageLevels$VH() {
        return constants$97.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int imageLevels;
     * }
     */
    public static int imageLevels$get(MemorySegment seg) {
        return (int)constants$97.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int imageLevels;
     * }
     */
    public static void imageLevels$set(MemorySegment seg, int x) {
        constants$97.const$0.set(seg, x);
    }
    public static int imageLevels$get(MemorySegment seg, long index) {
        return (int)constants$97.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void imageLevels$set(MemorySegment seg, long index, int x) {
        constants$97.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hasTileCols$VH() {
        return constants$97.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int hasTileCols;
     * }
     */
    public static int hasTileCols$get(MemorySegment seg) {
        return (int)constants$97.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int hasTileCols;
     * }
     */
    public static void hasTileCols$set(MemorySegment seg, int x) {
        constants$97.const$1.set(seg, x);
    }
    public static int hasTileCols$get(MemorySegment seg, long index) {
        return (int)constants$97.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void hasTileCols$set(MemorySegment seg, long index, int x) {
        constants$97.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hasTileRows$VH() {
        return constants$97.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int hasTileRows;
     * }
     */
    public static int hasTileRows$get(MemorySegment seg) {
        return (int)constants$97.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int hasTileRows;
     * }
     */
    public static void hasTileRows$set(MemorySegment seg, int x) {
        constants$97.const$2.set(seg, x);
    }
    public static int hasTileRows$get(MemorySegment seg, long index) {
        return (int)constants$97.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void hasTileRows$set(MemorySegment seg, long index, int x) {
        constants$97.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mdatHdrSize$VH() {
        return constants$97.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int mdatHdrSize;
     * }
     */
    public static int mdatHdrSize$get(MemorySegment seg) {
        return (int)constants$97.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int mdatHdrSize;
     * }
     */
    public static void mdatHdrSize$set(MemorySegment seg, int x) {
        constants$97.const$3.set(seg, x);
    }
    public static int mdatHdrSize$get(MemorySegment seg, long index) {
        return (int)constants$97.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void mdatHdrSize$set(MemorySegment seg, long index, int x) {
        constants$97.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MediaSize$VH() {
        return constants$97.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int MediaSize;
     * }
     */
    public static int MediaSize$get(MemorySegment seg) {
        return (int)constants$97.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int MediaSize;
     * }
     */
    public static void MediaSize$set(MemorySegment seg, int x) {
        constants$97.const$4.set(seg, x);
    }
    public static int MediaSize$get(MemorySegment seg, long index) {
        return (int)constants$97.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void MediaSize$set(MemorySegment seg, long index, int x) {
        constants$97.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MediaOffset$VH() {
        return constants$97.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long MediaOffset;
     * }
     */
    public static long MediaOffset$get(MemorySegment seg) {
        return (long)constants$97.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long MediaOffset;
     * }
     */
    public static void MediaOffset$set(MemorySegment seg, long x) {
        constants$97.const$5.set(seg, x);
    }
    public static long MediaOffset$get(MemorySegment seg, long index) {
        return (long)constants$97.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void MediaOffset$set(MemorySegment seg, long index, long x) {
        constants$97.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MediaType$VH() {
        return constants$98.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int MediaType;
     * }
     */
    public static int MediaType$get(MemorySegment seg) {
        return (int)constants$98.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int MediaType;
     * }
     */
    public static void MediaType$set(MemorySegment seg, int x) {
        constants$98.const$0.set(seg, x);
    }
    public static int MediaType$get(MemorySegment seg, long index) {
        return (int)constants$98.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void MediaType$set(MemorySegment seg, long index, int x) {
        constants$98.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


