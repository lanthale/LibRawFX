// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct jhead {
 *     int algo;
 *     int bits;
 *     int high;
 *     int wide;
 *     int clrs;
 *     int sraw;
 *     int psv;
 *     int restart;
 *     int vpred[6];
 *     unsigned short quant[64];
 *     unsigned short idct[64];
 *     unsigned short* huff[20];
 *     unsigned short* free[20];
 *     unsigned short* row;
 * };
 * }
 */
public class jhead {

    public static MemoryLayout $LAYOUT() {
        return constants$111.const$2;
    }
    public static VarHandle algo$VH() {
        return constants$111.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int algo;
     * }
     */
    public static int algo$get(MemorySegment seg) {
        return (int)constants$111.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int algo;
     * }
     */
    public static void algo$set(MemorySegment seg, int x) {
        constants$111.const$3.set(seg, x);
    }
    public static int algo$get(MemorySegment seg, long index) {
        return (int)constants$111.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void algo$set(MemorySegment seg, long index, int x) {
        constants$111.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bits$VH() {
        return constants$111.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int bits;
     * }
     */
    public static int bits$get(MemorySegment seg) {
        return (int)constants$111.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int bits;
     * }
     */
    public static void bits$set(MemorySegment seg, int x) {
        constants$111.const$4.set(seg, x);
    }
    public static int bits$get(MemorySegment seg, long index) {
        return (int)constants$111.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void bits$set(MemorySegment seg, long index, int x) {
        constants$111.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle high$VH() {
        return constants$111.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int high;
     * }
     */
    public static int high$get(MemorySegment seg) {
        return (int)constants$111.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int high;
     * }
     */
    public static void high$set(MemorySegment seg, int x) {
        constants$111.const$5.set(seg, x);
    }
    public static int high$get(MemorySegment seg, long index) {
        return (int)constants$111.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void high$set(MemorySegment seg, long index, int x) {
        constants$111.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle wide$VH() {
        return constants$112.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int wide;
     * }
     */
    public static int wide$get(MemorySegment seg) {
        return (int)constants$112.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int wide;
     * }
     */
    public static void wide$set(MemorySegment seg, int x) {
        constants$112.const$0.set(seg, x);
    }
    public static int wide$get(MemorySegment seg, long index) {
        return (int)constants$112.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void wide$set(MemorySegment seg, long index, int x) {
        constants$112.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle clrs$VH() {
        return constants$112.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int clrs;
     * }
     */
    public static int clrs$get(MemorySegment seg) {
        return (int)constants$112.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int clrs;
     * }
     */
    public static void clrs$set(MemorySegment seg, int x) {
        constants$112.const$1.set(seg, x);
    }
    public static int clrs$get(MemorySegment seg, long index) {
        return (int)constants$112.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void clrs$set(MemorySegment seg, long index, int x) {
        constants$112.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sraw$VH() {
        return constants$112.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int sraw;
     * }
     */
    public static int sraw$get(MemorySegment seg) {
        return (int)constants$112.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int sraw;
     * }
     */
    public static void sraw$set(MemorySegment seg, int x) {
        constants$112.const$2.set(seg, x);
    }
    public static int sraw$get(MemorySegment seg, long index) {
        return (int)constants$112.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void sraw$set(MemorySegment seg, long index, int x) {
        constants$112.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle psv$VH() {
        return constants$112.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int psv;
     * }
     */
    public static int psv$get(MemorySegment seg) {
        return (int)constants$112.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int psv;
     * }
     */
    public static void psv$set(MemorySegment seg, int x) {
        constants$112.const$3.set(seg, x);
    }
    public static int psv$get(MemorySegment seg, long index) {
        return (int)constants$112.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void psv$set(MemorySegment seg, long index, int x) {
        constants$112.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle restart$VH() {
        return constants$112.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int restart;
     * }
     */
    public static int restart$get(MemorySegment seg) {
        return (int)constants$112.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int restart;
     * }
     */
    public static void restart$set(MemorySegment seg, int x) {
        constants$112.const$4.set(seg, x);
    }
    public static int restart$get(MemorySegment seg, long index) {
        return (int)constants$112.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void restart$set(MemorySegment seg, long index, int x) {
        constants$112.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment vpred$slice(MemorySegment seg) {
        return seg.asSlice(32, 24);
    }
    public static MemorySegment quant$slice(MemorySegment seg) {
        return seg.asSlice(56, 128);
    }
    public static MemorySegment idct$slice(MemorySegment seg) {
        return seg.asSlice(184, 128);
    }
    public static MemorySegment huff$slice(MemorySegment seg) {
        return seg.asSlice(312, 160);
    }
    public static MemorySegment free$slice(MemorySegment seg) {
        return seg.asSlice(472, 160);
    }
    public static VarHandle row$VH() {
        return constants$112.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short* row;
     * }
     */
    public static MemorySegment row$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$112.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short* row;
     * }
     */
    public static void row$set(MemorySegment seg, MemorySegment x) {
        constants$112.const$5.set(seg, x);
    }
    public static MemorySegment row$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$112.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void row$set(MemorySegment seg, long index, MemorySegment x) {
        constants$112.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


