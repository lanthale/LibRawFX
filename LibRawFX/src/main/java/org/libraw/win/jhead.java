// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class jhead {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("algo"),
        Constants$root.C_LONG$LAYOUT.withName("bits"),
        Constants$root.C_LONG$LAYOUT.withName("high"),
        Constants$root.C_LONG$LAYOUT.withName("wide"),
        Constants$root.C_LONG$LAYOUT.withName("clrs"),
        Constants$root.C_LONG$LAYOUT.withName("sraw"),
        Constants$root.C_LONG$LAYOUT.withName("psv"),
        Constants$root.C_LONG$LAYOUT.withName("restart"),
        MemoryLayout.sequenceLayout(6, Constants$root.C_LONG$LAYOUT).withName("vpred"),
        MemoryLayout.sequenceLayout(64, Constants$root.C_SHORT$LAYOUT).withName("quant"),
        MemoryLayout.sequenceLayout(64, Constants$root.C_SHORT$LAYOUT).withName("idct"),
        MemoryLayout.sequenceLayout(20, Constants$root.C_POINTER$LAYOUT).withName("huff"),
        MemoryLayout.sequenceLayout(20, Constants$root.C_POINTER$LAYOUT).withName("free"),
        Constants$root.C_POINTER$LAYOUT.withName("row")
    ).withName("jhead");
    public static MemoryLayout $LAYOUT() {
        return jhead.$struct$LAYOUT;
    }
    static final VarHandle algo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("algo"));
    public static VarHandle algo$VH() {
        return jhead.algo$VH;
    }
    public static int algo$get(MemorySegment seg) {
        return (int)jhead.algo$VH.get(seg);
    }
    public static void algo$set( MemorySegment seg, int x) {
        jhead.algo$VH.set(seg, x);
    }
    public static int algo$get(MemorySegment seg, long index) {
        return (int)jhead.algo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void algo$set(MemorySegment seg, long index, int x) {
        jhead.algo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bits$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bits"));
    public static VarHandle bits$VH() {
        return jhead.bits$VH;
    }
    public static int bits$get(MemorySegment seg) {
        return (int)jhead.bits$VH.get(seg);
    }
    public static void bits$set( MemorySegment seg, int x) {
        jhead.bits$VH.set(seg, x);
    }
    public static int bits$get(MemorySegment seg, long index) {
        return (int)jhead.bits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bits$set(MemorySegment seg, long index, int x) {
        jhead.bits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle high$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("high"));
    public static VarHandle high$VH() {
        return jhead.high$VH;
    }
    public static int high$get(MemorySegment seg) {
        return (int)jhead.high$VH.get(seg);
    }
    public static void high$set( MemorySegment seg, int x) {
        jhead.high$VH.set(seg, x);
    }
    public static int high$get(MemorySegment seg, long index) {
        return (int)jhead.high$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void high$set(MemorySegment seg, long index, int x) {
        jhead.high$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wide$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wide"));
    public static VarHandle wide$VH() {
        return jhead.wide$VH;
    }
    public static int wide$get(MemorySegment seg) {
        return (int)jhead.wide$VH.get(seg);
    }
    public static void wide$set( MemorySegment seg, int x) {
        jhead.wide$VH.set(seg, x);
    }
    public static int wide$get(MemorySegment seg, long index) {
        return (int)jhead.wide$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wide$set(MemorySegment seg, long index, int x) {
        jhead.wide$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle clrs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("clrs"));
    public static VarHandle clrs$VH() {
        return jhead.clrs$VH;
    }
    public static int clrs$get(MemorySegment seg) {
        return (int)jhead.clrs$VH.get(seg);
    }
    public static void clrs$set( MemorySegment seg, int x) {
        jhead.clrs$VH.set(seg, x);
    }
    public static int clrs$get(MemorySegment seg, long index) {
        return (int)jhead.clrs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void clrs$set(MemorySegment seg, long index, int x) {
        jhead.clrs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sraw$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sraw"));
    public static VarHandle sraw$VH() {
        return jhead.sraw$VH;
    }
    public static int sraw$get(MemorySegment seg) {
        return (int)jhead.sraw$VH.get(seg);
    }
    public static void sraw$set( MemorySegment seg, int x) {
        jhead.sraw$VH.set(seg, x);
    }
    public static int sraw$get(MemorySegment seg, long index) {
        return (int)jhead.sraw$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sraw$set(MemorySegment seg, long index, int x) {
        jhead.sraw$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle psv$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("psv"));
    public static VarHandle psv$VH() {
        return jhead.psv$VH;
    }
    public static int psv$get(MemorySegment seg) {
        return (int)jhead.psv$VH.get(seg);
    }
    public static void psv$set( MemorySegment seg, int x) {
        jhead.psv$VH.set(seg, x);
    }
    public static int psv$get(MemorySegment seg, long index) {
        return (int)jhead.psv$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void psv$set(MemorySegment seg, long index, int x) {
        jhead.psv$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle restart$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("restart"));
    public static VarHandle restart$VH() {
        return jhead.restart$VH;
    }
    public static int restart$get(MemorySegment seg) {
        return (int)jhead.restart$VH.get(seg);
    }
    public static void restart$set( MemorySegment seg, int x) {
        jhead.restart$VH.set(seg, x);
    }
    public static int restart$get(MemorySegment seg, long index) {
        return (int)jhead.restart$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void restart$set(MemorySegment seg, long index, int x) {
        jhead.restart$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment vpred$slice(MemorySegment seg) {
        return seg.asSlice(32, 24);
    }
    public static MemorySegment quant$slice(MemorySegment seg) {
        return seg.asSlice(56, 128);
    }
    public static MemorySegment idct$slice(MemorySegment seg) {
        return seg.asSlice(184, 128);
    }
    public static MemorySegment huff$slice(MemorySegment seg) {
        return seg.asSlice(312, 160);
    }
    public static MemorySegment free$slice(MemorySegment seg) {
        return seg.asSlice(472, 160);
    }
    static final VarHandle row$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("row"));
    public static VarHandle row$VH() {
        return jhead.row$VH;
    }
    public static MemoryAddress row$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)jhead.row$VH.get(seg);
    }
    public static void row$set( MemorySegment seg, MemoryAddress x) {
        jhead.row$VH.set(seg, x);
    }
    public static MemoryAddress row$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)jhead.row$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void row$set(MemorySegment seg, long index, MemoryAddress x) {
        jhead.row$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


