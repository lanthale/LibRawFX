// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_output_params_t {
 *     unsigned int greybox[4];
 *     unsigned int cropbox[4];
 *     double aber[4];
 *     double gamm[6];
 *     float user_mul[4];
 *     float bright;
 *     float threshold;
 *     int half_size;
 *     int four_color_rgb;
 *     int highlight;
 *     int use_auto_wb;
 *     int use_camera_wb;
 *     int use_camera_matrix;
 *     int output_color;
 *     char* output_profile;
 *     char* camera_profile;
 *     char* bad_pixels;
 *     char* dark_frame;
 *     int output_bps;
 *     int output_tiff;
 *     int output_flags;
 *     int user_flip;
 *     int user_qual;
 *     int user_black;
 *     int user_cblack[4];
 *     int user_sat;
 *     int med_passes;
 *     float auto_bright_thr;
 *     float adjust_maximum_thr;
 *     int no_auto_bright;
 *     int use_fuji_rotate;
 *     int green_matching;
 *     int dcb_iterations;
 *     int dcb_enhance_fl;
 *     int fbdd_noiserd;
 *     int exp_correc;
 *     float exp_shift;
 *     float exp_preser;
 *     int no_auto_scale;
 *     int no_interpolation;
 * };
 * }
 */
public class libraw_output_params_t {

    public static MemoryLayout $LAYOUT() {
        return constants$69.const$0;
    }
    public static MemorySegment greybox$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment cropbox$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static MemorySegment aber$slice(MemorySegment seg) {
        return seg.asSlice(32, 32);
    }
    public static MemorySegment gamm$slice(MemorySegment seg) {
        return seg.asSlice(64, 48);
    }
    public static MemorySegment user_mul$slice(MemorySegment seg) {
        return seg.asSlice(112, 16);
    }
    public static VarHandle bright$VH() {
        return constants$69.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float bright;
     * }
     */
    public static float bright$get(MemorySegment seg) {
        return (float)constants$69.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float bright;
     * }
     */
    public static void bright$set(MemorySegment seg, float x) {
        constants$69.const$1.set(seg, x);
    }
    public static float bright$get(MemorySegment seg, long index) {
        return (float)constants$69.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void bright$set(MemorySegment seg, long index, float x) {
        constants$69.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle threshold$VH() {
        return constants$69.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float threshold;
     * }
     */
    public static float threshold$get(MemorySegment seg) {
        return (float)constants$69.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float threshold;
     * }
     */
    public static void threshold$set(MemorySegment seg, float x) {
        constants$69.const$2.set(seg, x);
    }
    public static float threshold$get(MemorySegment seg, long index) {
        return (float)constants$69.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void threshold$set(MemorySegment seg, long index, float x) {
        constants$69.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle half_size$VH() {
        return constants$69.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int half_size;
     * }
     */
    public static int half_size$get(MemorySegment seg) {
        return (int)constants$69.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int half_size;
     * }
     */
    public static void half_size$set(MemorySegment seg, int x) {
        constants$69.const$3.set(seg, x);
    }
    public static int half_size$get(MemorySegment seg, long index) {
        return (int)constants$69.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void half_size$set(MemorySegment seg, long index, int x) {
        constants$69.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle four_color_rgb$VH() {
        return constants$69.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int four_color_rgb;
     * }
     */
    public static int four_color_rgb$get(MemorySegment seg) {
        return (int)constants$69.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int four_color_rgb;
     * }
     */
    public static void four_color_rgb$set(MemorySegment seg, int x) {
        constants$69.const$4.set(seg, x);
    }
    public static int four_color_rgb$get(MemorySegment seg, long index) {
        return (int)constants$69.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void four_color_rgb$set(MemorySegment seg, long index, int x) {
        constants$69.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle highlight$VH() {
        return constants$69.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int highlight;
     * }
     */
    public static int highlight$get(MemorySegment seg) {
        return (int)constants$69.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int highlight;
     * }
     */
    public static void highlight$set(MemorySegment seg, int x) {
        constants$69.const$5.set(seg, x);
    }
    public static int highlight$get(MemorySegment seg, long index) {
        return (int)constants$69.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void highlight$set(MemorySegment seg, long index, int x) {
        constants$69.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle use_auto_wb$VH() {
        return constants$70.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int use_auto_wb;
     * }
     */
    public static int use_auto_wb$get(MemorySegment seg) {
        return (int)constants$70.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int use_auto_wb;
     * }
     */
    public static void use_auto_wb$set(MemorySegment seg, int x) {
        constants$70.const$0.set(seg, x);
    }
    public static int use_auto_wb$get(MemorySegment seg, long index) {
        return (int)constants$70.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void use_auto_wb$set(MemorySegment seg, long index, int x) {
        constants$70.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle use_camera_wb$VH() {
        return constants$70.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int use_camera_wb;
     * }
     */
    public static int use_camera_wb$get(MemorySegment seg) {
        return (int)constants$70.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int use_camera_wb;
     * }
     */
    public static void use_camera_wb$set(MemorySegment seg, int x) {
        constants$70.const$1.set(seg, x);
    }
    public static int use_camera_wb$get(MemorySegment seg, long index) {
        return (int)constants$70.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void use_camera_wb$set(MemorySegment seg, long index, int x) {
        constants$70.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle use_camera_matrix$VH() {
        return constants$70.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int use_camera_matrix;
     * }
     */
    public static int use_camera_matrix$get(MemorySegment seg) {
        return (int)constants$70.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int use_camera_matrix;
     * }
     */
    public static void use_camera_matrix$set(MemorySegment seg, int x) {
        constants$70.const$2.set(seg, x);
    }
    public static int use_camera_matrix$get(MemorySegment seg, long index) {
        return (int)constants$70.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void use_camera_matrix$set(MemorySegment seg, long index, int x) {
        constants$70.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle output_color$VH() {
        return constants$70.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int output_color;
     * }
     */
    public static int output_color$get(MemorySegment seg) {
        return (int)constants$70.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int output_color;
     * }
     */
    public static void output_color$set(MemorySegment seg, int x) {
        constants$70.const$3.set(seg, x);
    }
    public static int output_color$get(MemorySegment seg, long index) {
        return (int)constants$70.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void output_color$set(MemorySegment seg, long index, int x) {
        constants$70.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle output_profile$VH() {
        return constants$70.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* output_profile;
     * }
     */
    public static MemorySegment output_profile$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$70.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* output_profile;
     * }
     */
    public static void output_profile$set(MemorySegment seg, MemorySegment x) {
        constants$70.const$4.set(seg, x);
    }
    public static MemorySegment output_profile$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$70.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void output_profile$set(MemorySegment seg, long index, MemorySegment x) {
        constants$70.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle camera_profile$VH() {
        return constants$70.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* camera_profile;
     * }
     */
    public static MemorySegment camera_profile$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$70.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* camera_profile;
     * }
     */
    public static void camera_profile$set(MemorySegment seg, MemorySegment x) {
        constants$70.const$5.set(seg, x);
    }
    public static MemorySegment camera_profile$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$70.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void camera_profile$set(MemorySegment seg, long index, MemorySegment x) {
        constants$70.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bad_pixels$VH() {
        return constants$71.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* bad_pixels;
     * }
     */
    public static MemorySegment bad_pixels$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$71.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* bad_pixels;
     * }
     */
    public static void bad_pixels$set(MemorySegment seg, MemorySegment x) {
        constants$71.const$0.set(seg, x);
    }
    public static MemorySegment bad_pixels$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$71.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void bad_pixels$set(MemorySegment seg, long index, MemorySegment x) {
        constants$71.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dark_frame$VH() {
        return constants$71.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* dark_frame;
     * }
     */
    public static MemorySegment dark_frame$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$71.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* dark_frame;
     * }
     */
    public static void dark_frame$set(MemorySegment seg, MemorySegment x) {
        constants$71.const$1.set(seg, x);
    }
    public static MemorySegment dark_frame$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$71.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dark_frame$set(MemorySegment seg, long index, MemorySegment x) {
        constants$71.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle output_bps$VH() {
        return constants$71.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int output_bps;
     * }
     */
    public static int output_bps$get(MemorySegment seg) {
        return (int)constants$71.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int output_bps;
     * }
     */
    public static void output_bps$set(MemorySegment seg, int x) {
        constants$71.const$2.set(seg, x);
    }
    public static int output_bps$get(MemorySegment seg, long index) {
        return (int)constants$71.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void output_bps$set(MemorySegment seg, long index, int x) {
        constants$71.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle output_tiff$VH() {
        return constants$71.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int output_tiff;
     * }
     */
    public static int output_tiff$get(MemorySegment seg) {
        return (int)constants$71.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int output_tiff;
     * }
     */
    public static void output_tiff$set(MemorySegment seg, int x) {
        constants$71.const$3.set(seg, x);
    }
    public static int output_tiff$get(MemorySegment seg, long index) {
        return (int)constants$71.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void output_tiff$set(MemorySegment seg, long index, int x) {
        constants$71.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle output_flags$VH() {
        return constants$71.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int output_flags;
     * }
     */
    public static int output_flags$get(MemorySegment seg) {
        return (int)constants$71.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int output_flags;
     * }
     */
    public static void output_flags$set(MemorySegment seg, int x) {
        constants$71.const$4.set(seg, x);
    }
    public static int output_flags$get(MemorySegment seg, long index) {
        return (int)constants$71.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void output_flags$set(MemorySegment seg, long index, int x) {
        constants$71.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle user_flip$VH() {
        return constants$71.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int user_flip;
     * }
     */
    public static int user_flip$get(MemorySegment seg) {
        return (int)constants$71.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int user_flip;
     * }
     */
    public static void user_flip$set(MemorySegment seg, int x) {
        constants$71.const$5.set(seg, x);
    }
    public static int user_flip$get(MemorySegment seg, long index) {
        return (int)constants$71.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void user_flip$set(MemorySegment seg, long index, int x) {
        constants$71.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle user_qual$VH() {
        return constants$72.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int user_qual;
     * }
     */
    public static int user_qual$get(MemorySegment seg) {
        return (int)constants$72.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int user_qual;
     * }
     */
    public static void user_qual$set(MemorySegment seg, int x) {
        constants$72.const$0.set(seg, x);
    }
    public static int user_qual$get(MemorySegment seg, long index) {
        return (int)constants$72.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void user_qual$set(MemorySegment seg, long index, int x) {
        constants$72.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle user_black$VH() {
        return constants$72.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int user_black;
     * }
     */
    public static int user_black$get(MemorySegment seg) {
        return (int)constants$72.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int user_black;
     * }
     */
    public static void user_black$set(MemorySegment seg, int x) {
        constants$72.const$1.set(seg, x);
    }
    public static int user_black$get(MemorySegment seg, long index) {
        return (int)constants$72.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void user_black$set(MemorySegment seg, long index, int x) {
        constants$72.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment user_cblack$slice(MemorySegment seg) {
        return seg.asSlice(224, 16);
    }
    public static VarHandle user_sat$VH() {
        return constants$72.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int user_sat;
     * }
     */
    public static int user_sat$get(MemorySegment seg) {
        return (int)constants$72.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int user_sat;
     * }
     */
    public static void user_sat$set(MemorySegment seg, int x) {
        constants$72.const$2.set(seg, x);
    }
    public static int user_sat$get(MemorySegment seg, long index) {
        return (int)constants$72.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void user_sat$set(MemorySegment seg, long index, int x) {
        constants$72.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle med_passes$VH() {
        return constants$72.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int med_passes;
     * }
     */
    public static int med_passes$get(MemorySegment seg) {
        return (int)constants$72.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int med_passes;
     * }
     */
    public static void med_passes$set(MemorySegment seg, int x) {
        constants$72.const$3.set(seg, x);
    }
    public static int med_passes$get(MemorySegment seg, long index) {
        return (int)constants$72.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void med_passes$set(MemorySegment seg, long index, int x) {
        constants$72.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle auto_bright_thr$VH() {
        return constants$72.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float auto_bright_thr;
     * }
     */
    public static float auto_bright_thr$get(MemorySegment seg) {
        return (float)constants$72.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float auto_bright_thr;
     * }
     */
    public static void auto_bright_thr$set(MemorySegment seg, float x) {
        constants$72.const$4.set(seg, x);
    }
    public static float auto_bright_thr$get(MemorySegment seg, long index) {
        return (float)constants$72.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void auto_bright_thr$set(MemorySegment seg, long index, float x) {
        constants$72.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle adjust_maximum_thr$VH() {
        return constants$72.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float adjust_maximum_thr;
     * }
     */
    public static float adjust_maximum_thr$get(MemorySegment seg) {
        return (float)constants$72.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float adjust_maximum_thr;
     * }
     */
    public static void adjust_maximum_thr$set(MemorySegment seg, float x) {
        constants$72.const$5.set(seg, x);
    }
    public static float adjust_maximum_thr$get(MemorySegment seg, long index) {
        return (float)constants$72.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void adjust_maximum_thr$set(MemorySegment seg, long index, float x) {
        constants$72.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle no_auto_bright$VH() {
        return constants$73.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int no_auto_bright;
     * }
     */
    public static int no_auto_bright$get(MemorySegment seg) {
        return (int)constants$73.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int no_auto_bright;
     * }
     */
    public static void no_auto_bright$set(MemorySegment seg, int x) {
        constants$73.const$0.set(seg, x);
    }
    public static int no_auto_bright$get(MemorySegment seg, long index) {
        return (int)constants$73.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void no_auto_bright$set(MemorySegment seg, long index, int x) {
        constants$73.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle use_fuji_rotate$VH() {
        return constants$73.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int use_fuji_rotate;
     * }
     */
    public static int use_fuji_rotate$get(MemorySegment seg) {
        return (int)constants$73.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int use_fuji_rotate;
     * }
     */
    public static void use_fuji_rotate$set(MemorySegment seg, int x) {
        constants$73.const$1.set(seg, x);
    }
    public static int use_fuji_rotate$get(MemorySegment seg, long index) {
        return (int)constants$73.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void use_fuji_rotate$set(MemorySegment seg, long index, int x) {
        constants$73.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle green_matching$VH() {
        return constants$73.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int green_matching;
     * }
     */
    public static int green_matching$get(MemorySegment seg) {
        return (int)constants$73.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int green_matching;
     * }
     */
    public static void green_matching$set(MemorySegment seg, int x) {
        constants$73.const$2.set(seg, x);
    }
    public static int green_matching$get(MemorySegment seg, long index) {
        return (int)constants$73.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void green_matching$set(MemorySegment seg, long index, int x) {
        constants$73.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dcb_iterations$VH() {
        return constants$73.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int dcb_iterations;
     * }
     */
    public static int dcb_iterations$get(MemorySegment seg) {
        return (int)constants$73.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int dcb_iterations;
     * }
     */
    public static void dcb_iterations$set(MemorySegment seg, int x) {
        constants$73.const$3.set(seg, x);
    }
    public static int dcb_iterations$get(MemorySegment seg, long index) {
        return (int)constants$73.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void dcb_iterations$set(MemorySegment seg, long index, int x) {
        constants$73.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dcb_enhance_fl$VH() {
        return constants$73.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int dcb_enhance_fl;
     * }
     */
    public static int dcb_enhance_fl$get(MemorySegment seg) {
        return (int)constants$73.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int dcb_enhance_fl;
     * }
     */
    public static void dcb_enhance_fl$set(MemorySegment seg, int x) {
        constants$73.const$4.set(seg, x);
    }
    public static int dcb_enhance_fl$get(MemorySegment seg, long index) {
        return (int)constants$73.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dcb_enhance_fl$set(MemorySegment seg, long index, int x) {
        constants$73.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fbdd_noiserd$VH() {
        return constants$73.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int fbdd_noiserd;
     * }
     */
    public static int fbdd_noiserd$get(MemorySegment seg) {
        return (int)constants$73.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int fbdd_noiserd;
     * }
     */
    public static void fbdd_noiserd$set(MemorySegment seg, int x) {
        constants$73.const$5.set(seg, x);
    }
    public static int fbdd_noiserd$get(MemorySegment seg, long index) {
        return (int)constants$73.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void fbdd_noiserd$set(MemorySegment seg, long index, int x) {
        constants$73.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle exp_correc$VH() {
        return constants$74.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int exp_correc;
     * }
     */
    public static int exp_correc$get(MemorySegment seg) {
        return (int)constants$74.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int exp_correc;
     * }
     */
    public static void exp_correc$set(MemorySegment seg, int x) {
        constants$74.const$0.set(seg, x);
    }
    public static int exp_correc$get(MemorySegment seg, long index) {
        return (int)constants$74.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void exp_correc$set(MemorySegment seg, long index, int x) {
        constants$74.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle exp_shift$VH() {
        return constants$74.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float exp_shift;
     * }
     */
    public static float exp_shift$get(MemorySegment seg) {
        return (float)constants$74.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float exp_shift;
     * }
     */
    public static void exp_shift$set(MemorySegment seg, float x) {
        constants$74.const$1.set(seg, x);
    }
    public static float exp_shift$get(MemorySegment seg, long index) {
        return (float)constants$74.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void exp_shift$set(MemorySegment seg, long index, float x) {
        constants$74.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle exp_preser$VH() {
        return constants$74.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float exp_preser;
     * }
     */
    public static float exp_preser$get(MemorySegment seg) {
        return (float)constants$74.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float exp_preser;
     * }
     */
    public static void exp_preser$set(MemorySegment seg, float x) {
        constants$74.const$2.set(seg, x);
    }
    public static float exp_preser$get(MemorySegment seg, long index) {
        return (float)constants$74.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void exp_preser$set(MemorySegment seg, long index, float x) {
        constants$74.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle no_auto_scale$VH() {
        return constants$74.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int no_auto_scale;
     * }
     */
    public static int no_auto_scale$get(MemorySegment seg) {
        return (int)constants$74.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int no_auto_scale;
     * }
     */
    public static void no_auto_scale$set(MemorySegment seg, int x) {
        constants$74.const$3.set(seg, x);
    }
    public static int no_auto_scale$get(MemorySegment seg, long index) {
        return (int)constants$74.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void no_auto_scale$set(MemorySegment seg, long index, int x) {
        constants$74.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle no_interpolation$VH() {
        return constants$74.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int no_interpolation;
     * }
     */
    public static int no_interpolation$get(MemorySegment seg) {
        return (int)constants$74.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int no_interpolation;
     * }
     */
    public static void no_interpolation$set(MemorySegment seg, int x) {
        constants$74.const$4.set(seg, x);
    }
    public static int no_interpolation$get(MemorySegment seg, long index) {
        return (int)constants$74.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void no_interpolation$set(MemorySegment seg, long index, int x) {
        constants$74.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


