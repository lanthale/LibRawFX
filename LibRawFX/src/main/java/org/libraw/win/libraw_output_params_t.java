// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_output_params_t {
 *     unsigned int greybox[4];
 *     unsigned int cropbox[4];
 *     double aber[4];
 *     double gamm[6];
 *     float user_mul[4];
 *     float bright;
 *     float threshold;
 *     int half_size;
 *     int four_color_rgb;
 *     int highlight;
 *     int use_auto_wb;
 *     int use_camera_wb;
 *     int use_camera_matrix;
 *     int output_color;
 *     char* output_profile;
 *     char* camera_profile;
 *     char* bad_pixels;
 *     char* dark_frame;
 *     int output_bps;
 *     int output_tiff;
 *     int output_flags;
 *     int user_flip;
 *     int user_qual;
 *     int user_black;
 *     int user_cblack[4];
 *     int user_sat;
 *     int med_passes;
 *     float auto_bright_thr;
 *     float adjust_maximum_thr;
 *     int no_auto_bright;
 *     int use_fuji_rotate;
 *     int green_matching;
 *     int dcb_iterations;
 *     int dcb_enhance_fl;
 *     int fbdd_noiserd;
 *     int exp_correc;
 *     float exp_shift;
 *     float exp_preser;
 *     int no_auto_scale;
 *     int no_interpolation;
 * };
 * }
 */
public class libraw_output_params_t {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(4, Constants$root.C_LONG$LAYOUT).withName("greybox"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_LONG$LAYOUT).withName("cropbox"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_DOUBLE$LAYOUT).withName("aber"),
        MemoryLayout.sequenceLayout(6, Constants$root.C_DOUBLE$LAYOUT).withName("gamm"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("user_mul"),
        Constants$root.C_FLOAT$LAYOUT.withName("bright"),
        Constants$root.C_FLOAT$LAYOUT.withName("threshold"),
        Constants$root.C_LONG$LAYOUT.withName("half_size"),
        Constants$root.C_LONG$LAYOUT.withName("four_color_rgb"),
        Constants$root.C_LONG$LAYOUT.withName("highlight"),
        Constants$root.C_LONG$LAYOUT.withName("use_auto_wb"),
        Constants$root.C_LONG$LAYOUT.withName("use_camera_wb"),
        Constants$root.C_LONG$LAYOUT.withName("use_camera_matrix"),
        Constants$root.C_LONG$LAYOUT.withName("output_color"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("output_profile"),
        Constants$root.C_POINTER$LAYOUT.withName("camera_profile"),
        Constants$root.C_POINTER$LAYOUT.withName("bad_pixels"),
        Constants$root.C_POINTER$LAYOUT.withName("dark_frame"),
        Constants$root.C_LONG$LAYOUT.withName("output_bps"),
        Constants$root.C_LONG$LAYOUT.withName("output_tiff"),
        Constants$root.C_LONG$LAYOUT.withName("output_flags"),
        Constants$root.C_LONG$LAYOUT.withName("user_flip"),
        Constants$root.C_LONG$LAYOUT.withName("user_qual"),
        Constants$root.C_LONG$LAYOUT.withName("user_black"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_LONG$LAYOUT).withName("user_cblack"),
        Constants$root.C_LONG$LAYOUT.withName("user_sat"),
        Constants$root.C_LONG$LAYOUT.withName("med_passes"),
        Constants$root.C_FLOAT$LAYOUT.withName("auto_bright_thr"),
        Constants$root.C_FLOAT$LAYOUT.withName("adjust_maximum_thr"),
        Constants$root.C_LONG$LAYOUT.withName("no_auto_bright"),
        Constants$root.C_LONG$LAYOUT.withName("use_fuji_rotate"),
        Constants$root.C_LONG$LAYOUT.withName("green_matching"),
        Constants$root.C_LONG$LAYOUT.withName("dcb_iterations"),
        Constants$root.C_LONG$LAYOUT.withName("dcb_enhance_fl"),
        Constants$root.C_LONG$LAYOUT.withName("fbdd_noiserd"),
        Constants$root.C_LONG$LAYOUT.withName("exp_correc"),
        Constants$root.C_FLOAT$LAYOUT.withName("exp_shift"),
        Constants$root.C_FLOAT$LAYOUT.withName("exp_preser"),
        Constants$root.C_LONG$LAYOUT.withName("no_auto_scale"),
        Constants$root.C_LONG$LAYOUT.withName("no_interpolation"),
        MemoryLayout.paddingLayout(32)
    ).withName("libraw_output_params_t");
    public static MemoryLayout $LAYOUT() {
        return libraw_output_params_t.$struct$LAYOUT;
    }
    public static MemorySegment greybox$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment cropbox$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static MemorySegment aber$slice(MemorySegment seg) {
        return seg.asSlice(32, 32);
    }
    public static MemorySegment gamm$slice(MemorySegment seg) {
        return seg.asSlice(64, 48);
    }
    public static MemorySegment user_mul$slice(MemorySegment seg) {
        return seg.asSlice(112, 16);
    }
    static final VarHandle bright$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bright"));
    public static VarHandle bright$VH() {
        return libraw_output_params_t.bright$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float bright;
     * }
     */
    public static float bright$get(MemorySegment seg) {
        return (float)libraw_output_params_t.bright$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float bright;
     * }
     */
    public static void bright$set(MemorySegment seg, float x) {
        libraw_output_params_t.bright$VH.set(seg, x);
    }
    public static float bright$get(MemorySegment seg, long index) {
        return (float)libraw_output_params_t.bright$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bright$set(MemorySegment seg, long index, float x) {
        libraw_output_params_t.bright$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle threshold$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("threshold"));
    public static VarHandle threshold$VH() {
        return libraw_output_params_t.threshold$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float threshold;
     * }
     */
    public static float threshold$get(MemorySegment seg) {
        return (float)libraw_output_params_t.threshold$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float threshold;
     * }
     */
    public static void threshold$set(MemorySegment seg, float x) {
        libraw_output_params_t.threshold$VH.set(seg, x);
    }
    public static float threshold$get(MemorySegment seg, long index) {
        return (float)libraw_output_params_t.threshold$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void threshold$set(MemorySegment seg, long index, float x) {
        libraw_output_params_t.threshold$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle half_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("half_size"));
    public static VarHandle half_size$VH() {
        return libraw_output_params_t.half_size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int half_size;
     * }
     */
    public static int half_size$get(MemorySegment seg) {
        return (int)libraw_output_params_t.half_size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int half_size;
     * }
     */
    public static void half_size$set(MemorySegment seg, int x) {
        libraw_output_params_t.half_size$VH.set(seg, x);
    }
    public static int half_size$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.half_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void half_size$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.half_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle four_color_rgb$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("four_color_rgb"));
    public static VarHandle four_color_rgb$VH() {
        return libraw_output_params_t.four_color_rgb$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int four_color_rgb;
     * }
     */
    public static int four_color_rgb$get(MemorySegment seg) {
        return (int)libraw_output_params_t.four_color_rgb$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int four_color_rgb;
     * }
     */
    public static void four_color_rgb$set(MemorySegment seg, int x) {
        libraw_output_params_t.four_color_rgb$VH.set(seg, x);
    }
    public static int four_color_rgb$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.four_color_rgb$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void four_color_rgb$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.four_color_rgb$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle highlight$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("highlight"));
    public static VarHandle highlight$VH() {
        return libraw_output_params_t.highlight$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int highlight;
     * }
     */
    public static int highlight$get(MemorySegment seg) {
        return (int)libraw_output_params_t.highlight$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int highlight;
     * }
     */
    public static void highlight$set(MemorySegment seg, int x) {
        libraw_output_params_t.highlight$VH.set(seg, x);
    }
    public static int highlight$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.highlight$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void highlight$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.highlight$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle use_auto_wb$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("use_auto_wb"));
    public static VarHandle use_auto_wb$VH() {
        return libraw_output_params_t.use_auto_wb$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int use_auto_wb;
     * }
     */
    public static int use_auto_wb$get(MemorySegment seg) {
        return (int)libraw_output_params_t.use_auto_wb$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int use_auto_wb;
     * }
     */
    public static void use_auto_wb$set(MemorySegment seg, int x) {
        libraw_output_params_t.use_auto_wb$VH.set(seg, x);
    }
    public static int use_auto_wb$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.use_auto_wb$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void use_auto_wb$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.use_auto_wb$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle use_camera_wb$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("use_camera_wb"));
    public static VarHandle use_camera_wb$VH() {
        return libraw_output_params_t.use_camera_wb$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int use_camera_wb;
     * }
     */
    public static int use_camera_wb$get(MemorySegment seg) {
        return (int)libraw_output_params_t.use_camera_wb$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int use_camera_wb;
     * }
     */
    public static void use_camera_wb$set(MemorySegment seg, int x) {
        libraw_output_params_t.use_camera_wb$VH.set(seg, x);
    }
    public static int use_camera_wb$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.use_camera_wb$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void use_camera_wb$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.use_camera_wb$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle use_camera_matrix$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("use_camera_matrix"));
    public static VarHandle use_camera_matrix$VH() {
        return libraw_output_params_t.use_camera_matrix$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int use_camera_matrix;
     * }
     */
    public static int use_camera_matrix$get(MemorySegment seg) {
        return (int)libraw_output_params_t.use_camera_matrix$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int use_camera_matrix;
     * }
     */
    public static void use_camera_matrix$set(MemorySegment seg, int x) {
        libraw_output_params_t.use_camera_matrix$VH.set(seg, x);
    }
    public static int use_camera_matrix$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.use_camera_matrix$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void use_camera_matrix$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.use_camera_matrix$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle output_color$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("output_color"));
    public static VarHandle output_color$VH() {
        return libraw_output_params_t.output_color$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int output_color;
     * }
     */
    public static int output_color$get(MemorySegment seg) {
        return (int)libraw_output_params_t.output_color$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int output_color;
     * }
     */
    public static void output_color$set(MemorySegment seg, int x) {
        libraw_output_params_t.output_color$VH.set(seg, x);
    }
    public static int output_color$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.output_color$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void output_color$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.output_color$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle output_profile$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("output_profile"));
    public static VarHandle output_profile$VH() {
        return libraw_output_params_t.output_profile$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* output_profile;
     * }
     */
    public static MemorySegment output_profile$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)libraw_output_params_t.output_profile$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* output_profile;
     * }
     */
    public static void output_profile$set(MemorySegment seg, MemorySegment x) {
        libraw_output_params_t.output_profile$VH.set(seg, x);
    }
    public static MemorySegment output_profile$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)libraw_output_params_t.output_profile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void output_profile$set(MemorySegment seg, long index, MemorySegment x) {
        libraw_output_params_t.output_profile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle camera_profile$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("camera_profile"));
    public static VarHandle camera_profile$VH() {
        return libraw_output_params_t.camera_profile$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* camera_profile;
     * }
     */
    public static MemorySegment camera_profile$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)libraw_output_params_t.camera_profile$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* camera_profile;
     * }
     */
    public static void camera_profile$set(MemorySegment seg, MemorySegment x) {
        libraw_output_params_t.camera_profile$VH.set(seg, x);
    }
    public static MemorySegment camera_profile$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)libraw_output_params_t.camera_profile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void camera_profile$set(MemorySegment seg, long index, MemorySegment x) {
        libraw_output_params_t.camera_profile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bad_pixels$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bad_pixels"));
    public static VarHandle bad_pixels$VH() {
        return libraw_output_params_t.bad_pixels$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* bad_pixels;
     * }
     */
    public static MemorySegment bad_pixels$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)libraw_output_params_t.bad_pixels$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* bad_pixels;
     * }
     */
    public static void bad_pixels$set(MemorySegment seg, MemorySegment x) {
        libraw_output_params_t.bad_pixels$VH.set(seg, x);
    }
    public static MemorySegment bad_pixels$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)libraw_output_params_t.bad_pixels$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bad_pixels$set(MemorySegment seg, long index, MemorySegment x) {
        libraw_output_params_t.bad_pixels$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dark_frame$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dark_frame"));
    public static VarHandle dark_frame$VH() {
        return libraw_output_params_t.dark_frame$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* dark_frame;
     * }
     */
    public static MemorySegment dark_frame$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)libraw_output_params_t.dark_frame$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* dark_frame;
     * }
     */
    public static void dark_frame$set(MemorySegment seg, MemorySegment x) {
        libraw_output_params_t.dark_frame$VH.set(seg, x);
    }
    public static MemorySegment dark_frame$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)libraw_output_params_t.dark_frame$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dark_frame$set(MemorySegment seg, long index, MemorySegment x) {
        libraw_output_params_t.dark_frame$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle output_bps$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("output_bps"));
    public static VarHandle output_bps$VH() {
        return libraw_output_params_t.output_bps$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int output_bps;
     * }
     */
    public static int output_bps$get(MemorySegment seg) {
        return (int)libraw_output_params_t.output_bps$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int output_bps;
     * }
     */
    public static void output_bps$set(MemorySegment seg, int x) {
        libraw_output_params_t.output_bps$VH.set(seg, x);
    }
    public static int output_bps$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.output_bps$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void output_bps$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.output_bps$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle output_tiff$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("output_tiff"));
    public static VarHandle output_tiff$VH() {
        return libraw_output_params_t.output_tiff$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int output_tiff;
     * }
     */
    public static int output_tiff$get(MemorySegment seg) {
        return (int)libraw_output_params_t.output_tiff$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int output_tiff;
     * }
     */
    public static void output_tiff$set(MemorySegment seg, int x) {
        libraw_output_params_t.output_tiff$VH.set(seg, x);
    }
    public static int output_tiff$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.output_tiff$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void output_tiff$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.output_tiff$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle output_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("output_flags"));
    public static VarHandle output_flags$VH() {
        return libraw_output_params_t.output_flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int output_flags;
     * }
     */
    public static int output_flags$get(MemorySegment seg) {
        return (int)libraw_output_params_t.output_flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int output_flags;
     * }
     */
    public static void output_flags$set(MemorySegment seg, int x) {
        libraw_output_params_t.output_flags$VH.set(seg, x);
    }
    public static int output_flags$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.output_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void output_flags$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.output_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle user_flip$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("user_flip"));
    public static VarHandle user_flip$VH() {
        return libraw_output_params_t.user_flip$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int user_flip;
     * }
     */
    public static int user_flip$get(MemorySegment seg) {
        return (int)libraw_output_params_t.user_flip$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int user_flip;
     * }
     */
    public static void user_flip$set(MemorySegment seg, int x) {
        libraw_output_params_t.user_flip$VH.set(seg, x);
    }
    public static int user_flip$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.user_flip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void user_flip$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.user_flip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle user_qual$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("user_qual"));
    public static VarHandle user_qual$VH() {
        return libraw_output_params_t.user_qual$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int user_qual;
     * }
     */
    public static int user_qual$get(MemorySegment seg) {
        return (int)libraw_output_params_t.user_qual$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int user_qual;
     * }
     */
    public static void user_qual$set(MemorySegment seg, int x) {
        libraw_output_params_t.user_qual$VH.set(seg, x);
    }
    public static int user_qual$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.user_qual$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void user_qual$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.user_qual$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle user_black$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("user_black"));
    public static VarHandle user_black$VH() {
        return libraw_output_params_t.user_black$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int user_black;
     * }
     */
    public static int user_black$get(MemorySegment seg) {
        return (int)libraw_output_params_t.user_black$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int user_black;
     * }
     */
    public static void user_black$set(MemorySegment seg, int x) {
        libraw_output_params_t.user_black$VH.set(seg, x);
    }
    public static int user_black$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.user_black$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void user_black$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.user_black$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment user_cblack$slice(MemorySegment seg) {
        return seg.asSlice(224, 16);
    }
    static final VarHandle user_sat$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("user_sat"));
    public static VarHandle user_sat$VH() {
        return libraw_output_params_t.user_sat$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int user_sat;
     * }
     */
    public static int user_sat$get(MemorySegment seg) {
        return (int)libraw_output_params_t.user_sat$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int user_sat;
     * }
     */
    public static void user_sat$set(MemorySegment seg, int x) {
        libraw_output_params_t.user_sat$VH.set(seg, x);
    }
    public static int user_sat$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.user_sat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void user_sat$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.user_sat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle med_passes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("med_passes"));
    public static VarHandle med_passes$VH() {
        return libraw_output_params_t.med_passes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int med_passes;
     * }
     */
    public static int med_passes$get(MemorySegment seg) {
        return (int)libraw_output_params_t.med_passes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int med_passes;
     * }
     */
    public static void med_passes$set(MemorySegment seg, int x) {
        libraw_output_params_t.med_passes$VH.set(seg, x);
    }
    public static int med_passes$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.med_passes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void med_passes$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.med_passes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle auto_bright_thr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("auto_bright_thr"));
    public static VarHandle auto_bright_thr$VH() {
        return libraw_output_params_t.auto_bright_thr$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float auto_bright_thr;
     * }
     */
    public static float auto_bright_thr$get(MemorySegment seg) {
        return (float)libraw_output_params_t.auto_bright_thr$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float auto_bright_thr;
     * }
     */
    public static void auto_bright_thr$set(MemorySegment seg, float x) {
        libraw_output_params_t.auto_bright_thr$VH.set(seg, x);
    }
    public static float auto_bright_thr$get(MemorySegment seg, long index) {
        return (float)libraw_output_params_t.auto_bright_thr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void auto_bright_thr$set(MemorySegment seg, long index, float x) {
        libraw_output_params_t.auto_bright_thr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle adjust_maximum_thr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("adjust_maximum_thr"));
    public static VarHandle adjust_maximum_thr$VH() {
        return libraw_output_params_t.adjust_maximum_thr$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float adjust_maximum_thr;
     * }
     */
    public static float adjust_maximum_thr$get(MemorySegment seg) {
        return (float)libraw_output_params_t.adjust_maximum_thr$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float adjust_maximum_thr;
     * }
     */
    public static void adjust_maximum_thr$set(MemorySegment seg, float x) {
        libraw_output_params_t.adjust_maximum_thr$VH.set(seg, x);
    }
    public static float adjust_maximum_thr$get(MemorySegment seg, long index) {
        return (float)libraw_output_params_t.adjust_maximum_thr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void adjust_maximum_thr$set(MemorySegment seg, long index, float x) {
        libraw_output_params_t.adjust_maximum_thr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle no_auto_bright$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("no_auto_bright"));
    public static VarHandle no_auto_bright$VH() {
        return libraw_output_params_t.no_auto_bright$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int no_auto_bright;
     * }
     */
    public static int no_auto_bright$get(MemorySegment seg) {
        return (int)libraw_output_params_t.no_auto_bright$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int no_auto_bright;
     * }
     */
    public static void no_auto_bright$set(MemorySegment seg, int x) {
        libraw_output_params_t.no_auto_bright$VH.set(seg, x);
    }
    public static int no_auto_bright$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.no_auto_bright$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void no_auto_bright$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.no_auto_bright$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle use_fuji_rotate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("use_fuji_rotate"));
    public static VarHandle use_fuji_rotate$VH() {
        return libraw_output_params_t.use_fuji_rotate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int use_fuji_rotate;
     * }
     */
    public static int use_fuji_rotate$get(MemorySegment seg) {
        return (int)libraw_output_params_t.use_fuji_rotate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int use_fuji_rotate;
     * }
     */
    public static void use_fuji_rotate$set(MemorySegment seg, int x) {
        libraw_output_params_t.use_fuji_rotate$VH.set(seg, x);
    }
    public static int use_fuji_rotate$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.use_fuji_rotate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void use_fuji_rotate$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.use_fuji_rotate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle green_matching$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("green_matching"));
    public static VarHandle green_matching$VH() {
        return libraw_output_params_t.green_matching$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int green_matching;
     * }
     */
    public static int green_matching$get(MemorySegment seg) {
        return (int)libraw_output_params_t.green_matching$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int green_matching;
     * }
     */
    public static void green_matching$set(MemorySegment seg, int x) {
        libraw_output_params_t.green_matching$VH.set(seg, x);
    }
    public static int green_matching$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.green_matching$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void green_matching$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.green_matching$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dcb_iterations$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dcb_iterations"));
    public static VarHandle dcb_iterations$VH() {
        return libraw_output_params_t.dcb_iterations$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int dcb_iterations;
     * }
     */
    public static int dcb_iterations$get(MemorySegment seg) {
        return (int)libraw_output_params_t.dcb_iterations$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int dcb_iterations;
     * }
     */
    public static void dcb_iterations$set(MemorySegment seg, int x) {
        libraw_output_params_t.dcb_iterations$VH.set(seg, x);
    }
    public static int dcb_iterations$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.dcb_iterations$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dcb_iterations$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.dcb_iterations$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dcb_enhance_fl$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dcb_enhance_fl"));
    public static VarHandle dcb_enhance_fl$VH() {
        return libraw_output_params_t.dcb_enhance_fl$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int dcb_enhance_fl;
     * }
     */
    public static int dcb_enhance_fl$get(MemorySegment seg) {
        return (int)libraw_output_params_t.dcb_enhance_fl$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int dcb_enhance_fl;
     * }
     */
    public static void dcb_enhance_fl$set(MemorySegment seg, int x) {
        libraw_output_params_t.dcb_enhance_fl$VH.set(seg, x);
    }
    public static int dcb_enhance_fl$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.dcb_enhance_fl$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dcb_enhance_fl$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.dcb_enhance_fl$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fbdd_noiserd$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fbdd_noiserd"));
    public static VarHandle fbdd_noiserd$VH() {
        return libraw_output_params_t.fbdd_noiserd$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int fbdd_noiserd;
     * }
     */
    public static int fbdd_noiserd$get(MemorySegment seg) {
        return (int)libraw_output_params_t.fbdd_noiserd$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int fbdd_noiserd;
     * }
     */
    public static void fbdd_noiserd$set(MemorySegment seg, int x) {
        libraw_output_params_t.fbdd_noiserd$VH.set(seg, x);
    }
    public static int fbdd_noiserd$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.fbdd_noiserd$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fbdd_noiserd$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.fbdd_noiserd$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle exp_correc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("exp_correc"));
    public static VarHandle exp_correc$VH() {
        return libraw_output_params_t.exp_correc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int exp_correc;
     * }
     */
    public static int exp_correc$get(MemorySegment seg) {
        return (int)libraw_output_params_t.exp_correc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int exp_correc;
     * }
     */
    public static void exp_correc$set(MemorySegment seg, int x) {
        libraw_output_params_t.exp_correc$VH.set(seg, x);
    }
    public static int exp_correc$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.exp_correc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void exp_correc$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.exp_correc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle exp_shift$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("exp_shift"));
    public static VarHandle exp_shift$VH() {
        return libraw_output_params_t.exp_shift$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float exp_shift;
     * }
     */
    public static float exp_shift$get(MemorySegment seg) {
        return (float)libraw_output_params_t.exp_shift$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float exp_shift;
     * }
     */
    public static void exp_shift$set(MemorySegment seg, float x) {
        libraw_output_params_t.exp_shift$VH.set(seg, x);
    }
    public static float exp_shift$get(MemorySegment seg, long index) {
        return (float)libraw_output_params_t.exp_shift$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void exp_shift$set(MemorySegment seg, long index, float x) {
        libraw_output_params_t.exp_shift$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle exp_preser$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("exp_preser"));
    public static VarHandle exp_preser$VH() {
        return libraw_output_params_t.exp_preser$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float exp_preser;
     * }
     */
    public static float exp_preser$get(MemorySegment seg) {
        return (float)libraw_output_params_t.exp_preser$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float exp_preser;
     * }
     */
    public static void exp_preser$set(MemorySegment seg, float x) {
        libraw_output_params_t.exp_preser$VH.set(seg, x);
    }
    public static float exp_preser$get(MemorySegment seg, long index) {
        return (float)libraw_output_params_t.exp_preser$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void exp_preser$set(MemorySegment seg, long index, float x) {
        libraw_output_params_t.exp_preser$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle no_auto_scale$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("no_auto_scale"));
    public static VarHandle no_auto_scale$VH() {
        return libraw_output_params_t.no_auto_scale$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int no_auto_scale;
     * }
     */
    public static int no_auto_scale$get(MemorySegment seg) {
        return (int)libraw_output_params_t.no_auto_scale$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int no_auto_scale;
     * }
     */
    public static void no_auto_scale$set(MemorySegment seg, int x) {
        libraw_output_params_t.no_auto_scale$VH.set(seg, x);
    }
    public static int no_auto_scale$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.no_auto_scale$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void no_auto_scale$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.no_auto_scale$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle no_interpolation$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("no_interpolation"));
    public static VarHandle no_interpolation$VH() {
        return libraw_output_params_t.no_interpolation$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int no_interpolation;
     * }
     */
    public static int no_interpolation$get(MemorySegment seg) {
        return (int)libraw_output_params_t.no_interpolation$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int no_interpolation;
     * }
     */
    public static void no_interpolation$set(MemorySegment seg, int x) {
        libraw_output_params_t.no_interpolation$VH.set(seg, x);
    }
    public static int no_interpolation$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.no_interpolation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void no_interpolation$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.no_interpolation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


