// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class libraw_output_params_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(4, Constants$root.C_LONG$LAYOUT).withName("greybox"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_LONG$LAYOUT).withName("cropbox"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_DOUBLE$LAYOUT).withName("aber"),
        MemoryLayout.sequenceLayout(6, Constants$root.C_DOUBLE$LAYOUT).withName("gamm"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("user_mul"),
        Constants$root.C_LONG$LAYOUT.withName("shot_select"),
        Constants$root.C_FLOAT$LAYOUT.withName("bright"),
        Constants$root.C_FLOAT$LAYOUT.withName("threshold"),
        Constants$root.C_LONG$LAYOUT.withName("half_size"),
        Constants$root.C_LONG$LAYOUT.withName("four_color_rgb"),
        Constants$root.C_LONG$LAYOUT.withName("highlight"),
        Constants$root.C_LONG$LAYOUT.withName("use_auto_wb"),
        Constants$root.C_LONG$LAYOUT.withName("use_camera_wb"),
        Constants$root.C_LONG$LAYOUT.withName("use_camera_matrix"),
        Constants$root.C_LONG$LAYOUT.withName("output_color"),
        Constants$root.C_POINTER$LAYOUT.withName("output_profile"),
        Constants$root.C_POINTER$LAYOUT.withName("camera_profile"),
        Constants$root.C_POINTER$LAYOUT.withName("bad_pixels"),
        Constants$root.C_POINTER$LAYOUT.withName("dark_frame"),
        Constants$root.C_LONG$LAYOUT.withName("output_bps"),
        Constants$root.C_LONG$LAYOUT.withName("output_tiff"),
        Constants$root.C_LONG$LAYOUT.withName("user_flip"),
        Constants$root.C_LONG$LAYOUT.withName("user_qual"),
        Constants$root.C_LONG$LAYOUT.withName("user_black"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_LONG$LAYOUT).withName("user_cblack"),
        Constants$root.C_LONG$LAYOUT.withName("user_sat"),
        Constants$root.C_LONG$LAYOUT.withName("med_passes"),
        Constants$root.C_FLOAT$LAYOUT.withName("auto_bright_thr"),
        Constants$root.C_FLOAT$LAYOUT.withName("adjust_maximum_thr"),
        Constants$root.C_LONG$LAYOUT.withName("no_auto_bright"),
        Constants$root.C_LONG$LAYOUT.withName("use_fuji_rotate"),
        Constants$root.C_LONG$LAYOUT.withName("green_matching"),
        Constants$root.C_LONG$LAYOUT.withName("dcb_iterations"),
        Constants$root.C_LONG$LAYOUT.withName("dcb_enhance_fl"),
        Constants$root.C_LONG$LAYOUT.withName("fbdd_noiserd"),
        Constants$root.C_LONG$LAYOUT.withName("exp_correc"),
        Constants$root.C_FLOAT$LAYOUT.withName("exp_shift"),
        Constants$root.C_FLOAT$LAYOUT.withName("exp_preser"),
        Constants$root.C_LONG$LAYOUT.withName("use_rawspeed"),
        Constants$root.C_LONG$LAYOUT.withName("use_dngsdk"),
        Constants$root.C_LONG$LAYOUT.withName("no_auto_scale"),
        Constants$root.C_LONG$LAYOUT.withName("no_interpolation"),
        Constants$root.C_LONG$LAYOUT.withName("raw_processing_options"),
        Constants$root.C_LONG$LAYOUT.withName("max_raw_memory_mb"),
        Constants$root.C_LONG$LAYOUT.withName("sony_arw2_posterization_thr"),
        Constants$root.C_FLOAT$LAYOUT.withName("coolscan_nef_gamma"),
        MemoryLayout.sequenceLayout(5, Constants$root.C_CHAR$LAYOUT).withName("p4shot_order"),
        MemoryLayout.paddingLayout(24),
        Constants$root.C_POINTER$LAYOUT.withName("custom_camera_strings")
    );
    public static MemoryLayout $LAYOUT() {
        return libraw_output_params_t.$struct$LAYOUT;
    }
    public static MemorySegment greybox$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment cropbox$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static MemorySegment aber$slice(MemorySegment seg) {
        return seg.asSlice(32, 32);
    }
    public static MemorySegment gamm$slice(MemorySegment seg) {
        return seg.asSlice(64, 48);
    }
    public static MemorySegment user_mul$slice(MemorySegment seg) {
        return seg.asSlice(112, 16);
    }
    static final VarHandle shot_select$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("shot_select"));
    public static VarHandle shot_select$VH() {
        return libraw_output_params_t.shot_select$VH;
    }
    public static int shot_select$get(MemorySegment seg) {
        return (int)libraw_output_params_t.shot_select$VH.get(seg);
    }
    public static void shot_select$set( MemorySegment seg, int x) {
        libraw_output_params_t.shot_select$VH.set(seg, x);
    }
    public static int shot_select$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.shot_select$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void shot_select$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.shot_select$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bright$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bright"));
    public static VarHandle bright$VH() {
        return libraw_output_params_t.bright$VH;
    }
    public static float bright$get(MemorySegment seg) {
        return (float)libraw_output_params_t.bright$VH.get(seg);
    }
    public static void bright$set( MemorySegment seg, float x) {
        libraw_output_params_t.bright$VH.set(seg, x);
    }
    public static float bright$get(MemorySegment seg, long index) {
        return (float)libraw_output_params_t.bright$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bright$set(MemorySegment seg, long index, float x) {
        libraw_output_params_t.bright$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle threshold$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("threshold"));
    public static VarHandle threshold$VH() {
        return libraw_output_params_t.threshold$VH;
    }
    public static float threshold$get(MemorySegment seg) {
        return (float)libraw_output_params_t.threshold$VH.get(seg);
    }
    public static void threshold$set( MemorySegment seg, float x) {
        libraw_output_params_t.threshold$VH.set(seg, x);
    }
    public static float threshold$get(MemorySegment seg, long index) {
        return (float)libraw_output_params_t.threshold$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void threshold$set(MemorySegment seg, long index, float x) {
        libraw_output_params_t.threshold$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle half_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("half_size"));
    public static VarHandle half_size$VH() {
        return libraw_output_params_t.half_size$VH;
    }
    public static int half_size$get(MemorySegment seg) {
        return (int)libraw_output_params_t.half_size$VH.get(seg);
    }
    public static void half_size$set( MemorySegment seg, int x) {
        libraw_output_params_t.half_size$VH.set(seg, x);
    }
    public static int half_size$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.half_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void half_size$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.half_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle four_color_rgb$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("four_color_rgb"));
    public static VarHandle four_color_rgb$VH() {
        return libraw_output_params_t.four_color_rgb$VH;
    }
    public static int four_color_rgb$get(MemorySegment seg) {
        return (int)libraw_output_params_t.four_color_rgb$VH.get(seg);
    }
    public static void four_color_rgb$set( MemorySegment seg, int x) {
        libraw_output_params_t.four_color_rgb$VH.set(seg, x);
    }
    public static int four_color_rgb$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.four_color_rgb$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void four_color_rgb$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.four_color_rgb$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle highlight$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("highlight"));
    public static VarHandle highlight$VH() {
        return libraw_output_params_t.highlight$VH;
    }
    public static int highlight$get(MemorySegment seg) {
        return (int)libraw_output_params_t.highlight$VH.get(seg);
    }
    public static void highlight$set( MemorySegment seg, int x) {
        libraw_output_params_t.highlight$VH.set(seg, x);
    }
    public static int highlight$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.highlight$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void highlight$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.highlight$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle use_auto_wb$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("use_auto_wb"));
    public static VarHandle use_auto_wb$VH() {
        return libraw_output_params_t.use_auto_wb$VH;
    }
    public static int use_auto_wb$get(MemorySegment seg) {
        return (int)libraw_output_params_t.use_auto_wb$VH.get(seg);
    }
    public static void use_auto_wb$set( MemorySegment seg, int x) {
        libraw_output_params_t.use_auto_wb$VH.set(seg, x);
    }
    public static int use_auto_wb$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.use_auto_wb$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void use_auto_wb$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.use_auto_wb$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle use_camera_wb$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("use_camera_wb"));
    public static VarHandle use_camera_wb$VH() {
        return libraw_output_params_t.use_camera_wb$VH;
    }
    public static int use_camera_wb$get(MemorySegment seg) {
        return (int)libraw_output_params_t.use_camera_wb$VH.get(seg);
    }
    public static void use_camera_wb$set( MemorySegment seg, int x) {
        libraw_output_params_t.use_camera_wb$VH.set(seg, x);
    }
    public static int use_camera_wb$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.use_camera_wb$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void use_camera_wb$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.use_camera_wb$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle use_camera_matrix$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("use_camera_matrix"));
    public static VarHandle use_camera_matrix$VH() {
        return libraw_output_params_t.use_camera_matrix$VH;
    }
    public static int use_camera_matrix$get(MemorySegment seg) {
        return (int)libraw_output_params_t.use_camera_matrix$VH.get(seg);
    }
    public static void use_camera_matrix$set( MemorySegment seg, int x) {
        libraw_output_params_t.use_camera_matrix$VH.set(seg, x);
    }
    public static int use_camera_matrix$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.use_camera_matrix$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void use_camera_matrix$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.use_camera_matrix$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle output_color$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("output_color"));
    public static VarHandle output_color$VH() {
        return libraw_output_params_t.output_color$VH;
    }
    public static int output_color$get(MemorySegment seg) {
        return (int)libraw_output_params_t.output_color$VH.get(seg);
    }
    public static void output_color$set( MemorySegment seg, int x) {
        libraw_output_params_t.output_color$VH.set(seg, x);
    }
    public static int output_color$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.output_color$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void output_color$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.output_color$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle output_profile$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("output_profile"));
    public static VarHandle output_profile$VH() {
        return libraw_output_params_t.output_profile$VH;
    }
    public static MemoryAddress output_profile$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_output_params_t.output_profile$VH.get(seg);
    }
    public static void output_profile$set( MemorySegment seg, MemoryAddress x) {
        libraw_output_params_t.output_profile$VH.set(seg, x);
    }
    public static MemoryAddress output_profile$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_output_params_t.output_profile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void output_profile$set(MemorySegment seg, long index, MemoryAddress x) {
        libraw_output_params_t.output_profile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle camera_profile$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("camera_profile"));
    public static VarHandle camera_profile$VH() {
        return libraw_output_params_t.camera_profile$VH;
    }
    public static MemoryAddress camera_profile$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_output_params_t.camera_profile$VH.get(seg);
    }
    public static void camera_profile$set( MemorySegment seg, MemoryAddress x) {
        libraw_output_params_t.camera_profile$VH.set(seg, x);
    }
    public static MemoryAddress camera_profile$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_output_params_t.camera_profile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void camera_profile$set(MemorySegment seg, long index, MemoryAddress x) {
        libraw_output_params_t.camera_profile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bad_pixels$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bad_pixels"));
    public static VarHandle bad_pixels$VH() {
        return libraw_output_params_t.bad_pixels$VH;
    }
    public static MemoryAddress bad_pixels$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_output_params_t.bad_pixels$VH.get(seg);
    }
    public static void bad_pixels$set( MemorySegment seg, MemoryAddress x) {
        libraw_output_params_t.bad_pixels$VH.set(seg, x);
    }
    public static MemoryAddress bad_pixels$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_output_params_t.bad_pixels$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bad_pixels$set(MemorySegment seg, long index, MemoryAddress x) {
        libraw_output_params_t.bad_pixels$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dark_frame$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dark_frame"));
    public static VarHandle dark_frame$VH() {
        return libraw_output_params_t.dark_frame$VH;
    }
    public static MemoryAddress dark_frame$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_output_params_t.dark_frame$VH.get(seg);
    }
    public static void dark_frame$set( MemorySegment seg, MemoryAddress x) {
        libraw_output_params_t.dark_frame$VH.set(seg, x);
    }
    public static MemoryAddress dark_frame$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_output_params_t.dark_frame$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dark_frame$set(MemorySegment seg, long index, MemoryAddress x) {
        libraw_output_params_t.dark_frame$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle output_bps$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("output_bps"));
    public static VarHandle output_bps$VH() {
        return libraw_output_params_t.output_bps$VH;
    }
    public static int output_bps$get(MemorySegment seg) {
        return (int)libraw_output_params_t.output_bps$VH.get(seg);
    }
    public static void output_bps$set( MemorySegment seg, int x) {
        libraw_output_params_t.output_bps$VH.set(seg, x);
    }
    public static int output_bps$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.output_bps$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void output_bps$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.output_bps$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle output_tiff$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("output_tiff"));
    public static VarHandle output_tiff$VH() {
        return libraw_output_params_t.output_tiff$VH;
    }
    public static int output_tiff$get(MemorySegment seg) {
        return (int)libraw_output_params_t.output_tiff$VH.get(seg);
    }
    public static void output_tiff$set( MemorySegment seg, int x) {
        libraw_output_params_t.output_tiff$VH.set(seg, x);
    }
    public static int output_tiff$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.output_tiff$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void output_tiff$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.output_tiff$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle user_flip$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("user_flip"));
    public static VarHandle user_flip$VH() {
        return libraw_output_params_t.user_flip$VH;
    }
    public static int user_flip$get(MemorySegment seg) {
        return (int)libraw_output_params_t.user_flip$VH.get(seg);
    }
    public static void user_flip$set( MemorySegment seg, int x) {
        libraw_output_params_t.user_flip$VH.set(seg, x);
    }
    public static int user_flip$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.user_flip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void user_flip$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.user_flip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle user_qual$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("user_qual"));
    public static VarHandle user_qual$VH() {
        return libraw_output_params_t.user_qual$VH;
    }
    public static int user_qual$get(MemorySegment seg) {
        return (int)libraw_output_params_t.user_qual$VH.get(seg);
    }
    public static void user_qual$set( MemorySegment seg, int x) {
        libraw_output_params_t.user_qual$VH.set(seg, x);
    }
    public static int user_qual$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.user_qual$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void user_qual$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.user_qual$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle user_black$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("user_black"));
    public static VarHandle user_black$VH() {
        return libraw_output_params_t.user_black$VH;
    }
    public static int user_black$get(MemorySegment seg) {
        return (int)libraw_output_params_t.user_black$VH.get(seg);
    }
    public static void user_black$set( MemorySegment seg, int x) {
        libraw_output_params_t.user_black$VH.set(seg, x);
    }
    public static int user_black$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.user_black$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void user_black$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.user_black$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment user_cblack$slice(MemorySegment seg) {
        return seg.asSlice(220, 16);
    }
    static final VarHandle user_sat$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("user_sat"));
    public static VarHandle user_sat$VH() {
        return libraw_output_params_t.user_sat$VH;
    }
    public static int user_sat$get(MemorySegment seg) {
        return (int)libraw_output_params_t.user_sat$VH.get(seg);
    }
    public static void user_sat$set( MemorySegment seg, int x) {
        libraw_output_params_t.user_sat$VH.set(seg, x);
    }
    public static int user_sat$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.user_sat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void user_sat$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.user_sat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle med_passes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("med_passes"));
    public static VarHandle med_passes$VH() {
        return libraw_output_params_t.med_passes$VH;
    }
    public static int med_passes$get(MemorySegment seg) {
        return (int)libraw_output_params_t.med_passes$VH.get(seg);
    }
    public static void med_passes$set( MemorySegment seg, int x) {
        libraw_output_params_t.med_passes$VH.set(seg, x);
    }
    public static int med_passes$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.med_passes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void med_passes$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.med_passes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle auto_bright_thr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("auto_bright_thr"));
    public static VarHandle auto_bright_thr$VH() {
        return libraw_output_params_t.auto_bright_thr$VH;
    }
    public static float auto_bright_thr$get(MemorySegment seg) {
        return (float)libraw_output_params_t.auto_bright_thr$VH.get(seg);
    }
    public static void auto_bright_thr$set( MemorySegment seg, float x) {
        libraw_output_params_t.auto_bright_thr$VH.set(seg, x);
    }
    public static float auto_bright_thr$get(MemorySegment seg, long index) {
        return (float)libraw_output_params_t.auto_bright_thr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void auto_bright_thr$set(MemorySegment seg, long index, float x) {
        libraw_output_params_t.auto_bright_thr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle adjust_maximum_thr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("adjust_maximum_thr"));
    public static VarHandle adjust_maximum_thr$VH() {
        return libraw_output_params_t.adjust_maximum_thr$VH;
    }
    public static float adjust_maximum_thr$get(MemorySegment seg) {
        return (float)libraw_output_params_t.adjust_maximum_thr$VH.get(seg);
    }
    public static void adjust_maximum_thr$set( MemorySegment seg, float x) {
        libraw_output_params_t.adjust_maximum_thr$VH.set(seg, x);
    }
    public static float adjust_maximum_thr$get(MemorySegment seg, long index) {
        return (float)libraw_output_params_t.adjust_maximum_thr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void adjust_maximum_thr$set(MemorySegment seg, long index, float x) {
        libraw_output_params_t.adjust_maximum_thr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle no_auto_bright$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("no_auto_bright"));
    public static VarHandle no_auto_bright$VH() {
        return libraw_output_params_t.no_auto_bright$VH;
    }
    public static int no_auto_bright$get(MemorySegment seg) {
        return (int)libraw_output_params_t.no_auto_bright$VH.get(seg);
    }
    public static void no_auto_bright$set( MemorySegment seg, int x) {
        libraw_output_params_t.no_auto_bright$VH.set(seg, x);
    }
    public static int no_auto_bright$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.no_auto_bright$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void no_auto_bright$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.no_auto_bright$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle use_fuji_rotate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("use_fuji_rotate"));
    public static VarHandle use_fuji_rotate$VH() {
        return libraw_output_params_t.use_fuji_rotate$VH;
    }
    public static int use_fuji_rotate$get(MemorySegment seg) {
        return (int)libraw_output_params_t.use_fuji_rotate$VH.get(seg);
    }
    public static void use_fuji_rotate$set( MemorySegment seg, int x) {
        libraw_output_params_t.use_fuji_rotate$VH.set(seg, x);
    }
    public static int use_fuji_rotate$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.use_fuji_rotate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void use_fuji_rotate$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.use_fuji_rotate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle green_matching$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("green_matching"));
    public static VarHandle green_matching$VH() {
        return libraw_output_params_t.green_matching$VH;
    }
    public static int green_matching$get(MemorySegment seg) {
        return (int)libraw_output_params_t.green_matching$VH.get(seg);
    }
    public static void green_matching$set( MemorySegment seg, int x) {
        libraw_output_params_t.green_matching$VH.set(seg, x);
    }
    public static int green_matching$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.green_matching$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void green_matching$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.green_matching$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dcb_iterations$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dcb_iterations"));
    public static VarHandle dcb_iterations$VH() {
        return libraw_output_params_t.dcb_iterations$VH;
    }
    public static int dcb_iterations$get(MemorySegment seg) {
        return (int)libraw_output_params_t.dcb_iterations$VH.get(seg);
    }
    public static void dcb_iterations$set( MemorySegment seg, int x) {
        libraw_output_params_t.dcb_iterations$VH.set(seg, x);
    }
    public static int dcb_iterations$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.dcb_iterations$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dcb_iterations$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.dcb_iterations$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dcb_enhance_fl$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dcb_enhance_fl"));
    public static VarHandle dcb_enhance_fl$VH() {
        return libraw_output_params_t.dcb_enhance_fl$VH;
    }
    public static int dcb_enhance_fl$get(MemorySegment seg) {
        return (int)libraw_output_params_t.dcb_enhance_fl$VH.get(seg);
    }
    public static void dcb_enhance_fl$set( MemorySegment seg, int x) {
        libraw_output_params_t.dcb_enhance_fl$VH.set(seg, x);
    }
    public static int dcb_enhance_fl$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.dcb_enhance_fl$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dcb_enhance_fl$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.dcb_enhance_fl$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fbdd_noiserd$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fbdd_noiserd"));
    public static VarHandle fbdd_noiserd$VH() {
        return libraw_output_params_t.fbdd_noiserd$VH;
    }
    public static int fbdd_noiserd$get(MemorySegment seg) {
        return (int)libraw_output_params_t.fbdd_noiserd$VH.get(seg);
    }
    public static void fbdd_noiserd$set( MemorySegment seg, int x) {
        libraw_output_params_t.fbdd_noiserd$VH.set(seg, x);
    }
    public static int fbdd_noiserd$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.fbdd_noiserd$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fbdd_noiserd$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.fbdd_noiserd$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle exp_correc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("exp_correc"));
    public static VarHandle exp_correc$VH() {
        return libraw_output_params_t.exp_correc$VH;
    }
    public static int exp_correc$get(MemorySegment seg) {
        return (int)libraw_output_params_t.exp_correc$VH.get(seg);
    }
    public static void exp_correc$set( MemorySegment seg, int x) {
        libraw_output_params_t.exp_correc$VH.set(seg, x);
    }
    public static int exp_correc$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.exp_correc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void exp_correc$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.exp_correc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle exp_shift$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("exp_shift"));
    public static VarHandle exp_shift$VH() {
        return libraw_output_params_t.exp_shift$VH;
    }
    public static float exp_shift$get(MemorySegment seg) {
        return (float)libraw_output_params_t.exp_shift$VH.get(seg);
    }
    public static void exp_shift$set( MemorySegment seg, float x) {
        libraw_output_params_t.exp_shift$VH.set(seg, x);
    }
    public static float exp_shift$get(MemorySegment seg, long index) {
        return (float)libraw_output_params_t.exp_shift$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void exp_shift$set(MemorySegment seg, long index, float x) {
        libraw_output_params_t.exp_shift$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle exp_preser$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("exp_preser"));
    public static VarHandle exp_preser$VH() {
        return libraw_output_params_t.exp_preser$VH;
    }
    public static float exp_preser$get(MemorySegment seg) {
        return (float)libraw_output_params_t.exp_preser$VH.get(seg);
    }
    public static void exp_preser$set( MemorySegment seg, float x) {
        libraw_output_params_t.exp_preser$VH.set(seg, x);
    }
    public static float exp_preser$get(MemorySegment seg, long index) {
        return (float)libraw_output_params_t.exp_preser$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void exp_preser$set(MemorySegment seg, long index, float x) {
        libraw_output_params_t.exp_preser$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle use_rawspeed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("use_rawspeed"));
    public static VarHandle use_rawspeed$VH() {
        return libraw_output_params_t.use_rawspeed$VH;
    }
    public static int use_rawspeed$get(MemorySegment seg) {
        return (int)libraw_output_params_t.use_rawspeed$VH.get(seg);
    }
    public static void use_rawspeed$set( MemorySegment seg, int x) {
        libraw_output_params_t.use_rawspeed$VH.set(seg, x);
    }
    public static int use_rawspeed$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.use_rawspeed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void use_rawspeed$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.use_rawspeed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle use_dngsdk$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("use_dngsdk"));
    public static VarHandle use_dngsdk$VH() {
        return libraw_output_params_t.use_dngsdk$VH;
    }
    public static int use_dngsdk$get(MemorySegment seg) {
        return (int)libraw_output_params_t.use_dngsdk$VH.get(seg);
    }
    public static void use_dngsdk$set( MemorySegment seg, int x) {
        libraw_output_params_t.use_dngsdk$VH.set(seg, x);
    }
    public static int use_dngsdk$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.use_dngsdk$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void use_dngsdk$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.use_dngsdk$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle no_auto_scale$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("no_auto_scale"));
    public static VarHandle no_auto_scale$VH() {
        return libraw_output_params_t.no_auto_scale$VH;
    }
    public static int no_auto_scale$get(MemorySegment seg) {
        return (int)libraw_output_params_t.no_auto_scale$VH.get(seg);
    }
    public static void no_auto_scale$set( MemorySegment seg, int x) {
        libraw_output_params_t.no_auto_scale$VH.set(seg, x);
    }
    public static int no_auto_scale$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.no_auto_scale$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void no_auto_scale$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.no_auto_scale$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle no_interpolation$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("no_interpolation"));
    public static VarHandle no_interpolation$VH() {
        return libraw_output_params_t.no_interpolation$VH;
    }
    public static int no_interpolation$get(MemorySegment seg) {
        return (int)libraw_output_params_t.no_interpolation$VH.get(seg);
    }
    public static void no_interpolation$set( MemorySegment seg, int x) {
        libraw_output_params_t.no_interpolation$VH.set(seg, x);
    }
    public static int no_interpolation$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.no_interpolation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void no_interpolation$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.no_interpolation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle raw_processing_options$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("raw_processing_options"));
    public static VarHandle raw_processing_options$VH() {
        return libraw_output_params_t.raw_processing_options$VH;
    }
    public static int raw_processing_options$get(MemorySegment seg) {
        return (int)libraw_output_params_t.raw_processing_options$VH.get(seg);
    }
    public static void raw_processing_options$set( MemorySegment seg, int x) {
        libraw_output_params_t.raw_processing_options$VH.set(seg, x);
    }
    public static int raw_processing_options$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.raw_processing_options$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void raw_processing_options$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.raw_processing_options$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_raw_memory_mb$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_raw_memory_mb"));
    public static VarHandle max_raw_memory_mb$VH() {
        return libraw_output_params_t.max_raw_memory_mb$VH;
    }
    public static int max_raw_memory_mb$get(MemorySegment seg) {
        return (int)libraw_output_params_t.max_raw_memory_mb$VH.get(seg);
    }
    public static void max_raw_memory_mb$set( MemorySegment seg, int x) {
        libraw_output_params_t.max_raw_memory_mb$VH.set(seg, x);
    }
    public static int max_raw_memory_mb$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.max_raw_memory_mb$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_raw_memory_mb$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.max_raw_memory_mb$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sony_arw2_posterization_thr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sony_arw2_posterization_thr"));
    public static VarHandle sony_arw2_posterization_thr$VH() {
        return libraw_output_params_t.sony_arw2_posterization_thr$VH;
    }
    public static int sony_arw2_posterization_thr$get(MemorySegment seg) {
        return (int)libraw_output_params_t.sony_arw2_posterization_thr$VH.get(seg);
    }
    public static void sony_arw2_posterization_thr$set( MemorySegment seg, int x) {
        libraw_output_params_t.sony_arw2_posterization_thr$VH.set(seg, x);
    }
    public static int sony_arw2_posterization_thr$get(MemorySegment seg, long index) {
        return (int)libraw_output_params_t.sony_arw2_posterization_thr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sony_arw2_posterization_thr$set(MemorySegment seg, long index, int x) {
        libraw_output_params_t.sony_arw2_posterization_thr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle coolscan_nef_gamma$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("coolscan_nef_gamma"));
    public static VarHandle coolscan_nef_gamma$VH() {
        return libraw_output_params_t.coolscan_nef_gamma$VH;
    }
    public static float coolscan_nef_gamma$get(MemorySegment seg) {
        return (float)libraw_output_params_t.coolscan_nef_gamma$VH.get(seg);
    }
    public static void coolscan_nef_gamma$set( MemorySegment seg, float x) {
        libraw_output_params_t.coolscan_nef_gamma$VH.set(seg, x);
    }
    public static float coolscan_nef_gamma$get(MemorySegment seg, long index) {
        return (float)libraw_output_params_t.coolscan_nef_gamma$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void coolscan_nef_gamma$set(MemorySegment seg, long index, float x) {
        libraw_output_params_t.coolscan_nef_gamma$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment p4shot_order$slice(MemorySegment seg) {
        return seg.asSlice(320, 5);
    }
    static final VarHandle custom_camera_strings$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("custom_camera_strings"));
    public static VarHandle custom_camera_strings$VH() {
        return libraw_output_params_t.custom_camera_strings$VH;
    }
    public static MemoryAddress custom_camera_strings$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_output_params_t.custom_camera_strings$VH.get(seg);
    }
    public static void custom_camera_strings$set( MemorySegment seg, MemoryAddress x) {
        libraw_output_params_t.custom_camera_strings$VH.set(seg, x);
    }
    public static MemoryAddress custom_camera_strings$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_output_params_t.custom_camera_strings$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void custom_camera_strings$set(MemorySegment seg, long index, MemoryAddress x) {
        libraw_output_params_t.custom_camera_strings$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


