// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class libraw_area_t {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_SHORT.withName("t"),
        C_SHORT.withName("l"),
        C_SHORT.withName("b"),
        C_SHORT.withName("r")
    );
    public static MemoryLayout $LAYOUT() {
        return libraw_area_t.$struct$LAYOUT;
    }
    static final VarHandle t$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("t"));
    public static VarHandle t$VH() {
        return libraw_area_t.t$VH;
    }
    public static short t$get(MemorySegment seg) {
        return (short)libraw_area_t.t$VH.get(seg);
    }
    public static void t$set( MemorySegment seg, short x) {
        libraw_area_t.t$VH.set(seg, x);
    }
    public static short t$get(MemorySegment seg, long index) {
        return (short)libraw_area_t.t$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void t$set(MemorySegment seg, long index, short x) {
        libraw_area_t.t$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle l$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("l"));
    public static VarHandle l$VH() {
        return libraw_area_t.l$VH;
    }
    public static short l$get(MemorySegment seg) {
        return (short)libraw_area_t.l$VH.get(seg);
    }
    public static void l$set( MemorySegment seg, short x) {
        libraw_area_t.l$VH.set(seg, x);
    }
    public static short l$get(MemorySegment seg, long index) {
        return (short)libraw_area_t.l$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void l$set(MemorySegment seg, long index, short x) {
        libraw_area_t.l$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle b$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("b"));
    public static VarHandle b$VH() {
        return libraw_area_t.b$VH;
    }
    public static short b$get(MemorySegment seg) {
        return (short)libraw_area_t.b$VH.get(seg);
    }
    public static void b$set( MemorySegment seg, short x) {
        libraw_area_t.b$VH.set(seg, x);
    }
    public static short b$get(MemorySegment seg, long index) {
        return (short)libraw_area_t.b$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void b$set(MemorySegment seg, long index, short x) {
        libraw_area_t.b$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle r$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("r"));
    public static VarHandle r$VH() {
        return libraw_area_t.r$VH;
    }
    public static short r$get(MemorySegment seg) {
        return (short)libraw_area_t.r$VH.get(seg);
    }
    public static void r$set( MemorySegment seg, short x) {
        libraw_area_t.r$VH.set(seg, x);
    }
    public static short r$get(MemorySegment seg, long index) {
        return (short)libraw_area_t.r$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void r$set(MemorySegment seg, long index, short x) {
        libraw_area_t.r$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


