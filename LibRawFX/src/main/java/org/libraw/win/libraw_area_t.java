// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_area_t {
 *     short t;
 *     short l;
 *     short b;
 *     short r;
 * };
 * }
 */
public class libraw_area_t {

    public static MemoryLayout $LAYOUT() {
        return constants$16.const$3;
    }
    public static VarHandle t$VH() {
        return constants$16.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short t;
     * }
     */
    public static short t$get(MemorySegment seg) {
        return (short)constants$16.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short t;
     * }
     */
    public static void t$set(MemorySegment seg, short x) {
        constants$16.const$4.set(seg, x);
    }
    public static short t$get(MemorySegment seg, long index) {
        return (short)constants$16.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void t$set(MemorySegment seg, long index, short x) {
        constants$16.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle l$VH() {
        return constants$16.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short l;
     * }
     */
    public static short l$get(MemorySegment seg) {
        return (short)constants$16.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short l;
     * }
     */
    public static void l$set(MemorySegment seg, short x) {
        constants$16.const$5.set(seg, x);
    }
    public static short l$get(MemorySegment seg, long index) {
        return (short)constants$16.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void l$set(MemorySegment seg, long index, short x) {
        constants$16.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle b$VH() {
        return constants$17.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short b;
     * }
     */
    public static short b$get(MemorySegment seg) {
        return (short)constants$17.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short b;
     * }
     */
    public static void b$set(MemorySegment seg, short x) {
        constants$17.const$0.set(seg, x);
    }
    public static short b$get(MemorySegment seg, long index) {
        return (short)constants$17.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void b$set(MemorySegment seg, long index, short x) {
        constants$17.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle r$VH() {
        return constants$17.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short r;
     * }
     */
    public static short r$get(MemorySegment seg) {
        return (short)constants$17.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short r;
     * }
     */
    public static void r$set(MemorySegment seg, short x) {
        constants$17.const$1.set(seg, x);
    }
    public static short r$get(MemorySegment seg, long index) {
        return (short)constants$17.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void r$set(MemorySegment seg, long index, short x) {
        constants$17.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


