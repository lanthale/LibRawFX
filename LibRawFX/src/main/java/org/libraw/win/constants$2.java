// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$2 {

    static final FunctionDescriptor post_identify_callback$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle post_identify_callback$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$2.post_identify_callback$FUNC, false
    );
    static final FunctionDescriptor process_step_callback$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle process_step_callback$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$2.process_step_callback$FUNC, false
    );
    static final FunctionDescriptor libraw_strerror$FUNC = FunctionDescriptor.of(C_POINTER,
        C_INT
    );
    static final MethodHandle libraw_strerror$MH = RuntimeHelper.downcallHandle(
        libraw_h.LIBRARIES, "libraw_strerror",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        constants$2.libraw_strerror$FUNC, false
    );
    static final FunctionDescriptor libraw_strprogress$FUNC = FunctionDescriptor.of(C_POINTER,
        C_INT
    );
    static final MethodHandle libraw_strprogress$MH = RuntimeHelper.downcallHandle(
        libraw_h.LIBRARIES, "libraw_strprogress",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        constants$2.libraw_strprogress$FUNC, false
    );
}


