// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface post_identify_callback {

    void apply(java.lang.foreign.MemoryAddress ctx);
    static MemorySegment allocate(post_identify_callback fi, MemorySession session) {
        return RuntimeHelper.upcallStub(post_identify_callback.class, fi, constants$2.post_identify_callback$FUNC, session);
    }
    static post_identify_callback ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _ctx) -> {
            try {
                constants$2.post_identify_callback$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_ctx);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


