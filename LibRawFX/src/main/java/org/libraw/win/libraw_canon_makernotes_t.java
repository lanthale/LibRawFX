// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class libraw_canon_makernotes_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("ColorDataVer"),
        Constants$root.C_LONG$LAYOUT.withName("ColorDataSubVer"),
        Constants$root.C_LONG$LAYOUT.withName("SpecularWhiteLevel"),
        Constants$root.C_LONG$LAYOUT.withName("NormalWhiteLevel"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_LONG$LAYOUT).withName("ChannelBlackLevel"),
        Constants$root.C_LONG$LAYOUT.withName("AverageBlackLevel"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_LONG$LAYOUT).withName("multishot"),
        Constants$root.C_SHORT$LAYOUT.withName("MeteringMode"),
        Constants$root.C_SHORT$LAYOUT.withName("SpotMeteringMode"),
        Constants$root.C_CHAR$LAYOUT.withName("FlashMeteringMode"),
        MemoryLayout.paddingLayout(8),
        Constants$root.C_SHORT$LAYOUT.withName("FlashExposureLock"),
        Constants$root.C_SHORT$LAYOUT.withName("ExposureMode"),
        Constants$root.C_SHORT$LAYOUT.withName("AESetting"),
        Constants$root.C_CHAR$LAYOUT.withName("HighlightTonePriority"),
        MemoryLayout.paddingLayout(8),
        Constants$root.C_SHORT$LAYOUT.withName("ImageStabilization"),
        Constants$root.C_SHORT$LAYOUT.withName("FocusMode"),
        Constants$root.C_SHORT$LAYOUT.withName("AFPoint"),
        Constants$root.C_SHORT$LAYOUT.withName("FocusContinuous"),
        Constants$root.C_SHORT$LAYOUT.withName("AFPointsInFocus30D"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("AFPointsInFocus1D"),
        Constants$root.C_SHORT$LAYOUT.withName("AFPointsInFocus5D"),
        Constants$root.C_SHORT$LAYOUT.withName("AFAreaMode"),
        Constants$root.C_SHORT$LAYOUT.withName("NumAFPoints"),
        Constants$root.C_SHORT$LAYOUT.withName("ValidAFPoints"),
        Constants$root.C_SHORT$LAYOUT.withName("AFImageWidth"),
        Constants$root.C_SHORT$LAYOUT.withName("AFImageHeight"),
        MemoryLayout.sequenceLayout(61, Constants$root.C_SHORT$LAYOUT).withName("AFAreaWidths"),
        MemoryLayout.sequenceLayout(61, Constants$root.C_SHORT$LAYOUT).withName("AFAreaHeights"),
        MemoryLayout.sequenceLayout(61, Constants$root.C_SHORT$LAYOUT).withName("AFAreaXPositions"),
        MemoryLayout.sequenceLayout(61, Constants$root.C_SHORT$LAYOUT).withName("AFAreaYPositions"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_SHORT$LAYOUT).withName("AFPointsInFocus"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_SHORT$LAYOUT).withName("AFPointsSelected"),
        Constants$root.C_SHORT$LAYOUT.withName("PrimaryAFPoint"),
        Constants$root.C_SHORT$LAYOUT.withName("FlashMode"),
        Constants$root.C_SHORT$LAYOUT.withName("FlashActivity"),
        Constants$root.C_SHORT$LAYOUT.withName("FlashBits"),
        Constants$root.C_SHORT$LAYOUT.withName("ManualFlashOutput"),
        Constants$root.C_SHORT$LAYOUT.withName("FlashOutput"),
        Constants$root.C_SHORT$LAYOUT.withName("FlashGuideNumber"),
        Constants$root.C_SHORT$LAYOUT.withName("ContinuousDrive"),
        Constants$root.C_SHORT$LAYOUT.withName("SensorWidth"),
        Constants$root.C_SHORT$LAYOUT.withName("SensorHeight"),
        Constants$root.C_SHORT$LAYOUT.withName("SensorLeftBorder"),
        Constants$root.C_SHORT$LAYOUT.withName("SensorTopBorder"),
        Constants$root.C_SHORT$LAYOUT.withName("SensorRightBorder"),
        Constants$root.C_SHORT$LAYOUT.withName("SensorBottomBorder"),
        Constants$root.C_SHORT$LAYOUT.withName("BlackMaskLeftBorder"),
        Constants$root.C_SHORT$LAYOUT.withName("BlackMaskTopBorder"),
        Constants$root.C_SHORT$LAYOUT.withName("BlackMaskRightBorder"),
        Constants$root.C_SHORT$LAYOUT.withName("BlackMaskBottomBorder"),
        Constants$root.C_LONG$LAYOUT.withName("AFMicroAdjMode"),
        Constants$root.C_FLOAT$LAYOUT.withName("AFMicroAdjValue"),
        Constants$root.C_SHORT$LAYOUT.withName("MakernotesFlip"),
        Constants$root.C_SHORT$LAYOUT.withName("RecordMode"),
        Constants$root.C_SHORT$LAYOUT.withName("SRAWQuality"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_LONG$LAYOUT.withName("wbi"),
        Constants$root.C_FLOAT$LAYOUT.withName("firmware"),
        Constants$root.C_SHORT$LAYOUT.withName("RF_lensID"),
        MemoryLayout.paddingLayout(16)
    );
    public static MemoryLayout $LAYOUT() {
        return libraw_canon_makernotes_t.$struct$LAYOUT;
    }
    static final VarHandle ColorDataVer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ColorDataVer"));
    public static VarHandle ColorDataVer$VH() {
        return libraw_canon_makernotes_t.ColorDataVer$VH;
    }
    public static int ColorDataVer$get(MemorySegment seg) {
        return (int)libraw_canon_makernotes_t.ColorDataVer$VH.get(seg);
    }
    public static void ColorDataVer$set( MemorySegment seg, int x) {
        libraw_canon_makernotes_t.ColorDataVer$VH.set(seg, x);
    }
    public static int ColorDataVer$get(MemorySegment seg, long index) {
        return (int)libraw_canon_makernotes_t.ColorDataVer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ColorDataVer$set(MemorySegment seg, long index, int x) {
        libraw_canon_makernotes_t.ColorDataVer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ColorDataSubVer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ColorDataSubVer"));
    public static VarHandle ColorDataSubVer$VH() {
        return libraw_canon_makernotes_t.ColorDataSubVer$VH;
    }
    public static int ColorDataSubVer$get(MemorySegment seg) {
        return (int)libraw_canon_makernotes_t.ColorDataSubVer$VH.get(seg);
    }
    public static void ColorDataSubVer$set( MemorySegment seg, int x) {
        libraw_canon_makernotes_t.ColorDataSubVer$VH.set(seg, x);
    }
    public static int ColorDataSubVer$get(MemorySegment seg, long index) {
        return (int)libraw_canon_makernotes_t.ColorDataSubVer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ColorDataSubVer$set(MemorySegment seg, long index, int x) {
        libraw_canon_makernotes_t.ColorDataSubVer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SpecularWhiteLevel$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SpecularWhiteLevel"));
    public static VarHandle SpecularWhiteLevel$VH() {
        return libraw_canon_makernotes_t.SpecularWhiteLevel$VH;
    }
    public static int SpecularWhiteLevel$get(MemorySegment seg) {
        return (int)libraw_canon_makernotes_t.SpecularWhiteLevel$VH.get(seg);
    }
    public static void SpecularWhiteLevel$set( MemorySegment seg, int x) {
        libraw_canon_makernotes_t.SpecularWhiteLevel$VH.set(seg, x);
    }
    public static int SpecularWhiteLevel$get(MemorySegment seg, long index) {
        return (int)libraw_canon_makernotes_t.SpecularWhiteLevel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SpecularWhiteLevel$set(MemorySegment seg, long index, int x) {
        libraw_canon_makernotes_t.SpecularWhiteLevel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NormalWhiteLevel$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NormalWhiteLevel"));
    public static VarHandle NormalWhiteLevel$VH() {
        return libraw_canon_makernotes_t.NormalWhiteLevel$VH;
    }
    public static int NormalWhiteLevel$get(MemorySegment seg) {
        return (int)libraw_canon_makernotes_t.NormalWhiteLevel$VH.get(seg);
    }
    public static void NormalWhiteLevel$set( MemorySegment seg, int x) {
        libraw_canon_makernotes_t.NormalWhiteLevel$VH.set(seg, x);
    }
    public static int NormalWhiteLevel$get(MemorySegment seg, long index) {
        return (int)libraw_canon_makernotes_t.NormalWhiteLevel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NormalWhiteLevel$set(MemorySegment seg, long index, int x) {
        libraw_canon_makernotes_t.NormalWhiteLevel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ChannelBlackLevel$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    static final VarHandle AverageBlackLevel$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AverageBlackLevel"));
    public static VarHandle AverageBlackLevel$VH() {
        return libraw_canon_makernotes_t.AverageBlackLevel$VH;
    }
    public static int AverageBlackLevel$get(MemorySegment seg) {
        return (int)libraw_canon_makernotes_t.AverageBlackLevel$VH.get(seg);
    }
    public static void AverageBlackLevel$set( MemorySegment seg, int x) {
        libraw_canon_makernotes_t.AverageBlackLevel$VH.set(seg, x);
    }
    public static int AverageBlackLevel$get(MemorySegment seg, long index) {
        return (int)libraw_canon_makernotes_t.AverageBlackLevel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AverageBlackLevel$set(MemorySegment seg, long index, int x) {
        libraw_canon_makernotes_t.AverageBlackLevel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment multishot$slice(MemorySegment seg) {
        return seg.asSlice(36, 16);
    }
    static final VarHandle MeteringMode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MeteringMode"));
    public static VarHandle MeteringMode$VH() {
        return libraw_canon_makernotes_t.MeteringMode$VH;
    }
    public static short MeteringMode$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.MeteringMode$VH.get(seg);
    }
    public static void MeteringMode$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.MeteringMode$VH.set(seg, x);
    }
    public static short MeteringMode$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.MeteringMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MeteringMode$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.MeteringMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SpotMeteringMode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SpotMeteringMode"));
    public static VarHandle SpotMeteringMode$VH() {
        return libraw_canon_makernotes_t.SpotMeteringMode$VH;
    }
    public static short SpotMeteringMode$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.SpotMeteringMode$VH.get(seg);
    }
    public static void SpotMeteringMode$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.SpotMeteringMode$VH.set(seg, x);
    }
    public static short SpotMeteringMode$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.SpotMeteringMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SpotMeteringMode$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.SpotMeteringMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashMeteringMode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlashMeteringMode"));
    public static VarHandle FlashMeteringMode$VH() {
        return libraw_canon_makernotes_t.FlashMeteringMode$VH;
    }
    public static byte FlashMeteringMode$get(MemorySegment seg) {
        return (byte)libraw_canon_makernotes_t.FlashMeteringMode$VH.get(seg);
    }
    public static void FlashMeteringMode$set( MemorySegment seg, byte x) {
        libraw_canon_makernotes_t.FlashMeteringMode$VH.set(seg, x);
    }
    public static byte FlashMeteringMode$get(MemorySegment seg, long index) {
        return (byte)libraw_canon_makernotes_t.FlashMeteringMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashMeteringMode$set(MemorySegment seg, long index, byte x) {
        libraw_canon_makernotes_t.FlashMeteringMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashExposureLock$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlashExposureLock"));
    public static VarHandle FlashExposureLock$VH() {
        return libraw_canon_makernotes_t.FlashExposureLock$VH;
    }
    public static short FlashExposureLock$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.FlashExposureLock$VH.get(seg);
    }
    public static void FlashExposureLock$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.FlashExposureLock$VH.set(seg, x);
    }
    public static short FlashExposureLock$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.FlashExposureLock$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashExposureLock$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.FlashExposureLock$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ExposureMode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ExposureMode"));
    public static VarHandle ExposureMode$VH() {
        return libraw_canon_makernotes_t.ExposureMode$VH;
    }
    public static short ExposureMode$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.ExposureMode$VH.get(seg);
    }
    public static void ExposureMode$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.ExposureMode$VH.set(seg, x);
    }
    public static short ExposureMode$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.ExposureMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExposureMode$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.ExposureMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AESetting$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AESetting"));
    public static VarHandle AESetting$VH() {
        return libraw_canon_makernotes_t.AESetting$VH;
    }
    public static short AESetting$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.AESetting$VH.get(seg);
    }
    public static void AESetting$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.AESetting$VH.set(seg, x);
    }
    public static short AESetting$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.AESetting$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AESetting$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.AESetting$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle HighlightTonePriority$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("HighlightTonePriority"));
    public static VarHandle HighlightTonePriority$VH() {
        return libraw_canon_makernotes_t.HighlightTonePriority$VH;
    }
    public static byte HighlightTonePriority$get(MemorySegment seg) {
        return (byte)libraw_canon_makernotes_t.HighlightTonePriority$VH.get(seg);
    }
    public static void HighlightTonePriority$set( MemorySegment seg, byte x) {
        libraw_canon_makernotes_t.HighlightTonePriority$VH.set(seg, x);
    }
    public static byte HighlightTonePriority$get(MemorySegment seg, long index) {
        return (byte)libraw_canon_makernotes_t.HighlightTonePriority$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void HighlightTonePriority$set(MemorySegment seg, long index, byte x) {
        libraw_canon_makernotes_t.HighlightTonePriority$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ImageStabilization$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ImageStabilization"));
    public static VarHandle ImageStabilization$VH() {
        return libraw_canon_makernotes_t.ImageStabilization$VH;
    }
    public static short ImageStabilization$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.ImageStabilization$VH.get(seg);
    }
    public static void ImageStabilization$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.ImageStabilization$VH.set(seg, x);
    }
    public static short ImageStabilization$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.ImageStabilization$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ImageStabilization$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.ImageStabilization$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FocusMode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FocusMode"));
    public static VarHandle FocusMode$VH() {
        return libraw_canon_makernotes_t.FocusMode$VH;
    }
    public static short FocusMode$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.FocusMode$VH.get(seg);
    }
    public static void FocusMode$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.FocusMode$VH.set(seg, x);
    }
    public static short FocusMode$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.FocusMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FocusMode$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.FocusMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AFPoint$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AFPoint"));
    public static VarHandle AFPoint$VH() {
        return libraw_canon_makernotes_t.AFPoint$VH;
    }
    public static short AFPoint$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.AFPoint$VH.get(seg);
    }
    public static void AFPoint$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.AFPoint$VH.set(seg, x);
    }
    public static short AFPoint$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.AFPoint$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AFPoint$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.AFPoint$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FocusContinuous$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FocusContinuous"));
    public static VarHandle FocusContinuous$VH() {
        return libraw_canon_makernotes_t.FocusContinuous$VH;
    }
    public static short FocusContinuous$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.FocusContinuous$VH.get(seg);
    }
    public static void FocusContinuous$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.FocusContinuous$VH.set(seg, x);
    }
    public static short FocusContinuous$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.FocusContinuous$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FocusContinuous$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.FocusContinuous$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AFPointsInFocus30D$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AFPointsInFocus30D"));
    public static VarHandle AFPointsInFocus30D$VH() {
        return libraw_canon_makernotes_t.AFPointsInFocus30D$VH;
    }
    public static short AFPointsInFocus30D$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.AFPointsInFocus30D$VH.get(seg);
    }
    public static void AFPointsInFocus30D$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.AFPointsInFocus30D$VH.set(seg, x);
    }
    public static short AFPointsInFocus30D$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.AFPointsInFocus30D$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AFPointsInFocus30D$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.AFPointsInFocus30D$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment AFPointsInFocus1D$slice(MemorySegment seg) {
        return seg.asSlice(76, 8);
    }
    static final VarHandle AFPointsInFocus5D$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AFPointsInFocus5D"));
    public static VarHandle AFPointsInFocus5D$VH() {
        return libraw_canon_makernotes_t.AFPointsInFocus5D$VH;
    }
    public static short AFPointsInFocus5D$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.AFPointsInFocus5D$VH.get(seg);
    }
    public static void AFPointsInFocus5D$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.AFPointsInFocus5D$VH.set(seg, x);
    }
    public static short AFPointsInFocus5D$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.AFPointsInFocus5D$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AFPointsInFocus5D$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.AFPointsInFocus5D$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AFAreaMode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AFAreaMode"));
    public static VarHandle AFAreaMode$VH() {
        return libraw_canon_makernotes_t.AFAreaMode$VH;
    }
    public static short AFAreaMode$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.AFAreaMode$VH.get(seg);
    }
    public static void AFAreaMode$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.AFAreaMode$VH.set(seg, x);
    }
    public static short AFAreaMode$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.AFAreaMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AFAreaMode$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.AFAreaMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumAFPoints$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumAFPoints"));
    public static VarHandle NumAFPoints$VH() {
        return libraw_canon_makernotes_t.NumAFPoints$VH;
    }
    public static short NumAFPoints$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.NumAFPoints$VH.get(seg);
    }
    public static void NumAFPoints$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.NumAFPoints$VH.set(seg, x);
    }
    public static short NumAFPoints$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.NumAFPoints$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumAFPoints$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.NumAFPoints$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ValidAFPoints$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ValidAFPoints"));
    public static VarHandle ValidAFPoints$VH() {
        return libraw_canon_makernotes_t.ValidAFPoints$VH;
    }
    public static short ValidAFPoints$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.ValidAFPoints$VH.get(seg);
    }
    public static void ValidAFPoints$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.ValidAFPoints$VH.set(seg, x);
    }
    public static short ValidAFPoints$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.ValidAFPoints$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ValidAFPoints$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.ValidAFPoints$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AFImageWidth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AFImageWidth"));
    public static VarHandle AFImageWidth$VH() {
        return libraw_canon_makernotes_t.AFImageWidth$VH;
    }
    public static short AFImageWidth$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.AFImageWidth$VH.get(seg);
    }
    public static void AFImageWidth$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.AFImageWidth$VH.set(seg, x);
    }
    public static short AFImageWidth$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.AFImageWidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AFImageWidth$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.AFImageWidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AFImageHeight$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AFImageHeight"));
    public static VarHandle AFImageHeight$VH() {
        return libraw_canon_makernotes_t.AFImageHeight$VH;
    }
    public static short AFImageHeight$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.AFImageHeight$VH.get(seg);
    }
    public static void AFImageHeight$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.AFImageHeight$VH.set(seg, x);
    }
    public static short AFImageHeight$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.AFImageHeight$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AFImageHeight$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.AFImageHeight$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment AFAreaWidths$slice(MemorySegment seg) {
        return seg.asSlice(96, 122);
    }
    public static MemorySegment AFAreaHeights$slice(MemorySegment seg) {
        return seg.asSlice(218, 122);
    }
    public static MemorySegment AFAreaXPositions$slice(MemorySegment seg) {
        return seg.asSlice(340, 122);
    }
    public static MemorySegment AFAreaYPositions$slice(MemorySegment seg) {
        return seg.asSlice(462, 122);
    }
    public static MemorySegment AFPointsInFocus$slice(MemorySegment seg) {
        return seg.asSlice(584, 8);
    }
    public static MemorySegment AFPointsSelected$slice(MemorySegment seg) {
        return seg.asSlice(592, 8);
    }
    static final VarHandle PrimaryAFPoint$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PrimaryAFPoint"));
    public static VarHandle PrimaryAFPoint$VH() {
        return libraw_canon_makernotes_t.PrimaryAFPoint$VH;
    }
    public static short PrimaryAFPoint$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.PrimaryAFPoint$VH.get(seg);
    }
    public static void PrimaryAFPoint$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.PrimaryAFPoint$VH.set(seg, x);
    }
    public static short PrimaryAFPoint$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.PrimaryAFPoint$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PrimaryAFPoint$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.PrimaryAFPoint$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashMode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlashMode"));
    public static VarHandle FlashMode$VH() {
        return libraw_canon_makernotes_t.FlashMode$VH;
    }
    public static short FlashMode$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.FlashMode$VH.get(seg);
    }
    public static void FlashMode$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.FlashMode$VH.set(seg, x);
    }
    public static short FlashMode$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.FlashMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashMode$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.FlashMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashActivity$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlashActivity"));
    public static VarHandle FlashActivity$VH() {
        return libraw_canon_makernotes_t.FlashActivity$VH;
    }
    public static short FlashActivity$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.FlashActivity$VH.get(seg);
    }
    public static void FlashActivity$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.FlashActivity$VH.set(seg, x);
    }
    public static short FlashActivity$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.FlashActivity$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashActivity$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.FlashActivity$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashBits$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlashBits"));
    public static VarHandle FlashBits$VH() {
        return libraw_canon_makernotes_t.FlashBits$VH;
    }
    public static short FlashBits$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.FlashBits$VH.get(seg);
    }
    public static void FlashBits$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.FlashBits$VH.set(seg, x);
    }
    public static short FlashBits$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.FlashBits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashBits$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.FlashBits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ManualFlashOutput$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ManualFlashOutput"));
    public static VarHandle ManualFlashOutput$VH() {
        return libraw_canon_makernotes_t.ManualFlashOutput$VH;
    }
    public static short ManualFlashOutput$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.ManualFlashOutput$VH.get(seg);
    }
    public static void ManualFlashOutput$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.ManualFlashOutput$VH.set(seg, x);
    }
    public static short ManualFlashOutput$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.ManualFlashOutput$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ManualFlashOutput$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.ManualFlashOutput$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashOutput$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlashOutput"));
    public static VarHandle FlashOutput$VH() {
        return libraw_canon_makernotes_t.FlashOutput$VH;
    }
    public static short FlashOutput$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.FlashOutput$VH.get(seg);
    }
    public static void FlashOutput$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.FlashOutput$VH.set(seg, x);
    }
    public static short FlashOutput$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.FlashOutput$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashOutput$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.FlashOutput$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashGuideNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlashGuideNumber"));
    public static VarHandle FlashGuideNumber$VH() {
        return libraw_canon_makernotes_t.FlashGuideNumber$VH;
    }
    public static short FlashGuideNumber$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.FlashGuideNumber$VH.get(seg);
    }
    public static void FlashGuideNumber$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.FlashGuideNumber$VH.set(seg, x);
    }
    public static short FlashGuideNumber$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.FlashGuideNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashGuideNumber$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.FlashGuideNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ContinuousDrive$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ContinuousDrive"));
    public static VarHandle ContinuousDrive$VH() {
        return libraw_canon_makernotes_t.ContinuousDrive$VH;
    }
    public static short ContinuousDrive$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.ContinuousDrive$VH.get(seg);
    }
    public static void ContinuousDrive$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.ContinuousDrive$VH.set(seg, x);
    }
    public static short ContinuousDrive$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.ContinuousDrive$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ContinuousDrive$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.ContinuousDrive$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SensorWidth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SensorWidth"));
    public static VarHandle SensorWidth$VH() {
        return libraw_canon_makernotes_t.SensorWidth$VH;
    }
    public static short SensorWidth$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.SensorWidth$VH.get(seg);
    }
    public static void SensorWidth$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.SensorWidth$VH.set(seg, x);
    }
    public static short SensorWidth$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.SensorWidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SensorWidth$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.SensorWidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SensorHeight$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SensorHeight"));
    public static VarHandle SensorHeight$VH() {
        return libraw_canon_makernotes_t.SensorHeight$VH;
    }
    public static short SensorHeight$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.SensorHeight$VH.get(seg);
    }
    public static void SensorHeight$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.SensorHeight$VH.set(seg, x);
    }
    public static short SensorHeight$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.SensorHeight$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SensorHeight$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.SensorHeight$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SensorLeftBorder$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SensorLeftBorder"));
    public static VarHandle SensorLeftBorder$VH() {
        return libraw_canon_makernotes_t.SensorLeftBorder$VH;
    }
    public static short SensorLeftBorder$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.SensorLeftBorder$VH.get(seg);
    }
    public static void SensorLeftBorder$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.SensorLeftBorder$VH.set(seg, x);
    }
    public static short SensorLeftBorder$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.SensorLeftBorder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SensorLeftBorder$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.SensorLeftBorder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SensorTopBorder$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SensorTopBorder"));
    public static VarHandle SensorTopBorder$VH() {
        return libraw_canon_makernotes_t.SensorTopBorder$VH;
    }
    public static short SensorTopBorder$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.SensorTopBorder$VH.get(seg);
    }
    public static void SensorTopBorder$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.SensorTopBorder$VH.set(seg, x);
    }
    public static short SensorTopBorder$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.SensorTopBorder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SensorTopBorder$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.SensorTopBorder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SensorRightBorder$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SensorRightBorder"));
    public static VarHandle SensorRightBorder$VH() {
        return libraw_canon_makernotes_t.SensorRightBorder$VH;
    }
    public static short SensorRightBorder$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.SensorRightBorder$VH.get(seg);
    }
    public static void SensorRightBorder$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.SensorRightBorder$VH.set(seg, x);
    }
    public static short SensorRightBorder$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.SensorRightBorder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SensorRightBorder$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.SensorRightBorder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SensorBottomBorder$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SensorBottomBorder"));
    public static VarHandle SensorBottomBorder$VH() {
        return libraw_canon_makernotes_t.SensorBottomBorder$VH;
    }
    public static short SensorBottomBorder$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.SensorBottomBorder$VH.get(seg);
    }
    public static void SensorBottomBorder$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.SensorBottomBorder$VH.set(seg, x);
    }
    public static short SensorBottomBorder$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.SensorBottomBorder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SensorBottomBorder$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.SensorBottomBorder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BlackMaskLeftBorder$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BlackMaskLeftBorder"));
    public static VarHandle BlackMaskLeftBorder$VH() {
        return libraw_canon_makernotes_t.BlackMaskLeftBorder$VH;
    }
    public static short BlackMaskLeftBorder$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.BlackMaskLeftBorder$VH.get(seg);
    }
    public static void BlackMaskLeftBorder$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.BlackMaskLeftBorder$VH.set(seg, x);
    }
    public static short BlackMaskLeftBorder$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.BlackMaskLeftBorder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BlackMaskLeftBorder$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.BlackMaskLeftBorder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BlackMaskTopBorder$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BlackMaskTopBorder"));
    public static VarHandle BlackMaskTopBorder$VH() {
        return libraw_canon_makernotes_t.BlackMaskTopBorder$VH;
    }
    public static short BlackMaskTopBorder$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.BlackMaskTopBorder$VH.get(seg);
    }
    public static void BlackMaskTopBorder$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.BlackMaskTopBorder$VH.set(seg, x);
    }
    public static short BlackMaskTopBorder$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.BlackMaskTopBorder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BlackMaskTopBorder$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.BlackMaskTopBorder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BlackMaskRightBorder$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BlackMaskRightBorder"));
    public static VarHandle BlackMaskRightBorder$VH() {
        return libraw_canon_makernotes_t.BlackMaskRightBorder$VH;
    }
    public static short BlackMaskRightBorder$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.BlackMaskRightBorder$VH.get(seg);
    }
    public static void BlackMaskRightBorder$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.BlackMaskRightBorder$VH.set(seg, x);
    }
    public static short BlackMaskRightBorder$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.BlackMaskRightBorder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BlackMaskRightBorder$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.BlackMaskRightBorder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BlackMaskBottomBorder$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BlackMaskBottomBorder"));
    public static VarHandle BlackMaskBottomBorder$VH() {
        return libraw_canon_makernotes_t.BlackMaskBottomBorder$VH;
    }
    public static short BlackMaskBottomBorder$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.BlackMaskBottomBorder$VH.get(seg);
    }
    public static void BlackMaskBottomBorder$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.BlackMaskBottomBorder$VH.set(seg, x);
    }
    public static short BlackMaskBottomBorder$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.BlackMaskBottomBorder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BlackMaskBottomBorder$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.BlackMaskBottomBorder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AFMicroAdjMode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AFMicroAdjMode"));
    public static VarHandle AFMicroAdjMode$VH() {
        return libraw_canon_makernotes_t.AFMicroAdjMode$VH;
    }
    public static int AFMicroAdjMode$get(MemorySegment seg) {
        return (int)libraw_canon_makernotes_t.AFMicroAdjMode$VH.get(seg);
    }
    public static void AFMicroAdjMode$set( MemorySegment seg, int x) {
        libraw_canon_makernotes_t.AFMicroAdjMode$VH.set(seg, x);
    }
    public static int AFMicroAdjMode$get(MemorySegment seg, long index) {
        return (int)libraw_canon_makernotes_t.AFMicroAdjMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AFMicroAdjMode$set(MemorySegment seg, long index, int x) {
        libraw_canon_makernotes_t.AFMicroAdjMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AFMicroAdjValue$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AFMicroAdjValue"));
    public static VarHandle AFMicroAdjValue$VH() {
        return libraw_canon_makernotes_t.AFMicroAdjValue$VH;
    }
    public static float AFMicroAdjValue$get(MemorySegment seg) {
        return (float)libraw_canon_makernotes_t.AFMicroAdjValue$VH.get(seg);
    }
    public static void AFMicroAdjValue$set( MemorySegment seg, float x) {
        libraw_canon_makernotes_t.AFMicroAdjValue$VH.set(seg, x);
    }
    public static float AFMicroAdjValue$get(MemorySegment seg, long index) {
        return (float)libraw_canon_makernotes_t.AFMicroAdjValue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AFMicroAdjValue$set(MemorySegment seg, long index, float x) {
        libraw_canon_makernotes_t.AFMicroAdjValue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MakernotesFlip$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MakernotesFlip"));
    public static VarHandle MakernotesFlip$VH() {
        return libraw_canon_makernotes_t.MakernotesFlip$VH;
    }
    public static short MakernotesFlip$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.MakernotesFlip$VH.get(seg);
    }
    public static void MakernotesFlip$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.MakernotesFlip$VH.set(seg, x);
    }
    public static short MakernotesFlip$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.MakernotesFlip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MakernotesFlip$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.MakernotesFlip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RecordMode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RecordMode"));
    public static VarHandle RecordMode$VH() {
        return libraw_canon_makernotes_t.RecordMode$VH;
    }
    public static short RecordMode$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.RecordMode$VH.get(seg);
    }
    public static void RecordMode$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.RecordMode$VH.set(seg, x);
    }
    public static short RecordMode$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.RecordMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RecordMode$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.RecordMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SRAWQuality$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SRAWQuality"));
    public static VarHandle SRAWQuality$VH() {
        return libraw_canon_makernotes_t.SRAWQuality$VH;
    }
    public static short SRAWQuality$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.SRAWQuality$VH.get(seg);
    }
    public static void SRAWQuality$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.SRAWQuality$VH.set(seg, x);
    }
    public static short SRAWQuality$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.SRAWQuality$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SRAWQuality$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.SRAWQuality$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wbi$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wbi"));
    public static VarHandle wbi$VH() {
        return libraw_canon_makernotes_t.wbi$VH;
    }
    public static int wbi$get(MemorySegment seg) {
        return (int)libraw_canon_makernotes_t.wbi$VH.get(seg);
    }
    public static void wbi$set( MemorySegment seg, int x) {
        libraw_canon_makernotes_t.wbi$VH.set(seg, x);
    }
    public static int wbi$get(MemorySegment seg, long index) {
        return (int)libraw_canon_makernotes_t.wbi$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wbi$set(MemorySegment seg, long index, int x) {
        libraw_canon_makernotes_t.wbi$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle firmware$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("firmware"));
    public static VarHandle firmware$VH() {
        return libraw_canon_makernotes_t.firmware$VH;
    }
    public static float firmware$get(MemorySegment seg) {
        return (float)libraw_canon_makernotes_t.firmware$VH.get(seg);
    }
    public static void firmware$set( MemorySegment seg, float x) {
        libraw_canon_makernotes_t.firmware$VH.set(seg, x);
    }
    public static float firmware$get(MemorySegment seg, long index) {
        return (float)libraw_canon_makernotes_t.firmware$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void firmware$set(MemorySegment seg, long index, float x) {
        libraw_canon_makernotes_t.firmware$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RF_lensID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RF_lensID"));
    public static VarHandle RF_lensID$VH() {
        return libraw_canon_makernotes_t.RF_lensID$VH;
    }
    public static short RF_lensID$get(MemorySegment seg) {
        return (short)libraw_canon_makernotes_t.RF_lensID$VH.get(seg);
    }
    public static void RF_lensID$set( MemorySegment seg, short x) {
        libraw_canon_makernotes_t.RF_lensID$VH.set(seg, x);
    }
    public static short RF_lensID$get(MemorySegment seg, long index) {
        return (short)libraw_canon_makernotes_t.RF_lensID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RF_lensID$set(MemorySegment seg, long index, short x) {
        libraw_canon_makernotes_t.RF_lensID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


