// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tiff_hdr {
 *     unsigned short t_order;
 *     unsigned short magic;
 *     int ifd;
 *     unsigned short pad;
 *     unsigned short ntag;
 *     struct libraw_tiff_tag tag[23];
 *     int nextifd;
 *     unsigned short pad2;
 *     unsigned short nexif;
 *     struct libraw_tiff_tag exif[4];
 *     unsigned short pad3;
 *     unsigned short ngps;
 *     struct libraw_tiff_tag gpst[10];
 *     short bps[4];
 *     int rat[10];
 *     unsigned int gps[26];
 *     char t_desc[512];
 *     char t_make[64];
 *     char t_model[64];
 *     char soft[32];
 *     char date[20];
 *     char t_artist[64];
 * };
 * }
 */
public class tiff_hdr {

    public static MemoryLayout $LAYOUT() {
        return constants$114.const$0;
    }
    public static VarHandle t_order$VH() {
        return constants$114.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short t_order;
     * }
     */
    public static short t_order$get(MemorySegment seg) {
        return (short)constants$114.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short t_order;
     * }
     */
    public static void t_order$set(MemorySegment seg, short x) {
        constants$114.const$1.set(seg, x);
    }
    public static short t_order$get(MemorySegment seg, long index) {
        return (short)constants$114.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void t_order$set(MemorySegment seg, long index, short x) {
        constants$114.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle magic$VH() {
        return constants$114.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short magic;
     * }
     */
    public static short magic$get(MemorySegment seg) {
        return (short)constants$114.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short magic;
     * }
     */
    public static void magic$set(MemorySegment seg, short x) {
        constants$114.const$2.set(seg, x);
    }
    public static short magic$get(MemorySegment seg, long index) {
        return (short)constants$114.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void magic$set(MemorySegment seg, long index, short x) {
        constants$114.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ifd$VH() {
        return constants$114.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int ifd;
     * }
     */
    public static int ifd$get(MemorySegment seg) {
        return (int)constants$114.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int ifd;
     * }
     */
    public static void ifd$set(MemorySegment seg, int x) {
        constants$114.const$3.set(seg, x);
    }
    public static int ifd$get(MemorySegment seg, long index) {
        return (int)constants$114.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ifd$set(MemorySegment seg, long index, int x) {
        constants$114.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pad$VH() {
        return constants$114.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short pad;
     * }
     */
    public static short pad$get(MemorySegment seg) {
        return (short)constants$114.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short pad;
     * }
     */
    public static void pad$set(MemorySegment seg, short x) {
        constants$114.const$4.set(seg, x);
    }
    public static short pad$get(MemorySegment seg, long index) {
        return (short)constants$114.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pad$set(MemorySegment seg, long index, short x) {
        constants$114.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ntag$VH() {
        return constants$114.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ntag;
     * }
     */
    public static short ntag$get(MemorySegment seg) {
        return (short)constants$114.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ntag;
     * }
     */
    public static void ntag$set(MemorySegment seg, short x) {
        constants$114.const$5.set(seg, x);
    }
    public static short ntag$get(MemorySegment seg, long index) {
        return (short)constants$114.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ntag$set(MemorySegment seg, long index, short x) {
        constants$114.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment tag$slice(MemorySegment seg) {
        return seg.asSlice(12, 276);
    }
    public static VarHandle nextifd$VH() {
        return constants$115.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int nextifd;
     * }
     */
    public static int nextifd$get(MemorySegment seg) {
        return (int)constants$115.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int nextifd;
     * }
     */
    public static void nextifd$set(MemorySegment seg, int x) {
        constants$115.const$0.set(seg, x);
    }
    public static int nextifd$get(MemorySegment seg, long index) {
        return (int)constants$115.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void nextifd$set(MemorySegment seg, long index, int x) {
        constants$115.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pad2$VH() {
        return constants$115.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short pad2;
     * }
     */
    public static short pad2$get(MemorySegment seg) {
        return (short)constants$115.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short pad2;
     * }
     */
    public static void pad2$set(MemorySegment seg, short x) {
        constants$115.const$1.set(seg, x);
    }
    public static short pad2$get(MemorySegment seg, long index) {
        return (short)constants$115.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pad2$set(MemorySegment seg, long index, short x) {
        constants$115.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nexif$VH() {
        return constants$115.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short nexif;
     * }
     */
    public static short nexif$get(MemorySegment seg) {
        return (short)constants$115.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short nexif;
     * }
     */
    public static void nexif$set(MemorySegment seg, short x) {
        constants$115.const$2.set(seg, x);
    }
    public static short nexif$get(MemorySegment seg, long index) {
        return (short)constants$115.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void nexif$set(MemorySegment seg, long index, short x) {
        constants$115.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment exif$slice(MemorySegment seg) {
        return seg.asSlice(296, 48);
    }
    public static VarHandle pad3$VH() {
        return constants$115.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short pad3;
     * }
     */
    public static short pad3$get(MemorySegment seg) {
        return (short)constants$115.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short pad3;
     * }
     */
    public static void pad3$set(MemorySegment seg, short x) {
        constants$115.const$3.set(seg, x);
    }
    public static short pad3$get(MemorySegment seg, long index) {
        return (short)constants$115.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pad3$set(MemorySegment seg, long index, short x) {
        constants$115.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ngps$VH() {
        return constants$115.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ngps;
     * }
     */
    public static short ngps$get(MemorySegment seg) {
        return (short)constants$115.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ngps;
     * }
     */
    public static void ngps$set(MemorySegment seg, short x) {
        constants$115.const$4.set(seg, x);
    }
    public static short ngps$get(MemorySegment seg, long index) {
        return (short)constants$115.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ngps$set(MemorySegment seg, long index, short x) {
        constants$115.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment gpst$slice(MemorySegment seg) {
        return seg.asSlice(348, 120);
    }
    public static MemorySegment bps$slice(MemorySegment seg) {
        return seg.asSlice(468, 8);
    }
    public static MemorySegment rat$slice(MemorySegment seg) {
        return seg.asSlice(476, 40);
    }
    public static MemorySegment gps$slice(MemorySegment seg) {
        return seg.asSlice(516, 104);
    }
    public static MemorySegment t_desc$slice(MemorySegment seg) {
        return seg.asSlice(620, 512);
    }
    public static MemorySegment t_make$slice(MemorySegment seg) {
        return seg.asSlice(1132, 64);
    }
    public static MemorySegment t_model$slice(MemorySegment seg) {
        return seg.asSlice(1196, 64);
    }
    public static MemorySegment soft$slice(MemorySegment seg) {
        return seg.asSlice(1260, 32);
    }
    public static MemorySegment date$slice(MemorySegment seg) {
        return seg.asSlice(1292, 20);
    }
    public static MemorySegment t_artist$slice(MemorySegment seg) {
        return seg.asSlice(1312, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


