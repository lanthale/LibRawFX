// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_callbacks_t {
 *     void (*mem_cb)(void*,char*,char*);
 *     void* memcb_data;
 *     void (*data_cb)(void*,char*,int);
 *     void* datacb_data;
 *     int (*progress_cb)(void*,enum LibRaw_progress,int,int);
 *     void* progresscb_data;
 *     void (*exif_cb)(void*,int,int,int,unsigned int,void*,long long);
 *     void* exifparser_data;
 *     int (*pre_identify_cb)(void*);
 *     void (*post_identify_cb)(void*);
 *     void (*pre_subtractblack_cb)(void*);
 *     void (*pre_scalecolors_cb)(void*);
 *     void (*pre_preinterpolate_cb)(void*);
 *     void (*pre_interpolate_cb)(void*);
 *     void (*interpolate_bayer_cb)(void*);
 *     void (*interpolate_xtrans_cb)(void*);
 *     void (*post_interpolate_cb)(void*);
 *     void (*pre_converttorgb_cb)(void*);
 *     void (*post_converttorgb_cb)(void*);
 * };
 * }
 */
public class libraw_callbacks_t {

    public static MemoryLayout $LAYOUT() {
        return constants$5.const$0;
    }
    /**
     * {@snippet :
 * void (*mem_cb)(void*,char*,char*);
     * }
     */
    public interface mem_cb {

        void apply(java.lang.foreign.MemorySegment data, java.lang.foreign.MemorySegment file, java.lang.foreign.MemorySegment where);
        static MemorySegment allocate(mem_cb fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$5.const$1, fi, constants$1.const$3, scope);
        }
        static mem_cb ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _data, java.lang.foreign.MemorySegment _file, java.lang.foreign.MemorySegment _where) -> {
                try {
                    constants$1.const$5.invokeExact(symbol, _data, _file, _where);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle mem_cb$VH() {
        return constants$5.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*mem_cb)(void*,char*,char*);
     * }
     */
    public static MemorySegment mem_cb$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$5.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*mem_cb)(void*,char*,char*);
     * }
     */
    public static void mem_cb$set(MemorySegment seg, MemorySegment x) {
        constants$5.const$2.set(seg, x);
    }
    public static MemorySegment mem_cb$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$5.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void mem_cb$set(MemorySegment seg, long index, MemorySegment x) {
        constants$5.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static mem_cb mem_cb(MemorySegment segment, Arena scope) {
        return mem_cb.ofAddress(mem_cb$get(segment), scope);
    }
    public static VarHandle memcb_data$VH() {
        return constants$5.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* memcb_data;
     * }
     */
    public static MemorySegment memcb_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$5.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* memcb_data;
     * }
     */
    public static void memcb_data$set(MemorySegment seg, MemorySegment x) {
        constants$5.const$3.set(seg, x);
    }
    public static MemorySegment memcb_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$5.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void memcb_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$5.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * void (*data_cb)(void*,char*,int);
     * }
     */
    public interface data_cb {

        void apply(java.lang.foreign.MemorySegment data, java.lang.foreign.MemorySegment file, int offset);
        static MemorySegment allocate(data_cb fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$5.const$4, fi, constants$2.const$4, scope);
        }
        static data_cb ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _data, java.lang.foreign.MemorySegment _file, int _offset) -> {
                try {
                    constants$3.const$0.invokeExact(symbol, _data, _file, _offset);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle data_cb$VH() {
        return constants$5.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*data_cb)(void*,char*,int);
     * }
     */
    public static MemorySegment data_cb$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$5.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*data_cb)(void*,char*,int);
     * }
     */
    public static void data_cb$set(MemorySegment seg, MemorySegment x) {
        constants$5.const$5.set(seg, x);
    }
    public static MemorySegment data_cb$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$5.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void data_cb$set(MemorySegment seg, long index, MemorySegment x) {
        constants$5.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static data_cb data_cb(MemorySegment segment, Arena scope) {
        return data_cb.ofAddress(data_cb$get(segment), scope);
    }
    public static VarHandle datacb_data$VH() {
        return constants$6.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* datacb_data;
     * }
     */
    public static MemorySegment datacb_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$6.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* datacb_data;
     * }
     */
    public static void datacb_data$set(MemorySegment seg, MemorySegment x) {
        constants$6.const$0.set(seg, x);
    }
    public static MemorySegment datacb_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$6.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void datacb_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$6.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * int (*progress_cb)(void*,enum LibRaw_progress,int,int);
     * }
     */
    public interface progress_cb {

        int apply(java.lang.foreign.MemorySegment data, int stage, int iteration, int expected);
        static MemorySegment allocate(progress_cb fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$6.const$1, fi, constants$3.const$2, scope);
        }
        static progress_cb ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _data, int _stage, int _iteration, int _expected) -> {
                try {
                    return (int)constants$3.const$4.invokeExact(symbol, _data, _stage, _iteration, _expected);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle progress_cb$VH() {
        return constants$6.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*progress_cb)(void*,enum LibRaw_progress,int,int);
     * }
     */
    public static MemorySegment progress_cb$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$6.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*progress_cb)(void*,enum LibRaw_progress,int,int);
     * }
     */
    public static void progress_cb$set(MemorySegment seg, MemorySegment x) {
        constants$6.const$2.set(seg, x);
    }
    public static MemorySegment progress_cb$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$6.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void progress_cb$set(MemorySegment seg, long index, MemorySegment x) {
        constants$6.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static progress_cb progress_cb(MemorySegment segment, Arena scope) {
        return progress_cb.ofAddress(progress_cb$get(segment), scope);
    }
    public static VarHandle progresscb_data$VH() {
        return constants$6.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* progresscb_data;
     * }
     */
    public static MemorySegment progresscb_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$6.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* progresscb_data;
     * }
     */
    public static void progresscb_data$set(MemorySegment seg, MemorySegment x) {
        constants$6.const$3.set(seg, x);
    }
    public static MemorySegment progresscb_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$6.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void progresscb_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$6.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * void (*exif_cb)(void*,int,int,int,unsigned int,void*,long long);
     * }
     */
    public interface exif_cb {

        void apply(java.lang.foreign.MemorySegment context, int tag, int type, int len, int ord, java.lang.foreign.MemorySegment ifp, long base);
        static MemorySegment allocate(exif_cb fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$6.const$4, fi, constants$2.const$0, scope);
        }
        static exif_cb ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _context, int _tag, int _type, int _len, int _ord, java.lang.foreign.MemorySegment _ifp, long _base) -> {
                try {
                    constants$2.const$2.invokeExact(symbol, _context, _tag, _type, _len, _ord, _ifp, _base);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle exif_cb$VH() {
        return constants$6.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*exif_cb)(void*,int,int,int,unsigned int,void*,long long);
     * }
     */
    public static MemorySegment exif_cb$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$6.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*exif_cb)(void*,int,int,int,unsigned int,void*,long long);
     * }
     */
    public static void exif_cb$set(MemorySegment seg, MemorySegment x) {
        constants$6.const$5.set(seg, x);
    }
    public static MemorySegment exif_cb$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$6.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void exif_cb$set(MemorySegment seg, long index, MemorySegment x) {
        constants$6.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static exif_cb exif_cb(MemorySegment segment, Arena scope) {
        return exif_cb.ofAddress(exif_cb$get(segment), scope);
    }
    public static VarHandle exifparser_data$VH() {
        return constants$7.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* exifparser_data;
     * }
     */
    public static MemorySegment exifparser_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$7.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* exifparser_data;
     * }
     */
    public static void exifparser_data$set(MemorySegment seg, MemorySegment x) {
        constants$7.const$0.set(seg, x);
    }
    public static MemorySegment exifparser_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$7.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void exifparser_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$7.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * int (*pre_identify_cb)(void*);
     * }
     */
    public interface pre_identify_cb {

        int apply(java.lang.foreign.MemorySegment ctx);
        static MemorySegment allocate(pre_identify_cb fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$7.const$1, fi, constants$3.const$5, scope);
        }
        static pre_identify_cb ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _ctx) -> {
                try {
                    return (int)constants$4.const$1.invokeExact(symbol, _ctx);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle pre_identify_cb$VH() {
        return constants$7.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*pre_identify_cb)(void*);
     * }
     */
    public static MemorySegment pre_identify_cb$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$7.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*pre_identify_cb)(void*);
     * }
     */
    public static void pre_identify_cb$set(MemorySegment seg, MemorySegment x) {
        constants$7.const$2.set(seg, x);
    }
    public static MemorySegment pre_identify_cb$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$7.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pre_identify_cb$set(MemorySegment seg, long index, MemorySegment x) {
        constants$7.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static pre_identify_cb pre_identify_cb(MemorySegment segment, Arena scope) {
        return pre_identify_cb.ofAddress(pre_identify_cb$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*post_identify_cb)(void*);
     * }
     */
    public interface post_identify_cb {

        void apply(java.lang.foreign.MemorySegment ctx);
        static MemorySegment allocate(post_identify_cb fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$7.const$3, fi, constants$4.const$2, scope);
        }
        static post_identify_cb ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _ctx) -> {
                try {
                    constants$4.const$4.invokeExact(symbol, _ctx);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle post_identify_cb$VH() {
        return constants$7.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*post_identify_cb)(void*);
     * }
     */
    public static MemorySegment post_identify_cb$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$7.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*post_identify_cb)(void*);
     * }
     */
    public static void post_identify_cb$set(MemorySegment seg, MemorySegment x) {
        constants$7.const$4.set(seg, x);
    }
    public static MemorySegment post_identify_cb$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$7.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void post_identify_cb$set(MemorySegment seg, long index, MemorySegment x) {
        constants$7.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static post_identify_cb post_identify_cb(MemorySegment segment, Arena scope) {
        return post_identify_cb.ofAddress(post_identify_cb$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*pre_subtractblack_cb)(void*);
     * }
     */
    public interface pre_subtractblack_cb {

        void apply(java.lang.foreign.MemorySegment ctx);
        static MemorySegment allocate(pre_subtractblack_cb fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$7.const$5, fi, constants$4.const$2, scope);
        }
        static pre_subtractblack_cb ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _ctx) -> {
                try {
                    constants$4.const$4.invokeExact(symbol, _ctx);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle pre_subtractblack_cb$VH() {
        return constants$8.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*pre_subtractblack_cb)(void*);
     * }
     */
    public static MemorySegment pre_subtractblack_cb$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$8.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*pre_subtractblack_cb)(void*);
     * }
     */
    public static void pre_subtractblack_cb$set(MemorySegment seg, MemorySegment x) {
        constants$8.const$0.set(seg, x);
    }
    public static MemorySegment pre_subtractblack_cb$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$8.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pre_subtractblack_cb$set(MemorySegment seg, long index, MemorySegment x) {
        constants$8.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static pre_subtractblack_cb pre_subtractblack_cb(MemorySegment segment, Arena scope) {
        return pre_subtractblack_cb.ofAddress(pre_subtractblack_cb$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*pre_scalecolors_cb)(void*);
     * }
     */
    public interface pre_scalecolors_cb {

        void apply(java.lang.foreign.MemorySegment ctx);
        static MemorySegment allocate(pre_scalecolors_cb fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$8.const$1, fi, constants$4.const$2, scope);
        }
        static pre_scalecolors_cb ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _ctx) -> {
                try {
                    constants$4.const$4.invokeExact(symbol, _ctx);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle pre_scalecolors_cb$VH() {
        return constants$8.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*pre_scalecolors_cb)(void*);
     * }
     */
    public static MemorySegment pre_scalecolors_cb$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$8.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*pre_scalecolors_cb)(void*);
     * }
     */
    public static void pre_scalecolors_cb$set(MemorySegment seg, MemorySegment x) {
        constants$8.const$2.set(seg, x);
    }
    public static MemorySegment pre_scalecolors_cb$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$8.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pre_scalecolors_cb$set(MemorySegment seg, long index, MemorySegment x) {
        constants$8.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static pre_scalecolors_cb pre_scalecolors_cb(MemorySegment segment, Arena scope) {
        return pre_scalecolors_cb.ofAddress(pre_scalecolors_cb$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*pre_preinterpolate_cb)(void*);
     * }
     */
    public interface pre_preinterpolate_cb {

        void apply(java.lang.foreign.MemorySegment ctx);
        static MemorySegment allocate(pre_preinterpolate_cb fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$8.const$3, fi, constants$4.const$2, scope);
        }
        static pre_preinterpolate_cb ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _ctx) -> {
                try {
                    constants$4.const$4.invokeExact(symbol, _ctx);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle pre_preinterpolate_cb$VH() {
        return constants$8.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*pre_preinterpolate_cb)(void*);
     * }
     */
    public static MemorySegment pre_preinterpolate_cb$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$8.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*pre_preinterpolate_cb)(void*);
     * }
     */
    public static void pre_preinterpolate_cb$set(MemorySegment seg, MemorySegment x) {
        constants$8.const$4.set(seg, x);
    }
    public static MemorySegment pre_preinterpolate_cb$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$8.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pre_preinterpolate_cb$set(MemorySegment seg, long index, MemorySegment x) {
        constants$8.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static pre_preinterpolate_cb pre_preinterpolate_cb(MemorySegment segment, Arena scope) {
        return pre_preinterpolate_cb.ofAddress(pre_preinterpolate_cb$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*pre_interpolate_cb)(void*);
     * }
     */
    public interface pre_interpolate_cb {

        void apply(java.lang.foreign.MemorySegment ctx);
        static MemorySegment allocate(pre_interpolate_cb fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$8.const$5, fi, constants$4.const$2, scope);
        }
        static pre_interpolate_cb ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _ctx) -> {
                try {
                    constants$4.const$4.invokeExact(symbol, _ctx);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle pre_interpolate_cb$VH() {
        return constants$9.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*pre_interpolate_cb)(void*);
     * }
     */
    public static MemorySegment pre_interpolate_cb$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$9.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*pre_interpolate_cb)(void*);
     * }
     */
    public static void pre_interpolate_cb$set(MemorySegment seg, MemorySegment x) {
        constants$9.const$0.set(seg, x);
    }
    public static MemorySegment pre_interpolate_cb$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$9.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pre_interpolate_cb$set(MemorySegment seg, long index, MemorySegment x) {
        constants$9.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static pre_interpolate_cb pre_interpolate_cb(MemorySegment segment, Arena scope) {
        return pre_interpolate_cb.ofAddress(pre_interpolate_cb$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*interpolate_bayer_cb)(void*);
     * }
     */
    public interface interpolate_bayer_cb {

        void apply(java.lang.foreign.MemorySegment ctx);
        static MemorySegment allocate(interpolate_bayer_cb fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$9.const$1, fi, constants$4.const$2, scope);
        }
        static interpolate_bayer_cb ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _ctx) -> {
                try {
                    constants$4.const$4.invokeExact(symbol, _ctx);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle interpolate_bayer_cb$VH() {
        return constants$9.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*interpolate_bayer_cb)(void*);
     * }
     */
    public static MemorySegment interpolate_bayer_cb$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$9.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*interpolate_bayer_cb)(void*);
     * }
     */
    public static void interpolate_bayer_cb$set(MemorySegment seg, MemorySegment x) {
        constants$9.const$2.set(seg, x);
    }
    public static MemorySegment interpolate_bayer_cb$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$9.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void interpolate_bayer_cb$set(MemorySegment seg, long index, MemorySegment x) {
        constants$9.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static interpolate_bayer_cb interpolate_bayer_cb(MemorySegment segment, Arena scope) {
        return interpolate_bayer_cb.ofAddress(interpolate_bayer_cb$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*interpolate_xtrans_cb)(void*);
     * }
     */
    public interface interpolate_xtrans_cb {

        void apply(java.lang.foreign.MemorySegment ctx);
        static MemorySegment allocate(interpolate_xtrans_cb fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$9.const$3, fi, constants$4.const$2, scope);
        }
        static interpolate_xtrans_cb ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _ctx) -> {
                try {
                    constants$4.const$4.invokeExact(symbol, _ctx);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle interpolate_xtrans_cb$VH() {
        return constants$9.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*interpolate_xtrans_cb)(void*);
     * }
     */
    public static MemorySegment interpolate_xtrans_cb$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$9.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*interpolate_xtrans_cb)(void*);
     * }
     */
    public static void interpolate_xtrans_cb$set(MemorySegment seg, MemorySegment x) {
        constants$9.const$4.set(seg, x);
    }
    public static MemorySegment interpolate_xtrans_cb$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$9.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void interpolate_xtrans_cb$set(MemorySegment seg, long index, MemorySegment x) {
        constants$9.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static interpolate_xtrans_cb interpolate_xtrans_cb(MemorySegment segment, Arena scope) {
        return interpolate_xtrans_cb.ofAddress(interpolate_xtrans_cb$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*post_interpolate_cb)(void*);
     * }
     */
    public interface post_interpolate_cb {

        void apply(java.lang.foreign.MemorySegment ctx);
        static MemorySegment allocate(post_interpolate_cb fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$9.const$5, fi, constants$4.const$2, scope);
        }
        static post_interpolate_cb ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _ctx) -> {
                try {
                    constants$4.const$4.invokeExact(symbol, _ctx);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle post_interpolate_cb$VH() {
        return constants$10.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*post_interpolate_cb)(void*);
     * }
     */
    public static MemorySegment post_interpolate_cb$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$10.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*post_interpolate_cb)(void*);
     * }
     */
    public static void post_interpolate_cb$set(MemorySegment seg, MemorySegment x) {
        constants$10.const$0.set(seg, x);
    }
    public static MemorySegment post_interpolate_cb$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$10.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void post_interpolate_cb$set(MemorySegment seg, long index, MemorySegment x) {
        constants$10.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static post_interpolate_cb post_interpolate_cb(MemorySegment segment, Arena scope) {
        return post_interpolate_cb.ofAddress(post_interpolate_cb$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*pre_converttorgb_cb)(void*);
     * }
     */
    public interface pre_converttorgb_cb {

        void apply(java.lang.foreign.MemorySegment ctx);
        static MemorySegment allocate(pre_converttorgb_cb fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$10.const$1, fi, constants$4.const$2, scope);
        }
        static pre_converttorgb_cb ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _ctx) -> {
                try {
                    constants$4.const$4.invokeExact(symbol, _ctx);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle pre_converttorgb_cb$VH() {
        return constants$10.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*pre_converttorgb_cb)(void*);
     * }
     */
    public static MemorySegment pre_converttorgb_cb$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$10.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*pre_converttorgb_cb)(void*);
     * }
     */
    public static void pre_converttorgb_cb$set(MemorySegment seg, MemorySegment x) {
        constants$10.const$2.set(seg, x);
    }
    public static MemorySegment pre_converttorgb_cb$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$10.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pre_converttorgb_cb$set(MemorySegment seg, long index, MemorySegment x) {
        constants$10.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static pre_converttorgb_cb pre_converttorgb_cb(MemorySegment segment, Arena scope) {
        return pre_converttorgb_cb.ofAddress(pre_converttorgb_cb$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*post_converttorgb_cb)(void*);
     * }
     */
    public interface post_converttorgb_cb {

        void apply(java.lang.foreign.MemorySegment ctx);
        static MemorySegment allocate(post_converttorgb_cb fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$10.const$3, fi, constants$4.const$2, scope);
        }
        static post_converttorgb_cb ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _ctx) -> {
                try {
                    constants$4.const$4.invokeExact(symbol, _ctx);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle post_converttorgb_cb$VH() {
        return constants$10.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*post_converttorgb_cb)(void*);
     * }
     */
    public static MemorySegment post_converttorgb_cb$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$10.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*post_converttorgb_cb)(void*);
     * }
     */
    public static void post_converttorgb_cb$set(MemorySegment seg, MemorySegment x) {
        constants$10.const$4.set(seg, x);
    }
    public static MemorySegment post_converttorgb_cb$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$10.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void post_converttorgb_cb$set(MemorySegment seg, long index, MemorySegment x) {
        constants$10.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static post_converttorgb_cb post_converttorgb_cb(MemorySegment segment, Arena scope) {
        return post_converttorgb_cb.ofAddress(post_converttorgb_cb$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


