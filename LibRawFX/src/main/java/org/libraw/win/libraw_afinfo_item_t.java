// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_afinfo_item_t {
 *     unsigned int AFInfoData_tag;
 *     short AFInfoData_order;
 *     unsigned int AFInfoData_version;
 *     unsigned int AFInfoData_length;
 *     unsigned char* AFInfoData;
 * };
 * }
 */
public class libraw_afinfo_item_t {

    public static MemoryLayout $LAYOUT() {
        return constants$64.const$4;
    }
    public static VarHandle AFInfoData_tag$VH() {
        return constants$64.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int AFInfoData_tag;
     * }
     */
    public static int AFInfoData_tag$get(MemorySegment seg) {
        return (int)constants$64.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int AFInfoData_tag;
     * }
     */
    public static void AFInfoData_tag$set(MemorySegment seg, int x) {
        constants$64.const$5.set(seg, x);
    }
    public static int AFInfoData_tag$get(MemorySegment seg, long index) {
        return (int)constants$64.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void AFInfoData_tag$set(MemorySegment seg, long index, int x) {
        constants$64.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AFInfoData_order$VH() {
        return constants$65.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short AFInfoData_order;
     * }
     */
    public static short AFInfoData_order$get(MemorySegment seg) {
        return (short)constants$65.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short AFInfoData_order;
     * }
     */
    public static void AFInfoData_order$set(MemorySegment seg, short x) {
        constants$65.const$0.set(seg, x);
    }
    public static short AFInfoData_order$get(MemorySegment seg, long index) {
        return (short)constants$65.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void AFInfoData_order$set(MemorySegment seg, long index, short x) {
        constants$65.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AFInfoData_version$VH() {
        return constants$65.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int AFInfoData_version;
     * }
     */
    public static int AFInfoData_version$get(MemorySegment seg) {
        return (int)constants$65.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int AFInfoData_version;
     * }
     */
    public static void AFInfoData_version$set(MemorySegment seg, int x) {
        constants$65.const$1.set(seg, x);
    }
    public static int AFInfoData_version$get(MemorySegment seg, long index) {
        return (int)constants$65.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void AFInfoData_version$set(MemorySegment seg, long index, int x) {
        constants$65.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AFInfoData_length$VH() {
        return constants$65.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int AFInfoData_length;
     * }
     */
    public static int AFInfoData_length$get(MemorySegment seg) {
        return (int)constants$65.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int AFInfoData_length;
     * }
     */
    public static void AFInfoData_length$set(MemorySegment seg, int x) {
        constants$65.const$2.set(seg, x);
    }
    public static int AFInfoData_length$get(MemorySegment seg, long index) {
        return (int)constants$65.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void AFInfoData_length$set(MemorySegment seg, long index, int x) {
        constants$65.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle AFInfoData$VH() {
        return constants$65.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char* AFInfoData;
     * }
     */
    public static MemorySegment AFInfoData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$65.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char* AFInfoData;
     * }
     */
    public static void AFInfoData$set(MemorySegment seg, MemorySegment x) {
        constants$65.const$3.set(seg, x);
    }
    public static MemorySegment AFInfoData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$65.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void AFInfoData$set(MemorySegment seg, long index, MemorySegment x) {
        constants$65.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


