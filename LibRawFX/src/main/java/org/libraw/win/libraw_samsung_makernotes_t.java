// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class libraw_samsung_makernotes_t {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(4, C_INT).withName("ImageSizeFull"),
        MemoryLayout.sequenceLayout(4, C_INT).withName("ImageSizeCrop"),
        MemoryLayout.sequenceLayout(2, C_INT).withName("ColorSpace"),
        MemoryLayout.sequenceLayout(11, C_INT).withName("key"),
        MemoryLayout.paddingLayout(32),
        C_DOUBLE.withName("DigitalGain"),
        C_INT.withName("DeviceType"),
        MemoryLayout.sequenceLayout(32, C_CHAR).withName("LensFirmware"),
        MemoryLayout.paddingLayout(32)
    );
    public static MemoryLayout $LAYOUT() {
        return libraw_samsung_makernotes_t.$struct$LAYOUT;
    }
    public static MemorySegment ImageSizeFull$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment ImageSizeCrop$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static MemorySegment ColorSpace$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    public static MemorySegment key$slice(MemorySegment seg) {
        return seg.asSlice(40, 44);
    }
    static final VarHandle DigitalGain$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("DigitalGain"));
    public static VarHandle DigitalGain$VH() {
        return libraw_samsung_makernotes_t.DigitalGain$VH;
    }
    public static double DigitalGain$get(MemorySegment seg) {
        return (double)libraw_samsung_makernotes_t.DigitalGain$VH.get(seg);
    }
    public static void DigitalGain$set( MemorySegment seg, double x) {
        libraw_samsung_makernotes_t.DigitalGain$VH.set(seg, x);
    }
    public static double DigitalGain$get(MemorySegment seg, long index) {
        return (double)libraw_samsung_makernotes_t.DigitalGain$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DigitalGain$set(MemorySegment seg, long index, double x) {
        libraw_samsung_makernotes_t.DigitalGain$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DeviceType$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("DeviceType"));
    public static VarHandle DeviceType$VH() {
        return libraw_samsung_makernotes_t.DeviceType$VH;
    }
    public static int DeviceType$get(MemorySegment seg) {
        return (int)libraw_samsung_makernotes_t.DeviceType$VH.get(seg);
    }
    public static void DeviceType$set( MemorySegment seg, int x) {
        libraw_samsung_makernotes_t.DeviceType$VH.set(seg, x);
    }
    public static int DeviceType$get(MemorySegment seg, long index) {
        return (int)libraw_samsung_makernotes_t.DeviceType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceType$set(MemorySegment seg, long index, int x) {
        libraw_samsung_makernotes_t.DeviceType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment LensFirmware$slice(MemorySegment seg) {
        return seg.asSlice(100, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


