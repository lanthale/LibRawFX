// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class libraw_data_t {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("image"),
        MemoryLayout.structLayout(
            C_SHORT.withName("raw_height"),
            C_SHORT.withName("raw_width"),
            C_SHORT.withName("height"),
            C_SHORT.withName("width"),
            C_SHORT.withName("top_margin"),
            C_SHORT.withName("left_margin"),
            C_SHORT.withName("iheight"),
            C_SHORT.withName("iwidth"),
            C_INT.withName("raw_pitch"),
            MemoryLayout.paddingLayout(32),
            C_DOUBLE.withName("pixel_aspect"),
            C_INT.withName("flip"),
            MemoryLayout.sequenceLayout(8, MemoryLayout.sequenceLayout(4, C_INT)).withName("mask"),
            C_SHORT.withName("raw_aspect"),
            MemoryLayout.sequenceLayout(2, MemoryLayout.structLayout(
                C_SHORT.withName("cleft"),
                C_SHORT.withName("ctop"),
                C_SHORT.withName("cwidth"),
                C_SHORT.withName("cheight")
            )).withName("raw_inset_crops"),
            MemoryLayout.paddingLayout(16)
        ).withName("sizes"),
        MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(4, C_CHAR).withName("guard"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("make"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("model"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("software"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("normalized_make"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("normalized_model"),
            C_INT.withName("maker_index"),
            C_INT.withName("raw_count"),
            C_INT.withName("dng_version"),
            C_INT.withName("is_foveon"),
            C_INT.withName("colors"),
            C_INT.withName("filters"),
            MemoryLayout.sequenceLayout(6, MemoryLayout.sequenceLayout(6, C_CHAR)).withName("xtrans"),
            MemoryLayout.sequenceLayout(6, MemoryLayout.sequenceLayout(6, C_CHAR)).withName("xtrans_abs"),
            MemoryLayout.sequenceLayout(5, C_CHAR).withName("cdesc"),
            MemoryLayout.paddingLayout(24),
            C_INT.withName("xmplen"),
            C_POINTER.withName("xmpdata")
        ).withName("idata"),
        MemoryLayout.structLayout(
            C_FLOAT.withName("MinFocal"),
            C_FLOAT.withName("MaxFocal"),
            C_FLOAT.withName("MaxAp4MinFocal"),
            C_FLOAT.withName("MaxAp4MaxFocal"),
            C_FLOAT.withName("EXIF_MaxAp"),
            MemoryLayout.sequenceLayout(128, C_CHAR).withName("LensMake"),
            MemoryLayout.sequenceLayout(128, C_CHAR).withName("Lens"),
            MemoryLayout.sequenceLayout(128, C_CHAR).withName("LensSerial"),
            MemoryLayout.sequenceLayout(128, C_CHAR).withName("InternalLensSerial"),
            C_SHORT.withName("FocalLengthIn35mmFormat"),
            MemoryLayout.paddingLayout(16),
            MemoryLayout.structLayout(
                C_FLOAT.withName("EffectiveMaxAp"),
                C_CHAR.withName("LensIDNumber"),
                C_CHAR.withName("LensFStops"),
                C_CHAR.withName("MCUVersion"),
                C_CHAR.withName("LensType")
            ).withName("nikon"),
            MemoryLayout.structLayout(
                C_FLOAT.withName("MinFocal"),
                C_FLOAT.withName("MaxFocal"),
                C_FLOAT.withName("MaxAp4MinFocal"),
                C_FLOAT.withName("MaxAp4MaxFocal")
            ).withName("dng"),
            MemoryLayout.structLayout(
                C_LONG_LONG.withName("LensID"),
                MemoryLayout.sequenceLayout(128, C_CHAR).withName("Lens"),
                C_SHORT.withName("LensFormat"),
                C_SHORT.withName("LensMount"),
                MemoryLayout.paddingLayout(32),
                C_LONG_LONG.withName("CamID"),
                C_SHORT.withName("CameraFormat"),
                C_SHORT.withName("CameraMount"),
                MemoryLayout.sequenceLayout(64, C_CHAR).withName("body"),
                C_SHORT.withName("FocalType"),
                MemoryLayout.sequenceLayout(16, C_CHAR).withName("LensFeatures_pre"),
                MemoryLayout.sequenceLayout(16, C_CHAR).withName("LensFeatures_suf"),
                MemoryLayout.paddingLayout(16),
                C_FLOAT.withName("MinFocal"),
                C_FLOAT.withName("MaxFocal"),
                C_FLOAT.withName("MaxAp4MinFocal"),
                C_FLOAT.withName("MaxAp4MaxFocal"),
                C_FLOAT.withName("MinAp4MinFocal"),
                C_FLOAT.withName("MinAp4MaxFocal"),
                C_FLOAT.withName("MaxAp"),
                C_FLOAT.withName("MinAp"),
                C_FLOAT.withName("CurFocal"),
                C_FLOAT.withName("CurAp"),
                C_FLOAT.withName("MaxAp4CurFocal"),
                C_FLOAT.withName("MinAp4CurFocal"),
                C_FLOAT.withName("MinFocusDistance"),
                C_FLOAT.withName("FocusRangeIndex"),
                C_FLOAT.withName("LensFStops"),
                MemoryLayout.paddingLayout(32),
                C_LONG_LONG.withName("TeleconverterID"),
                MemoryLayout.sequenceLayout(128, C_CHAR).withName("Teleconverter"),
                C_LONG_LONG.withName("AdapterID"),
                MemoryLayout.sequenceLayout(128, C_CHAR).withName("Adapter"),
                C_LONG_LONG.withName("AttachmentID"),
                MemoryLayout.sequenceLayout(128, C_CHAR).withName("Attachment"),
                C_SHORT.withName("FocalUnits"),
                MemoryLayout.paddingLayout(16),
                C_FLOAT.withName("FocalLengthIn35mmFormat")
            ).withName("makernotes")
        ).withName("lens"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                C_INT.withName("ColorDataVer"),
                C_INT.withName("ColorDataSubVer"),
                C_INT.withName("SpecularWhiteLevel"),
                C_INT.withName("NormalWhiteLevel"),
                MemoryLayout.sequenceLayout(4, C_INT).withName("ChannelBlackLevel"),
                C_INT.withName("AverageBlackLevel"),
                MemoryLayout.sequenceLayout(4, C_INT).withName("multishot"),
                C_SHORT.withName("MeteringMode"),
                C_SHORT.withName("SpotMeteringMode"),
                C_CHAR.withName("FlashMeteringMode"),
                MemoryLayout.paddingLayout(8),
                C_SHORT.withName("FlashExposureLock"),
                C_SHORT.withName("ExposureMode"),
                C_SHORT.withName("AESetting"),
                C_SHORT.withName("ImageStabilization"),
                C_SHORT.withName("FlashMode"),
                C_SHORT.withName("FlashActivity"),
                C_SHORT.withName("FlashBits"),
                C_SHORT.withName("ManualFlashOutput"),
                C_SHORT.withName("FlashOutput"),
                C_SHORT.withName("FlashGuideNumber"),
                C_SHORT.withName("ContinuousDrive"),
                C_SHORT.withName("SensorWidth"),
                C_SHORT.withName("SensorHeight"),
                C_INT.withName("AFMicroAdjMode"),
                C_FLOAT.withName("AFMicroAdjValue"),
                C_SHORT.withName("MakernotesFlip"),
                C_SHORT.withName("RecordMode"),
                C_SHORT.withName("SRAWQuality"),
                MemoryLayout.paddingLayout(16),
                C_INT.withName("wbi"),
                C_SHORT.withName("RF_lensID"),
                MemoryLayout.paddingLayout(16),
                C_INT.withName("AutoLightingOptimizer"),
                C_INT.withName("HighlightTonePriority"),
                MemoryLayout.structLayout(
                    C_SHORT.withName("t"),
                    C_SHORT.withName("l"),
                    C_SHORT.withName("b"),
                    C_SHORT.withName("r")
                ).withName("DefaultCropAbsolute"),
                MemoryLayout.structLayout(
                    C_SHORT.withName("t"),
                    C_SHORT.withName("l"),
                    C_SHORT.withName("b"),
                    C_SHORT.withName("r")
                ).withName("RecommendedImageArea"),
                MemoryLayout.structLayout(
                    C_SHORT.withName("t"),
                    C_SHORT.withName("l"),
                    C_SHORT.withName("b"),
                    C_SHORT.withName("r")
                ).withName("LeftOpticalBlack"),
                MemoryLayout.structLayout(
                    C_SHORT.withName("t"),
                    C_SHORT.withName("l"),
                    C_SHORT.withName("b"),
                    C_SHORT.withName("r")
                ).withName("UpperOpticalBlack"),
                MemoryLayout.structLayout(
                    C_SHORT.withName("t"),
                    C_SHORT.withName("l"),
                    C_SHORT.withName("b"),
                    C_SHORT.withName("r")
                ).withName("ActiveArea"),
                MemoryLayout.sequenceLayout(2, C_SHORT).withName("ISOgain")
            ).withName("canon"),
            MemoryLayout.structLayout(
                C_DOUBLE.withName("ExposureBracketValue"),
                C_SHORT.withName("ActiveDLighting"),
                C_SHORT.withName("ShootingMode"),
                MemoryLayout.sequenceLayout(7, C_CHAR).withName("ImageStabilization"),
                C_CHAR.withName("VibrationReduction"),
                C_CHAR.withName("VRMode"),
                MemoryLayout.sequenceLayout(13, C_CHAR).withName("FlashSetting"),
                MemoryLayout.sequenceLayout(20, C_CHAR).withName("FlashType"),
                MemoryLayout.sequenceLayout(4, C_CHAR).withName("FlashExposureCompensation"),
                MemoryLayout.sequenceLayout(4, C_CHAR).withName("ExternalFlashExposureComp"),
                MemoryLayout.sequenceLayout(4, C_CHAR).withName("FlashExposureBracketValue"),
                C_CHAR.withName("FlashMode"),
                C_CHAR.withName("FlashExposureCompensation2"),
                C_CHAR.withName("FlashExposureCompensation3"),
                C_CHAR.withName("FlashExposureCompensation4"),
                C_CHAR.withName("FlashSource"),
                MemoryLayout.sequenceLayout(2, C_CHAR).withName("FlashFirmware"),
                C_CHAR.withName("ExternalFlashFlags"),
                C_CHAR.withName("FlashControlCommanderMode"),
                C_CHAR.withName("FlashOutputAndCompensation"),
                C_CHAR.withName("FlashFocalLength"),
                C_CHAR.withName("FlashGNDistance"),
                MemoryLayout.sequenceLayout(4, C_CHAR).withName("FlashGroupControlMode"),
                MemoryLayout.sequenceLayout(4, C_CHAR).withName("FlashGroupOutputAndCompensation"),
                C_CHAR.withName("FlashColorFilter"),
                MemoryLayout.paddingLayout(8),
                C_SHORT.withName("NEFCompression"),
                MemoryLayout.paddingLayout(16),
                C_INT.withName("ExposureMode"),
                C_INT.withName("ExposureProgram"),
                C_INT.withName("nMEshots"),
                C_INT.withName("MEgainOn"),
                MemoryLayout.paddingLayout(32),
                MemoryLayout.sequenceLayout(4, C_DOUBLE).withName("ME_WB"),
                C_CHAR.withName("AFFineTune"),
                C_CHAR.withName("AFFineTuneIndex"),
                C_CHAR.withName("AFFineTuneAdj"),
                MemoryLayout.paddingLayout(8),
                C_INT.withName("LensDataVersion"),
                C_INT.withName("FlashInfoVersion"),
                C_INT.withName("ColorBalanceVersion"),
                C_CHAR.withName("key"),
                MemoryLayout.paddingLayout(8),
                MemoryLayout.sequenceLayout(4, C_SHORT).withName("NEFBitDepth"),
                C_SHORT.withName("HighSpeedCropFormat"),
                MemoryLayout.structLayout(
                    C_SHORT.withName("cleft"),
                    C_SHORT.withName("ctop"),
                    C_SHORT.withName("cwidth"),
                    C_SHORT.withName("cheight")
                ).withName("SensorHighSpeedCrop"),
                C_SHORT.withName("SensorWidth"),
                C_SHORT.withName("SensorHeight"),
                C_SHORT.withName("Active_D_Lighting"),
                MemoryLayout.paddingLayout(16),
                C_INT.withName("ShotInfoVersion"),
                C_SHORT.withName("MakernotesFlip"),
                MemoryLayout.paddingLayout(48),
                C_DOUBLE.withName("RollAngle"),
                C_DOUBLE.withName("PitchAngle"),
                C_DOUBLE.withName("YawAngle")
            ).withName("nikon"),
            MemoryLayout.structLayout(
                C_INT.withName("BaseISO"),
                MemoryLayout.paddingLayout(32),
                C_DOUBLE.withName("Gain"),
                MemoryLayout.sequenceLayout(8, C_CHAR).withName("Sensor"),
                MemoryLayout.sequenceLayout(64, C_CHAR).withName("SensorUnit"),
                MemoryLayout.sequenceLayout(64, C_CHAR).withName("HostBody"),
                C_INT.withName("SensorCode"),
                C_INT.withName("SensorSubCode"),
                C_INT.withName("CoatingCode"),
                C_INT.withName("uncropped"),
                MemoryLayout.sequenceLayout(32, C_CHAR).withName("CaptureSequenceInitiator"),
                MemoryLayout.sequenceLayout(64, C_CHAR).withName("SensorUnitConnector"),
                C_INT.withName("format"),
                MemoryLayout.sequenceLayout(2, C_INT).withName("nIFD_CM"),
                MemoryLayout.sequenceLayout(2, C_INT).withName("RecommendedCrop"),
                MemoryLayout.paddingLayout(32),
                MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(3, C_DOUBLE)).withName("mnColorMatrix")
            ).withName("hasselblad"),
            MemoryLayout.structLayout(
                C_FLOAT.withName("ExpoMidPointShift"),
                C_SHORT.withName("DynamicRange"),
                C_SHORT.withName("FilmMode"),
                C_SHORT.withName("DynamicRangeSetting"),
                C_SHORT.withName("DevelopmentDynamicRange"),
                C_SHORT.withName("AutoDynamicRange"),
                C_SHORT.withName("DRangePriority"),
                C_SHORT.withName("DRangePriorityAuto"),
                C_SHORT.withName("DRangePriorityFixed"),
                C_FLOAT.withName("BrightnessCompensation"),
                C_SHORT.withName("FocusMode"),
                C_SHORT.withName("AFMode"),
                MemoryLayout.sequenceLayout(2, C_SHORT).withName("FocusPixel"),
                C_SHORT.withName("PrioritySettings"),
                MemoryLayout.paddingLayout(16),
                C_INT.withName("FocusSettings"),
                C_INT.withName("AF_C_Settings"),
                C_SHORT.withName("FocusWarning"),
                MemoryLayout.sequenceLayout(3, C_SHORT).withName("ImageStabilization"),
                C_SHORT.withName("FlashMode"),
                C_SHORT.withName("WB_Preset"),
                C_SHORT.withName("ShutterType"),
                C_SHORT.withName("ExrMode"),
                C_SHORT.withName("Macro"),
                MemoryLayout.paddingLayout(16),
                C_INT.withName("Rating"),
                C_SHORT.withName("CropMode"),
                MemoryLayout.sequenceLayout(13, C_CHAR).withName("SerialSignature"),
                MemoryLayout.sequenceLayout(5, C_CHAR).withName("SensorID"),
                MemoryLayout.sequenceLayout(5, C_CHAR).withName("RAFVersion"),
                MemoryLayout.paddingLayout(24),
                C_INT.withName("RAFDataGeneration"),
                C_SHORT.withName("RAFDataVersion"),
                MemoryLayout.paddingLayout(16),
                C_INT.withName("isTSNERDTS"),
                C_SHORT.withName("DriveMode"),
                MemoryLayout.sequenceLayout(9, C_SHORT).withName("BlackLevel"),
                MemoryLayout.sequenceLayout(32, C_INT).withName("RAFData_ImageSizeTable"),
                C_INT.withName("AutoBracketing"),
                C_INT.withName("SequenceNumber"),
                C_INT.withName("SeriesLength"),
                MemoryLayout.sequenceLayout(2, C_FLOAT).withName("PixelShiftOffset"),
                C_INT.withName("ImageCount")
            ).withName("fuji"),
            MemoryLayout.structLayout(
                MemoryLayout.sequenceLayout(6, C_CHAR).withName("CameraType2"),
                C_SHORT.withName("ValidBits"),
                MemoryLayout.sequenceLayout(2, C_INT).withName("SensorCalibration"),
                MemoryLayout.sequenceLayout(5, C_SHORT).withName("DriveMode"),
                C_SHORT.withName("ColorSpace"),
                MemoryLayout.sequenceLayout(2, C_SHORT).withName("FocusMode"),
                C_SHORT.withName("AutoFocus"),
                C_SHORT.withName("AFPoint"),
                MemoryLayout.sequenceLayout(64, C_INT).withName("AFAreas"),
                MemoryLayout.paddingLayout(32),
                MemoryLayout.sequenceLayout(5, C_DOUBLE).withName("AFPointSelected"),
                C_SHORT.withName("AFResult"),
                C_CHAR.withName("AFFineTune"),
                MemoryLayout.paddingLayout(8),
                MemoryLayout.sequenceLayout(3, C_SHORT).withName("AFFineTuneAdj"),
                MemoryLayout.paddingLayout(16),
                MemoryLayout.sequenceLayout(3, C_INT).withName("SpecialMode"),
                C_SHORT.withName("ZoomStepCount"),
                C_SHORT.withName("FocusStepCount"),
                C_SHORT.withName("FocusStepInfinity"),
                C_SHORT.withName("FocusStepNear"),
                C_DOUBLE.withName("FocusDistance"),
                MemoryLayout.sequenceLayout(4, C_SHORT).withName("AspectFrame"),
                MemoryLayout.sequenceLayout(2, C_INT).withName("StackedImage"),
                C_CHAR.withName("isLiveND"),
                MemoryLayout.paddingLayout(24),
                C_INT.withName("LiveNDfactor"),
                C_SHORT.withName("Panorama_mode"),
                C_SHORT.withName("Panorama_frameNum"),
                MemoryLayout.paddingLayout(32)
            ).withName("olympus"),
            MemoryLayout.structLayout(
                C_SHORT.withName("CameraType"),
                C_CHAR.withName("Sony0x9400_version"),
                C_CHAR.withName("Sony0x9400_ReleaseMode2"),
                C_INT.withName("Sony0x9400_SequenceImageNumber"),
                C_CHAR.withName("Sony0x9400_SequenceLength1"),
                MemoryLayout.paddingLayout(24),
                C_INT.withName("Sony0x9400_SequenceFileNumber"),
                C_CHAR.withName("Sony0x9400_SequenceLength2"),
                C_CHAR.withName("AFAreaModeSetting"),
                C_SHORT.withName("AFAreaMode"),
                MemoryLayout.sequenceLayout(2, C_SHORT).withName("FlexibleSpotPosition"),
                C_CHAR.withName("AFPointSelected"),
                C_CHAR.withName("AFPointSelected_0x201e"),
                C_SHORT.withName("nAFPointsUsed"),
                MemoryLayout.sequenceLayout(10, C_CHAR).withName("AFPointsUsed"),
                C_CHAR.withName("AFTracking"),
                C_CHAR.withName("AFType"),
                MemoryLayout.sequenceLayout(4, C_SHORT).withName("FocusLocation"),
                C_SHORT.withName("FocusPosition"),
                C_CHAR.withName("AFMicroAdjValue"),
                C_CHAR.withName("AFMicroAdjOn"),
                C_CHAR.withName("AFMicroAdjRegisteredLenses"),
                MemoryLayout.paddingLayout(8),
                C_SHORT.withName("VariableLowPassFilter"),
                C_INT.withName("LongExposureNoiseReduction"),
                C_SHORT.withName("HighISONoiseReduction"),
                MemoryLayout.sequenceLayout(2, C_SHORT).withName("HDR"),
                C_SHORT.withName("group2010"),
                C_SHORT.withName("group9050"),
                C_SHORT.withName("real_iso_offset"),
                C_SHORT.withName("MeteringMode_offset"),
                C_SHORT.withName("ExposureProgram_offset"),
                C_SHORT.withName("ReleaseMode2_offset"),
                MemoryLayout.paddingLayout(16),
                C_INT.withName("MinoltaCamID"),
                C_FLOAT.withName("firmware"),
                C_SHORT.withName("ImageCount3_offset"),
                MemoryLayout.paddingLayout(16),
                C_INT.withName("ImageCount3"),
                C_INT.withName("ElectronicFrontCurtainShutter"),
                C_SHORT.withName("MeteringMode2"),
                MemoryLayout.sequenceLayout(20, C_CHAR).withName("SonyDateTime"),
                MemoryLayout.paddingLayout(16),
                C_INT.withName("ShotNumberSincePowerUp"),
                C_SHORT.withName("PixelShiftGroupPrefix"),
                MemoryLayout.paddingLayout(16),
                C_INT.withName("PixelShiftGroupID"),
                C_CHAR.withName("nShotsInPixelShiftGroup"),
                C_CHAR.withName("numInPixelShiftGroup"),
                C_SHORT.withName("prd_ImageHeight"),
                C_SHORT.withName("prd_ImageWidth"),
                C_SHORT.withName("prd_Total_bps"),
                C_SHORT.withName("prd_Active_bps"),
                C_SHORT.withName("prd_StorageMethod"),
                C_SHORT.withName("prd_BayerPattern"),
                C_SHORT.withName("SonyRawFileType"),
                C_SHORT.withName("RAWFileType"),
                MemoryLayout.paddingLayout(16),
                C_INT.withName("Quality"),
                C_SHORT.withName("FileFormat"),
                MemoryLayout.sequenceLayout(16, C_CHAR).withName("MetaVersion"),
                MemoryLayout.paddingLayout(16)
            ).withName("sony"),
            MemoryLayout.structLayout(
                C_SHORT.withName("BlackLevelTop"),
                C_SHORT.withName("BlackLevelBottom"),
                C_SHORT.withName("offset_left"),
                C_SHORT.withName("offset_top"),
                C_SHORT.withName("clipBlack"),
                C_SHORT.withName("clipWhite"),
                MemoryLayout.sequenceLayout(3, MemoryLayout.sequenceLayout(3, C_FLOAT)).withName("romm_camDaylight"),
                MemoryLayout.sequenceLayout(3, MemoryLayout.sequenceLayout(3, C_FLOAT)).withName("romm_camTungsten"),
                MemoryLayout.sequenceLayout(3, MemoryLayout.sequenceLayout(3, C_FLOAT)).withName("romm_camFluorescent"),
                MemoryLayout.sequenceLayout(3, MemoryLayout.sequenceLayout(3, C_FLOAT)).withName("romm_camFlash"),
                MemoryLayout.sequenceLayout(3, MemoryLayout.sequenceLayout(3, C_FLOAT)).withName("romm_camCustom"),
                MemoryLayout.sequenceLayout(3, MemoryLayout.sequenceLayout(3, C_FLOAT)).withName("romm_camAuto"),
                C_SHORT.withName("val018percent"),
                C_SHORT.withName("val100percent"),
                C_SHORT.withName("val170percent"),
                C_SHORT.withName("MakerNoteKodak8a"),
                C_FLOAT.withName("ISOCalibrationGain"),
                C_FLOAT.withName("AnalogISO")
            ).withName("kodak"),
            MemoryLayout.structLayout(
                C_SHORT.withName("Compression"),
                C_SHORT.withName("BlackLevelDim"),
                MemoryLayout.sequenceLayout(8, C_FLOAT).withName("BlackLevel"),
                C_INT.withName("Multishot"),
                C_FLOAT.withName("gamma"),
                MemoryLayout.sequenceLayout(3, C_INT).withName("HighISOMultiplier"),
                C_SHORT.withName("FocusStepNear"),
                C_SHORT.withName("FocusStepCount"),
                C_INT.withName("ZoomPosition"),
                C_INT.withName("LensManufacturer")
            ).withName("panasonic"),
            MemoryLayout.structLayout(
                MemoryLayout.sequenceLayout(4, C_CHAR).withName("DriveMode"),
                MemoryLayout.sequenceLayout(2, C_SHORT).withName("FocusMode"),
                MemoryLayout.sequenceLayout(2, C_SHORT).withName("AFPointSelected"),
                C_SHORT.withName("AFPointSelected_Area"),
                MemoryLayout.paddingLayout(16),
                C_INT.withName("AFPointsInFocus_version"),
                C_INT.withName("AFPointsInFocus"),
                C_SHORT.withName("FocusPosition"),
                C_SHORT.withName("AFAdjustment"),
                C_CHAR.withName("AFPointMode"),
                C_CHAR.withName("MultiExposure"),
                C_SHORT.withName("Quality")
            ).withName("pentax"),
            MemoryLayout.structLayout(
                MemoryLayout.sequenceLayout(64, C_CHAR).withName("Software"),
                MemoryLayout.sequenceLayout(64, C_CHAR).withName("SystemType"),
                MemoryLayout.sequenceLayout(256, C_CHAR).withName("FirmwareString"),
                MemoryLayout.sequenceLayout(64, C_CHAR).withName("SystemModel")
            ).withName("phaseone"),
            MemoryLayout.paddingLayout(32),
            MemoryLayout.structLayout(
                C_SHORT.withName("AFStatus"),
                MemoryLayout.paddingLayout(16),
                MemoryLayout.sequenceLayout(2, C_INT).withName("AFAreaXPosition"),
                MemoryLayout.sequenceLayout(2, C_INT).withName("AFAreaYPosition"),
                C_SHORT.withName("AFAreaMode"),
                MemoryLayout.paddingLayout(16),
                C_INT.withName("SensorWidth"),
                C_INT.withName("SensorHeight"),
                C_INT.withName("CroppedImageWidth"),
                C_INT.withName("CroppedImageHeight"),
                C_SHORT.withName("WideAdapter"),
                C_SHORT.withName("CropMode"),
                C_SHORT.withName("NDFilter"),
                C_SHORT.withName("AutoBracketing"),
                C_SHORT.withName("MacroMode"),
                C_SHORT.withName("FlashMode"),
                MemoryLayout.paddingLayout(32),
                C_DOUBLE.withName("FlashExposureComp"),
                C_DOUBLE.withName("ManualFlashOutput")
            ).withName("ricoh"),
            MemoryLayout.structLayout(
                MemoryLayout.sequenceLayout(4, C_INT).withName("ImageSizeFull"),
                MemoryLayout.sequenceLayout(4, C_INT).withName("ImageSizeCrop"),
                MemoryLayout.sequenceLayout(2, C_INT).withName("ColorSpace"),
                MemoryLayout.sequenceLayout(11, C_INT).withName("key"),
                MemoryLayout.paddingLayout(32),
                C_DOUBLE.withName("DigitalGain"),
                C_INT.withName("DeviceType"),
                MemoryLayout.sequenceLayout(32, C_CHAR).withName("LensFirmware"),
                MemoryLayout.paddingLayout(32)
            ).withName("samsung"),
            MemoryLayout.structLayout(
                C_FLOAT.withName("FlashEC"),
                C_FLOAT.withName("FlashGN"),
                C_FLOAT.withName("CameraTemperature"),
                C_FLOAT.withName("SensorTemperature"),
                C_FLOAT.withName("SensorTemperature2"),
                C_FLOAT.withName("LensTemperature"),
                C_FLOAT.withName("AmbientTemperature"),
                C_FLOAT.withName("BatteryTemperature"),
                C_FLOAT.withName("exifAmbientTemperature"),
                C_FLOAT.withName("exifHumidity"),
                C_FLOAT.withName("exifPressure"),
                C_FLOAT.withName("exifWaterDepth"),
                C_FLOAT.withName("exifAcceleration"),
                C_FLOAT.withName("exifCameraElevationAngle"),
                C_FLOAT.withName("real_ISO"),
                C_FLOAT.withName("exifExposureIndex"),
                C_SHORT.withName("ColorSpace"),
                MemoryLayout.sequenceLayout(128, C_CHAR).withName("firmware"),
                MemoryLayout.paddingLayout(16),
                C_FLOAT.withName("ExposureCalibrationShift"),
                MemoryLayout.sequenceLayout(4, MemoryLayout.structLayout(
                    C_INT.withName("AFInfoData_tag"),
                    C_SHORT.withName("AFInfoData_order"),
                    MemoryLayout.paddingLayout(16),
                    C_INT.withName("AFInfoData_version"),
                    C_INT.withName("AFInfoData_length"),
                    C_POINTER.withName("AFInfoData")
                )).withName("afdata"),
                C_INT.withName("afcount"),
                MemoryLayout.paddingLayout(32)
            ).withName("common")
        ).withName("makernotes"),
        MemoryLayout.structLayout(
            C_SHORT.withName("DriveMode"),
            C_SHORT.withName("FocusMode"),
            C_SHORT.withName("MeteringMode"),
            C_SHORT.withName("AFPoint"),
            C_SHORT.withName("ExposureMode"),
            C_SHORT.withName("ExposureProgram"),
            C_SHORT.withName("ImageStabilization"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("BodySerial"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("InternalBodySerial")
        ).withName("shootinginfo"),
        MemoryLayout.paddingLayout(16),
        MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(4, C_INT).withName("greybox"),
            MemoryLayout.sequenceLayout(4, C_INT).withName("cropbox"),
            MemoryLayout.sequenceLayout(4, C_DOUBLE).withName("aber"),
            MemoryLayout.sequenceLayout(6, C_DOUBLE).withName("gamm"),
            MemoryLayout.sequenceLayout(4, C_FLOAT).withName("user_mul"),
            C_FLOAT.withName("bright"),
            C_FLOAT.withName("threshold"),
            C_INT.withName("half_size"),
            C_INT.withName("four_color_rgb"),
            C_INT.withName("highlight"),
            C_INT.withName("use_auto_wb"),
            C_INT.withName("use_camera_wb"),
            C_INT.withName("use_camera_matrix"),
            C_INT.withName("output_color"),
            MemoryLayout.paddingLayout(32),
            C_POINTER.withName("output_profile"),
            C_POINTER.withName("camera_profile"),
            C_POINTER.withName("bad_pixels"),
            C_POINTER.withName("dark_frame"),
            C_INT.withName("output_bps"),
            C_INT.withName("output_tiff"),
            C_INT.withName("output_flags"),
            C_INT.withName("user_flip"),
            C_INT.withName("user_qual"),
            C_INT.withName("user_black"),
            MemoryLayout.sequenceLayout(4, C_INT).withName("user_cblack"),
            C_INT.withName("user_sat"),
            C_INT.withName("med_passes"),
            C_FLOAT.withName("auto_bright_thr"),
            C_FLOAT.withName("adjust_maximum_thr"),
            C_INT.withName("no_auto_bright"),
            C_INT.withName("use_fuji_rotate"),
            C_INT.withName("green_matching"),
            C_INT.withName("dcb_iterations"),
            C_INT.withName("dcb_enhance_fl"),
            C_INT.withName("fbdd_noiserd"),
            C_INT.withName("exp_correc"),
            C_FLOAT.withName("exp_shift"),
            C_FLOAT.withName("exp_preser"),
            C_INT.withName("no_auto_scale"),
            C_INT.withName("no_interpolation"),
            MemoryLayout.paddingLayout(32)
        ).withName("params"),
        MemoryLayout.structLayout(
            C_INT.withName("use_rawspeed"),
            C_INT.withName("use_dngsdk"),
            C_INT.withName("options"),
            C_INT.withName("shot_select"),
            C_INT.withName("specials"),
            C_INT.withName("max_raw_memory_mb"),
            C_INT.withName("sony_arw2_posterization_thr"),
            C_FLOAT.withName("coolscan_nef_gamma"),
            MemoryLayout.sequenceLayout(5, C_CHAR).withName("p4shot_order"),
            MemoryLayout.paddingLayout(24),
            C_POINTER.withName("custom_camera_strings")
        ).withName("rawparams"),
        C_INT.withName("progress_flags"),
        C_INT.withName("process_warnings"),
        MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(65536, C_SHORT).withName("curve"),
            MemoryLayout.sequenceLayout(4104, C_INT).withName("cblack"),
            C_INT.withName("black"),
            C_INT.withName("data_maximum"),
            C_INT.withName("maximum"),
            MemoryLayout.sequenceLayout(4, C_LONG).withName("linear_max"),
            C_FLOAT.withName("fmaximum"),
            C_FLOAT.withName("fnorm"),
            MemoryLayout.sequenceLayout(8, MemoryLayout.sequenceLayout(8, C_SHORT)).withName("white"),
            MemoryLayout.sequenceLayout(4, C_FLOAT).withName("cam_mul"),
            MemoryLayout.sequenceLayout(4, C_FLOAT).withName("pre_mul"),
            MemoryLayout.sequenceLayout(3, MemoryLayout.sequenceLayout(4, C_FLOAT)).withName("cmatrix"),
            MemoryLayout.sequenceLayout(3, MemoryLayout.sequenceLayout(4, C_FLOAT)).withName("ccm"),
            MemoryLayout.sequenceLayout(3, MemoryLayout.sequenceLayout(4, C_FLOAT)).withName("rgb_cam"),
            MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(3, C_FLOAT)).withName("cam_xyz"),
            MemoryLayout.structLayout(
                C_INT.withName("format"),
                C_INT.withName("key_off"),
                C_INT.withName("tag_21a"),
                C_INT.withName("t_black"),
                C_INT.withName("split_col"),
                C_INT.withName("black_col"),
                C_INT.withName("split_row"),
                C_INT.withName("black_row"),
                C_FLOAT.withName("tag_210")
            ).withName("phase_one_data"),
            C_FLOAT.withName("flash_used"),
            C_FLOAT.withName("canon_ev"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("model2"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("UniqueCameraModel"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("LocalizedCameraModel"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("ImageUniqueID"),
            MemoryLayout.sequenceLayout(17, C_CHAR).withName("RawDataUniqueID"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("OriginalRawFileName"),
            MemoryLayout.paddingLayout(56),
            C_POINTER.withName("profile"),
            C_INT.withName("profile_length"),
            MemoryLayout.sequenceLayout(8, C_INT).withName("black_stat"),
            MemoryLayout.sequenceLayout(2, MemoryLayout.structLayout(
                C_INT.withName("parsedfields"),
                C_SHORT.withName("illuminant"),
                MemoryLayout.paddingLayout(16),
                MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(4, C_FLOAT)).withName("calibration"),
                MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(3, C_FLOAT)).withName("colormatrix"),
                MemoryLayout.sequenceLayout(3, MemoryLayout.sequenceLayout(4, C_FLOAT)).withName("forwardmatrix")
            )).withName("dng_color"),
            MemoryLayout.structLayout(
                C_INT.withName("parsedfields"),
                MemoryLayout.sequenceLayout(4104, C_INT).withName("dng_cblack"),
                C_INT.withName("dng_black"),
                MemoryLayout.sequenceLayout(4104, C_FLOAT).withName("dng_fcblack"),
                C_FLOAT.withName("dng_fblack"),
                MemoryLayout.sequenceLayout(4, C_INT).withName("dng_whitelevel"),
                MemoryLayout.sequenceLayout(4, C_SHORT).withName("default_crop"),
                MemoryLayout.sequenceLayout(4, C_FLOAT).withName("user_crop"),
                C_INT.withName("preview_colorspace"),
                MemoryLayout.sequenceLayout(4, C_FLOAT).withName("analogbalance"),
                MemoryLayout.sequenceLayout(4, C_FLOAT).withName("asshotneutral"),
                C_FLOAT.withName("baseline_exposure"),
                C_FLOAT.withName("LinearResponseLimit")
            ).withName("dng_levels"),
            MemoryLayout.sequenceLayout(256, MemoryLayout.sequenceLayout(4, C_INT)).withName("WB_Coeffs"),
            MemoryLayout.sequenceLayout(64, MemoryLayout.sequenceLayout(5, C_FLOAT)).withName("WBCT_Coeffs"),
            C_INT.withName("as_shot_wb_applied"),
            MemoryLayout.sequenceLayout(2, MemoryLayout.structLayout(
                MemoryLayout.sequenceLayout(9, C_FLOAT).withName("romm_cam")
            )).withName("P1_color"),
            C_INT.withName("raw_bps"),
            C_INT.withName("ExifColorSpace")
        ).withName("color"),
        MemoryLayout.structLayout(
            C_FLOAT.withName("iso_speed"),
            C_FLOAT.withName("shutter"),
            C_FLOAT.withName("aperture"),
            C_FLOAT.withName("focal_len"),
            C_LONG_LONG.withName("timestamp"),
            C_INT.withName("shot_order"),
            MemoryLayout.sequenceLayout(32, C_INT).withName("gpsdata"),
            MemoryLayout.structLayout(
                MemoryLayout.sequenceLayout(3, C_FLOAT).withName("latitude"),
                MemoryLayout.sequenceLayout(3, C_FLOAT).withName("longitude"),
                MemoryLayout.sequenceLayout(3, C_FLOAT).withName("gpstimestamp"),
                C_FLOAT.withName("altitude"),
                C_CHAR.withName("altref"),
                C_CHAR.withName("latref"),
                C_CHAR.withName("longref"),
                C_CHAR.withName("gpsstatus"),
                C_CHAR.withName("gpsparsed"),
                MemoryLayout.paddingLayout(24)
            ).withName("parsed_gps"),
            MemoryLayout.sequenceLayout(512, C_CHAR).withName("desc"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("artist"),
            MemoryLayout.sequenceLayout(4, C_FLOAT).withName("analogbalance"),
            MemoryLayout.paddingLayout(32)
        ).withName("other"),
        MemoryLayout.structLayout(
            C_INT.withName("tformat"),
            C_SHORT.withName("twidth"),
            C_SHORT.withName("theight"),
            C_INT.withName("tlength"),
            C_INT.withName("tcolors"),
            C_POINTER.withName("thumb")
        ).withName("thumbnail"),
        MemoryLayout.structLayout(
            C_POINTER.withName("raw_alloc"),
            C_POINTER.withName("raw_image"),
            C_POINTER.withName("color4_image"),
            C_POINTER.withName("color3_image"),
            C_POINTER.withName("float_image"),
            C_POINTER.withName("float3_image"),
            C_POINTER.withName("float4_image"),
            C_POINTER.withName("ph1_cblack"),
            C_POINTER.withName("ph1_rblack"),
            MemoryLayout.structLayout(
                MemoryLayout.sequenceLayout(4, C_CHAR).withName("guard"),
                MemoryLayout.sequenceLayout(64, C_CHAR).withName("make"),
                MemoryLayout.sequenceLayout(64, C_CHAR).withName("model"),
                MemoryLayout.sequenceLayout(64, C_CHAR).withName("software"),
                MemoryLayout.sequenceLayout(64, C_CHAR).withName("normalized_make"),
                MemoryLayout.sequenceLayout(64, C_CHAR).withName("normalized_model"),
                C_INT.withName("maker_index"),
                C_INT.withName("raw_count"),
                C_INT.withName("dng_version"),
                C_INT.withName("is_foveon"),
                C_INT.withName("colors"),
                C_INT.withName("filters"),
                MemoryLayout.sequenceLayout(6, MemoryLayout.sequenceLayout(6, C_CHAR)).withName("xtrans"),
                MemoryLayout.sequenceLayout(6, MemoryLayout.sequenceLayout(6, C_CHAR)).withName("xtrans_abs"),
                MemoryLayout.sequenceLayout(5, C_CHAR).withName("cdesc"),
                MemoryLayout.paddingLayout(24),
                C_INT.withName("xmplen"),
                C_POINTER.withName("xmpdata")
            ).withName("iparams"),
            MemoryLayout.structLayout(
                C_SHORT.withName("raw_height"),
                C_SHORT.withName("raw_width"),
                C_SHORT.withName("height"),
                C_SHORT.withName("width"),
                C_SHORT.withName("top_margin"),
                C_SHORT.withName("left_margin"),
                C_SHORT.withName("iheight"),
                C_SHORT.withName("iwidth"),
                C_INT.withName("raw_pitch"),
                MemoryLayout.paddingLayout(32),
                C_DOUBLE.withName("pixel_aspect"),
                C_INT.withName("flip"),
                MemoryLayout.sequenceLayout(8, MemoryLayout.sequenceLayout(4, C_INT)).withName("mask"),
                C_SHORT.withName("raw_aspect"),
                MemoryLayout.sequenceLayout(2, MemoryLayout.structLayout(
                    C_SHORT.withName("cleft"),
                    C_SHORT.withName("ctop"),
                    C_SHORT.withName("cwidth"),
                    C_SHORT.withName("cheight")
                )).withName("raw_inset_crops"),
                MemoryLayout.paddingLayout(16)
            ).withName("sizes"),
            MemoryLayout.structLayout(
                C_INT.withName("mix_green"),
                C_INT.withName("raw_color"),
                C_INT.withName("zero_is_bad"),
                C_SHORT.withName("shrink"),
                C_SHORT.withName("fuji_width")
            ).withName("ioparams"),
            MemoryLayout.structLayout(
                MemoryLayout.sequenceLayout(65536, C_SHORT).withName("curve"),
                MemoryLayout.sequenceLayout(4104, C_INT).withName("cblack"),
                C_INT.withName("black"),
                C_INT.withName("data_maximum"),
                C_INT.withName("maximum"),
                MemoryLayout.sequenceLayout(4, C_LONG).withName("linear_max"),
                C_FLOAT.withName("fmaximum"),
                C_FLOAT.withName("fnorm"),
                MemoryLayout.sequenceLayout(8, MemoryLayout.sequenceLayout(8, C_SHORT)).withName("white"),
                MemoryLayout.sequenceLayout(4, C_FLOAT).withName("cam_mul"),
                MemoryLayout.sequenceLayout(4, C_FLOAT).withName("pre_mul"),
                MemoryLayout.sequenceLayout(3, MemoryLayout.sequenceLayout(4, C_FLOAT)).withName("cmatrix"),
                MemoryLayout.sequenceLayout(3, MemoryLayout.sequenceLayout(4, C_FLOAT)).withName("ccm"),
                MemoryLayout.sequenceLayout(3, MemoryLayout.sequenceLayout(4, C_FLOAT)).withName("rgb_cam"),
                MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(3, C_FLOAT)).withName("cam_xyz"),
                MemoryLayout.structLayout(
                    C_INT.withName("format"),
                    C_INT.withName("key_off"),
                    C_INT.withName("tag_21a"),
                    C_INT.withName("t_black"),
                    C_INT.withName("split_col"),
                    C_INT.withName("black_col"),
                    C_INT.withName("split_row"),
                    C_INT.withName("black_row"),
                    C_FLOAT.withName("tag_210")
                ).withName("phase_one_data"),
                C_FLOAT.withName("flash_used"),
                C_FLOAT.withName("canon_ev"),
                MemoryLayout.sequenceLayout(64, C_CHAR).withName("model2"),
                MemoryLayout.sequenceLayout(64, C_CHAR).withName("UniqueCameraModel"),
                MemoryLayout.sequenceLayout(64, C_CHAR).withName("LocalizedCameraModel"),
                MemoryLayout.sequenceLayout(64, C_CHAR).withName("ImageUniqueID"),
                MemoryLayout.sequenceLayout(17, C_CHAR).withName("RawDataUniqueID"),
                MemoryLayout.sequenceLayout(64, C_CHAR).withName("OriginalRawFileName"),
                MemoryLayout.paddingLayout(56),
                C_POINTER.withName("profile"),
                C_INT.withName("profile_length"),
                MemoryLayout.sequenceLayout(8, C_INT).withName("black_stat"),
                MemoryLayout.sequenceLayout(2, MemoryLayout.structLayout(
                    C_INT.withName("parsedfields"),
                    C_SHORT.withName("illuminant"),
                    MemoryLayout.paddingLayout(16),
                    MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(4, C_FLOAT)).withName("calibration"),
                    MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(3, C_FLOAT)).withName("colormatrix"),
                    MemoryLayout.sequenceLayout(3, MemoryLayout.sequenceLayout(4, C_FLOAT)).withName("forwardmatrix")
                )).withName("dng_color"),
                MemoryLayout.structLayout(
                    C_INT.withName("parsedfields"),
                    MemoryLayout.sequenceLayout(4104, C_INT).withName("dng_cblack"),
                    C_INT.withName("dng_black"),
                    MemoryLayout.sequenceLayout(4104, C_FLOAT).withName("dng_fcblack"),
                    C_FLOAT.withName("dng_fblack"),
                    MemoryLayout.sequenceLayout(4, C_INT).withName("dng_whitelevel"),
                    MemoryLayout.sequenceLayout(4, C_SHORT).withName("default_crop"),
                    MemoryLayout.sequenceLayout(4, C_FLOAT).withName("user_crop"),
                    C_INT.withName("preview_colorspace"),
                    MemoryLayout.sequenceLayout(4, C_FLOAT).withName("analogbalance"),
                    MemoryLayout.sequenceLayout(4, C_FLOAT).withName("asshotneutral"),
                    C_FLOAT.withName("baseline_exposure"),
                    C_FLOAT.withName("LinearResponseLimit")
                ).withName("dng_levels"),
                MemoryLayout.sequenceLayout(256, MemoryLayout.sequenceLayout(4, C_INT)).withName("WB_Coeffs"),
                MemoryLayout.sequenceLayout(64, MemoryLayout.sequenceLayout(5, C_FLOAT)).withName("WBCT_Coeffs"),
                C_INT.withName("as_shot_wb_applied"),
                MemoryLayout.sequenceLayout(2, MemoryLayout.structLayout(
                    MemoryLayout.sequenceLayout(9, C_FLOAT).withName("romm_cam")
                )).withName("P1_color"),
                C_INT.withName("raw_bps"),
                C_INT.withName("ExifColorSpace")
            ).withName("color")
        ).withName("rawdata"),
        C_POINTER.withName("parent_class")
    );
    public static MemoryLayout $LAYOUT() {
        return libraw_data_t.$struct$LAYOUT;
    }
    static final VarHandle image$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("image")));
    public static VarHandle image$VH() {
        return libraw_data_t.image$VH;
    }
    public static MemoryAddress image$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_data_t.image$VH.get(seg);
    }
    public static void image$set( MemorySegment seg, MemoryAddress x) {
        libraw_data_t.image$VH.set(seg, x);
    }
    public static MemoryAddress image$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_data_t.image$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void image$set(MemorySegment seg, long index, MemoryAddress x) {
        libraw_data_t.image$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment sizes$slice(MemorySegment seg) {
        return seg.asSlice(8, 184);
    }
    public static MemorySegment idata$slice(MemorySegment seg) {
        return seg.asSlice(192, 440);
    }
    public static MemorySegment lens$slice(MemorySegment seg) {
        return seg.asSlice(632, 1296);
    }
    public static MemorySegment makernotes$slice(MemorySegment seg) {
        return seg.asSlice(1928, 2944);
    }
    public static MemorySegment shootinginfo$slice(MemorySegment seg) {
        return seg.asSlice(4872, 142);
    }
    public static MemorySegment params$slice(MemorySegment seg) {
        return seg.asSlice(5016, 304);
    }
    public static MemorySegment rawparams$slice(MemorySegment seg) {
        return seg.asSlice(5320, 48);
    }
    static final VarHandle progress_flags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("progress_flags"));
    public static VarHandle progress_flags$VH() {
        return libraw_data_t.progress_flags$VH;
    }
    public static int progress_flags$get(MemorySegment seg) {
        return (int)libraw_data_t.progress_flags$VH.get(seg);
    }
    public static void progress_flags$set( MemorySegment seg, int x) {
        libraw_data_t.progress_flags$VH.set(seg, x);
    }
    public static int progress_flags$get(MemorySegment seg, long index) {
        return (int)libraw_data_t.progress_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void progress_flags$set(MemorySegment seg, long index, int x) {
        libraw_data_t.progress_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle process_warnings$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("process_warnings"));
    public static VarHandle process_warnings$VH() {
        return libraw_data_t.process_warnings$VH;
    }
    public static int process_warnings$get(MemorySegment seg) {
        return (int)libraw_data_t.process_warnings$VH.get(seg);
    }
    public static void process_warnings$set( MemorySegment seg, int x) {
        libraw_data_t.process_warnings$VH.set(seg, x);
    }
    public static int process_warnings$get(MemorySegment seg, long index) {
        return (int)libraw_data_t.process_warnings$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void process_warnings$set(MemorySegment seg, long index, int x) {
        libraw_data_t.process_warnings$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment color$slice(MemorySegment seg) {
        return seg.asSlice(5376, 187032);
    }
    public static MemorySegment other$slice(MemorySegment seg) {
        return seg.asSlice(192408, 800);
    }
    public static MemorySegment thumbnail$slice(MemorySegment seg) {
        return seg.asSlice(193208, 24);
    }
    public static MemorySegment rawdata$slice(MemorySegment seg) {
        return seg.asSlice(193232, 187744);
    }
    static final VarHandle parent_class$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("parent_class")));
    public static VarHandle parent_class$VH() {
        return libraw_data_t.parent_class$VH;
    }
    public static MemoryAddress parent_class$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_data_t.parent_class$VH.get(seg);
    }
    public static void parent_class$set( MemorySegment seg, MemoryAddress x) {
        libraw_data_t.parent_class$VH.set(seg, x);
    }
    public static MemoryAddress parent_class$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)libraw_data_t.parent_class$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void parent_class$set(MemorySegment seg, long index, MemoryAddress x) {
        libraw_data_t.parent_class$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


