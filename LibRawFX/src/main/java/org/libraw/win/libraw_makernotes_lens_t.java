// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class libraw_makernotes_lens_t {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG_LONG.withName("LensID"),
        MemoryLayout.sequenceLayout(128, C_CHAR).withName("Lens"),
        C_SHORT.withName("LensFormat"),
        C_SHORT.withName("LensMount"),
        MemoryLayout.paddingLayout(32),
        C_LONG_LONG.withName("CamID"),
        C_SHORT.withName("CameraFormat"),
        C_SHORT.withName("CameraMount"),
        MemoryLayout.sequenceLayout(64, C_CHAR).withName("body"),
        C_SHORT.withName("FocalType"),
        MemoryLayout.sequenceLayout(16, C_CHAR).withName("LensFeatures_pre"),
        MemoryLayout.sequenceLayout(16, C_CHAR).withName("LensFeatures_suf"),
        MemoryLayout.paddingLayout(16),
        C_FLOAT.withName("MinFocal"),
        C_FLOAT.withName("MaxFocal"),
        C_FLOAT.withName("MaxAp4MinFocal"),
        C_FLOAT.withName("MaxAp4MaxFocal"),
        C_FLOAT.withName("MinAp4MinFocal"),
        C_FLOAT.withName("MinAp4MaxFocal"),
        C_FLOAT.withName("MaxAp"),
        C_FLOAT.withName("MinAp"),
        C_FLOAT.withName("CurFocal"),
        C_FLOAT.withName("CurAp"),
        C_FLOAT.withName("MaxAp4CurFocal"),
        C_FLOAT.withName("MinAp4CurFocal"),
        C_FLOAT.withName("MinFocusDistance"),
        C_FLOAT.withName("FocusRangeIndex"),
        C_FLOAT.withName("LensFStops"),
        MemoryLayout.paddingLayout(32),
        C_LONG_LONG.withName("TeleconverterID"),
        MemoryLayout.sequenceLayout(128, C_CHAR).withName("Teleconverter"),
        C_LONG_LONG.withName("AdapterID"),
        MemoryLayout.sequenceLayout(128, C_CHAR).withName("Adapter"),
        C_LONG_LONG.withName("AttachmentID"),
        MemoryLayout.sequenceLayout(128, C_CHAR).withName("Attachment"),
        C_SHORT.withName("FocalUnits"),
        MemoryLayout.paddingLayout(16),
        C_FLOAT.withName("FocalLengthIn35mmFormat")
    );
    public static MemoryLayout $LAYOUT() {
        return libraw_makernotes_lens_t.$struct$LAYOUT;
    }
    static final VarHandle LensID$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("LensID"));
    public static VarHandle LensID$VH() {
        return libraw_makernotes_lens_t.LensID$VH;
    }
    public static long LensID$get(MemorySegment seg) {
        return (long)libraw_makernotes_lens_t.LensID$VH.get(seg);
    }
    public static void LensID$set( MemorySegment seg, long x) {
        libraw_makernotes_lens_t.LensID$VH.set(seg, x);
    }
    public static long LensID$get(MemorySegment seg, long index) {
        return (long)libraw_makernotes_lens_t.LensID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LensID$set(MemorySegment seg, long index, long x) {
        libraw_makernotes_lens_t.LensID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Lens$slice(MemorySegment seg) {
        return seg.asSlice(8, 128);
    }
    static final VarHandle LensFormat$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("LensFormat"));
    public static VarHandle LensFormat$VH() {
        return libraw_makernotes_lens_t.LensFormat$VH;
    }
    public static short LensFormat$get(MemorySegment seg) {
        return (short)libraw_makernotes_lens_t.LensFormat$VH.get(seg);
    }
    public static void LensFormat$set( MemorySegment seg, short x) {
        libraw_makernotes_lens_t.LensFormat$VH.set(seg, x);
    }
    public static short LensFormat$get(MemorySegment seg, long index) {
        return (short)libraw_makernotes_lens_t.LensFormat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LensFormat$set(MemorySegment seg, long index, short x) {
        libraw_makernotes_lens_t.LensFormat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LensMount$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("LensMount"));
    public static VarHandle LensMount$VH() {
        return libraw_makernotes_lens_t.LensMount$VH;
    }
    public static short LensMount$get(MemorySegment seg) {
        return (short)libraw_makernotes_lens_t.LensMount$VH.get(seg);
    }
    public static void LensMount$set( MemorySegment seg, short x) {
        libraw_makernotes_lens_t.LensMount$VH.set(seg, x);
    }
    public static short LensMount$get(MemorySegment seg, long index) {
        return (short)libraw_makernotes_lens_t.LensMount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LensMount$set(MemorySegment seg, long index, short x) {
        libraw_makernotes_lens_t.LensMount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CamID$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("CamID"));
    public static VarHandle CamID$VH() {
        return libraw_makernotes_lens_t.CamID$VH;
    }
    public static long CamID$get(MemorySegment seg) {
        return (long)libraw_makernotes_lens_t.CamID$VH.get(seg);
    }
    public static void CamID$set( MemorySegment seg, long x) {
        libraw_makernotes_lens_t.CamID$VH.set(seg, x);
    }
    public static long CamID$get(MemorySegment seg, long index) {
        return (long)libraw_makernotes_lens_t.CamID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CamID$set(MemorySegment seg, long index, long x) {
        libraw_makernotes_lens_t.CamID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CameraFormat$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("CameraFormat"));
    public static VarHandle CameraFormat$VH() {
        return libraw_makernotes_lens_t.CameraFormat$VH;
    }
    public static short CameraFormat$get(MemorySegment seg) {
        return (short)libraw_makernotes_lens_t.CameraFormat$VH.get(seg);
    }
    public static void CameraFormat$set( MemorySegment seg, short x) {
        libraw_makernotes_lens_t.CameraFormat$VH.set(seg, x);
    }
    public static short CameraFormat$get(MemorySegment seg, long index) {
        return (short)libraw_makernotes_lens_t.CameraFormat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CameraFormat$set(MemorySegment seg, long index, short x) {
        libraw_makernotes_lens_t.CameraFormat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CameraMount$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("CameraMount"));
    public static VarHandle CameraMount$VH() {
        return libraw_makernotes_lens_t.CameraMount$VH;
    }
    public static short CameraMount$get(MemorySegment seg) {
        return (short)libraw_makernotes_lens_t.CameraMount$VH.get(seg);
    }
    public static void CameraMount$set( MemorySegment seg, short x) {
        libraw_makernotes_lens_t.CameraMount$VH.set(seg, x);
    }
    public static short CameraMount$get(MemorySegment seg, long index) {
        return (short)libraw_makernotes_lens_t.CameraMount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CameraMount$set(MemorySegment seg, long index, short x) {
        libraw_makernotes_lens_t.CameraMount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment body$slice(MemorySegment seg) {
        return seg.asSlice(156, 64);
    }
    static final VarHandle FocalType$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("FocalType"));
    public static VarHandle FocalType$VH() {
        return libraw_makernotes_lens_t.FocalType$VH;
    }
    public static short FocalType$get(MemorySegment seg) {
        return (short)libraw_makernotes_lens_t.FocalType$VH.get(seg);
    }
    public static void FocalType$set( MemorySegment seg, short x) {
        libraw_makernotes_lens_t.FocalType$VH.set(seg, x);
    }
    public static short FocalType$get(MemorySegment seg, long index) {
        return (short)libraw_makernotes_lens_t.FocalType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FocalType$set(MemorySegment seg, long index, short x) {
        libraw_makernotes_lens_t.FocalType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment LensFeatures_pre$slice(MemorySegment seg) {
        return seg.asSlice(222, 16);
    }
    public static MemorySegment LensFeatures_suf$slice(MemorySegment seg) {
        return seg.asSlice(238, 16);
    }
    static final VarHandle MinFocal$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("MinFocal"));
    public static VarHandle MinFocal$VH() {
        return libraw_makernotes_lens_t.MinFocal$VH;
    }
    public static float MinFocal$get(MemorySegment seg) {
        return (float)libraw_makernotes_lens_t.MinFocal$VH.get(seg);
    }
    public static void MinFocal$set( MemorySegment seg, float x) {
        libraw_makernotes_lens_t.MinFocal$VH.set(seg, x);
    }
    public static float MinFocal$get(MemorySegment seg, long index) {
        return (float)libraw_makernotes_lens_t.MinFocal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MinFocal$set(MemorySegment seg, long index, float x) {
        libraw_makernotes_lens_t.MinFocal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaxFocal$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("MaxFocal"));
    public static VarHandle MaxFocal$VH() {
        return libraw_makernotes_lens_t.MaxFocal$VH;
    }
    public static float MaxFocal$get(MemorySegment seg) {
        return (float)libraw_makernotes_lens_t.MaxFocal$VH.get(seg);
    }
    public static void MaxFocal$set( MemorySegment seg, float x) {
        libraw_makernotes_lens_t.MaxFocal$VH.set(seg, x);
    }
    public static float MaxFocal$get(MemorySegment seg, long index) {
        return (float)libraw_makernotes_lens_t.MaxFocal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxFocal$set(MemorySegment seg, long index, float x) {
        libraw_makernotes_lens_t.MaxFocal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaxAp4MinFocal$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("MaxAp4MinFocal"));
    public static VarHandle MaxAp4MinFocal$VH() {
        return libraw_makernotes_lens_t.MaxAp4MinFocal$VH;
    }
    public static float MaxAp4MinFocal$get(MemorySegment seg) {
        return (float)libraw_makernotes_lens_t.MaxAp4MinFocal$VH.get(seg);
    }
    public static void MaxAp4MinFocal$set( MemorySegment seg, float x) {
        libraw_makernotes_lens_t.MaxAp4MinFocal$VH.set(seg, x);
    }
    public static float MaxAp4MinFocal$get(MemorySegment seg, long index) {
        return (float)libraw_makernotes_lens_t.MaxAp4MinFocal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxAp4MinFocal$set(MemorySegment seg, long index, float x) {
        libraw_makernotes_lens_t.MaxAp4MinFocal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaxAp4MaxFocal$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("MaxAp4MaxFocal"));
    public static VarHandle MaxAp4MaxFocal$VH() {
        return libraw_makernotes_lens_t.MaxAp4MaxFocal$VH;
    }
    public static float MaxAp4MaxFocal$get(MemorySegment seg) {
        return (float)libraw_makernotes_lens_t.MaxAp4MaxFocal$VH.get(seg);
    }
    public static void MaxAp4MaxFocal$set( MemorySegment seg, float x) {
        libraw_makernotes_lens_t.MaxAp4MaxFocal$VH.set(seg, x);
    }
    public static float MaxAp4MaxFocal$get(MemorySegment seg, long index) {
        return (float)libraw_makernotes_lens_t.MaxAp4MaxFocal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxAp4MaxFocal$set(MemorySegment seg, long index, float x) {
        libraw_makernotes_lens_t.MaxAp4MaxFocal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MinAp4MinFocal$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("MinAp4MinFocal"));
    public static VarHandle MinAp4MinFocal$VH() {
        return libraw_makernotes_lens_t.MinAp4MinFocal$VH;
    }
    public static float MinAp4MinFocal$get(MemorySegment seg) {
        return (float)libraw_makernotes_lens_t.MinAp4MinFocal$VH.get(seg);
    }
    public static void MinAp4MinFocal$set( MemorySegment seg, float x) {
        libraw_makernotes_lens_t.MinAp4MinFocal$VH.set(seg, x);
    }
    public static float MinAp4MinFocal$get(MemorySegment seg, long index) {
        return (float)libraw_makernotes_lens_t.MinAp4MinFocal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MinAp4MinFocal$set(MemorySegment seg, long index, float x) {
        libraw_makernotes_lens_t.MinAp4MinFocal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MinAp4MaxFocal$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("MinAp4MaxFocal"));
    public static VarHandle MinAp4MaxFocal$VH() {
        return libraw_makernotes_lens_t.MinAp4MaxFocal$VH;
    }
    public static float MinAp4MaxFocal$get(MemorySegment seg) {
        return (float)libraw_makernotes_lens_t.MinAp4MaxFocal$VH.get(seg);
    }
    public static void MinAp4MaxFocal$set( MemorySegment seg, float x) {
        libraw_makernotes_lens_t.MinAp4MaxFocal$VH.set(seg, x);
    }
    public static float MinAp4MaxFocal$get(MemorySegment seg, long index) {
        return (float)libraw_makernotes_lens_t.MinAp4MaxFocal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MinAp4MaxFocal$set(MemorySegment seg, long index, float x) {
        libraw_makernotes_lens_t.MinAp4MaxFocal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaxAp$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("MaxAp"));
    public static VarHandle MaxAp$VH() {
        return libraw_makernotes_lens_t.MaxAp$VH;
    }
    public static float MaxAp$get(MemorySegment seg) {
        return (float)libraw_makernotes_lens_t.MaxAp$VH.get(seg);
    }
    public static void MaxAp$set( MemorySegment seg, float x) {
        libraw_makernotes_lens_t.MaxAp$VH.set(seg, x);
    }
    public static float MaxAp$get(MemorySegment seg, long index) {
        return (float)libraw_makernotes_lens_t.MaxAp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxAp$set(MemorySegment seg, long index, float x) {
        libraw_makernotes_lens_t.MaxAp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MinAp$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("MinAp"));
    public static VarHandle MinAp$VH() {
        return libraw_makernotes_lens_t.MinAp$VH;
    }
    public static float MinAp$get(MemorySegment seg) {
        return (float)libraw_makernotes_lens_t.MinAp$VH.get(seg);
    }
    public static void MinAp$set( MemorySegment seg, float x) {
        libraw_makernotes_lens_t.MinAp$VH.set(seg, x);
    }
    public static float MinAp$get(MemorySegment seg, long index) {
        return (float)libraw_makernotes_lens_t.MinAp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MinAp$set(MemorySegment seg, long index, float x) {
        libraw_makernotes_lens_t.MinAp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CurFocal$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("CurFocal"));
    public static VarHandle CurFocal$VH() {
        return libraw_makernotes_lens_t.CurFocal$VH;
    }
    public static float CurFocal$get(MemorySegment seg) {
        return (float)libraw_makernotes_lens_t.CurFocal$VH.get(seg);
    }
    public static void CurFocal$set( MemorySegment seg, float x) {
        libraw_makernotes_lens_t.CurFocal$VH.set(seg, x);
    }
    public static float CurFocal$get(MemorySegment seg, long index) {
        return (float)libraw_makernotes_lens_t.CurFocal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CurFocal$set(MemorySegment seg, long index, float x) {
        libraw_makernotes_lens_t.CurFocal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CurAp$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("CurAp"));
    public static VarHandle CurAp$VH() {
        return libraw_makernotes_lens_t.CurAp$VH;
    }
    public static float CurAp$get(MemorySegment seg) {
        return (float)libraw_makernotes_lens_t.CurAp$VH.get(seg);
    }
    public static void CurAp$set( MemorySegment seg, float x) {
        libraw_makernotes_lens_t.CurAp$VH.set(seg, x);
    }
    public static float CurAp$get(MemorySegment seg, long index) {
        return (float)libraw_makernotes_lens_t.CurAp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CurAp$set(MemorySegment seg, long index, float x) {
        libraw_makernotes_lens_t.CurAp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaxAp4CurFocal$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("MaxAp4CurFocal"));
    public static VarHandle MaxAp4CurFocal$VH() {
        return libraw_makernotes_lens_t.MaxAp4CurFocal$VH;
    }
    public static float MaxAp4CurFocal$get(MemorySegment seg) {
        return (float)libraw_makernotes_lens_t.MaxAp4CurFocal$VH.get(seg);
    }
    public static void MaxAp4CurFocal$set( MemorySegment seg, float x) {
        libraw_makernotes_lens_t.MaxAp4CurFocal$VH.set(seg, x);
    }
    public static float MaxAp4CurFocal$get(MemorySegment seg, long index) {
        return (float)libraw_makernotes_lens_t.MaxAp4CurFocal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxAp4CurFocal$set(MemorySegment seg, long index, float x) {
        libraw_makernotes_lens_t.MaxAp4CurFocal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MinAp4CurFocal$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("MinAp4CurFocal"));
    public static VarHandle MinAp4CurFocal$VH() {
        return libraw_makernotes_lens_t.MinAp4CurFocal$VH;
    }
    public static float MinAp4CurFocal$get(MemorySegment seg) {
        return (float)libraw_makernotes_lens_t.MinAp4CurFocal$VH.get(seg);
    }
    public static void MinAp4CurFocal$set( MemorySegment seg, float x) {
        libraw_makernotes_lens_t.MinAp4CurFocal$VH.set(seg, x);
    }
    public static float MinAp4CurFocal$get(MemorySegment seg, long index) {
        return (float)libraw_makernotes_lens_t.MinAp4CurFocal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MinAp4CurFocal$set(MemorySegment seg, long index, float x) {
        libraw_makernotes_lens_t.MinAp4CurFocal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MinFocusDistance$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("MinFocusDistance"));
    public static VarHandle MinFocusDistance$VH() {
        return libraw_makernotes_lens_t.MinFocusDistance$VH;
    }
    public static float MinFocusDistance$get(MemorySegment seg) {
        return (float)libraw_makernotes_lens_t.MinFocusDistance$VH.get(seg);
    }
    public static void MinFocusDistance$set( MemorySegment seg, float x) {
        libraw_makernotes_lens_t.MinFocusDistance$VH.set(seg, x);
    }
    public static float MinFocusDistance$get(MemorySegment seg, long index) {
        return (float)libraw_makernotes_lens_t.MinFocusDistance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MinFocusDistance$set(MemorySegment seg, long index, float x) {
        libraw_makernotes_lens_t.MinFocusDistance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FocusRangeIndex$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("FocusRangeIndex"));
    public static VarHandle FocusRangeIndex$VH() {
        return libraw_makernotes_lens_t.FocusRangeIndex$VH;
    }
    public static float FocusRangeIndex$get(MemorySegment seg) {
        return (float)libraw_makernotes_lens_t.FocusRangeIndex$VH.get(seg);
    }
    public static void FocusRangeIndex$set( MemorySegment seg, float x) {
        libraw_makernotes_lens_t.FocusRangeIndex$VH.set(seg, x);
    }
    public static float FocusRangeIndex$get(MemorySegment seg, long index) {
        return (float)libraw_makernotes_lens_t.FocusRangeIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FocusRangeIndex$set(MemorySegment seg, long index, float x) {
        libraw_makernotes_lens_t.FocusRangeIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LensFStops$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("LensFStops"));
    public static VarHandle LensFStops$VH() {
        return libraw_makernotes_lens_t.LensFStops$VH;
    }
    public static float LensFStops$get(MemorySegment seg) {
        return (float)libraw_makernotes_lens_t.LensFStops$VH.get(seg);
    }
    public static void LensFStops$set( MemorySegment seg, float x) {
        libraw_makernotes_lens_t.LensFStops$VH.set(seg, x);
    }
    public static float LensFStops$get(MemorySegment seg, long index) {
        return (float)libraw_makernotes_lens_t.LensFStops$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LensFStops$set(MemorySegment seg, long index, float x) {
        libraw_makernotes_lens_t.LensFStops$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle TeleconverterID$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("TeleconverterID"));
    public static VarHandle TeleconverterID$VH() {
        return libraw_makernotes_lens_t.TeleconverterID$VH;
    }
    public static long TeleconverterID$get(MemorySegment seg) {
        return (long)libraw_makernotes_lens_t.TeleconverterID$VH.get(seg);
    }
    public static void TeleconverterID$set( MemorySegment seg, long x) {
        libraw_makernotes_lens_t.TeleconverterID$VH.set(seg, x);
    }
    public static long TeleconverterID$get(MemorySegment seg, long index) {
        return (long)libraw_makernotes_lens_t.TeleconverterID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TeleconverterID$set(MemorySegment seg, long index, long x) {
        libraw_makernotes_lens_t.TeleconverterID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Teleconverter$slice(MemorySegment seg) {
        return seg.asSlice(328, 128);
    }
    static final VarHandle AdapterID$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AdapterID"));
    public static VarHandle AdapterID$VH() {
        return libraw_makernotes_lens_t.AdapterID$VH;
    }
    public static long AdapterID$get(MemorySegment seg) {
        return (long)libraw_makernotes_lens_t.AdapterID$VH.get(seg);
    }
    public static void AdapterID$set( MemorySegment seg, long x) {
        libraw_makernotes_lens_t.AdapterID$VH.set(seg, x);
    }
    public static long AdapterID$get(MemorySegment seg, long index) {
        return (long)libraw_makernotes_lens_t.AdapterID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AdapterID$set(MemorySegment seg, long index, long x) {
        libraw_makernotes_lens_t.AdapterID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Adapter$slice(MemorySegment seg) {
        return seg.asSlice(464, 128);
    }
    static final VarHandle AttachmentID$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AttachmentID"));
    public static VarHandle AttachmentID$VH() {
        return libraw_makernotes_lens_t.AttachmentID$VH;
    }
    public static long AttachmentID$get(MemorySegment seg) {
        return (long)libraw_makernotes_lens_t.AttachmentID$VH.get(seg);
    }
    public static void AttachmentID$set( MemorySegment seg, long x) {
        libraw_makernotes_lens_t.AttachmentID$VH.set(seg, x);
    }
    public static long AttachmentID$get(MemorySegment seg, long index) {
        return (long)libraw_makernotes_lens_t.AttachmentID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AttachmentID$set(MemorySegment seg, long index, long x) {
        libraw_makernotes_lens_t.AttachmentID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Attachment$slice(MemorySegment seg) {
        return seg.asSlice(600, 128);
    }
    static final VarHandle FocalUnits$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("FocalUnits"));
    public static VarHandle FocalUnits$VH() {
        return libraw_makernotes_lens_t.FocalUnits$VH;
    }
    public static short FocalUnits$get(MemorySegment seg) {
        return (short)libraw_makernotes_lens_t.FocalUnits$VH.get(seg);
    }
    public static void FocalUnits$set( MemorySegment seg, short x) {
        libraw_makernotes_lens_t.FocalUnits$VH.set(seg, x);
    }
    public static short FocalUnits$get(MemorySegment seg, long index) {
        return (short)libraw_makernotes_lens_t.FocalUnits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FocalUnits$set(MemorySegment seg, long index, short x) {
        libraw_makernotes_lens_t.FocalUnits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FocalLengthIn35mmFormat$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("FocalLengthIn35mmFormat"));
    public static VarHandle FocalLengthIn35mmFormat$VH() {
        return libraw_makernotes_lens_t.FocalLengthIn35mmFormat$VH;
    }
    public static float FocalLengthIn35mmFormat$get(MemorySegment seg) {
        return (float)libraw_makernotes_lens_t.FocalLengthIn35mmFormat$VH.get(seg);
    }
    public static void FocalLengthIn35mmFormat$set( MemorySegment seg, float x) {
        libraw_makernotes_lens_t.FocalLengthIn35mmFormat$VH.set(seg, x);
    }
    public static float FocalLengthIn35mmFormat$get(MemorySegment seg, long index) {
        return (float)libraw_makernotes_lens_t.FocalLengthIn35mmFormat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FocalLengthIn35mmFormat$set(MemorySegment seg, long index, float x) {
        libraw_makernotes_lens_t.FocalLengthIn35mmFormat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


