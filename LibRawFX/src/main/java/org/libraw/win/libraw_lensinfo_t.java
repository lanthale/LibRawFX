// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_lensinfo_t {
 *     float MinFocal;
 *     float MaxFocal;
 *     float MaxAp4MinFocal;
 *     float MaxAp4MaxFocal;
 *     float EXIF_MaxAp;
 *     char LensMake[128];
 *     char Lens[128];
 *     char LensSerial[128];
 *     char InternalLensSerial[128];
 *     unsigned short FocalLengthIn35mmFormat;
 *     struct libraw_nikonlens_t nikon;
 *     struct libraw_dnglens_t dng;
 *     struct libraw_makernotes_lens_t makernotes;
 * };
 * }
 */
public class libraw_lensinfo_t {

    public static MemoryLayout $LAYOUT() {
        return constants$84.const$4;
    }
    public static VarHandle MinFocal$VH() {
        return constants$84.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float MinFocal;
     * }
     */
    public static float MinFocal$get(MemorySegment seg) {
        return (float)constants$84.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float MinFocal;
     * }
     */
    public static void MinFocal$set(MemorySegment seg, float x) {
        constants$84.const$5.set(seg, x);
    }
    public static float MinFocal$get(MemorySegment seg, long index) {
        return (float)constants$84.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void MinFocal$set(MemorySegment seg, long index, float x) {
        constants$84.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaxFocal$VH() {
        return constants$85.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float MaxFocal;
     * }
     */
    public static float MaxFocal$get(MemorySegment seg) {
        return (float)constants$85.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float MaxFocal;
     * }
     */
    public static void MaxFocal$set(MemorySegment seg, float x) {
        constants$85.const$0.set(seg, x);
    }
    public static float MaxFocal$get(MemorySegment seg, long index) {
        return (float)constants$85.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxFocal$set(MemorySegment seg, long index, float x) {
        constants$85.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaxAp4MinFocal$VH() {
        return constants$85.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float MaxAp4MinFocal;
     * }
     */
    public static float MaxAp4MinFocal$get(MemorySegment seg) {
        return (float)constants$85.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float MaxAp4MinFocal;
     * }
     */
    public static void MaxAp4MinFocal$set(MemorySegment seg, float x) {
        constants$85.const$1.set(seg, x);
    }
    public static float MaxAp4MinFocal$get(MemorySegment seg, long index) {
        return (float)constants$85.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxAp4MinFocal$set(MemorySegment seg, long index, float x) {
        constants$85.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle MaxAp4MaxFocal$VH() {
        return constants$85.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float MaxAp4MaxFocal;
     * }
     */
    public static float MaxAp4MaxFocal$get(MemorySegment seg) {
        return (float)constants$85.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float MaxAp4MaxFocal;
     * }
     */
    public static void MaxAp4MaxFocal$set(MemorySegment seg, float x) {
        constants$85.const$2.set(seg, x);
    }
    public static float MaxAp4MaxFocal$get(MemorySegment seg, long index) {
        return (float)constants$85.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxAp4MaxFocal$set(MemorySegment seg, long index, float x) {
        constants$85.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle EXIF_MaxAp$VH() {
        return constants$85.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float EXIF_MaxAp;
     * }
     */
    public static float EXIF_MaxAp$get(MemorySegment seg) {
        return (float)constants$85.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float EXIF_MaxAp;
     * }
     */
    public static void EXIF_MaxAp$set(MemorySegment seg, float x) {
        constants$85.const$3.set(seg, x);
    }
    public static float EXIF_MaxAp$get(MemorySegment seg, long index) {
        return (float)constants$85.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void EXIF_MaxAp$set(MemorySegment seg, long index, float x) {
        constants$85.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment LensMake$slice(MemorySegment seg) {
        return seg.asSlice(20, 128);
    }
    public static MemorySegment Lens$slice(MemorySegment seg) {
        return seg.asSlice(148, 128);
    }
    public static MemorySegment LensSerial$slice(MemorySegment seg) {
        return seg.asSlice(276, 128);
    }
    public static MemorySegment InternalLensSerial$slice(MemorySegment seg) {
        return seg.asSlice(404, 128);
    }
    public static VarHandle FocalLengthIn35mmFormat$VH() {
        return constants$85.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short FocalLengthIn35mmFormat;
     * }
     */
    public static short FocalLengthIn35mmFormat$get(MemorySegment seg) {
        return (short)constants$85.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short FocalLengthIn35mmFormat;
     * }
     */
    public static void FocalLengthIn35mmFormat$set(MemorySegment seg, short x) {
        constants$85.const$4.set(seg, x);
    }
    public static short FocalLengthIn35mmFormat$get(MemorySegment seg, long index) {
        return (short)constants$85.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void FocalLengthIn35mmFormat$set(MemorySegment seg, long index, short x) {
        constants$85.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment nikon$slice(MemorySegment seg) {
        return seg.asSlice(536, 8);
    }
    public static MemorySegment dng$slice(MemorySegment seg) {
        return seg.asSlice(544, 16);
    }
    public static MemorySegment makernotes$slice(MemorySegment seg) {
        return seg.asSlice(560, 736);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


