// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_internal_output_params_t {
 *     unsigned int mix_green;
 *     unsigned int raw_color;
 *     unsigned int zero_is_bad;
 *     unsigned short shrink;
 *     unsigned short fuji_width;
 * };
 * }
 */
public class libraw_internal_output_params_t {

    public static MemoryLayout $LAYOUT() {
        return constants$0.const$3;
    }
    public static VarHandle mix_green$VH() {
        return constants$0.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int mix_green;
     * }
     */
    public static int mix_green$get(MemorySegment seg) {
        return (int)constants$0.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int mix_green;
     * }
     */
    public static void mix_green$set(MemorySegment seg, int x) {
        constants$0.const$4.set(seg, x);
    }
    public static int mix_green$get(MemorySegment seg, long index) {
        return (int)constants$0.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void mix_green$set(MemorySegment seg, long index, int x) {
        constants$0.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle raw_color$VH() {
        return constants$0.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int raw_color;
     * }
     */
    public static int raw_color$get(MemorySegment seg) {
        return (int)constants$0.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int raw_color;
     * }
     */
    public static void raw_color$set(MemorySegment seg, int x) {
        constants$0.const$5.set(seg, x);
    }
    public static int raw_color$get(MemorySegment seg, long index) {
        return (int)constants$0.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void raw_color$set(MemorySegment seg, long index, int x) {
        constants$0.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle zero_is_bad$VH() {
        return constants$1.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int zero_is_bad;
     * }
     */
    public static int zero_is_bad$get(MemorySegment seg) {
        return (int)constants$1.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int zero_is_bad;
     * }
     */
    public static void zero_is_bad$set(MemorySegment seg, int x) {
        constants$1.const$0.set(seg, x);
    }
    public static int zero_is_bad$get(MemorySegment seg, long index) {
        return (int)constants$1.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void zero_is_bad$set(MemorySegment seg, long index, int x) {
        constants$1.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shrink$VH() {
        return constants$1.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short shrink;
     * }
     */
    public static short shrink$get(MemorySegment seg) {
        return (short)constants$1.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short shrink;
     * }
     */
    public static void shrink$set(MemorySegment seg, short x) {
        constants$1.const$1.set(seg, x);
    }
    public static short shrink$get(MemorySegment seg, long index) {
        return (short)constants$1.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void shrink$set(MemorySegment seg, long index, short x) {
        constants$1.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fuji_width$VH() {
        return constants$1.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short fuji_width;
     * }
     */
    public static short fuji_width$get(MemorySegment seg) {
        return (short)constants$1.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short fuji_width;
     * }
     */
    public static void fuji_width$set(MemorySegment seg, short x) {
        constants$1.const$2.set(seg, x);
    }
    public static short fuji_width$get(MemorySegment seg, long index) {
        return (short)constants$1.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void fuji_width$set(MemorySegment seg, long index, short x) {
        constants$1.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


