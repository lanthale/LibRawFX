// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*libraw_set_exifparser_handler$cb)(void*,int,int,int,unsigned int,void*,long long);
 * }
 */
public interface libraw_set_exifparser_handler$cb {

    void apply(java.lang.foreign.MemorySegment context, int tag, int type, int len, int ord, java.lang.foreign.MemorySegment ifp, long base);
    static MemorySegment allocate(libraw_set_exifparser_handler$cb fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$6.libraw_set_exifparser_handler$cb_UP$MH, fi, constants$6.libraw_set_exifparser_handler$cb$FUNC, scope);
    }
    static libraw_set_exifparser_handler$cb ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _context, int _tag, int _type, int _len, int _ord, java.lang.foreign.MemorySegment _ifp, long _base) -> {
            try {
                constants$6.libraw_set_exifparser_handler$cb_DOWN$MH.invokeExact(symbol, _context, _tag, _type, _len, _ord, _ifp, _base);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


