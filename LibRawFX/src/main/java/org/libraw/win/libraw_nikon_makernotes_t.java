// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class libraw_nikon_makernotes_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_DOUBLE$LAYOUT.withName("ExposureBracketValue"),
        Constants$root.C_SHORT$LAYOUT.withName("ActiveDLighting"),
        Constants$root.C_SHORT$LAYOUT.withName("ShootingMode"),
        MemoryLayout.sequenceLayout(7, Constants$root.C_CHAR$LAYOUT).withName("ImageStabilization"),
        Constants$root.C_CHAR$LAYOUT.withName("VibrationReduction"),
        Constants$root.C_CHAR$LAYOUT.withName("VRMode"),
        MemoryLayout.sequenceLayout(13, Constants$root.C_CHAR$LAYOUT).withName("FlashSetting"),
        MemoryLayout.sequenceLayout(20, Constants$root.C_CHAR$LAYOUT).withName("FlashType"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_CHAR$LAYOUT).withName("FlashExposureCompensation"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_CHAR$LAYOUT).withName("ExternalFlashExposureComp"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_CHAR$LAYOUT).withName("FlashExposureBracketValue"),
        Constants$root.C_CHAR$LAYOUT.withName("FlashMode"),
        Constants$root.C_CHAR$LAYOUT.withName("FlashExposureCompensation2"),
        Constants$root.C_CHAR$LAYOUT.withName("FlashExposureCompensation3"),
        Constants$root.C_CHAR$LAYOUT.withName("FlashExposureCompensation4"),
        Constants$root.C_CHAR$LAYOUT.withName("FlashSource"),
        MemoryLayout.sequenceLayout(2, Constants$root.C_CHAR$LAYOUT).withName("FlashFirmware"),
        Constants$root.C_CHAR$LAYOUT.withName("ExternalFlashFlags"),
        Constants$root.C_CHAR$LAYOUT.withName("FlashControlCommanderMode"),
        Constants$root.C_CHAR$LAYOUT.withName("FlashOutputAndCompensation"),
        Constants$root.C_CHAR$LAYOUT.withName("FlashFocalLength"),
        Constants$root.C_CHAR$LAYOUT.withName("FlashGNDistance"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_CHAR$LAYOUT).withName("FlashGroupControlMode"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_CHAR$LAYOUT).withName("FlashGroupOutputAndCompensation"),
        Constants$root.C_CHAR$LAYOUT.withName("FlashColorFilter"),
        MemoryLayout.paddingLayout(8),
        Constants$root.C_SHORT$LAYOUT.withName("NEFCompression"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_LONG$LAYOUT.withName("ExposureMode"),
        Constants$root.C_LONG$LAYOUT.withName("ExposureProgram"),
        Constants$root.C_LONG$LAYOUT.withName("nMEshots"),
        Constants$root.C_LONG$LAYOUT.withName("MEgainOn"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.sequenceLayout(4, Constants$root.C_DOUBLE$LAYOUT).withName("ME_WB"),
        Constants$root.C_CHAR$LAYOUT.withName("AFFineTune"),
        Constants$root.C_CHAR$LAYOUT.withName("AFFineTuneIndex"),
        Constants$root.C_CHAR$LAYOUT.withName("AFFineTuneAdj"),
        MemoryLayout.paddingLayout(8),
        Constants$root.C_LONG$LAYOUT.withName("LensDataVersion"),
        Constants$root.C_LONG$LAYOUT.withName("FlashInfoVersion"),
        Constants$root.C_LONG$LAYOUT.withName("ColorBalanceVersion"),
        Constants$root.C_CHAR$LAYOUT.withName("key"),
        MemoryLayout.paddingLayout(8),
        MemoryLayout.sequenceLayout(4, Constants$root.C_SHORT$LAYOUT).withName("NEFBitDepth"),
        Constants$root.C_SHORT$LAYOUT.withName("HighSpeedCropFormat"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("cleft"),
            Constants$root.C_SHORT$LAYOUT.withName("ctop"),
            Constants$root.C_SHORT$LAYOUT.withName("cwidth"),
            Constants$root.C_SHORT$LAYOUT.withName("cheight")
        ).withName("SensorHighSpeedCrop"),
        Constants$root.C_SHORT$LAYOUT.withName("SensorWidth"),
        Constants$root.C_SHORT$LAYOUT.withName("SensorHeight"),
        Constants$root.C_SHORT$LAYOUT.withName("Active_D_Lighting"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_LONG$LAYOUT.withName("ShotInfoVersion"),
        Constants$root.C_SHORT$LAYOUT.withName("MakernotesFlip"),
        MemoryLayout.paddingLayout(48),
        Constants$root.C_DOUBLE$LAYOUT.withName("RollAngle"),
        Constants$root.C_DOUBLE$LAYOUT.withName("PitchAngle"),
        Constants$root.C_DOUBLE$LAYOUT.withName("YawAngle")
    );
    public static MemoryLayout $LAYOUT() {
        return libraw_nikon_makernotes_t.$struct$LAYOUT;
    }
    static final VarHandle ExposureBracketValue$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ExposureBracketValue"));
    public static VarHandle ExposureBracketValue$VH() {
        return libraw_nikon_makernotes_t.ExposureBracketValue$VH;
    }
    public static double ExposureBracketValue$get(MemorySegment seg) {
        return (double)libraw_nikon_makernotes_t.ExposureBracketValue$VH.get(seg);
    }
    public static void ExposureBracketValue$set( MemorySegment seg, double x) {
        libraw_nikon_makernotes_t.ExposureBracketValue$VH.set(seg, x);
    }
    public static double ExposureBracketValue$get(MemorySegment seg, long index) {
        return (double)libraw_nikon_makernotes_t.ExposureBracketValue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExposureBracketValue$set(MemorySegment seg, long index, double x) {
        libraw_nikon_makernotes_t.ExposureBracketValue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ActiveDLighting$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ActiveDLighting"));
    public static VarHandle ActiveDLighting$VH() {
        return libraw_nikon_makernotes_t.ActiveDLighting$VH;
    }
    public static short ActiveDLighting$get(MemorySegment seg) {
        return (short)libraw_nikon_makernotes_t.ActiveDLighting$VH.get(seg);
    }
    public static void ActiveDLighting$set( MemorySegment seg, short x) {
        libraw_nikon_makernotes_t.ActiveDLighting$VH.set(seg, x);
    }
    public static short ActiveDLighting$get(MemorySegment seg, long index) {
        return (short)libraw_nikon_makernotes_t.ActiveDLighting$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ActiveDLighting$set(MemorySegment seg, long index, short x) {
        libraw_nikon_makernotes_t.ActiveDLighting$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ShootingMode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ShootingMode"));
    public static VarHandle ShootingMode$VH() {
        return libraw_nikon_makernotes_t.ShootingMode$VH;
    }
    public static short ShootingMode$get(MemorySegment seg) {
        return (short)libraw_nikon_makernotes_t.ShootingMode$VH.get(seg);
    }
    public static void ShootingMode$set( MemorySegment seg, short x) {
        libraw_nikon_makernotes_t.ShootingMode$VH.set(seg, x);
    }
    public static short ShootingMode$get(MemorySegment seg, long index) {
        return (short)libraw_nikon_makernotes_t.ShootingMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ShootingMode$set(MemorySegment seg, long index, short x) {
        libraw_nikon_makernotes_t.ShootingMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ImageStabilization$slice(MemorySegment seg) {
        return seg.asSlice(12, 7);
    }
    static final VarHandle VibrationReduction$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("VibrationReduction"));
    public static VarHandle VibrationReduction$VH() {
        return libraw_nikon_makernotes_t.VibrationReduction$VH;
    }
    public static byte VibrationReduction$get(MemorySegment seg) {
        return (byte)libraw_nikon_makernotes_t.VibrationReduction$VH.get(seg);
    }
    public static void VibrationReduction$set( MemorySegment seg, byte x) {
        libraw_nikon_makernotes_t.VibrationReduction$VH.set(seg, x);
    }
    public static byte VibrationReduction$get(MemorySegment seg, long index) {
        return (byte)libraw_nikon_makernotes_t.VibrationReduction$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void VibrationReduction$set(MemorySegment seg, long index, byte x) {
        libraw_nikon_makernotes_t.VibrationReduction$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle VRMode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("VRMode"));
    public static VarHandle VRMode$VH() {
        return libraw_nikon_makernotes_t.VRMode$VH;
    }
    public static byte VRMode$get(MemorySegment seg) {
        return (byte)libraw_nikon_makernotes_t.VRMode$VH.get(seg);
    }
    public static void VRMode$set( MemorySegment seg, byte x) {
        libraw_nikon_makernotes_t.VRMode$VH.set(seg, x);
    }
    public static byte VRMode$get(MemorySegment seg, long index) {
        return (byte)libraw_nikon_makernotes_t.VRMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void VRMode$set(MemorySegment seg, long index, byte x) {
        libraw_nikon_makernotes_t.VRMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment FlashSetting$slice(MemorySegment seg) {
        return seg.asSlice(21, 13);
    }
    public static MemorySegment FlashType$slice(MemorySegment seg) {
        return seg.asSlice(34, 20);
    }
    public static MemorySegment FlashExposureCompensation$slice(MemorySegment seg) {
        return seg.asSlice(54, 4);
    }
    public static MemorySegment ExternalFlashExposureComp$slice(MemorySegment seg) {
        return seg.asSlice(58, 4);
    }
    public static MemorySegment FlashExposureBracketValue$slice(MemorySegment seg) {
        return seg.asSlice(62, 4);
    }
    static final VarHandle FlashMode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlashMode"));
    public static VarHandle FlashMode$VH() {
        return libraw_nikon_makernotes_t.FlashMode$VH;
    }
    public static byte FlashMode$get(MemorySegment seg) {
        return (byte)libraw_nikon_makernotes_t.FlashMode$VH.get(seg);
    }
    public static void FlashMode$set( MemorySegment seg, byte x) {
        libraw_nikon_makernotes_t.FlashMode$VH.set(seg, x);
    }
    public static byte FlashMode$get(MemorySegment seg, long index) {
        return (byte)libraw_nikon_makernotes_t.FlashMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashMode$set(MemorySegment seg, long index, byte x) {
        libraw_nikon_makernotes_t.FlashMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashExposureCompensation2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlashExposureCompensation2"));
    public static VarHandle FlashExposureCompensation2$VH() {
        return libraw_nikon_makernotes_t.FlashExposureCompensation2$VH;
    }
    public static byte FlashExposureCompensation2$get(MemorySegment seg) {
        return (byte)libraw_nikon_makernotes_t.FlashExposureCompensation2$VH.get(seg);
    }
    public static void FlashExposureCompensation2$set( MemorySegment seg, byte x) {
        libraw_nikon_makernotes_t.FlashExposureCompensation2$VH.set(seg, x);
    }
    public static byte FlashExposureCompensation2$get(MemorySegment seg, long index) {
        return (byte)libraw_nikon_makernotes_t.FlashExposureCompensation2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashExposureCompensation2$set(MemorySegment seg, long index, byte x) {
        libraw_nikon_makernotes_t.FlashExposureCompensation2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashExposureCompensation3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlashExposureCompensation3"));
    public static VarHandle FlashExposureCompensation3$VH() {
        return libraw_nikon_makernotes_t.FlashExposureCompensation3$VH;
    }
    public static byte FlashExposureCompensation3$get(MemorySegment seg) {
        return (byte)libraw_nikon_makernotes_t.FlashExposureCompensation3$VH.get(seg);
    }
    public static void FlashExposureCompensation3$set( MemorySegment seg, byte x) {
        libraw_nikon_makernotes_t.FlashExposureCompensation3$VH.set(seg, x);
    }
    public static byte FlashExposureCompensation3$get(MemorySegment seg, long index) {
        return (byte)libraw_nikon_makernotes_t.FlashExposureCompensation3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashExposureCompensation3$set(MemorySegment seg, long index, byte x) {
        libraw_nikon_makernotes_t.FlashExposureCompensation3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashExposureCompensation4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlashExposureCompensation4"));
    public static VarHandle FlashExposureCompensation4$VH() {
        return libraw_nikon_makernotes_t.FlashExposureCompensation4$VH;
    }
    public static byte FlashExposureCompensation4$get(MemorySegment seg) {
        return (byte)libraw_nikon_makernotes_t.FlashExposureCompensation4$VH.get(seg);
    }
    public static void FlashExposureCompensation4$set( MemorySegment seg, byte x) {
        libraw_nikon_makernotes_t.FlashExposureCompensation4$VH.set(seg, x);
    }
    public static byte FlashExposureCompensation4$get(MemorySegment seg, long index) {
        return (byte)libraw_nikon_makernotes_t.FlashExposureCompensation4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashExposureCompensation4$set(MemorySegment seg, long index, byte x) {
        libraw_nikon_makernotes_t.FlashExposureCompensation4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashSource$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlashSource"));
    public static VarHandle FlashSource$VH() {
        return libraw_nikon_makernotes_t.FlashSource$VH;
    }
    public static byte FlashSource$get(MemorySegment seg) {
        return (byte)libraw_nikon_makernotes_t.FlashSource$VH.get(seg);
    }
    public static void FlashSource$set( MemorySegment seg, byte x) {
        libraw_nikon_makernotes_t.FlashSource$VH.set(seg, x);
    }
    public static byte FlashSource$get(MemorySegment seg, long index) {
        return (byte)libraw_nikon_makernotes_t.FlashSource$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashSource$set(MemorySegment seg, long index, byte x) {
        libraw_nikon_makernotes_t.FlashSource$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment FlashFirmware$slice(MemorySegment seg) {
        return seg.asSlice(71, 2);
    }
    static final VarHandle ExternalFlashFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ExternalFlashFlags"));
    public static VarHandle ExternalFlashFlags$VH() {
        return libraw_nikon_makernotes_t.ExternalFlashFlags$VH;
    }
    public static byte ExternalFlashFlags$get(MemorySegment seg) {
        return (byte)libraw_nikon_makernotes_t.ExternalFlashFlags$VH.get(seg);
    }
    public static void ExternalFlashFlags$set( MemorySegment seg, byte x) {
        libraw_nikon_makernotes_t.ExternalFlashFlags$VH.set(seg, x);
    }
    public static byte ExternalFlashFlags$get(MemorySegment seg, long index) {
        return (byte)libraw_nikon_makernotes_t.ExternalFlashFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExternalFlashFlags$set(MemorySegment seg, long index, byte x) {
        libraw_nikon_makernotes_t.ExternalFlashFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashControlCommanderMode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlashControlCommanderMode"));
    public static VarHandle FlashControlCommanderMode$VH() {
        return libraw_nikon_makernotes_t.FlashControlCommanderMode$VH;
    }
    public static byte FlashControlCommanderMode$get(MemorySegment seg) {
        return (byte)libraw_nikon_makernotes_t.FlashControlCommanderMode$VH.get(seg);
    }
    public static void FlashControlCommanderMode$set( MemorySegment seg, byte x) {
        libraw_nikon_makernotes_t.FlashControlCommanderMode$VH.set(seg, x);
    }
    public static byte FlashControlCommanderMode$get(MemorySegment seg, long index) {
        return (byte)libraw_nikon_makernotes_t.FlashControlCommanderMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashControlCommanderMode$set(MemorySegment seg, long index, byte x) {
        libraw_nikon_makernotes_t.FlashControlCommanderMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashOutputAndCompensation$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlashOutputAndCompensation"));
    public static VarHandle FlashOutputAndCompensation$VH() {
        return libraw_nikon_makernotes_t.FlashOutputAndCompensation$VH;
    }
    public static byte FlashOutputAndCompensation$get(MemorySegment seg) {
        return (byte)libraw_nikon_makernotes_t.FlashOutputAndCompensation$VH.get(seg);
    }
    public static void FlashOutputAndCompensation$set( MemorySegment seg, byte x) {
        libraw_nikon_makernotes_t.FlashOutputAndCompensation$VH.set(seg, x);
    }
    public static byte FlashOutputAndCompensation$get(MemorySegment seg, long index) {
        return (byte)libraw_nikon_makernotes_t.FlashOutputAndCompensation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashOutputAndCompensation$set(MemorySegment seg, long index, byte x) {
        libraw_nikon_makernotes_t.FlashOutputAndCompensation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashFocalLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlashFocalLength"));
    public static VarHandle FlashFocalLength$VH() {
        return libraw_nikon_makernotes_t.FlashFocalLength$VH;
    }
    public static byte FlashFocalLength$get(MemorySegment seg) {
        return (byte)libraw_nikon_makernotes_t.FlashFocalLength$VH.get(seg);
    }
    public static void FlashFocalLength$set( MemorySegment seg, byte x) {
        libraw_nikon_makernotes_t.FlashFocalLength$VH.set(seg, x);
    }
    public static byte FlashFocalLength$get(MemorySegment seg, long index) {
        return (byte)libraw_nikon_makernotes_t.FlashFocalLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashFocalLength$set(MemorySegment seg, long index, byte x) {
        libraw_nikon_makernotes_t.FlashFocalLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashGNDistance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlashGNDistance"));
    public static VarHandle FlashGNDistance$VH() {
        return libraw_nikon_makernotes_t.FlashGNDistance$VH;
    }
    public static byte FlashGNDistance$get(MemorySegment seg) {
        return (byte)libraw_nikon_makernotes_t.FlashGNDistance$VH.get(seg);
    }
    public static void FlashGNDistance$set( MemorySegment seg, byte x) {
        libraw_nikon_makernotes_t.FlashGNDistance$VH.set(seg, x);
    }
    public static byte FlashGNDistance$get(MemorySegment seg, long index) {
        return (byte)libraw_nikon_makernotes_t.FlashGNDistance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashGNDistance$set(MemorySegment seg, long index, byte x) {
        libraw_nikon_makernotes_t.FlashGNDistance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment FlashGroupControlMode$slice(MemorySegment seg) {
        return seg.asSlice(78, 4);
    }
    public static MemorySegment FlashGroupOutputAndCompensation$slice(MemorySegment seg) {
        return seg.asSlice(82, 4);
    }
    static final VarHandle FlashColorFilter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlashColorFilter"));
    public static VarHandle FlashColorFilter$VH() {
        return libraw_nikon_makernotes_t.FlashColorFilter$VH;
    }
    public static byte FlashColorFilter$get(MemorySegment seg) {
        return (byte)libraw_nikon_makernotes_t.FlashColorFilter$VH.get(seg);
    }
    public static void FlashColorFilter$set( MemorySegment seg, byte x) {
        libraw_nikon_makernotes_t.FlashColorFilter$VH.set(seg, x);
    }
    public static byte FlashColorFilter$get(MemorySegment seg, long index) {
        return (byte)libraw_nikon_makernotes_t.FlashColorFilter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashColorFilter$set(MemorySegment seg, long index, byte x) {
        libraw_nikon_makernotes_t.FlashColorFilter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NEFCompression$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NEFCompression"));
    public static VarHandle NEFCompression$VH() {
        return libraw_nikon_makernotes_t.NEFCompression$VH;
    }
    public static short NEFCompression$get(MemorySegment seg) {
        return (short)libraw_nikon_makernotes_t.NEFCompression$VH.get(seg);
    }
    public static void NEFCompression$set( MemorySegment seg, short x) {
        libraw_nikon_makernotes_t.NEFCompression$VH.set(seg, x);
    }
    public static short NEFCompression$get(MemorySegment seg, long index) {
        return (short)libraw_nikon_makernotes_t.NEFCompression$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NEFCompression$set(MemorySegment seg, long index, short x) {
        libraw_nikon_makernotes_t.NEFCompression$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ExposureMode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ExposureMode"));
    public static VarHandle ExposureMode$VH() {
        return libraw_nikon_makernotes_t.ExposureMode$VH;
    }
    public static int ExposureMode$get(MemorySegment seg) {
        return (int)libraw_nikon_makernotes_t.ExposureMode$VH.get(seg);
    }
    public static void ExposureMode$set( MemorySegment seg, int x) {
        libraw_nikon_makernotes_t.ExposureMode$VH.set(seg, x);
    }
    public static int ExposureMode$get(MemorySegment seg, long index) {
        return (int)libraw_nikon_makernotes_t.ExposureMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExposureMode$set(MemorySegment seg, long index, int x) {
        libraw_nikon_makernotes_t.ExposureMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ExposureProgram$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ExposureProgram"));
    public static VarHandle ExposureProgram$VH() {
        return libraw_nikon_makernotes_t.ExposureProgram$VH;
    }
    public static int ExposureProgram$get(MemorySegment seg) {
        return (int)libraw_nikon_makernotes_t.ExposureProgram$VH.get(seg);
    }
    public static void ExposureProgram$set( MemorySegment seg, int x) {
        libraw_nikon_makernotes_t.ExposureProgram$VH.set(seg, x);
    }
    public static int ExposureProgram$get(MemorySegment seg, long index) {
        return (int)libraw_nikon_makernotes_t.ExposureProgram$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExposureProgram$set(MemorySegment seg, long index, int x) {
        libraw_nikon_makernotes_t.ExposureProgram$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nMEshots$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nMEshots"));
    public static VarHandle nMEshots$VH() {
        return libraw_nikon_makernotes_t.nMEshots$VH;
    }
    public static int nMEshots$get(MemorySegment seg) {
        return (int)libraw_nikon_makernotes_t.nMEshots$VH.get(seg);
    }
    public static void nMEshots$set( MemorySegment seg, int x) {
        libraw_nikon_makernotes_t.nMEshots$VH.set(seg, x);
    }
    public static int nMEshots$get(MemorySegment seg, long index) {
        return (int)libraw_nikon_makernotes_t.nMEshots$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nMEshots$set(MemorySegment seg, long index, int x) {
        libraw_nikon_makernotes_t.nMEshots$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MEgainOn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MEgainOn"));
    public static VarHandle MEgainOn$VH() {
        return libraw_nikon_makernotes_t.MEgainOn$VH;
    }
    public static int MEgainOn$get(MemorySegment seg) {
        return (int)libraw_nikon_makernotes_t.MEgainOn$VH.get(seg);
    }
    public static void MEgainOn$set( MemorySegment seg, int x) {
        libraw_nikon_makernotes_t.MEgainOn$VH.set(seg, x);
    }
    public static int MEgainOn$get(MemorySegment seg, long index) {
        return (int)libraw_nikon_makernotes_t.MEgainOn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MEgainOn$set(MemorySegment seg, long index, int x) {
        libraw_nikon_makernotes_t.MEgainOn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ME_WB$slice(MemorySegment seg) {
        return seg.asSlice(112, 32);
    }
    static final VarHandle AFFineTune$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AFFineTune"));
    public static VarHandle AFFineTune$VH() {
        return libraw_nikon_makernotes_t.AFFineTune$VH;
    }
    public static byte AFFineTune$get(MemorySegment seg) {
        return (byte)libraw_nikon_makernotes_t.AFFineTune$VH.get(seg);
    }
    public static void AFFineTune$set( MemorySegment seg, byte x) {
        libraw_nikon_makernotes_t.AFFineTune$VH.set(seg, x);
    }
    public static byte AFFineTune$get(MemorySegment seg, long index) {
        return (byte)libraw_nikon_makernotes_t.AFFineTune$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AFFineTune$set(MemorySegment seg, long index, byte x) {
        libraw_nikon_makernotes_t.AFFineTune$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AFFineTuneIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AFFineTuneIndex"));
    public static VarHandle AFFineTuneIndex$VH() {
        return libraw_nikon_makernotes_t.AFFineTuneIndex$VH;
    }
    public static byte AFFineTuneIndex$get(MemorySegment seg) {
        return (byte)libraw_nikon_makernotes_t.AFFineTuneIndex$VH.get(seg);
    }
    public static void AFFineTuneIndex$set( MemorySegment seg, byte x) {
        libraw_nikon_makernotes_t.AFFineTuneIndex$VH.set(seg, x);
    }
    public static byte AFFineTuneIndex$get(MemorySegment seg, long index) {
        return (byte)libraw_nikon_makernotes_t.AFFineTuneIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AFFineTuneIndex$set(MemorySegment seg, long index, byte x) {
        libraw_nikon_makernotes_t.AFFineTuneIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AFFineTuneAdj$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AFFineTuneAdj"));
    public static VarHandle AFFineTuneAdj$VH() {
        return libraw_nikon_makernotes_t.AFFineTuneAdj$VH;
    }
    public static byte AFFineTuneAdj$get(MemorySegment seg) {
        return (byte)libraw_nikon_makernotes_t.AFFineTuneAdj$VH.get(seg);
    }
    public static void AFFineTuneAdj$set( MemorySegment seg, byte x) {
        libraw_nikon_makernotes_t.AFFineTuneAdj$VH.set(seg, x);
    }
    public static byte AFFineTuneAdj$get(MemorySegment seg, long index) {
        return (byte)libraw_nikon_makernotes_t.AFFineTuneAdj$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AFFineTuneAdj$set(MemorySegment seg, long index, byte x) {
        libraw_nikon_makernotes_t.AFFineTuneAdj$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LensDataVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LensDataVersion"));
    public static VarHandle LensDataVersion$VH() {
        return libraw_nikon_makernotes_t.LensDataVersion$VH;
    }
    public static int LensDataVersion$get(MemorySegment seg) {
        return (int)libraw_nikon_makernotes_t.LensDataVersion$VH.get(seg);
    }
    public static void LensDataVersion$set( MemorySegment seg, int x) {
        libraw_nikon_makernotes_t.LensDataVersion$VH.set(seg, x);
    }
    public static int LensDataVersion$get(MemorySegment seg, long index) {
        return (int)libraw_nikon_makernotes_t.LensDataVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LensDataVersion$set(MemorySegment seg, long index, int x) {
        libraw_nikon_makernotes_t.LensDataVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlashInfoVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlashInfoVersion"));
    public static VarHandle FlashInfoVersion$VH() {
        return libraw_nikon_makernotes_t.FlashInfoVersion$VH;
    }
    public static int FlashInfoVersion$get(MemorySegment seg) {
        return (int)libraw_nikon_makernotes_t.FlashInfoVersion$VH.get(seg);
    }
    public static void FlashInfoVersion$set( MemorySegment seg, int x) {
        libraw_nikon_makernotes_t.FlashInfoVersion$VH.set(seg, x);
    }
    public static int FlashInfoVersion$get(MemorySegment seg, long index) {
        return (int)libraw_nikon_makernotes_t.FlashInfoVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlashInfoVersion$set(MemorySegment seg, long index, int x) {
        libraw_nikon_makernotes_t.FlashInfoVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ColorBalanceVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ColorBalanceVersion"));
    public static VarHandle ColorBalanceVersion$VH() {
        return libraw_nikon_makernotes_t.ColorBalanceVersion$VH;
    }
    public static int ColorBalanceVersion$get(MemorySegment seg) {
        return (int)libraw_nikon_makernotes_t.ColorBalanceVersion$VH.get(seg);
    }
    public static void ColorBalanceVersion$set( MemorySegment seg, int x) {
        libraw_nikon_makernotes_t.ColorBalanceVersion$VH.set(seg, x);
    }
    public static int ColorBalanceVersion$get(MemorySegment seg, long index) {
        return (int)libraw_nikon_makernotes_t.ColorBalanceVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ColorBalanceVersion$set(MemorySegment seg, long index, int x) {
        libraw_nikon_makernotes_t.ColorBalanceVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle key$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("key"));
    public static VarHandle key$VH() {
        return libraw_nikon_makernotes_t.key$VH;
    }
    public static byte key$get(MemorySegment seg) {
        return (byte)libraw_nikon_makernotes_t.key$VH.get(seg);
    }
    public static void key$set( MemorySegment seg, byte x) {
        libraw_nikon_makernotes_t.key$VH.set(seg, x);
    }
    public static byte key$get(MemorySegment seg, long index) {
        return (byte)libraw_nikon_makernotes_t.key$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void key$set(MemorySegment seg, long index, byte x) {
        libraw_nikon_makernotes_t.key$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment NEFBitDepth$slice(MemorySegment seg) {
        return seg.asSlice(162, 8);
    }
    static final VarHandle HighSpeedCropFormat$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("HighSpeedCropFormat"));
    public static VarHandle HighSpeedCropFormat$VH() {
        return libraw_nikon_makernotes_t.HighSpeedCropFormat$VH;
    }
    public static short HighSpeedCropFormat$get(MemorySegment seg) {
        return (short)libraw_nikon_makernotes_t.HighSpeedCropFormat$VH.get(seg);
    }
    public static void HighSpeedCropFormat$set( MemorySegment seg, short x) {
        libraw_nikon_makernotes_t.HighSpeedCropFormat$VH.set(seg, x);
    }
    public static short HighSpeedCropFormat$get(MemorySegment seg, long index) {
        return (short)libraw_nikon_makernotes_t.HighSpeedCropFormat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void HighSpeedCropFormat$set(MemorySegment seg, long index, short x) {
        libraw_nikon_makernotes_t.HighSpeedCropFormat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment SensorHighSpeedCrop$slice(MemorySegment seg) {
        return seg.asSlice(172, 8);
    }
    static final VarHandle SensorWidth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SensorWidth"));
    public static VarHandle SensorWidth$VH() {
        return libraw_nikon_makernotes_t.SensorWidth$VH;
    }
    public static short SensorWidth$get(MemorySegment seg) {
        return (short)libraw_nikon_makernotes_t.SensorWidth$VH.get(seg);
    }
    public static void SensorWidth$set( MemorySegment seg, short x) {
        libraw_nikon_makernotes_t.SensorWidth$VH.set(seg, x);
    }
    public static short SensorWidth$get(MemorySegment seg, long index) {
        return (short)libraw_nikon_makernotes_t.SensorWidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SensorWidth$set(MemorySegment seg, long index, short x) {
        libraw_nikon_makernotes_t.SensorWidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SensorHeight$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SensorHeight"));
    public static VarHandle SensorHeight$VH() {
        return libraw_nikon_makernotes_t.SensorHeight$VH;
    }
    public static short SensorHeight$get(MemorySegment seg) {
        return (short)libraw_nikon_makernotes_t.SensorHeight$VH.get(seg);
    }
    public static void SensorHeight$set( MemorySegment seg, short x) {
        libraw_nikon_makernotes_t.SensorHeight$VH.set(seg, x);
    }
    public static short SensorHeight$get(MemorySegment seg, long index) {
        return (short)libraw_nikon_makernotes_t.SensorHeight$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SensorHeight$set(MemorySegment seg, long index, short x) {
        libraw_nikon_makernotes_t.SensorHeight$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Active_D_Lighting$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Active_D_Lighting"));
    public static VarHandle Active_D_Lighting$VH() {
        return libraw_nikon_makernotes_t.Active_D_Lighting$VH;
    }
    public static short Active_D_Lighting$get(MemorySegment seg) {
        return (short)libraw_nikon_makernotes_t.Active_D_Lighting$VH.get(seg);
    }
    public static void Active_D_Lighting$set( MemorySegment seg, short x) {
        libraw_nikon_makernotes_t.Active_D_Lighting$VH.set(seg, x);
    }
    public static short Active_D_Lighting$get(MemorySegment seg, long index) {
        return (short)libraw_nikon_makernotes_t.Active_D_Lighting$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Active_D_Lighting$set(MemorySegment seg, long index, short x) {
        libraw_nikon_makernotes_t.Active_D_Lighting$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ShotInfoVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ShotInfoVersion"));
    public static VarHandle ShotInfoVersion$VH() {
        return libraw_nikon_makernotes_t.ShotInfoVersion$VH;
    }
    public static int ShotInfoVersion$get(MemorySegment seg) {
        return (int)libraw_nikon_makernotes_t.ShotInfoVersion$VH.get(seg);
    }
    public static void ShotInfoVersion$set( MemorySegment seg, int x) {
        libraw_nikon_makernotes_t.ShotInfoVersion$VH.set(seg, x);
    }
    public static int ShotInfoVersion$get(MemorySegment seg, long index) {
        return (int)libraw_nikon_makernotes_t.ShotInfoVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ShotInfoVersion$set(MemorySegment seg, long index, int x) {
        libraw_nikon_makernotes_t.ShotInfoVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MakernotesFlip$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MakernotesFlip"));
    public static VarHandle MakernotesFlip$VH() {
        return libraw_nikon_makernotes_t.MakernotesFlip$VH;
    }
    public static short MakernotesFlip$get(MemorySegment seg) {
        return (short)libraw_nikon_makernotes_t.MakernotesFlip$VH.get(seg);
    }
    public static void MakernotesFlip$set( MemorySegment seg, short x) {
        libraw_nikon_makernotes_t.MakernotesFlip$VH.set(seg, x);
    }
    public static short MakernotesFlip$get(MemorySegment seg, long index) {
        return (short)libraw_nikon_makernotes_t.MakernotesFlip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MakernotesFlip$set(MemorySegment seg, long index, short x) {
        libraw_nikon_makernotes_t.MakernotesFlip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RollAngle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RollAngle"));
    public static VarHandle RollAngle$VH() {
        return libraw_nikon_makernotes_t.RollAngle$VH;
    }
    public static double RollAngle$get(MemorySegment seg) {
        return (double)libraw_nikon_makernotes_t.RollAngle$VH.get(seg);
    }
    public static void RollAngle$set( MemorySegment seg, double x) {
        libraw_nikon_makernotes_t.RollAngle$VH.set(seg, x);
    }
    public static double RollAngle$get(MemorySegment seg, long index) {
        return (double)libraw_nikon_makernotes_t.RollAngle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RollAngle$set(MemorySegment seg, long index, double x) {
        libraw_nikon_makernotes_t.RollAngle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle PitchAngle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PitchAngle"));
    public static VarHandle PitchAngle$VH() {
        return libraw_nikon_makernotes_t.PitchAngle$VH;
    }
    public static double PitchAngle$get(MemorySegment seg) {
        return (double)libraw_nikon_makernotes_t.PitchAngle$VH.get(seg);
    }
    public static void PitchAngle$set( MemorySegment seg, double x) {
        libraw_nikon_makernotes_t.PitchAngle$VH.set(seg, x);
    }
    public static double PitchAngle$get(MemorySegment seg, long index) {
        return (double)libraw_nikon_makernotes_t.PitchAngle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PitchAngle$set(MemorySegment seg, long index, double x) {
        libraw_nikon_makernotes_t.PitchAngle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle YawAngle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("YawAngle"));
    public static VarHandle YawAngle$VH() {
        return libraw_nikon_makernotes_t.YawAngle$VH;
    }
    public static double YawAngle$get(MemorySegment seg) {
        return (double)libraw_nikon_makernotes_t.YawAngle$VH.get(seg);
    }
    public static void YawAngle$set( MemorySegment seg, double x) {
        libraw_nikon_makernotes_t.YawAngle$VH.set(seg, x);
    }
    public static double YawAngle$get(MemorySegment seg, long index) {
        return (double)libraw_nikon_makernotes_t.YawAngle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void YawAngle$set(MemorySegment seg, long index, double x) {
        libraw_nikon_makernotes_t.YawAngle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


