// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_thumbnail_t {
 *     enum LibRaw_thumbnail_formats tformat;
 *     unsigned short twidth;
 *     unsigned short theight;
 *     unsigned int tlength;
 *     int tcolors;
 *     char* thumb;
 * };
 * }
 */
public class libraw_thumbnail_t {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("tformat"),
        Constants$root.C_SHORT$LAYOUT.withName("twidth"),
        Constants$root.C_SHORT$LAYOUT.withName("theight"),
        Constants$root.C_LONG$LAYOUT.withName("tlength"),
        Constants$root.C_LONG$LAYOUT.withName("tcolors"),
        Constants$root.C_POINTER$LAYOUT.withName("thumb")
    ).withName("libraw_thumbnail_t");
    public static MemoryLayout $LAYOUT() {
        return libraw_thumbnail_t.$struct$LAYOUT;
    }
    static final VarHandle tformat$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tformat"));
    public static VarHandle tformat$VH() {
        return libraw_thumbnail_t.tformat$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum LibRaw_thumbnail_formats tformat;
     * }
     */
    public static int tformat$get(MemorySegment seg) {
        return (int)libraw_thumbnail_t.tformat$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum LibRaw_thumbnail_formats tformat;
     * }
     */
    public static void tformat$set(MemorySegment seg, int x) {
        libraw_thumbnail_t.tformat$VH.set(seg, x);
    }
    public static int tformat$get(MemorySegment seg, long index) {
        return (int)libraw_thumbnail_t.tformat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tformat$set(MemorySegment seg, long index, int x) {
        libraw_thumbnail_t.tformat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle twidth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("twidth"));
    public static VarHandle twidth$VH() {
        return libraw_thumbnail_t.twidth$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short twidth;
     * }
     */
    public static short twidth$get(MemorySegment seg) {
        return (short)libraw_thumbnail_t.twidth$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short twidth;
     * }
     */
    public static void twidth$set(MemorySegment seg, short x) {
        libraw_thumbnail_t.twidth$VH.set(seg, x);
    }
    public static short twidth$get(MemorySegment seg, long index) {
        return (short)libraw_thumbnail_t.twidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void twidth$set(MemorySegment seg, long index, short x) {
        libraw_thumbnail_t.twidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle theight$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("theight"));
    public static VarHandle theight$VH() {
        return libraw_thumbnail_t.theight$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short theight;
     * }
     */
    public static short theight$get(MemorySegment seg) {
        return (short)libraw_thumbnail_t.theight$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short theight;
     * }
     */
    public static void theight$set(MemorySegment seg, short x) {
        libraw_thumbnail_t.theight$VH.set(seg, x);
    }
    public static short theight$get(MemorySegment seg, long index) {
        return (short)libraw_thumbnail_t.theight$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void theight$set(MemorySegment seg, long index, short x) {
        libraw_thumbnail_t.theight$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tlength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tlength"));
    public static VarHandle tlength$VH() {
        return libraw_thumbnail_t.tlength$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int tlength;
     * }
     */
    public static int tlength$get(MemorySegment seg) {
        return (int)libraw_thumbnail_t.tlength$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int tlength;
     * }
     */
    public static void tlength$set(MemorySegment seg, int x) {
        libraw_thumbnail_t.tlength$VH.set(seg, x);
    }
    public static int tlength$get(MemorySegment seg, long index) {
        return (int)libraw_thumbnail_t.tlength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tlength$set(MemorySegment seg, long index, int x) {
        libraw_thumbnail_t.tlength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tcolors$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tcolors"));
    public static VarHandle tcolors$VH() {
        return libraw_thumbnail_t.tcolors$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int tcolors;
     * }
     */
    public static int tcolors$get(MemorySegment seg) {
        return (int)libraw_thumbnail_t.tcolors$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int tcolors;
     * }
     */
    public static void tcolors$set(MemorySegment seg, int x) {
        libraw_thumbnail_t.tcolors$VH.set(seg, x);
    }
    public static int tcolors$get(MemorySegment seg, long index) {
        return (int)libraw_thumbnail_t.tcolors$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tcolors$set(MemorySegment seg, long index, int x) {
        libraw_thumbnail_t.tcolors$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle thumb$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("thumb"));
    public static VarHandle thumb$VH() {
        return libraw_thumbnail_t.thumb$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* thumb;
     * }
     */
    public static MemorySegment thumb$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)libraw_thumbnail_t.thumb$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* thumb;
     * }
     */
    public static void thumb$set(MemorySegment seg, MemorySegment x) {
        libraw_thumbnail_t.thumb$VH.set(seg, x);
    }
    public static MemorySegment thumb$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)libraw_thumbnail_t.thumb$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void thumb$set(MemorySegment seg, long index, MemorySegment x) {
        libraw_thumbnail_t.thumb$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


