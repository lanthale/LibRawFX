// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_thumbnail_t {
 *     enum LibRaw_thumbnail_formats tformat;
 *     unsigned short twidth;
 *     unsigned short theight;
 *     unsigned int tlength;
 *     int tcolors;
 *     char* thumb;
 * };
 * }
 */
public class libraw_thumbnail_t {

    public static MemoryLayout $LAYOUT() {
        return constants$61.const$1;
    }
    public static VarHandle tformat$VH() {
        return constants$61.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum LibRaw_thumbnail_formats tformat;
     * }
     */
    public static int tformat$get(MemorySegment seg) {
        return (int)constants$61.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum LibRaw_thumbnail_formats tformat;
     * }
     */
    public static void tformat$set(MemorySegment seg, int x) {
        constants$61.const$2.set(seg, x);
    }
    public static int tformat$get(MemorySegment seg, long index) {
        return (int)constants$61.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void tformat$set(MemorySegment seg, long index, int x) {
        constants$61.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle twidth$VH() {
        return constants$61.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short twidth;
     * }
     */
    public static short twidth$get(MemorySegment seg) {
        return (short)constants$61.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short twidth;
     * }
     */
    public static void twidth$set(MemorySegment seg, short x) {
        constants$61.const$3.set(seg, x);
    }
    public static short twidth$get(MemorySegment seg, long index) {
        return (short)constants$61.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void twidth$set(MemorySegment seg, long index, short x) {
        constants$61.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle theight$VH() {
        return constants$61.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short theight;
     * }
     */
    public static short theight$get(MemorySegment seg) {
        return (short)constants$61.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short theight;
     * }
     */
    public static void theight$set(MemorySegment seg, short x) {
        constants$61.const$4.set(seg, x);
    }
    public static short theight$get(MemorySegment seg, long index) {
        return (short)constants$61.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void theight$set(MemorySegment seg, long index, short x) {
        constants$61.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tlength$VH() {
        return constants$61.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int tlength;
     * }
     */
    public static int tlength$get(MemorySegment seg) {
        return (int)constants$61.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int tlength;
     * }
     */
    public static void tlength$set(MemorySegment seg, int x) {
        constants$61.const$5.set(seg, x);
    }
    public static int tlength$get(MemorySegment seg, long index) {
        return (int)constants$61.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void tlength$set(MemorySegment seg, long index, int x) {
        constants$61.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tcolors$VH() {
        return constants$62.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int tcolors;
     * }
     */
    public static int tcolors$get(MemorySegment seg) {
        return (int)constants$62.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int tcolors;
     * }
     */
    public static void tcolors$set(MemorySegment seg, int x) {
        constants$62.const$0.set(seg, x);
    }
    public static int tcolors$get(MemorySegment seg, long index) {
        return (int)constants$62.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void tcolors$set(MemorySegment seg, long index, int x) {
        constants$62.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle thumb$VH() {
        return constants$62.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* thumb;
     * }
     */
    public static MemorySegment thumb$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$62.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* thumb;
     * }
     */
    public static void thumb$set(MemorySegment seg, MemorySegment x) {
        constants$62.const$1.set(seg, x);
    }
    public static MemorySegment thumb$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$62.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void thumb$set(MemorySegment seg, long index, MemorySegment x) {
        constants$62.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


