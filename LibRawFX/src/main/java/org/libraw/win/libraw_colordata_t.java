// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_colordata_t {
 *     unsigned short curve[65536];
 *     unsigned int cblack[4104];
 *     unsigned int black;
 *     unsigned int data_maximum;
 *     unsigned int maximum;
 *     long linear_max[4];
 *     float fmaximum;
 *     float fnorm;
 *     unsigned short  white[8][8];
 *     float cam_mul[4];
 *     float pre_mul[4];
 *     float  cmatrix[3][4];
 *     float  ccm[3][4];
 *     float  rgb_cam[3][4];
 *     float  cam_xyz[4][3];
 *     struct ph1_t phase_one_data;
 *     float flash_used;
 *     float canon_ev;
 *     char model2[64];
 *     char UniqueCameraModel[64];
 *     char LocalizedCameraModel[64];
 *     char ImageUniqueID[64];
 *     char RawDataUniqueID[17];
 *     char OriginalRawFileName[64];
 *     void* profile;
 *     unsigned int profile_length;
 *     unsigned int black_stat[8];
 *     struct libraw_dng_color_t dng_color[2];
 *     struct libraw_dng_levels_t dng_levels;
 *     int  WB_Coeffs[256][4];
 *     float  WBCT_Coeffs[64][5];
 *     int as_shot_wb_applied;
 *     struct libraw_P1_color_t P1_color[2];
 *     unsigned int raw_bps;
 *     int ExifColorSpace;
 * };
 * }
 */
public class libraw_colordata_t {

    public static MemoryLayout $LAYOUT() {
        return constants$59.const$0;
    }
    public static MemorySegment curve$slice(MemorySegment seg) {
        return seg.asSlice(0, 131072);
    }
    public static MemorySegment cblack$slice(MemorySegment seg) {
        return seg.asSlice(131072, 16416);
    }
    public static VarHandle black$VH() {
        return constants$59.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int black;
     * }
     */
    public static int black$get(MemorySegment seg) {
        return (int)constants$59.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int black;
     * }
     */
    public static void black$set(MemorySegment seg, int x) {
        constants$59.const$1.set(seg, x);
    }
    public static int black$get(MemorySegment seg, long index) {
        return (int)constants$59.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void black$set(MemorySegment seg, long index, int x) {
        constants$59.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle data_maximum$VH() {
        return constants$59.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int data_maximum;
     * }
     */
    public static int data_maximum$get(MemorySegment seg) {
        return (int)constants$59.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int data_maximum;
     * }
     */
    public static void data_maximum$set(MemorySegment seg, int x) {
        constants$59.const$2.set(seg, x);
    }
    public static int data_maximum$get(MemorySegment seg, long index) {
        return (int)constants$59.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void data_maximum$set(MemorySegment seg, long index, int x) {
        constants$59.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle maximum$VH() {
        return constants$59.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int maximum;
     * }
     */
    public static int maximum$get(MemorySegment seg) {
        return (int)constants$59.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int maximum;
     * }
     */
    public static void maximum$set(MemorySegment seg, int x) {
        constants$59.const$3.set(seg, x);
    }
    public static int maximum$get(MemorySegment seg, long index) {
        return (int)constants$59.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void maximum$set(MemorySegment seg, long index, int x) {
        constants$59.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment linear_max$slice(MemorySegment seg) {
        return seg.asSlice(147500, 16);
    }
    public static VarHandle fmaximum$VH() {
        return constants$59.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float fmaximum;
     * }
     */
    public static float fmaximum$get(MemorySegment seg) {
        return (float)constants$59.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float fmaximum;
     * }
     */
    public static void fmaximum$set(MemorySegment seg, float x) {
        constants$59.const$4.set(seg, x);
    }
    public static float fmaximum$get(MemorySegment seg, long index) {
        return (float)constants$59.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void fmaximum$set(MemorySegment seg, long index, float x) {
        constants$59.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fnorm$VH() {
        return constants$59.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float fnorm;
     * }
     */
    public static float fnorm$get(MemorySegment seg) {
        return (float)constants$59.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float fnorm;
     * }
     */
    public static void fnorm$set(MemorySegment seg, float x) {
        constants$59.const$5.set(seg, x);
    }
    public static float fnorm$get(MemorySegment seg, long index) {
        return (float)constants$59.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void fnorm$set(MemorySegment seg, long index, float x) {
        constants$59.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment white$slice(MemorySegment seg) {
        return seg.asSlice(147524, 128);
    }
    public static MemorySegment cam_mul$slice(MemorySegment seg) {
        return seg.asSlice(147652, 16);
    }
    public static MemorySegment pre_mul$slice(MemorySegment seg) {
        return seg.asSlice(147668, 16);
    }
    public static MemorySegment cmatrix$slice(MemorySegment seg) {
        return seg.asSlice(147684, 48);
    }
    public static MemorySegment ccm$slice(MemorySegment seg) {
        return seg.asSlice(147732, 48);
    }
    public static MemorySegment rgb_cam$slice(MemorySegment seg) {
        return seg.asSlice(147780, 48);
    }
    public static MemorySegment cam_xyz$slice(MemorySegment seg) {
        return seg.asSlice(147828, 48);
    }
    public static MemorySegment phase_one_data$slice(MemorySegment seg) {
        return seg.asSlice(147876, 36);
    }
    public static VarHandle flash_used$VH() {
        return constants$60.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float flash_used;
     * }
     */
    public static float flash_used$get(MemorySegment seg) {
        return (float)constants$60.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float flash_used;
     * }
     */
    public static void flash_used$set(MemorySegment seg, float x) {
        constants$60.const$0.set(seg, x);
    }
    public static float flash_used$get(MemorySegment seg, long index) {
        return (float)constants$60.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void flash_used$set(MemorySegment seg, long index, float x) {
        constants$60.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle canon_ev$VH() {
        return constants$60.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float canon_ev;
     * }
     */
    public static float canon_ev$get(MemorySegment seg) {
        return (float)constants$60.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float canon_ev;
     * }
     */
    public static void canon_ev$set(MemorySegment seg, float x) {
        constants$60.const$1.set(seg, x);
    }
    public static float canon_ev$get(MemorySegment seg, long index) {
        return (float)constants$60.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void canon_ev$set(MemorySegment seg, long index, float x) {
        constants$60.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment model2$slice(MemorySegment seg) {
        return seg.asSlice(147920, 64);
    }
    public static MemorySegment UniqueCameraModel$slice(MemorySegment seg) {
        return seg.asSlice(147984, 64);
    }
    public static MemorySegment LocalizedCameraModel$slice(MemorySegment seg) {
        return seg.asSlice(148048, 64);
    }
    public static MemorySegment ImageUniqueID$slice(MemorySegment seg) {
        return seg.asSlice(148112, 64);
    }
    public static MemorySegment RawDataUniqueID$slice(MemorySegment seg) {
        return seg.asSlice(148176, 17);
    }
    public static MemorySegment OriginalRawFileName$slice(MemorySegment seg) {
        return seg.asSlice(148193, 64);
    }
    public static VarHandle profile$VH() {
        return constants$60.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* profile;
     * }
     */
    public static MemorySegment profile$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$60.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* profile;
     * }
     */
    public static void profile$set(MemorySegment seg, MemorySegment x) {
        constants$60.const$2.set(seg, x);
    }
    public static MemorySegment profile$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$60.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void profile$set(MemorySegment seg, long index, MemorySegment x) {
        constants$60.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle profile_length$VH() {
        return constants$60.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int profile_length;
     * }
     */
    public static int profile_length$get(MemorySegment seg) {
        return (int)constants$60.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int profile_length;
     * }
     */
    public static void profile_length$set(MemorySegment seg, int x) {
        constants$60.const$3.set(seg, x);
    }
    public static int profile_length$get(MemorySegment seg, long index) {
        return (int)constants$60.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void profile_length$set(MemorySegment seg, long index, int x) {
        constants$60.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment black_stat$slice(MemorySegment seg) {
        return seg.asSlice(148276, 32);
    }
    public static MemorySegment dng_color$slice(MemorySegment seg) {
        return seg.asSlice(148308, 336);
    }
    public static MemorySegment dng_levels$slice(MemorySegment seg) {
        return seg.asSlice(148644, 32928);
    }
    public static MemorySegment WB_Coeffs$slice(MemorySegment seg) {
        return seg.asSlice(181572, 4096);
    }
    public static MemorySegment WBCT_Coeffs$slice(MemorySegment seg) {
        return seg.asSlice(185668, 1280);
    }
    public static VarHandle as_shot_wb_applied$VH() {
        return constants$60.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int as_shot_wb_applied;
     * }
     */
    public static int as_shot_wb_applied$get(MemorySegment seg) {
        return (int)constants$60.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int as_shot_wb_applied;
     * }
     */
    public static void as_shot_wb_applied$set(MemorySegment seg, int x) {
        constants$60.const$4.set(seg, x);
    }
    public static int as_shot_wb_applied$get(MemorySegment seg, long index) {
        return (int)constants$60.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void as_shot_wb_applied$set(MemorySegment seg, long index, int x) {
        constants$60.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment P1_color$slice(MemorySegment seg) {
        return seg.asSlice(186952, 72);
    }
    public static VarHandle raw_bps$VH() {
        return constants$60.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int raw_bps;
     * }
     */
    public static int raw_bps$get(MemorySegment seg) {
        return (int)constants$60.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int raw_bps;
     * }
     */
    public static void raw_bps$set(MemorySegment seg, int x) {
        constants$60.const$5.set(seg, x);
    }
    public static int raw_bps$get(MemorySegment seg, long index) {
        return (int)constants$60.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void raw_bps$set(MemorySegment seg, long index, int x) {
        constants$60.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ExifColorSpace$VH() {
        return constants$61.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int ExifColorSpace;
     * }
     */
    public static int ExifColorSpace$get(MemorySegment seg) {
        return (int)constants$61.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int ExifColorSpace;
     * }
     */
    public static void ExifColorSpace$set(MemorySegment seg, int x) {
        constants$61.const$0.set(seg, x);
    }
    public static int ExifColorSpace$get(MemorySegment seg, long index) {
        return (int)constants$61.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ExifColorSpace$set(MemorySegment seg, long index, int x) {
        constants$61.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


