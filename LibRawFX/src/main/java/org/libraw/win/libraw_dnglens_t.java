// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_dnglens_t {
 *     float MinFocal;
 *     float MaxFocal;
 *     float MaxAp4MinFocal;
 *     float MaxAp4MaxFocal;
 * };
 * }
 */
public class libraw_dnglens_t {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_FLOAT$LAYOUT.withName("MinFocal"),
        Constants$root.C_FLOAT$LAYOUT.withName("MaxFocal"),
        Constants$root.C_FLOAT$LAYOUT.withName("MaxAp4MinFocal"),
        Constants$root.C_FLOAT$LAYOUT.withName("MaxAp4MaxFocal")
    ).withName("libraw_dnglens_t");
    public static MemoryLayout $LAYOUT() {
        return libraw_dnglens_t.$struct$LAYOUT;
    }
    static final VarHandle MinFocal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MinFocal"));
    public static VarHandle MinFocal$VH() {
        return libraw_dnglens_t.MinFocal$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float MinFocal;
     * }
     */
    public static float MinFocal$get(MemorySegment seg) {
        return (float)libraw_dnglens_t.MinFocal$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float MinFocal;
     * }
     */
    public static void MinFocal$set(MemorySegment seg, float x) {
        libraw_dnglens_t.MinFocal$VH.set(seg, x);
    }
    public static float MinFocal$get(MemorySegment seg, long index) {
        return (float)libraw_dnglens_t.MinFocal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MinFocal$set(MemorySegment seg, long index, float x) {
        libraw_dnglens_t.MinFocal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaxFocal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaxFocal"));
    public static VarHandle MaxFocal$VH() {
        return libraw_dnglens_t.MaxFocal$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float MaxFocal;
     * }
     */
    public static float MaxFocal$get(MemorySegment seg) {
        return (float)libraw_dnglens_t.MaxFocal$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float MaxFocal;
     * }
     */
    public static void MaxFocal$set(MemorySegment seg, float x) {
        libraw_dnglens_t.MaxFocal$VH.set(seg, x);
    }
    public static float MaxFocal$get(MemorySegment seg, long index) {
        return (float)libraw_dnglens_t.MaxFocal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxFocal$set(MemorySegment seg, long index, float x) {
        libraw_dnglens_t.MaxFocal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaxAp4MinFocal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaxAp4MinFocal"));
    public static VarHandle MaxAp4MinFocal$VH() {
        return libraw_dnglens_t.MaxAp4MinFocal$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float MaxAp4MinFocal;
     * }
     */
    public static float MaxAp4MinFocal$get(MemorySegment seg) {
        return (float)libraw_dnglens_t.MaxAp4MinFocal$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float MaxAp4MinFocal;
     * }
     */
    public static void MaxAp4MinFocal$set(MemorySegment seg, float x) {
        libraw_dnglens_t.MaxAp4MinFocal$VH.set(seg, x);
    }
    public static float MaxAp4MinFocal$get(MemorySegment seg, long index) {
        return (float)libraw_dnglens_t.MaxAp4MinFocal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxAp4MinFocal$set(MemorySegment seg, long index, float x) {
        libraw_dnglens_t.MaxAp4MinFocal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaxAp4MaxFocal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaxAp4MaxFocal"));
    public static VarHandle MaxAp4MaxFocal$VH() {
        return libraw_dnglens_t.MaxAp4MaxFocal$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float MaxAp4MaxFocal;
     * }
     */
    public static float MaxAp4MaxFocal$get(MemorySegment seg) {
        return (float)libraw_dnglens_t.MaxAp4MaxFocal$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float MaxAp4MaxFocal;
     * }
     */
    public static void MaxAp4MaxFocal$set(MemorySegment seg, float x) {
        libraw_dnglens_t.MaxAp4MaxFocal$VH.set(seg, x);
    }
    public static float MaxAp4MaxFocal$get(MemorySegment seg, long index) {
        return (float)libraw_dnglens_t.MaxAp4MaxFocal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxAp4MaxFocal$set(MemorySegment seg, long index, float x) {
        libraw_dnglens_t.MaxAp4MaxFocal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


