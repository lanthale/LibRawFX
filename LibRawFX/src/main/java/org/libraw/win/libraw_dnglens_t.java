// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class libraw_dnglens_t {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_FLOAT.withName("MinFocal"),
        C_FLOAT.withName("MaxFocal"),
        C_FLOAT.withName("MaxAp4MinFocal"),
        C_FLOAT.withName("MaxAp4MaxFocal")
    );
    public static MemoryLayout $LAYOUT() {
        return libraw_dnglens_t.$struct$LAYOUT;
    }
    static final VarHandle MinFocal$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("MinFocal"));
    public static VarHandle MinFocal$VH() {
        return libraw_dnglens_t.MinFocal$VH;
    }
    public static float MinFocal$get(MemorySegment seg) {
        return (float)libraw_dnglens_t.MinFocal$VH.get(seg);
    }
    public static void MinFocal$set( MemorySegment seg, float x) {
        libraw_dnglens_t.MinFocal$VH.set(seg, x);
    }
    public static float MinFocal$get(MemorySegment seg, long index) {
        return (float)libraw_dnglens_t.MinFocal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MinFocal$set(MemorySegment seg, long index, float x) {
        libraw_dnglens_t.MinFocal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaxFocal$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("MaxFocal"));
    public static VarHandle MaxFocal$VH() {
        return libraw_dnglens_t.MaxFocal$VH;
    }
    public static float MaxFocal$get(MemorySegment seg) {
        return (float)libraw_dnglens_t.MaxFocal$VH.get(seg);
    }
    public static void MaxFocal$set( MemorySegment seg, float x) {
        libraw_dnglens_t.MaxFocal$VH.set(seg, x);
    }
    public static float MaxFocal$get(MemorySegment seg, long index) {
        return (float)libraw_dnglens_t.MaxFocal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxFocal$set(MemorySegment seg, long index, float x) {
        libraw_dnglens_t.MaxFocal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaxAp4MinFocal$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("MaxAp4MinFocal"));
    public static VarHandle MaxAp4MinFocal$VH() {
        return libraw_dnglens_t.MaxAp4MinFocal$VH;
    }
    public static float MaxAp4MinFocal$get(MemorySegment seg) {
        return (float)libraw_dnglens_t.MaxAp4MinFocal$VH.get(seg);
    }
    public static void MaxAp4MinFocal$set( MemorySegment seg, float x) {
        libraw_dnglens_t.MaxAp4MinFocal$VH.set(seg, x);
    }
    public static float MaxAp4MinFocal$get(MemorySegment seg, long index) {
        return (float)libraw_dnglens_t.MaxAp4MinFocal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxAp4MinFocal$set(MemorySegment seg, long index, float x) {
        libraw_dnglens_t.MaxAp4MinFocal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaxAp4MaxFocal$VH = $struct$LAYOUT.varHandle(float.class, MemoryLayout.PathElement.groupElement("MaxAp4MaxFocal"));
    public static VarHandle MaxAp4MaxFocal$VH() {
        return libraw_dnglens_t.MaxAp4MaxFocal$VH;
    }
    public static float MaxAp4MaxFocal$get(MemorySegment seg) {
        return (float)libraw_dnglens_t.MaxAp4MaxFocal$VH.get(seg);
    }
    public static void MaxAp4MaxFocal$set( MemorySegment seg, float x) {
        libraw_dnglens_t.MaxAp4MaxFocal$VH.set(seg, x);
    }
    public static float MaxAp4MaxFocal$get(MemorySegment seg, long index) {
        return (float)libraw_dnglens_t.MaxAp4MaxFocal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxAp4MaxFocal$set(MemorySegment seg, long index, float x) {
        libraw_dnglens_t.MaxAp4MaxFocal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


