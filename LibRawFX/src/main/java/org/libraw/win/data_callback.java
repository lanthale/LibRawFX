// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface data_callback {

    void apply(java.lang.foreign.MemoryAddress data, java.lang.foreign.MemoryAddress file, int offset);
    static MemorySegment allocate(data_callback fi, MemorySession session) {
        return RuntimeHelper.upcallStub(data_callback.class, fi, constants$0.data_callback$FUNC, session);
    }
    static data_callback ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _data, java.lang.foreign.MemoryAddress _file, int _offset) -> {
            try {
                constants$1.data_callback$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_data, (java.lang.foreign.Addressable)_file, _offset);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


