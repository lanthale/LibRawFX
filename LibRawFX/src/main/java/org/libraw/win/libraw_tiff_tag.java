// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_tiff_tag {
 *     unsigned short tag;
 *     unsigned short type;
 *     int count;
 *     union  val;
 * };
 * }
 */
public class libraw_tiff_tag {

    public static MemoryLayout $LAYOUT() {
        return constants$113.const$0;
    }
    public static VarHandle tag$VH() {
        return constants$113.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short tag;
     * }
     */
    public static short tag$get(MemorySegment seg) {
        return (short)constants$113.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short tag;
     * }
     */
    public static void tag$set(MemorySegment seg, short x) {
        constants$113.const$1.set(seg, x);
    }
    public static short tag$get(MemorySegment seg, long index) {
        return (short)constants$113.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void tag$set(MemorySegment seg, long index, short x) {
        constants$113.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle type$VH() {
        return constants$113.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short type;
     * }
     */
    public static short type$get(MemorySegment seg) {
        return (short)constants$113.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short type;
     * }
     */
    public static void type$set(MemorySegment seg, short x) {
        constants$113.const$2.set(seg, x);
    }
    public static short type$get(MemorySegment seg, long index) {
        return (short)constants$113.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, short x) {
        constants$113.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle count$VH() {
        return constants$113.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int count;
     * }
     */
    public static int count$get(MemorySegment seg) {
        return (int)constants$113.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int count;
     * }
     */
    public static void count$set(MemorySegment seg, int x) {
        constants$113.const$3.set(seg, x);
    }
    public static int count$get(MemorySegment seg, long index) {
        return (int)constants$113.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void count$set(MemorySegment seg, long index, int x) {
        constants$113.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     char c[4];
     *     short s[2];
     *     int i;
     * };
     * }
     */
    public static final class val {

        // Suppresses default constructor, ensuring non-instantiability.
        private val() {}
        public static MemoryLayout $LAYOUT() {
            return constants$113.const$4;
        }
        public static MemorySegment c$slice(MemorySegment seg) {
            return seg.asSlice(0, 4);
        }
        public static MemorySegment s$slice(MemorySegment seg) {
            return seg.asSlice(0, 4);
        }
        public static VarHandle i$VH() {
            return constants$113.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * int i;
         * }
         */
        public static int i$get(MemorySegment seg) {
            return (int)constants$113.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * int i;
         * }
         */
        public static void i$set(MemorySegment seg, int x) {
            constants$113.const$5.set(seg, x);
        }
        public static int i$get(MemorySegment seg, long index) {
            return (int)constants$113.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void i$set(MemorySegment seg, long index, int x) {
            constants$113.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment val$slice(MemorySegment seg) {
        return seg.asSlice(8, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


