// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_raw_unpack_params_t {
 *     int use_rawspeed;
 *     int use_dngsdk;
 *     unsigned int options;
 *     unsigned int shot_select;
 *     unsigned int specials;
 *     unsigned int max_raw_memory_mb;
 *     int sony_arw2_posterization_thr;
 *     float coolscan_nef_gamma;
 *     char p4shot_order[5];
 *     char** custom_camera_strings;
 * };
 * }
 */
public class libraw_raw_unpack_params_t {

    public static MemoryLayout $LAYOUT() {
        return constants$74.const$5;
    }
    public static VarHandle use_rawspeed$VH() {
        return constants$75.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int use_rawspeed;
     * }
     */
    public static int use_rawspeed$get(MemorySegment seg) {
        return (int)constants$75.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int use_rawspeed;
     * }
     */
    public static void use_rawspeed$set(MemorySegment seg, int x) {
        constants$75.const$0.set(seg, x);
    }
    public static int use_rawspeed$get(MemorySegment seg, long index) {
        return (int)constants$75.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void use_rawspeed$set(MemorySegment seg, long index, int x) {
        constants$75.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle use_dngsdk$VH() {
        return constants$75.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int use_dngsdk;
     * }
     */
    public static int use_dngsdk$get(MemorySegment seg) {
        return (int)constants$75.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int use_dngsdk;
     * }
     */
    public static void use_dngsdk$set(MemorySegment seg, int x) {
        constants$75.const$1.set(seg, x);
    }
    public static int use_dngsdk$get(MemorySegment seg, long index) {
        return (int)constants$75.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void use_dngsdk$set(MemorySegment seg, long index, int x) {
        constants$75.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle options$VH() {
        return constants$75.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int options;
     * }
     */
    public static int options$get(MemorySegment seg) {
        return (int)constants$75.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int options;
     * }
     */
    public static void options$set(MemorySegment seg, int x) {
        constants$75.const$2.set(seg, x);
    }
    public static int options$get(MemorySegment seg, long index) {
        return (int)constants$75.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void options$set(MemorySegment seg, long index, int x) {
        constants$75.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle shot_select$VH() {
        return constants$75.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int shot_select;
     * }
     */
    public static int shot_select$get(MemorySegment seg) {
        return (int)constants$75.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int shot_select;
     * }
     */
    public static void shot_select$set(MemorySegment seg, int x) {
        constants$75.const$3.set(seg, x);
    }
    public static int shot_select$get(MemorySegment seg, long index) {
        return (int)constants$75.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void shot_select$set(MemorySegment seg, long index, int x) {
        constants$75.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle specials$VH() {
        return constants$75.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int specials;
     * }
     */
    public static int specials$get(MemorySegment seg) {
        return (int)constants$75.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int specials;
     * }
     */
    public static void specials$set(MemorySegment seg, int x) {
        constants$75.const$4.set(seg, x);
    }
    public static int specials$get(MemorySegment seg, long index) {
        return (int)constants$75.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void specials$set(MemorySegment seg, long index, int x) {
        constants$75.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_raw_memory_mb$VH() {
        return constants$75.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int max_raw_memory_mb;
     * }
     */
    public static int max_raw_memory_mb$get(MemorySegment seg) {
        return (int)constants$75.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int max_raw_memory_mb;
     * }
     */
    public static void max_raw_memory_mb$set(MemorySegment seg, int x) {
        constants$75.const$5.set(seg, x);
    }
    public static int max_raw_memory_mb$get(MemorySegment seg, long index) {
        return (int)constants$75.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void max_raw_memory_mb$set(MemorySegment seg, long index, int x) {
        constants$75.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sony_arw2_posterization_thr$VH() {
        return constants$76.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int sony_arw2_posterization_thr;
     * }
     */
    public static int sony_arw2_posterization_thr$get(MemorySegment seg) {
        return (int)constants$76.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int sony_arw2_posterization_thr;
     * }
     */
    public static void sony_arw2_posterization_thr$set(MemorySegment seg, int x) {
        constants$76.const$0.set(seg, x);
    }
    public static int sony_arw2_posterization_thr$get(MemorySegment seg, long index) {
        return (int)constants$76.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void sony_arw2_posterization_thr$set(MemorySegment seg, long index, int x) {
        constants$76.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle coolscan_nef_gamma$VH() {
        return constants$76.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float coolscan_nef_gamma;
     * }
     */
    public static float coolscan_nef_gamma$get(MemorySegment seg) {
        return (float)constants$76.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float coolscan_nef_gamma;
     * }
     */
    public static void coolscan_nef_gamma$set(MemorySegment seg, float x) {
        constants$76.const$1.set(seg, x);
    }
    public static float coolscan_nef_gamma$get(MemorySegment seg, long index) {
        return (float)constants$76.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void coolscan_nef_gamma$set(MemorySegment seg, long index, float x) {
        constants$76.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment p4shot_order$slice(MemorySegment seg) {
        return seg.asSlice(32, 5);
    }
    public static VarHandle custom_camera_strings$VH() {
        return constants$76.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char** custom_camera_strings;
     * }
     */
    public static MemorySegment custom_camera_strings$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$76.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char** custom_camera_strings;
     * }
     */
    public static void custom_camera_strings$set(MemorySegment seg, MemorySegment x) {
        constants$76.const$2.set(seg, x);
    }
    public static MemorySegment custom_camera_strings$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$76.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void custom_camera_strings$set(MemorySegment seg, long index, MemorySegment x) {
        constants$76.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


