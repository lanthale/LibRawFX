// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class unpacker_data_t {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_SHORT.withName("order"),
        MemoryLayout.sequenceLayout(4, C_SHORT).withName("sraw_mul"),
        MemoryLayout.sequenceLayout(3, C_SHORT).withName("cr2_slice"),
        C_INT.withName("kodak_cbpp"),
        MemoryLayout.paddingLayout(32),
        C_LONG_LONG.withName("strip_offset"),
        C_LONG_LONG.withName("data_offset"),
        C_LONG_LONG.withName("meta_offset"),
        C_LONG_LONG.withName("exif_offset"),
        C_LONG_LONG.withName("ifd0_offset"),
        C_INT.withName("data_size"),
        C_INT.withName("meta_length"),
        C_INT.withName("cr3_exif_length"),
        C_INT.withName("cr3_ifd0_length"),
        C_INT.withName("thumb_misc"),
        C_INT.withName("fuji_layout"),
        C_INT.withName("tiff_samples"),
        C_INT.withName("tiff_bps"),
        C_INT.withName("tiff_compress"),
        C_INT.withName("tiff_sampleformat"),
        C_INT.withName("zero_after_ff"),
        C_INT.withName("tile_width"),
        C_INT.withName("tile_length"),
        C_INT.withName("load_flags"),
        C_INT.withName("data_error"),
        C_INT.withName("hasselblad_parser_flag"),
        C_LONG_LONG.withName("posRAFData"),
        C_INT.withName("lenRAFData"),
        C_INT.withName("fuji_total_lines"),
        C_INT.withName("fuji_total_blocks"),
        C_INT.withName("fuji_block_width"),
        C_INT.withName("fuji_bits"),
        C_INT.withName("fuji_raw_type"),
        C_INT.withName("fuji_lossless"),
        C_INT.withName("pana_encoding"),
        C_INT.withName("pana_bpp"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.sequenceLayout(16, MemoryLayout.structLayout(
            C_INT.withName("version"),
            C_INT.withName("f_width"),
            C_INT.withName("f_height"),
            C_INT.withName("tileWidth"),
            C_INT.withName("tileHeight"),
            C_INT.withName("nBits"),
            C_INT.withName("nPlanes"),
            C_INT.withName("cfaLayout"),
            C_INT.withName("encType"),
            C_INT.withName("imageLevels"),
            C_INT.withName("hasTileCols"),
            C_INT.withName("hasTileRows"),
            C_INT.withName("mdatHdrSize"),
            C_INT.withName("MediaSize"),
            C_LONG_LONG.withName("MediaOffset"),
            C_INT.withName("MediaType"),
            MemoryLayout.paddingLayout(32)
        )).withName("crx_header"),
        C_INT.withName("crx_track_selected"),
        C_SHORT.withName("CR3_CTMDtag"),
        C_SHORT.withName("CR3_Version"),
        C_INT.withName("CM_found"),
        C_INT.withName("is_NikonTransfer"),
        C_INT.withName("is_Olympus"),
        C_INT.withName("OlympusDNG_SubDirOffsetValid"),
        C_INT.withName("is_Sony"),
        C_INT.withName("is_pana_raw"),
        C_INT.withName("is_PentaxRicohMakernotes"),
        MemoryLayout.sequenceLayout(20, C_INT).withName("dng_frames"),
        C_SHORT.withName("raw_stride"),
        MemoryLayout.paddingLayout(16)
    );
    public static MemoryLayout $LAYOUT() {
        return unpacker_data_t.$struct$LAYOUT;
    }
    static final VarHandle order$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("order"));
    public static VarHandle order$VH() {
        return unpacker_data_t.order$VH;
    }
    public static short order$get(MemorySegment seg) {
        return (short)unpacker_data_t.order$VH.get(seg);
    }
    public static void order$set( MemorySegment seg, short x) {
        unpacker_data_t.order$VH.set(seg, x);
    }
    public static short order$get(MemorySegment seg, long index) {
        return (short)unpacker_data_t.order$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void order$set(MemorySegment seg, long index, short x) {
        unpacker_data_t.order$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment sraw_mul$slice(MemorySegment seg) {
        return seg.asSlice(2, 8);
    }
    public static MemorySegment cr2_slice$slice(MemorySegment seg) {
        return seg.asSlice(10, 6);
    }
    static final VarHandle kodak_cbpp$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("kodak_cbpp"));
    public static VarHandle kodak_cbpp$VH() {
        return unpacker_data_t.kodak_cbpp$VH;
    }
    public static int kodak_cbpp$get(MemorySegment seg) {
        return (int)unpacker_data_t.kodak_cbpp$VH.get(seg);
    }
    public static void kodak_cbpp$set( MemorySegment seg, int x) {
        unpacker_data_t.kodak_cbpp$VH.set(seg, x);
    }
    public static int kodak_cbpp$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.kodak_cbpp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void kodak_cbpp$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.kodak_cbpp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle strip_offset$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("strip_offset"));
    public static VarHandle strip_offset$VH() {
        return unpacker_data_t.strip_offset$VH;
    }
    public static long strip_offset$get(MemorySegment seg) {
        return (long)unpacker_data_t.strip_offset$VH.get(seg);
    }
    public static void strip_offset$set( MemorySegment seg, long x) {
        unpacker_data_t.strip_offset$VH.set(seg, x);
    }
    public static long strip_offset$get(MemorySegment seg, long index) {
        return (long)unpacker_data_t.strip_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void strip_offset$set(MemorySegment seg, long index, long x) {
        unpacker_data_t.strip_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle data_offset$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("data_offset"));
    public static VarHandle data_offset$VH() {
        return unpacker_data_t.data_offset$VH;
    }
    public static long data_offset$get(MemorySegment seg) {
        return (long)unpacker_data_t.data_offset$VH.get(seg);
    }
    public static void data_offset$set( MemorySegment seg, long x) {
        unpacker_data_t.data_offset$VH.set(seg, x);
    }
    public static long data_offset$get(MemorySegment seg, long index) {
        return (long)unpacker_data_t.data_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data_offset$set(MemorySegment seg, long index, long x) {
        unpacker_data_t.data_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle meta_offset$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("meta_offset"));
    public static VarHandle meta_offset$VH() {
        return unpacker_data_t.meta_offset$VH;
    }
    public static long meta_offset$get(MemorySegment seg) {
        return (long)unpacker_data_t.meta_offset$VH.get(seg);
    }
    public static void meta_offset$set( MemorySegment seg, long x) {
        unpacker_data_t.meta_offset$VH.set(seg, x);
    }
    public static long meta_offset$get(MemorySegment seg, long index) {
        return (long)unpacker_data_t.meta_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void meta_offset$set(MemorySegment seg, long index, long x) {
        unpacker_data_t.meta_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle exif_offset$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("exif_offset"));
    public static VarHandle exif_offset$VH() {
        return unpacker_data_t.exif_offset$VH;
    }
    public static long exif_offset$get(MemorySegment seg) {
        return (long)unpacker_data_t.exif_offset$VH.get(seg);
    }
    public static void exif_offset$set( MemorySegment seg, long x) {
        unpacker_data_t.exif_offset$VH.set(seg, x);
    }
    public static long exif_offset$get(MemorySegment seg, long index) {
        return (long)unpacker_data_t.exif_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void exif_offset$set(MemorySegment seg, long index, long x) {
        unpacker_data_t.exif_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ifd0_offset$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ifd0_offset"));
    public static VarHandle ifd0_offset$VH() {
        return unpacker_data_t.ifd0_offset$VH;
    }
    public static long ifd0_offset$get(MemorySegment seg) {
        return (long)unpacker_data_t.ifd0_offset$VH.get(seg);
    }
    public static void ifd0_offset$set( MemorySegment seg, long x) {
        unpacker_data_t.ifd0_offset$VH.set(seg, x);
    }
    public static long ifd0_offset$get(MemorySegment seg, long index) {
        return (long)unpacker_data_t.ifd0_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ifd0_offset$set(MemorySegment seg, long index, long x) {
        unpacker_data_t.ifd0_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle data_size$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("data_size"));
    public static VarHandle data_size$VH() {
        return unpacker_data_t.data_size$VH;
    }
    public static int data_size$get(MemorySegment seg) {
        return (int)unpacker_data_t.data_size$VH.get(seg);
    }
    public static void data_size$set( MemorySegment seg, int x) {
        unpacker_data_t.data_size$VH.set(seg, x);
    }
    public static int data_size$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.data_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data_size$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.data_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle meta_length$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("meta_length"));
    public static VarHandle meta_length$VH() {
        return unpacker_data_t.meta_length$VH;
    }
    public static int meta_length$get(MemorySegment seg) {
        return (int)unpacker_data_t.meta_length$VH.get(seg);
    }
    public static void meta_length$set( MemorySegment seg, int x) {
        unpacker_data_t.meta_length$VH.set(seg, x);
    }
    public static int meta_length$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.meta_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void meta_length$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.meta_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cr3_exif_length$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cr3_exif_length"));
    public static VarHandle cr3_exif_length$VH() {
        return unpacker_data_t.cr3_exif_length$VH;
    }
    public static int cr3_exif_length$get(MemorySegment seg) {
        return (int)unpacker_data_t.cr3_exif_length$VH.get(seg);
    }
    public static void cr3_exif_length$set( MemorySegment seg, int x) {
        unpacker_data_t.cr3_exif_length$VH.set(seg, x);
    }
    public static int cr3_exif_length$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.cr3_exif_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cr3_exif_length$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.cr3_exif_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cr3_ifd0_length$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cr3_ifd0_length"));
    public static VarHandle cr3_ifd0_length$VH() {
        return unpacker_data_t.cr3_ifd0_length$VH;
    }
    public static int cr3_ifd0_length$get(MemorySegment seg) {
        return (int)unpacker_data_t.cr3_ifd0_length$VH.get(seg);
    }
    public static void cr3_ifd0_length$set( MemorySegment seg, int x) {
        unpacker_data_t.cr3_ifd0_length$VH.set(seg, x);
    }
    public static int cr3_ifd0_length$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.cr3_ifd0_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cr3_ifd0_length$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.cr3_ifd0_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle thumb_misc$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("thumb_misc"));
    public static VarHandle thumb_misc$VH() {
        return unpacker_data_t.thumb_misc$VH;
    }
    public static int thumb_misc$get(MemorySegment seg) {
        return (int)unpacker_data_t.thumb_misc$VH.get(seg);
    }
    public static void thumb_misc$set( MemorySegment seg, int x) {
        unpacker_data_t.thumb_misc$VH.set(seg, x);
    }
    public static int thumb_misc$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.thumb_misc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void thumb_misc$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.thumb_misc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fuji_layout$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("fuji_layout"));
    public static VarHandle fuji_layout$VH() {
        return unpacker_data_t.fuji_layout$VH;
    }
    public static int fuji_layout$get(MemorySegment seg) {
        return (int)unpacker_data_t.fuji_layout$VH.get(seg);
    }
    public static void fuji_layout$set( MemorySegment seg, int x) {
        unpacker_data_t.fuji_layout$VH.set(seg, x);
    }
    public static int fuji_layout$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.fuji_layout$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fuji_layout$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.fuji_layout$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tiff_samples$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("tiff_samples"));
    public static VarHandle tiff_samples$VH() {
        return unpacker_data_t.tiff_samples$VH;
    }
    public static int tiff_samples$get(MemorySegment seg) {
        return (int)unpacker_data_t.tiff_samples$VH.get(seg);
    }
    public static void tiff_samples$set( MemorySegment seg, int x) {
        unpacker_data_t.tiff_samples$VH.set(seg, x);
    }
    public static int tiff_samples$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.tiff_samples$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tiff_samples$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.tiff_samples$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tiff_bps$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("tiff_bps"));
    public static VarHandle tiff_bps$VH() {
        return unpacker_data_t.tiff_bps$VH;
    }
    public static int tiff_bps$get(MemorySegment seg) {
        return (int)unpacker_data_t.tiff_bps$VH.get(seg);
    }
    public static void tiff_bps$set( MemorySegment seg, int x) {
        unpacker_data_t.tiff_bps$VH.set(seg, x);
    }
    public static int tiff_bps$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.tiff_bps$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tiff_bps$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.tiff_bps$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tiff_compress$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("tiff_compress"));
    public static VarHandle tiff_compress$VH() {
        return unpacker_data_t.tiff_compress$VH;
    }
    public static int tiff_compress$get(MemorySegment seg) {
        return (int)unpacker_data_t.tiff_compress$VH.get(seg);
    }
    public static void tiff_compress$set( MemorySegment seg, int x) {
        unpacker_data_t.tiff_compress$VH.set(seg, x);
    }
    public static int tiff_compress$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.tiff_compress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tiff_compress$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.tiff_compress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tiff_sampleformat$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("tiff_sampleformat"));
    public static VarHandle tiff_sampleformat$VH() {
        return unpacker_data_t.tiff_sampleformat$VH;
    }
    public static int tiff_sampleformat$get(MemorySegment seg) {
        return (int)unpacker_data_t.tiff_sampleformat$VH.get(seg);
    }
    public static void tiff_sampleformat$set( MemorySegment seg, int x) {
        unpacker_data_t.tiff_sampleformat$VH.set(seg, x);
    }
    public static int tiff_sampleformat$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.tiff_sampleformat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tiff_sampleformat$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.tiff_sampleformat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle zero_after_ff$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("zero_after_ff"));
    public static VarHandle zero_after_ff$VH() {
        return unpacker_data_t.zero_after_ff$VH;
    }
    public static int zero_after_ff$get(MemorySegment seg) {
        return (int)unpacker_data_t.zero_after_ff$VH.get(seg);
    }
    public static void zero_after_ff$set( MemorySegment seg, int x) {
        unpacker_data_t.zero_after_ff$VH.set(seg, x);
    }
    public static int zero_after_ff$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.zero_after_ff$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void zero_after_ff$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.zero_after_ff$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tile_width$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("tile_width"));
    public static VarHandle tile_width$VH() {
        return unpacker_data_t.tile_width$VH;
    }
    public static int tile_width$get(MemorySegment seg) {
        return (int)unpacker_data_t.tile_width$VH.get(seg);
    }
    public static void tile_width$set( MemorySegment seg, int x) {
        unpacker_data_t.tile_width$VH.set(seg, x);
    }
    public static int tile_width$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.tile_width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tile_width$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.tile_width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tile_length$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("tile_length"));
    public static VarHandle tile_length$VH() {
        return unpacker_data_t.tile_length$VH;
    }
    public static int tile_length$get(MemorySegment seg) {
        return (int)unpacker_data_t.tile_length$VH.get(seg);
    }
    public static void tile_length$set( MemorySegment seg, int x) {
        unpacker_data_t.tile_length$VH.set(seg, x);
    }
    public static int tile_length$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.tile_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tile_length$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.tile_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle load_flags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("load_flags"));
    public static VarHandle load_flags$VH() {
        return unpacker_data_t.load_flags$VH;
    }
    public static int load_flags$get(MemorySegment seg) {
        return (int)unpacker_data_t.load_flags$VH.get(seg);
    }
    public static void load_flags$set( MemorySegment seg, int x) {
        unpacker_data_t.load_flags$VH.set(seg, x);
    }
    public static int load_flags$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.load_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void load_flags$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.load_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle data_error$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("data_error"));
    public static VarHandle data_error$VH() {
        return unpacker_data_t.data_error$VH;
    }
    public static int data_error$get(MemorySegment seg) {
        return (int)unpacker_data_t.data_error$VH.get(seg);
    }
    public static void data_error$set( MemorySegment seg, int x) {
        unpacker_data_t.data_error$VH.set(seg, x);
    }
    public static int data_error$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.data_error$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data_error$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.data_error$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hasselblad_parser_flag$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("hasselblad_parser_flag"));
    public static VarHandle hasselblad_parser_flag$VH() {
        return unpacker_data_t.hasselblad_parser_flag$VH;
    }
    public static int hasselblad_parser_flag$get(MemorySegment seg) {
        return (int)unpacker_data_t.hasselblad_parser_flag$VH.get(seg);
    }
    public static void hasselblad_parser_flag$set( MemorySegment seg, int x) {
        unpacker_data_t.hasselblad_parser_flag$VH.set(seg, x);
    }
    public static int hasselblad_parser_flag$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.hasselblad_parser_flag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hasselblad_parser_flag$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.hasselblad_parser_flag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle posRAFData$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("posRAFData"));
    public static VarHandle posRAFData$VH() {
        return unpacker_data_t.posRAFData$VH;
    }
    public static long posRAFData$get(MemorySegment seg) {
        return (long)unpacker_data_t.posRAFData$VH.get(seg);
    }
    public static void posRAFData$set( MemorySegment seg, long x) {
        unpacker_data_t.posRAFData$VH.set(seg, x);
    }
    public static long posRAFData$get(MemorySegment seg, long index) {
        return (long)unpacker_data_t.posRAFData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void posRAFData$set(MemorySegment seg, long index, long x) {
        unpacker_data_t.posRAFData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lenRAFData$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("lenRAFData"));
    public static VarHandle lenRAFData$VH() {
        return unpacker_data_t.lenRAFData$VH;
    }
    public static int lenRAFData$get(MemorySegment seg) {
        return (int)unpacker_data_t.lenRAFData$VH.get(seg);
    }
    public static void lenRAFData$set( MemorySegment seg, int x) {
        unpacker_data_t.lenRAFData$VH.set(seg, x);
    }
    public static int lenRAFData$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.lenRAFData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lenRAFData$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.lenRAFData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fuji_total_lines$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("fuji_total_lines"));
    public static VarHandle fuji_total_lines$VH() {
        return unpacker_data_t.fuji_total_lines$VH;
    }
    public static int fuji_total_lines$get(MemorySegment seg) {
        return (int)unpacker_data_t.fuji_total_lines$VH.get(seg);
    }
    public static void fuji_total_lines$set( MemorySegment seg, int x) {
        unpacker_data_t.fuji_total_lines$VH.set(seg, x);
    }
    public static int fuji_total_lines$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.fuji_total_lines$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fuji_total_lines$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.fuji_total_lines$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fuji_total_blocks$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("fuji_total_blocks"));
    public static VarHandle fuji_total_blocks$VH() {
        return unpacker_data_t.fuji_total_blocks$VH;
    }
    public static int fuji_total_blocks$get(MemorySegment seg) {
        return (int)unpacker_data_t.fuji_total_blocks$VH.get(seg);
    }
    public static void fuji_total_blocks$set( MemorySegment seg, int x) {
        unpacker_data_t.fuji_total_blocks$VH.set(seg, x);
    }
    public static int fuji_total_blocks$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.fuji_total_blocks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fuji_total_blocks$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.fuji_total_blocks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fuji_block_width$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("fuji_block_width"));
    public static VarHandle fuji_block_width$VH() {
        return unpacker_data_t.fuji_block_width$VH;
    }
    public static int fuji_block_width$get(MemorySegment seg) {
        return (int)unpacker_data_t.fuji_block_width$VH.get(seg);
    }
    public static void fuji_block_width$set( MemorySegment seg, int x) {
        unpacker_data_t.fuji_block_width$VH.set(seg, x);
    }
    public static int fuji_block_width$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.fuji_block_width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fuji_block_width$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.fuji_block_width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fuji_bits$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("fuji_bits"));
    public static VarHandle fuji_bits$VH() {
        return unpacker_data_t.fuji_bits$VH;
    }
    public static int fuji_bits$get(MemorySegment seg) {
        return (int)unpacker_data_t.fuji_bits$VH.get(seg);
    }
    public static void fuji_bits$set( MemorySegment seg, int x) {
        unpacker_data_t.fuji_bits$VH.set(seg, x);
    }
    public static int fuji_bits$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.fuji_bits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fuji_bits$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.fuji_bits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fuji_raw_type$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("fuji_raw_type"));
    public static VarHandle fuji_raw_type$VH() {
        return unpacker_data_t.fuji_raw_type$VH;
    }
    public static int fuji_raw_type$get(MemorySegment seg) {
        return (int)unpacker_data_t.fuji_raw_type$VH.get(seg);
    }
    public static void fuji_raw_type$set( MemorySegment seg, int x) {
        unpacker_data_t.fuji_raw_type$VH.set(seg, x);
    }
    public static int fuji_raw_type$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.fuji_raw_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fuji_raw_type$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.fuji_raw_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fuji_lossless$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("fuji_lossless"));
    public static VarHandle fuji_lossless$VH() {
        return unpacker_data_t.fuji_lossless$VH;
    }
    public static int fuji_lossless$get(MemorySegment seg) {
        return (int)unpacker_data_t.fuji_lossless$VH.get(seg);
    }
    public static void fuji_lossless$set( MemorySegment seg, int x) {
        unpacker_data_t.fuji_lossless$VH.set(seg, x);
    }
    public static int fuji_lossless$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.fuji_lossless$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fuji_lossless$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.fuji_lossless$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pana_encoding$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("pana_encoding"));
    public static VarHandle pana_encoding$VH() {
        return unpacker_data_t.pana_encoding$VH;
    }
    public static int pana_encoding$get(MemorySegment seg) {
        return (int)unpacker_data_t.pana_encoding$VH.get(seg);
    }
    public static void pana_encoding$set( MemorySegment seg, int x) {
        unpacker_data_t.pana_encoding$VH.set(seg, x);
    }
    public static int pana_encoding$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.pana_encoding$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pana_encoding$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.pana_encoding$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pana_bpp$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("pana_bpp"));
    public static VarHandle pana_bpp$VH() {
        return unpacker_data_t.pana_bpp$VH;
    }
    public static int pana_bpp$get(MemorySegment seg) {
        return (int)unpacker_data_t.pana_bpp$VH.get(seg);
    }
    public static void pana_bpp$set( MemorySegment seg, int x) {
        unpacker_data_t.pana_bpp$VH.set(seg, x);
    }
    public static int pana_bpp$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.pana_bpp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pana_bpp$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.pana_bpp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment crx_header$slice(MemorySegment seg) {
        return seg.asSlice(176, 1152);
    }
    static final VarHandle crx_track_selected$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("crx_track_selected"));
    public static VarHandle crx_track_selected$VH() {
        return unpacker_data_t.crx_track_selected$VH;
    }
    public static int crx_track_selected$get(MemorySegment seg) {
        return (int)unpacker_data_t.crx_track_selected$VH.get(seg);
    }
    public static void crx_track_selected$set( MemorySegment seg, int x) {
        unpacker_data_t.crx_track_selected$VH.set(seg, x);
    }
    public static int crx_track_selected$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.crx_track_selected$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void crx_track_selected$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.crx_track_selected$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CR3_CTMDtag$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("CR3_CTMDtag"));
    public static VarHandle CR3_CTMDtag$VH() {
        return unpacker_data_t.CR3_CTMDtag$VH;
    }
    public static short CR3_CTMDtag$get(MemorySegment seg) {
        return (short)unpacker_data_t.CR3_CTMDtag$VH.get(seg);
    }
    public static void CR3_CTMDtag$set( MemorySegment seg, short x) {
        unpacker_data_t.CR3_CTMDtag$VH.set(seg, x);
    }
    public static short CR3_CTMDtag$get(MemorySegment seg, long index) {
        return (short)unpacker_data_t.CR3_CTMDtag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CR3_CTMDtag$set(MemorySegment seg, long index, short x) {
        unpacker_data_t.CR3_CTMDtag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CR3_Version$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("CR3_Version"));
    public static VarHandle CR3_Version$VH() {
        return unpacker_data_t.CR3_Version$VH;
    }
    public static short CR3_Version$get(MemorySegment seg) {
        return (short)unpacker_data_t.CR3_Version$VH.get(seg);
    }
    public static void CR3_Version$set( MemorySegment seg, short x) {
        unpacker_data_t.CR3_Version$VH.set(seg, x);
    }
    public static short CR3_Version$get(MemorySegment seg, long index) {
        return (short)unpacker_data_t.CR3_Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CR3_Version$set(MemorySegment seg, long index, short x) {
        unpacker_data_t.CR3_Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CM_found$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("CM_found"));
    public static VarHandle CM_found$VH() {
        return unpacker_data_t.CM_found$VH;
    }
    public static int CM_found$get(MemorySegment seg) {
        return (int)unpacker_data_t.CM_found$VH.get(seg);
    }
    public static void CM_found$set( MemorySegment seg, int x) {
        unpacker_data_t.CM_found$VH.set(seg, x);
    }
    public static int CM_found$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.CM_found$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CM_found$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.CM_found$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle is_NikonTransfer$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("is_NikonTransfer"));
    public static VarHandle is_NikonTransfer$VH() {
        return unpacker_data_t.is_NikonTransfer$VH;
    }
    public static int is_NikonTransfer$get(MemorySegment seg) {
        return (int)unpacker_data_t.is_NikonTransfer$VH.get(seg);
    }
    public static void is_NikonTransfer$set( MemorySegment seg, int x) {
        unpacker_data_t.is_NikonTransfer$VH.set(seg, x);
    }
    public static int is_NikonTransfer$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.is_NikonTransfer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_NikonTransfer$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.is_NikonTransfer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle is_Olympus$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("is_Olympus"));
    public static VarHandle is_Olympus$VH() {
        return unpacker_data_t.is_Olympus$VH;
    }
    public static int is_Olympus$get(MemorySegment seg) {
        return (int)unpacker_data_t.is_Olympus$VH.get(seg);
    }
    public static void is_Olympus$set( MemorySegment seg, int x) {
        unpacker_data_t.is_Olympus$VH.set(seg, x);
    }
    public static int is_Olympus$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.is_Olympus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_Olympus$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.is_Olympus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle OlympusDNG_SubDirOffsetValid$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("OlympusDNG_SubDirOffsetValid"));
    public static VarHandle OlympusDNG_SubDirOffsetValid$VH() {
        return unpacker_data_t.OlympusDNG_SubDirOffsetValid$VH;
    }
    public static int OlympusDNG_SubDirOffsetValid$get(MemorySegment seg) {
        return (int)unpacker_data_t.OlympusDNG_SubDirOffsetValid$VH.get(seg);
    }
    public static void OlympusDNG_SubDirOffsetValid$set( MemorySegment seg, int x) {
        unpacker_data_t.OlympusDNG_SubDirOffsetValid$VH.set(seg, x);
    }
    public static int OlympusDNG_SubDirOffsetValid$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.OlympusDNG_SubDirOffsetValid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OlympusDNG_SubDirOffsetValid$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.OlympusDNG_SubDirOffsetValid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle is_Sony$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("is_Sony"));
    public static VarHandle is_Sony$VH() {
        return unpacker_data_t.is_Sony$VH;
    }
    public static int is_Sony$get(MemorySegment seg) {
        return (int)unpacker_data_t.is_Sony$VH.get(seg);
    }
    public static void is_Sony$set( MemorySegment seg, int x) {
        unpacker_data_t.is_Sony$VH.set(seg, x);
    }
    public static int is_Sony$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.is_Sony$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_Sony$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.is_Sony$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle is_pana_raw$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("is_pana_raw"));
    public static VarHandle is_pana_raw$VH() {
        return unpacker_data_t.is_pana_raw$VH;
    }
    public static int is_pana_raw$get(MemorySegment seg) {
        return (int)unpacker_data_t.is_pana_raw$VH.get(seg);
    }
    public static void is_pana_raw$set( MemorySegment seg, int x) {
        unpacker_data_t.is_pana_raw$VH.set(seg, x);
    }
    public static int is_pana_raw$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.is_pana_raw$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_pana_raw$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.is_pana_raw$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle is_PentaxRicohMakernotes$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("is_PentaxRicohMakernotes"));
    public static VarHandle is_PentaxRicohMakernotes$VH() {
        return unpacker_data_t.is_PentaxRicohMakernotes$VH;
    }
    public static int is_PentaxRicohMakernotes$get(MemorySegment seg) {
        return (int)unpacker_data_t.is_PentaxRicohMakernotes$VH.get(seg);
    }
    public static void is_PentaxRicohMakernotes$set( MemorySegment seg, int x) {
        unpacker_data_t.is_PentaxRicohMakernotes$VH.set(seg, x);
    }
    public static int is_PentaxRicohMakernotes$get(MemorySegment seg, long index) {
        return (int)unpacker_data_t.is_PentaxRicohMakernotes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_PentaxRicohMakernotes$set(MemorySegment seg, long index, int x) {
        unpacker_data_t.is_PentaxRicohMakernotes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment dng_frames$slice(MemorySegment seg) {
        return seg.asSlice(1364, 80);
    }
    static final VarHandle raw_stride$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("raw_stride"));
    public static VarHandle raw_stride$VH() {
        return unpacker_data_t.raw_stride$VH;
    }
    public static short raw_stride$get(MemorySegment seg) {
        return (short)unpacker_data_t.raw_stride$VH.get(seg);
    }
    public static void raw_stride$set( MemorySegment seg, short x) {
        unpacker_data_t.raw_stride$VH.set(seg, x);
    }
    public static short raw_stride$get(MemorySegment seg, long index) {
        return (short)unpacker_data_t.raw_stride$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void raw_stride$set(MemorySegment seg, long index, short x) {
        unpacker_data_t.raw_stride$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


