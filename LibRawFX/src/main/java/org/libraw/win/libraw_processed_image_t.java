// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_processed_image_t {
 *     enum LibRaw_image_formats type;
 *     unsigned short height;
 *     unsigned short width;
 *     unsigned short colors;
 *     unsigned short bits;
 *     unsigned int data_size;
 *     unsigned char data[1];
 * };
 * }
 */
public class libraw_processed_image_t {

    public static MemoryLayout $LAYOUT() {
        return constants$10.const$5;
    }
    public static VarHandle type$VH() {
        return constants$11.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum LibRaw_image_formats type;
     * }
     */
    public static int type$get(MemorySegment seg) {
        return (int)constants$11.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum LibRaw_image_formats type;
     * }
     */
    public static void type$set(MemorySegment seg, int x) {
        constants$11.const$0.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)constants$11.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        constants$11.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle height$VH() {
        return constants$11.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short height;
     * }
     */
    public static short height$get(MemorySegment seg) {
        return (short)constants$11.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short height;
     * }
     */
    public static void height$set(MemorySegment seg, short x) {
        constants$11.const$1.set(seg, x);
    }
    public static short height$get(MemorySegment seg, long index) {
        return (short)constants$11.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, short x) {
        constants$11.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle width$VH() {
        return constants$11.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short width;
     * }
     */
    public static short width$get(MemorySegment seg) {
        return (short)constants$11.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short width;
     * }
     */
    public static void width$set(MemorySegment seg, short x) {
        constants$11.const$2.set(seg, x);
    }
    public static short width$get(MemorySegment seg, long index) {
        return (short)constants$11.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, short x) {
        constants$11.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle colors$VH() {
        return constants$11.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short colors;
     * }
     */
    public static short colors$get(MemorySegment seg) {
        return (short)constants$11.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short colors;
     * }
     */
    public static void colors$set(MemorySegment seg, short x) {
        constants$11.const$3.set(seg, x);
    }
    public static short colors$get(MemorySegment seg, long index) {
        return (short)constants$11.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void colors$set(MemorySegment seg, long index, short x) {
        constants$11.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bits$VH() {
        return constants$11.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short bits;
     * }
     */
    public static short bits$get(MemorySegment seg) {
        return (short)constants$11.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short bits;
     * }
     */
    public static void bits$set(MemorySegment seg, short x) {
        constants$11.const$4.set(seg, x);
    }
    public static short bits$get(MemorySegment seg, long index) {
        return (short)constants$11.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void bits$set(MemorySegment seg, long index, short x) {
        constants$11.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle data_size$VH() {
        return constants$11.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int data_size;
     * }
     */
    public static int data_size$get(MemorySegment seg) {
        return (int)constants$11.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int data_size;
     * }
     */
    public static void data_size$set(MemorySegment seg, int x) {
        constants$11.const$5.set(seg, x);
    }
    public static int data_size$get(MemorySegment seg, long index) {
        return (int)constants$11.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void data_size$set(MemorySegment seg, long index, int x) {
        constants$11.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment data$slice(MemorySegment seg) {
        return seg.asSlice(16, 1);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


