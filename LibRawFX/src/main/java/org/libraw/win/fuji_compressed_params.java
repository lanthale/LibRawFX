// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class fuji_compressed_params {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(4, MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("q_table"),
            Constants$root.C_LONG$LAYOUT.withName("raw_bits"),
            Constants$root.C_LONG$LAYOUT.withName("total_values"),
            Constants$root.C_LONG$LAYOUT.withName("max_grad"),
            Constants$root.C_LONG$LAYOUT.withName("q_grad_mult"),
            Constants$root.C_LONG$LAYOUT.withName("q_base"),
            MemoryLayout.paddingLayout(32)
        ).withName("fuji_q_table")).withName("qt"),
        Constants$root.C_POINTER$LAYOUT.withName("buf"),
        Constants$root.C_LONG$LAYOUT.withName("max_bits"),
        Constants$root.C_LONG$LAYOUT.withName("min_value"),
        Constants$root.C_LONG$LAYOUT.withName("max_value"),
        Constants$root.C_SHORT$LAYOUT.withName("line_width"),
        MemoryLayout.paddingLayout(16)
    ).withName("fuji_compressed_params");
    public static MemoryLayout $LAYOUT() {
        return fuji_compressed_params.$struct$LAYOUT;
    }
    public static MemorySegment qt$slice(MemorySegment seg) {
        return seg.asSlice(0, 128);
    }
    static final VarHandle buf$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("buf"));
    public static VarHandle buf$VH() {
        return fuji_compressed_params.buf$VH;
    }
    public static MemoryAddress buf$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)fuji_compressed_params.buf$VH.get(seg);
    }
    public static void buf$set( MemorySegment seg, MemoryAddress x) {
        fuji_compressed_params.buf$VH.set(seg, x);
    }
    public static MemoryAddress buf$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)fuji_compressed_params.buf$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void buf$set(MemorySegment seg, long index, MemoryAddress x) {
        fuji_compressed_params.buf$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_bits$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_bits"));
    public static VarHandle max_bits$VH() {
        return fuji_compressed_params.max_bits$VH;
    }
    public static int max_bits$get(MemorySegment seg) {
        return (int)fuji_compressed_params.max_bits$VH.get(seg);
    }
    public static void max_bits$set( MemorySegment seg, int x) {
        fuji_compressed_params.max_bits$VH.set(seg, x);
    }
    public static int max_bits$get(MemorySegment seg, long index) {
        return (int)fuji_compressed_params.max_bits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_bits$set(MemorySegment seg, long index, int x) {
        fuji_compressed_params.max_bits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle min_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("min_value"));
    public static VarHandle min_value$VH() {
        return fuji_compressed_params.min_value$VH;
    }
    public static int min_value$get(MemorySegment seg) {
        return (int)fuji_compressed_params.min_value$VH.get(seg);
    }
    public static void min_value$set( MemorySegment seg, int x) {
        fuji_compressed_params.min_value$VH.set(seg, x);
    }
    public static int min_value$get(MemorySegment seg, long index) {
        return (int)fuji_compressed_params.min_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void min_value$set(MemorySegment seg, long index, int x) {
        fuji_compressed_params.min_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_value"));
    public static VarHandle max_value$VH() {
        return fuji_compressed_params.max_value$VH;
    }
    public static int max_value$get(MemorySegment seg) {
        return (int)fuji_compressed_params.max_value$VH.get(seg);
    }
    public static void max_value$set( MemorySegment seg, int x) {
        fuji_compressed_params.max_value$VH.set(seg, x);
    }
    public static int max_value$get(MemorySegment seg, long index) {
        return (int)fuji_compressed_params.max_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_value$set(MemorySegment seg, long index, int x) {
        fuji_compressed_params.max_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle line_width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("line_width"));
    public static VarHandle line_width$VH() {
        return fuji_compressed_params.line_width$VH;
    }
    public static short line_width$get(MemorySegment seg) {
        return (short)fuji_compressed_params.line_width$VH.get(seg);
    }
    public static void line_width$set( MemorySegment seg, short x) {
        fuji_compressed_params.line_width$VH.set(seg, x);
    }
    public static short line_width$get(MemorySegment seg, long index) {
        return (short)fuji_compressed_params.line_width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void line_width$set(MemorySegment seg, long index, short x) {
        fuji_compressed_params.line_width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


