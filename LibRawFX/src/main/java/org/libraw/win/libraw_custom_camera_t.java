// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_custom_camera_t {
 *     unsigned int fsize;
 *     unsigned short rw;
 *     unsigned short rh;
 *     unsigned char lm;
 *     unsigned char tm;
 *     unsigned char rm;
 *     unsigned char bm;
 *     unsigned short lf;
 *     unsigned char cf;
 *     unsigned char max;
 *     unsigned char flags;
 *     char t_make[10];
 *     char t_model[20];
 *     unsigned short offset;
 * };
 * }
 */
public class libraw_custom_camera_t {

    public static MemoryLayout $LAYOUT() {
        return constants$87.const$2;
    }
    public static VarHandle fsize$VH() {
        return constants$87.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int fsize;
     * }
     */
    public static int fsize$get(MemorySegment seg) {
        return (int)constants$87.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int fsize;
     * }
     */
    public static void fsize$set(MemorySegment seg, int x) {
        constants$87.const$3.set(seg, x);
    }
    public static int fsize$get(MemorySegment seg, long index) {
        return (int)constants$87.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void fsize$set(MemorySegment seg, long index, int x) {
        constants$87.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rw$VH() {
        return constants$87.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short rw;
     * }
     */
    public static short rw$get(MemorySegment seg) {
        return (short)constants$87.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short rw;
     * }
     */
    public static void rw$set(MemorySegment seg, short x) {
        constants$87.const$4.set(seg, x);
    }
    public static short rw$get(MemorySegment seg, long index) {
        return (short)constants$87.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void rw$set(MemorySegment seg, long index, short x) {
        constants$87.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rh$VH() {
        return constants$87.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short rh;
     * }
     */
    public static short rh$get(MemorySegment seg) {
        return (short)constants$87.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short rh;
     * }
     */
    public static void rh$set(MemorySegment seg, short x) {
        constants$87.const$5.set(seg, x);
    }
    public static short rh$get(MemorySegment seg, long index) {
        return (short)constants$87.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void rh$set(MemorySegment seg, long index, short x) {
        constants$87.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lm$VH() {
        return constants$88.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char lm;
     * }
     */
    public static byte lm$get(MemorySegment seg) {
        return (byte)constants$88.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char lm;
     * }
     */
    public static void lm$set(MemorySegment seg, byte x) {
        constants$88.const$0.set(seg, x);
    }
    public static byte lm$get(MemorySegment seg, long index) {
        return (byte)constants$88.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void lm$set(MemorySegment seg, long index, byte x) {
        constants$88.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tm$VH() {
        return constants$88.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char tm;
     * }
     */
    public static byte tm$get(MemorySegment seg) {
        return (byte)constants$88.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char tm;
     * }
     */
    public static void tm$set(MemorySegment seg, byte x) {
        constants$88.const$1.set(seg, x);
    }
    public static byte tm$get(MemorySegment seg, long index) {
        return (byte)constants$88.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void tm$set(MemorySegment seg, long index, byte x) {
        constants$88.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rm$VH() {
        return constants$88.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char rm;
     * }
     */
    public static byte rm$get(MemorySegment seg) {
        return (byte)constants$88.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char rm;
     * }
     */
    public static void rm$set(MemorySegment seg, byte x) {
        constants$88.const$2.set(seg, x);
    }
    public static byte rm$get(MemorySegment seg, long index) {
        return (byte)constants$88.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void rm$set(MemorySegment seg, long index, byte x) {
        constants$88.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bm$VH() {
        return constants$88.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char bm;
     * }
     */
    public static byte bm$get(MemorySegment seg) {
        return (byte)constants$88.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char bm;
     * }
     */
    public static void bm$set(MemorySegment seg, byte x) {
        constants$88.const$3.set(seg, x);
    }
    public static byte bm$get(MemorySegment seg, long index) {
        return (byte)constants$88.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void bm$set(MemorySegment seg, long index, byte x) {
        constants$88.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lf$VH() {
        return constants$88.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short lf;
     * }
     */
    public static short lf$get(MemorySegment seg) {
        return (short)constants$88.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short lf;
     * }
     */
    public static void lf$set(MemorySegment seg, short x) {
        constants$88.const$4.set(seg, x);
    }
    public static short lf$get(MemorySegment seg, long index) {
        return (short)constants$88.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lf$set(MemorySegment seg, long index, short x) {
        constants$88.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cf$VH() {
        return constants$88.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char cf;
     * }
     */
    public static byte cf$get(MemorySegment seg) {
        return (byte)constants$88.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char cf;
     * }
     */
    public static void cf$set(MemorySegment seg, byte x) {
        constants$88.const$5.set(seg, x);
    }
    public static byte cf$get(MemorySegment seg, long index) {
        return (byte)constants$88.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cf$set(MemorySegment seg, long index, byte x) {
        constants$88.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max$VH() {
        return constants$89.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char max;
     * }
     */
    public static byte max$get(MemorySegment seg) {
        return (byte)constants$89.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char max;
     * }
     */
    public static void max$set(MemorySegment seg, byte x) {
        constants$89.const$0.set(seg, x);
    }
    public static byte max$get(MemorySegment seg, long index) {
        return (byte)constants$89.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void max$set(MemorySegment seg, long index, byte x) {
        constants$89.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle flags$VH() {
        return constants$89.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char flags;
     * }
     */
    public static byte flags$get(MemorySegment seg) {
        return (byte)constants$89.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char flags;
     * }
     */
    public static void flags$set(MemorySegment seg, byte x) {
        constants$89.const$1.set(seg, x);
    }
    public static byte flags$get(MemorySegment seg, long index) {
        return (byte)constants$89.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, byte x) {
        constants$89.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment t_make$slice(MemorySegment seg) {
        return seg.asSlice(17, 10);
    }
    public static MemorySegment t_model$slice(MemorySegment seg) {
        return seg.asSlice(27, 20);
    }
    public static VarHandle offset$VH() {
        return constants$89.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short offset;
     * }
     */
    public static short offset$get(MemorySegment seg) {
        return (short)constants$89.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short offset;
     * }
     */
    public static void offset$set(MemorySegment seg, short x) {
        constants$89.const$2.set(seg, x);
    }
    public static short offset$get(MemorySegment seg, long index) {
        return (short)constants$89.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void offset$set(MemorySegment seg, long index, short x) {
        constants$89.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


