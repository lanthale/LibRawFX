// Generated by jextract

package org.libraw.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     void *raw_alloc;
 *     ushort *raw_image;
 *     ushort (*color4_image)[4];
 *     ushort (*color3_image)[3];
 *     float *float_image;
 *     float (*float3_image)[3];
 *     float (*float4_image)[4];
 *     short (*ph1_cblack)[2];
 *     short (*ph1_rblack)[2];
 *     libraw_iparams_t iparams;
 *     libraw_image_sizes_t sizes;
 *     libraw_internal_output_params_t ioparams;
 *     libraw_colordata_t color;
 * }
 * }
 */
public class libraw_rawdata_t {

    libraw_rawdata_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        libraw_h.C_POINTER.withName("raw_alloc"),
        libraw_h.C_POINTER.withName("raw_image"),
        libraw_h.C_POINTER.withName("color4_image"),
        libraw_h.C_POINTER.withName("color3_image"),
        libraw_h.C_POINTER.withName("float_image"),
        libraw_h.C_POINTER.withName("float3_image"),
        libraw_h.C_POINTER.withName("float4_image"),
        libraw_h.C_POINTER.withName("ph1_cblack"),
        libraw_h.C_POINTER.withName("ph1_rblack"),
        libraw_iparams_t.layout().withName("iparams"),
        libraw_image_sizes_t.layout().withName("sizes"),
        libraw_internal_output_params_t.layout().withName("ioparams"),
        libraw_colordata_t.layout().withName("color")
    ).withName("$anon$950:11");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout raw_alloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("raw_alloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *raw_alloc
     * }
     */
    public static final AddressLayout raw_alloc$layout() {
        return raw_alloc$LAYOUT;
    }

    private static final long raw_alloc$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *raw_alloc
     * }
     */
    public static final long raw_alloc$offset() {
        return raw_alloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *raw_alloc
     * }
     */
    public static MemorySegment raw_alloc(MemorySegment struct) {
        return struct.get(raw_alloc$LAYOUT, raw_alloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *raw_alloc
     * }
     */
    public static void raw_alloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(raw_alloc$LAYOUT, raw_alloc$OFFSET, fieldValue);
    }

    private static final AddressLayout raw_image$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("raw_image"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort *raw_image
     * }
     */
    public static final AddressLayout raw_image$layout() {
        return raw_image$LAYOUT;
    }

    private static final long raw_image$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort *raw_image
     * }
     */
    public static final long raw_image$offset() {
        return raw_image$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort *raw_image
     * }
     */
    public static MemorySegment raw_image(MemorySegment struct) {
        return struct.get(raw_image$LAYOUT, raw_image$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort *raw_image
     * }
     */
    public static void raw_image(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(raw_image$LAYOUT, raw_image$OFFSET, fieldValue);
    }

    private static final AddressLayout color4_image$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("color4_image"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort (*color4_image)[4]
     * }
     */
    public static final AddressLayout color4_image$layout() {
        return color4_image$LAYOUT;
    }

    private static final long color4_image$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort (*color4_image)[4]
     * }
     */
    public static final long color4_image$offset() {
        return color4_image$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort (*color4_image)[4]
     * }
     */
    public static MemorySegment color4_image(MemorySegment struct) {
        return struct.get(color4_image$LAYOUT, color4_image$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort (*color4_image)[4]
     * }
     */
    public static void color4_image(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(color4_image$LAYOUT, color4_image$OFFSET, fieldValue);
    }

    private static final AddressLayout color3_image$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("color3_image"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ushort (*color3_image)[3]
     * }
     */
    public static final AddressLayout color3_image$layout() {
        return color3_image$LAYOUT;
    }

    private static final long color3_image$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ushort (*color3_image)[3]
     * }
     */
    public static final long color3_image$offset() {
        return color3_image$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ushort (*color3_image)[3]
     * }
     */
    public static MemorySegment color3_image(MemorySegment struct) {
        return struct.get(color3_image$LAYOUT, color3_image$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ushort (*color3_image)[3]
     * }
     */
    public static void color3_image(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(color3_image$LAYOUT, color3_image$OFFSET, fieldValue);
    }

    private static final AddressLayout float_image$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("float_image"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float *float_image
     * }
     */
    public static final AddressLayout float_image$layout() {
        return float_image$LAYOUT;
    }

    private static final long float_image$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float *float_image
     * }
     */
    public static final long float_image$offset() {
        return float_image$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float *float_image
     * }
     */
    public static MemorySegment float_image(MemorySegment struct) {
        return struct.get(float_image$LAYOUT, float_image$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float *float_image
     * }
     */
    public static void float_image(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(float_image$LAYOUT, float_image$OFFSET, fieldValue);
    }

    private static final AddressLayout float3_image$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("float3_image"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float (*float3_image)[3]
     * }
     */
    public static final AddressLayout float3_image$layout() {
        return float3_image$LAYOUT;
    }

    private static final long float3_image$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float (*float3_image)[3]
     * }
     */
    public static final long float3_image$offset() {
        return float3_image$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float (*float3_image)[3]
     * }
     */
    public static MemorySegment float3_image(MemorySegment struct) {
        return struct.get(float3_image$LAYOUT, float3_image$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float (*float3_image)[3]
     * }
     */
    public static void float3_image(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(float3_image$LAYOUT, float3_image$OFFSET, fieldValue);
    }

    private static final AddressLayout float4_image$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("float4_image"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float (*float4_image)[4]
     * }
     */
    public static final AddressLayout float4_image$layout() {
        return float4_image$LAYOUT;
    }

    private static final long float4_image$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float (*float4_image)[4]
     * }
     */
    public static final long float4_image$offset() {
        return float4_image$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float (*float4_image)[4]
     * }
     */
    public static MemorySegment float4_image(MemorySegment struct) {
        return struct.get(float4_image$LAYOUT, float4_image$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float (*float4_image)[4]
     * }
     */
    public static void float4_image(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(float4_image$LAYOUT, float4_image$OFFSET, fieldValue);
    }

    private static final AddressLayout ph1_cblack$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ph1_cblack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short (*ph1_cblack)[2]
     * }
     */
    public static final AddressLayout ph1_cblack$layout() {
        return ph1_cblack$LAYOUT;
    }

    private static final long ph1_cblack$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short (*ph1_cblack)[2]
     * }
     */
    public static final long ph1_cblack$offset() {
        return ph1_cblack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short (*ph1_cblack)[2]
     * }
     */
    public static MemorySegment ph1_cblack(MemorySegment struct) {
        return struct.get(ph1_cblack$LAYOUT, ph1_cblack$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short (*ph1_cblack)[2]
     * }
     */
    public static void ph1_cblack(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ph1_cblack$LAYOUT, ph1_cblack$OFFSET, fieldValue);
    }

    private static final AddressLayout ph1_rblack$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ph1_rblack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short (*ph1_rblack)[2]
     * }
     */
    public static final AddressLayout ph1_rblack$layout() {
        return ph1_rblack$LAYOUT;
    }

    private static final long ph1_rblack$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short (*ph1_rblack)[2]
     * }
     */
    public static final long ph1_rblack$offset() {
        return ph1_rblack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short (*ph1_rblack)[2]
     * }
     */
    public static MemorySegment ph1_rblack(MemorySegment struct) {
        return struct.get(ph1_rblack$LAYOUT, ph1_rblack$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short (*ph1_rblack)[2]
     * }
     */
    public static void ph1_rblack(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ph1_rblack$LAYOUT, ph1_rblack$OFFSET, fieldValue);
    }

    private static final GroupLayout iparams$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("iparams"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * libraw_iparams_t iparams
     * }
     */
    public static final GroupLayout iparams$layout() {
        return iparams$LAYOUT;
    }

    private static final long iparams$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * libraw_iparams_t iparams
     * }
     */
    public static final long iparams$offset() {
        return iparams$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * libraw_iparams_t iparams
     * }
     */
    public static MemorySegment iparams(MemorySegment struct) {
        return struct.asSlice(iparams$OFFSET, iparams$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * libraw_iparams_t iparams
     * }
     */
    public static void iparams(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, iparams$OFFSET, iparams$LAYOUT.byteSize());
    }

    private static final GroupLayout sizes$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("sizes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * libraw_image_sizes_t sizes
     * }
     */
    public static final GroupLayout sizes$layout() {
        return sizes$LAYOUT;
    }

    private static final long sizes$OFFSET = 512;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * libraw_image_sizes_t sizes
     * }
     */
    public static final long sizes$offset() {
        return sizes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * libraw_image_sizes_t sizes
     * }
     */
    public static MemorySegment sizes(MemorySegment struct) {
        return struct.asSlice(sizes$OFFSET, sizes$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * libraw_image_sizes_t sizes
     * }
     */
    public static void sizes(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sizes$OFFSET, sizes$LAYOUT.byteSize());
    }

    private static final GroupLayout ioparams$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ioparams"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * libraw_internal_output_params_t ioparams
     * }
     */
    public static final GroupLayout ioparams$layout() {
        return ioparams$LAYOUT;
    }

    private static final long ioparams$OFFSET = 696;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * libraw_internal_output_params_t ioparams
     * }
     */
    public static final long ioparams$offset() {
        return ioparams$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * libraw_internal_output_params_t ioparams
     * }
     */
    public static MemorySegment ioparams(MemorySegment struct) {
        return struct.asSlice(ioparams$OFFSET, ioparams$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * libraw_internal_output_params_t ioparams
     * }
     */
    public static void ioparams(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ioparams$OFFSET, ioparams$LAYOUT.byteSize());
    }

    private static final GroupLayout color$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("color"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * libraw_colordata_t color
     * }
     */
    public static final GroupLayout color$layout() {
        return color$LAYOUT;
    }

    private static final long color$OFFSET = 712;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * libraw_colordata_t color
     * }
     */
    public static final long color$offset() {
        return color$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * libraw_colordata_t color
     * }
     */
    public static MemorySegment color(MemorySegment struct) {
        return struct.asSlice(color$OFFSET, color$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * libraw_colordata_t color
     * }
     */
    public static void color(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, color$OFFSET, color$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

