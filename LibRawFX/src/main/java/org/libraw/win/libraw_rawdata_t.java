// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct libraw_rawdata_t {
 *     void* raw_alloc;
 *     unsigned short* raw_image;
 *     unsigned short *color4_image[4];
 *     unsigned short *color3_image[3];
 *     float* float_image;
 *     float *float3_image[3];
 *     float *float4_image[4];
 *     short *ph1_cblack[2];
 *     short *ph1_rblack[2];
 *     struct libraw_iparams_t iparams;
 *     struct libraw_image_sizes_t sizes;
 *     struct libraw_internal_output_params_t ioparams;
 *     struct libraw_colordata_t color;
 * };
 * }
 */
public class libraw_rawdata_t {

    public static MemoryLayout $LAYOUT() {
        return constants$76.const$3;
    }
    public static VarHandle raw_alloc$VH() {
        return constants$76.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* raw_alloc;
     * }
     */
    public static MemorySegment raw_alloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$76.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* raw_alloc;
     * }
     */
    public static void raw_alloc$set(MemorySegment seg, MemorySegment x) {
        constants$76.const$4.set(seg, x);
    }
    public static MemorySegment raw_alloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$76.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void raw_alloc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$76.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle raw_image$VH() {
        return constants$76.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short* raw_image;
     * }
     */
    public static MemorySegment raw_image$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$76.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short* raw_image;
     * }
     */
    public static void raw_image$set(MemorySegment seg, MemorySegment x) {
        constants$76.const$5.set(seg, x);
    }
    public static MemorySegment raw_image$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$76.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void raw_image$set(MemorySegment seg, long index, MemorySegment x) {
        constants$76.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle color4_image$VH() {
        return constants$77.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short *color4_image[4];
     * }
     */
    public static MemorySegment color4_image$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$77.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short *color4_image[4];
     * }
     */
    public static void color4_image$set(MemorySegment seg, MemorySegment x) {
        constants$77.const$0.set(seg, x);
    }
    public static MemorySegment color4_image$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$77.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void color4_image$set(MemorySegment seg, long index, MemorySegment x) {
        constants$77.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle color3_image$VH() {
        return constants$77.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short *color3_image[3];
     * }
     */
    public static MemorySegment color3_image$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$77.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short *color3_image[3];
     * }
     */
    public static void color3_image$set(MemorySegment seg, MemorySegment x) {
        constants$77.const$1.set(seg, x);
    }
    public static MemorySegment color3_image$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$77.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void color3_image$set(MemorySegment seg, long index, MemorySegment x) {
        constants$77.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle float_image$VH() {
        return constants$77.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float* float_image;
     * }
     */
    public static MemorySegment float_image$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$77.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float* float_image;
     * }
     */
    public static void float_image$set(MemorySegment seg, MemorySegment x) {
        constants$77.const$2.set(seg, x);
    }
    public static MemorySegment float_image$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$77.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void float_image$set(MemorySegment seg, long index, MemorySegment x) {
        constants$77.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle float3_image$VH() {
        return constants$77.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float *float3_image[3];
     * }
     */
    public static MemorySegment float3_image$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$77.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float *float3_image[3];
     * }
     */
    public static void float3_image$set(MemorySegment seg, MemorySegment x) {
        constants$77.const$3.set(seg, x);
    }
    public static MemorySegment float3_image$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$77.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void float3_image$set(MemorySegment seg, long index, MemorySegment x) {
        constants$77.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle float4_image$VH() {
        return constants$77.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float *float4_image[4];
     * }
     */
    public static MemorySegment float4_image$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$77.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float *float4_image[4];
     * }
     */
    public static void float4_image$set(MemorySegment seg, MemorySegment x) {
        constants$77.const$4.set(seg, x);
    }
    public static MemorySegment float4_image$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$77.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void float4_image$set(MemorySegment seg, long index, MemorySegment x) {
        constants$77.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ph1_cblack$VH() {
        return constants$77.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short *ph1_cblack[2];
     * }
     */
    public static MemorySegment ph1_cblack$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$77.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short *ph1_cblack[2];
     * }
     */
    public static void ph1_cblack$set(MemorySegment seg, MemorySegment x) {
        constants$77.const$5.set(seg, x);
    }
    public static MemorySegment ph1_cblack$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$77.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ph1_cblack$set(MemorySegment seg, long index, MemorySegment x) {
        constants$77.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ph1_rblack$VH() {
        return constants$78.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short *ph1_rblack[2];
     * }
     */
    public static MemorySegment ph1_rblack$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$78.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short *ph1_rblack[2];
     * }
     */
    public static void ph1_rblack$set(MemorySegment seg, MemorySegment x) {
        constants$78.const$0.set(seg, x);
    }
    public static MemorySegment ph1_rblack$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$78.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ph1_rblack$set(MemorySegment seg, long index, MemorySegment x) {
        constants$78.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment iparams$slice(MemorySegment seg) {
        return seg.asSlice(72, 440);
    }
    public static MemorySegment sizes$slice(MemorySegment seg) {
        return seg.asSlice(512, 184);
    }
    public static MemorySegment ioparams$slice(MemorySegment seg) {
        return seg.asSlice(696, 16);
    }
    public static MemorySegment color$slice(MemorySegment seg) {
        return seg.asSlice(712, 187032);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


