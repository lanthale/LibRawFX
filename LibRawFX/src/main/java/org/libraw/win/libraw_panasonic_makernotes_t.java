// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class libraw_panasonic_makernotes_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("Compression"),
        Constants$root.C_SHORT$LAYOUT.withName("BlackLevelDim"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_FLOAT$LAYOUT).withName("BlackLevel"),
        Constants$root.C_LONG$LAYOUT.withName("Multishot"),
        Constants$root.C_FLOAT$LAYOUT.withName("gamma"),
        MemoryLayout.sequenceLayout(3, Constants$root.C_LONG$LAYOUT).withName("HighISOMultiplier")
    );
    public static MemoryLayout $LAYOUT() {
        return libraw_panasonic_makernotes_t.$struct$LAYOUT;
    }
    static final VarHandle Compression$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Compression"));
    public static VarHandle Compression$VH() {
        return libraw_panasonic_makernotes_t.Compression$VH;
    }
    public static short Compression$get(MemorySegment seg) {
        return (short)libraw_panasonic_makernotes_t.Compression$VH.get(seg);
    }
    public static void Compression$set( MemorySegment seg, short x) {
        libraw_panasonic_makernotes_t.Compression$VH.set(seg, x);
    }
    public static short Compression$get(MemorySegment seg, long index) {
        return (short)libraw_panasonic_makernotes_t.Compression$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Compression$set(MemorySegment seg, long index, short x) {
        libraw_panasonic_makernotes_t.Compression$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BlackLevelDim$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BlackLevelDim"));
    public static VarHandle BlackLevelDim$VH() {
        return libraw_panasonic_makernotes_t.BlackLevelDim$VH;
    }
    public static short BlackLevelDim$get(MemorySegment seg) {
        return (short)libraw_panasonic_makernotes_t.BlackLevelDim$VH.get(seg);
    }
    public static void BlackLevelDim$set( MemorySegment seg, short x) {
        libraw_panasonic_makernotes_t.BlackLevelDim$VH.set(seg, x);
    }
    public static short BlackLevelDim$get(MemorySegment seg, long index) {
        return (short)libraw_panasonic_makernotes_t.BlackLevelDim$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BlackLevelDim$set(MemorySegment seg, long index, short x) {
        libraw_panasonic_makernotes_t.BlackLevelDim$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment BlackLevel$slice(MemorySegment seg) {
        return seg.asSlice(4, 32);
    }
    static final VarHandle Multishot$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Multishot"));
    public static VarHandle Multishot$VH() {
        return libraw_panasonic_makernotes_t.Multishot$VH;
    }
    public static int Multishot$get(MemorySegment seg) {
        return (int)libraw_panasonic_makernotes_t.Multishot$VH.get(seg);
    }
    public static void Multishot$set( MemorySegment seg, int x) {
        libraw_panasonic_makernotes_t.Multishot$VH.set(seg, x);
    }
    public static int Multishot$get(MemorySegment seg, long index) {
        return (int)libraw_panasonic_makernotes_t.Multishot$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Multishot$set(MemorySegment seg, long index, int x) {
        libraw_panasonic_makernotes_t.Multishot$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle gamma$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("gamma"));
    public static VarHandle gamma$VH() {
        return libraw_panasonic_makernotes_t.gamma$VH;
    }
    public static float gamma$get(MemorySegment seg) {
        return (float)libraw_panasonic_makernotes_t.gamma$VH.get(seg);
    }
    public static void gamma$set( MemorySegment seg, float x) {
        libraw_panasonic_makernotes_t.gamma$VH.set(seg, x);
    }
    public static float gamma$get(MemorySegment seg, long index) {
        return (float)libraw_panasonic_makernotes_t.gamma$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void gamma$set(MemorySegment seg, long index, float x) {
        libraw_panasonic_makernotes_t.gamma$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment HighISOMultiplier$slice(MemorySegment seg) {
        return seg.asSlice(44, 12);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


