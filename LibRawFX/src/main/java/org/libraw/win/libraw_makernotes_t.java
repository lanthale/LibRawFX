// Generated by jextract

package org.libraw.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     libraw_canon_makernotes_t canon;
 *     libraw_nikon_makernotes_t nikon;
 *     libraw_hasselblad_makernotes_t hasselblad;
 *     libraw_fuji_info_t fuji;
 *     libraw_olympus_makernotes_t olympus;
 *     libraw_sony_info_t sony;
 *     libraw_kodak_makernotes_t kodak;
 *     libraw_panasonic_makernotes_t panasonic;
 *     libraw_pentax_makernotes_t pentax;
 *     libraw_p1_makernotes_t phaseone;
 *     libraw_ricoh_makernotes_t ricoh;
 *     libraw_samsung_makernotes_t samsung;
 *     libraw_metadata_common_t common;
 * }
 * }
 */
public class libraw_makernotes_t {

    libraw_makernotes_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        libraw_canon_makernotes_t.layout().withName("canon"),
        libraw_nikon_makernotes_t.layout().withName("nikon"),
        libraw_hasselblad_makernotes_t.layout().withName("hasselblad"),
        libraw_fuji_info_t.layout().withName("fuji"),
        libraw_olympus_makernotes_t.layout().withName("olympus"),
        libraw_sony_info_t.layout().withName("sony"),
        libraw_kodak_makernotes_t.layout().withName("kodak"),
        libraw_panasonic_makernotes_t.layout().withName("panasonic"),
        libraw_pentax_makernotes_t.layout().withName("pentax"),
        libraw_p1_makernotes_t.layout().withName("phaseone"),
        MemoryLayout.paddingLayout(4),
        libraw_ricoh_makernotes_t.layout().withName("ricoh"),
        libraw_samsung_makernotes_t.layout().withName("samsung"),
        libraw_metadata_common_t.layout().withName("common")
    ).withName("$anon$1028:11");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout canon$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("canon"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * libraw_canon_makernotes_t canon
     * }
     */
    public static final GroupLayout canon$layout() {
        return canon$LAYOUT;
    }

    private static final long canon$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * libraw_canon_makernotes_t canon
     * }
     */
    public static final long canon$offset() {
        return canon$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * libraw_canon_makernotes_t canon
     * }
     */
    public static MemorySegment canon(MemorySegment struct) {
        return struct.asSlice(canon$OFFSET, canon$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * libraw_canon_makernotes_t canon
     * }
     */
    public static void canon(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, canon$OFFSET, canon$LAYOUT.byteSize());
    }

    private static final GroupLayout nikon$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("nikon"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * libraw_nikon_makernotes_t nikon
     * }
     */
    public static final GroupLayout nikon$layout() {
        return nikon$LAYOUT;
    }

    private static final long nikon$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * libraw_nikon_makernotes_t nikon
     * }
     */
    public static final long nikon$offset() {
        return nikon$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * libraw_nikon_makernotes_t nikon
     * }
     */
    public static MemorySegment nikon(MemorySegment struct) {
        return struct.asSlice(nikon$OFFSET, nikon$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * libraw_nikon_makernotes_t nikon
     * }
     */
    public static void nikon(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, nikon$OFFSET, nikon$LAYOUT.byteSize());
    }

    private static final GroupLayout hasselblad$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("hasselblad"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * libraw_hasselblad_makernotes_t hasselblad
     * }
     */
    public static final GroupLayout hasselblad$layout() {
        return hasselblad$LAYOUT;
    }

    private static final long hasselblad$OFFSET = 392;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * libraw_hasselblad_makernotes_t hasselblad
     * }
     */
    public static final long hasselblad$offset() {
        return hasselblad$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * libraw_hasselblad_makernotes_t hasselblad
     * }
     */
    public static MemorySegment hasselblad(MemorySegment struct) {
        return struct.asSlice(hasselblad$OFFSET, hasselblad$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * libraw_hasselblad_makernotes_t hasselblad
     * }
     */
    public static void hasselblad(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, hasselblad$OFFSET, hasselblad$LAYOUT.byteSize());
    }

    private static final GroupLayout fuji$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("fuji"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * libraw_fuji_info_t fuji
     * }
     */
    public static final GroupLayout fuji$layout() {
        return fuji$LAYOUT;
    }

    private static final long fuji$OFFSET = 776;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * libraw_fuji_info_t fuji
     * }
     */
    public static final long fuji$offset() {
        return fuji$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * libraw_fuji_info_t fuji
     * }
     */
    public static MemorySegment fuji(MemorySegment struct) {
        return struct.asSlice(fuji$OFFSET, fuji$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * libraw_fuji_info_t fuji
     * }
     */
    public static void fuji(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, fuji$OFFSET, fuji$LAYOUT.byteSize());
    }

    private static final GroupLayout olympus$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("olympus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * libraw_olympus_makernotes_t olympus
     * }
     */
    public static final GroupLayout olympus$layout() {
        return olympus$LAYOUT;
    }

    private static final long olympus$OFFSET = 1056;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * libraw_olympus_makernotes_t olympus
     * }
     */
    public static final long olympus$offset() {
        return olympus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * libraw_olympus_makernotes_t olympus
     * }
     */
    public static MemorySegment olympus(MemorySegment struct) {
        return struct.asSlice(olympus$OFFSET, olympus$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * libraw_olympus_makernotes_t olympus
     * }
     */
    public static void olympus(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, olympus$OFFSET, olympus$LAYOUT.byteSize());
    }

    private static final GroupLayout sony$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("sony"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * libraw_sony_info_t sony
     * }
     */
    public static final GroupLayout sony$layout() {
        return sony$LAYOUT;
    }

    private static final long sony$OFFSET = 1464;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * libraw_sony_info_t sony
     * }
     */
    public static final long sony$offset() {
        return sony$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * libraw_sony_info_t sony
     * }
     */
    public static MemorySegment sony(MemorySegment struct) {
        return struct.asSlice(sony$OFFSET, sony$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * libraw_sony_info_t sony
     * }
     */
    public static void sony(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sony$OFFSET, sony$LAYOUT.byteSize());
    }

    private static final GroupLayout kodak$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("kodak"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * libraw_kodak_makernotes_t kodak
     * }
     */
    public static final GroupLayout kodak$layout() {
        return kodak$LAYOUT;
    }

    private static final long kodak$OFFSET = 1644;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * libraw_kodak_makernotes_t kodak
     * }
     */
    public static final long kodak$offset() {
        return kodak$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * libraw_kodak_makernotes_t kodak
     * }
     */
    public static MemorySegment kodak(MemorySegment struct) {
        return struct.asSlice(kodak$OFFSET, kodak$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * libraw_kodak_makernotes_t kodak
     * }
     */
    public static void kodak(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, kodak$OFFSET, kodak$LAYOUT.byteSize());
    }

    private static final GroupLayout panasonic$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("panasonic"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * libraw_panasonic_makernotes_t panasonic
     * }
     */
    public static final GroupLayout panasonic$layout() {
        return panasonic$LAYOUT;
    }

    private static final long panasonic$OFFSET = 1888;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * libraw_panasonic_makernotes_t panasonic
     * }
     */
    public static final long panasonic$offset() {
        return panasonic$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * libraw_panasonic_makernotes_t panasonic
     * }
     */
    public static MemorySegment panasonic(MemorySegment struct) {
        return struct.asSlice(panasonic$OFFSET, panasonic$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * libraw_panasonic_makernotes_t panasonic
     * }
     */
    public static void panasonic(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, panasonic$OFFSET, panasonic$LAYOUT.byteSize());
    }

    private static final GroupLayout pentax$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pentax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * libraw_pentax_makernotes_t pentax
     * }
     */
    public static final GroupLayout pentax$layout() {
        return pentax$LAYOUT;
    }

    private static final long pentax$OFFSET = 1956;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * libraw_pentax_makernotes_t pentax
     * }
     */
    public static final long pentax$offset() {
        return pentax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * libraw_pentax_makernotes_t pentax
     * }
     */
    public static MemorySegment pentax(MemorySegment struct) {
        return struct.asSlice(pentax$OFFSET, pentax$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * libraw_pentax_makernotes_t pentax
     * }
     */
    public static void pentax(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pentax$OFFSET, pentax$LAYOUT.byteSize());
    }

    private static final GroupLayout phaseone$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("phaseone"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * libraw_p1_makernotes_t phaseone
     * }
     */
    public static final GroupLayout phaseone$layout() {
        return phaseone$LAYOUT;
    }

    private static final long phaseone$OFFSET = 1988;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * libraw_p1_makernotes_t phaseone
     * }
     */
    public static final long phaseone$offset() {
        return phaseone$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * libraw_p1_makernotes_t phaseone
     * }
     */
    public static MemorySegment phaseone(MemorySegment struct) {
        return struct.asSlice(phaseone$OFFSET, phaseone$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * libraw_p1_makernotes_t phaseone
     * }
     */
    public static void phaseone(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, phaseone$OFFSET, phaseone$LAYOUT.byteSize());
    }

    private static final GroupLayout ricoh$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ricoh"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * libraw_ricoh_makernotes_t ricoh
     * }
     */
    public static final GroupLayout ricoh$layout() {
        return ricoh$LAYOUT;
    }

    private static final long ricoh$OFFSET = 2440;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * libraw_ricoh_makernotes_t ricoh
     * }
     */
    public static final long ricoh$offset() {
        return ricoh$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * libraw_ricoh_makernotes_t ricoh
     * }
     */
    public static MemorySegment ricoh(MemorySegment struct) {
        return struct.asSlice(ricoh$OFFSET, ricoh$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * libraw_ricoh_makernotes_t ricoh
     * }
     */
    public static void ricoh(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ricoh$OFFSET, ricoh$LAYOUT.byteSize());
    }

    private static final GroupLayout samsung$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("samsung"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * libraw_samsung_makernotes_t samsung
     * }
     */
    public static final GroupLayout samsung$layout() {
        return samsung$LAYOUT;
    }

    private static final long samsung$OFFSET = 2512;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * libraw_samsung_makernotes_t samsung
     * }
     */
    public static final long samsung$offset() {
        return samsung$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * libraw_samsung_makernotes_t samsung
     * }
     */
    public static MemorySegment samsung(MemorySegment struct) {
        return struct.asSlice(samsung$OFFSET, samsung$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * libraw_samsung_makernotes_t samsung
     * }
     */
    public static void samsung(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, samsung$OFFSET, samsung$LAYOUT.byteSize());
    }

    private static final GroupLayout common$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("common"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * libraw_metadata_common_t common
     * }
     */
    public static final GroupLayout common$layout() {
        return common$LAYOUT;
    }

    private static final long common$OFFSET = 2648;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * libraw_metadata_common_t common
     * }
     */
    public static final long common$offset() {
        return common$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * libraw_metadata_common_t common
     * }
     */
    public static MemorySegment common(MemorySegment struct) {
        return struct.asSlice(common$OFFSET, common$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * libraw_metadata_common_t common
     * }
     */
    public static void common(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, common$OFFSET, common$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

