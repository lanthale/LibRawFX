// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class libraw_shootinginfo_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("DriveMode"),
        Constants$root.C_SHORT$LAYOUT.withName("FocusMode"),
        Constants$root.C_SHORT$LAYOUT.withName("MeteringMode"),
        Constants$root.C_SHORT$LAYOUT.withName("AFPoint"),
        Constants$root.C_SHORT$LAYOUT.withName("ExposureMode"),
        Constants$root.C_SHORT$LAYOUT.withName("ExposureProgram"),
        Constants$root.C_SHORT$LAYOUT.withName("ImageStabilization"),
        MemoryLayout.sequenceLayout(64, Constants$root.C_CHAR$LAYOUT).withName("BodySerial"),
        MemoryLayout.sequenceLayout(64, Constants$root.C_CHAR$LAYOUT).withName("InternalBodySerial")
    );
    public static MemoryLayout $LAYOUT() {
        return libraw_shootinginfo_t.$struct$LAYOUT;
    }
    static final VarHandle DriveMode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DriveMode"));
    public static VarHandle DriveMode$VH() {
        return libraw_shootinginfo_t.DriveMode$VH;
    }
    public static short DriveMode$get(MemorySegment seg) {
        return (short)libraw_shootinginfo_t.DriveMode$VH.get(seg);
    }
    public static void DriveMode$set( MemorySegment seg, short x) {
        libraw_shootinginfo_t.DriveMode$VH.set(seg, x);
    }
    public static short DriveMode$get(MemorySegment seg, long index) {
        return (short)libraw_shootinginfo_t.DriveMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DriveMode$set(MemorySegment seg, long index, short x) {
        libraw_shootinginfo_t.DriveMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FocusMode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FocusMode"));
    public static VarHandle FocusMode$VH() {
        return libraw_shootinginfo_t.FocusMode$VH;
    }
    public static short FocusMode$get(MemorySegment seg) {
        return (short)libraw_shootinginfo_t.FocusMode$VH.get(seg);
    }
    public static void FocusMode$set( MemorySegment seg, short x) {
        libraw_shootinginfo_t.FocusMode$VH.set(seg, x);
    }
    public static short FocusMode$get(MemorySegment seg, long index) {
        return (short)libraw_shootinginfo_t.FocusMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FocusMode$set(MemorySegment seg, long index, short x) {
        libraw_shootinginfo_t.FocusMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MeteringMode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MeteringMode"));
    public static VarHandle MeteringMode$VH() {
        return libraw_shootinginfo_t.MeteringMode$VH;
    }
    public static short MeteringMode$get(MemorySegment seg) {
        return (short)libraw_shootinginfo_t.MeteringMode$VH.get(seg);
    }
    public static void MeteringMode$set( MemorySegment seg, short x) {
        libraw_shootinginfo_t.MeteringMode$VH.set(seg, x);
    }
    public static short MeteringMode$get(MemorySegment seg, long index) {
        return (short)libraw_shootinginfo_t.MeteringMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MeteringMode$set(MemorySegment seg, long index, short x) {
        libraw_shootinginfo_t.MeteringMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AFPoint$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AFPoint"));
    public static VarHandle AFPoint$VH() {
        return libraw_shootinginfo_t.AFPoint$VH;
    }
    public static short AFPoint$get(MemorySegment seg) {
        return (short)libraw_shootinginfo_t.AFPoint$VH.get(seg);
    }
    public static void AFPoint$set( MemorySegment seg, short x) {
        libraw_shootinginfo_t.AFPoint$VH.set(seg, x);
    }
    public static short AFPoint$get(MemorySegment seg, long index) {
        return (short)libraw_shootinginfo_t.AFPoint$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AFPoint$set(MemorySegment seg, long index, short x) {
        libraw_shootinginfo_t.AFPoint$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ExposureMode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ExposureMode"));
    public static VarHandle ExposureMode$VH() {
        return libraw_shootinginfo_t.ExposureMode$VH;
    }
    public static short ExposureMode$get(MemorySegment seg) {
        return (short)libraw_shootinginfo_t.ExposureMode$VH.get(seg);
    }
    public static void ExposureMode$set( MemorySegment seg, short x) {
        libraw_shootinginfo_t.ExposureMode$VH.set(seg, x);
    }
    public static short ExposureMode$get(MemorySegment seg, long index) {
        return (short)libraw_shootinginfo_t.ExposureMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExposureMode$set(MemorySegment seg, long index, short x) {
        libraw_shootinginfo_t.ExposureMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ExposureProgram$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ExposureProgram"));
    public static VarHandle ExposureProgram$VH() {
        return libraw_shootinginfo_t.ExposureProgram$VH;
    }
    public static short ExposureProgram$get(MemorySegment seg) {
        return (short)libraw_shootinginfo_t.ExposureProgram$VH.get(seg);
    }
    public static void ExposureProgram$set( MemorySegment seg, short x) {
        libraw_shootinginfo_t.ExposureProgram$VH.set(seg, x);
    }
    public static short ExposureProgram$get(MemorySegment seg, long index) {
        return (short)libraw_shootinginfo_t.ExposureProgram$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExposureProgram$set(MemorySegment seg, long index, short x) {
        libraw_shootinginfo_t.ExposureProgram$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ImageStabilization$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ImageStabilization"));
    public static VarHandle ImageStabilization$VH() {
        return libraw_shootinginfo_t.ImageStabilization$VH;
    }
    public static short ImageStabilization$get(MemorySegment seg) {
        return (short)libraw_shootinginfo_t.ImageStabilization$VH.get(seg);
    }
    public static void ImageStabilization$set( MemorySegment seg, short x) {
        libraw_shootinginfo_t.ImageStabilization$VH.set(seg, x);
    }
    public static short ImageStabilization$get(MemorySegment seg, long index) {
        return (short)libraw_shootinginfo_t.ImageStabilization$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ImageStabilization$set(MemorySegment seg, long index, short x) {
        libraw_shootinginfo_t.ImageStabilization$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment BodySerial$slice(MemorySegment seg) {
        return seg.asSlice(14, 64);
    }
    public static MemorySegment InternalBodySerial$slice(MemorySegment seg) {
        return seg.asSlice(78, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


