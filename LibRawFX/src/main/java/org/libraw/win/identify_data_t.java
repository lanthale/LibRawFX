// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class identify_data_t {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("olympus_exif_cfa"),
        MemoryLayout.paddingLayout(32),
        C_LONG_LONG.withName("unique_id"),
        C_LONG_LONG.withName("OlyID"),
        C_INT.withName("tiff_nifds"),
        C_INT.withName("tiff_flip"),
        C_INT.withName("metadata_blocks"),
        MemoryLayout.paddingLayout(32)
    );
    public static MemoryLayout $LAYOUT() {
        return identify_data_t.$struct$LAYOUT;
    }
    static final VarHandle olympus_exif_cfa$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("olympus_exif_cfa"));
    public static VarHandle olympus_exif_cfa$VH() {
        return identify_data_t.olympus_exif_cfa$VH;
    }
    public static int olympus_exif_cfa$get(MemorySegment seg) {
        return (int)identify_data_t.olympus_exif_cfa$VH.get(seg);
    }
    public static void olympus_exif_cfa$set( MemorySegment seg, int x) {
        identify_data_t.olympus_exif_cfa$VH.set(seg, x);
    }
    public static int olympus_exif_cfa$get(MemorySegment seg, long index) {
        return (int)identify_data_t.olympus_exif_cfa$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void olympus_exif_cfa$set(MemorySegment seg, long index, int x) {
        identify_data_t.olympus_exif_cfa$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle unique_id$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("unique_id"));
    public static VarHandle unique_id$VH() {
        return identify_data_t.unique_id$VH;
    }
    public static long unique_id$get(MemorySegment seg) {
        return (long)identify_data_t.unique_id$VH.get(seg);
    }
    public static void unique_id$set( MemorySegment seg, long x) {
        identify_data_t.unique_id$VH.set(seg, x);
    }
    public static long unique_id$get(MemorySegment seg, long index) {
        return (long)identify_data_t.unique_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unique_id$set(MemorySegment seg, long index, long x) {
        identify_data_t.unique_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle OlyID$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("OlyID"));
    public static VarHandle OlyID$VH() {
        return identify_data_t.OlyID$VH;
    }
    public static long OlyID$get(MemorySegment seg) {
        return (long)identify_data_t.OlyID$VH.get(seg);
    }
    public static void OlyID$set( MemorySegment seg, long x) {
        identify_data_t.OlyID$VH.set(seg, x);
    }
    public static long OlyID$get(MemorySegment seg, long index) {
        return (long)identify_data_t.OlyID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OlyID$set(MemorySegment seg, long index, long x) {
        identify_data_t.OlyID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tiff_nifds$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("tiff_nifds"));
    public static VarHandle tiff_nifds$VH() {
        return identify_data_t.tiff_nifds$VH;
    }
    public static int tiff_nifds$get(MemorySegment seg) {
        return (int)identify_data_t.tiff_nifds$VH.get(seg);
    }
    public static void tiff_nifds$set( MemorySegment seg, int x) {
        identify_data_t.tiff_nifds$VH.set(seg, x);
    }
    public static int tiff_nifds$get(MemorySegment seg, long index) {
        return (int)identify_data_t.tiff_nifds$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tiff_nifds$set(MemorySegment seg, long index, int x) {
        identify_data_t.tiff_nifds$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tiff_flip$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("tiff_flip"));
    public static VarHandle tiff_flip$VH() {
        return identify_data_t.tiff_flip$VH;
    }
    public static int tiff_flip$get(MemorySegment seg) {
        return (int)identify_data_t.tiff_flip$VH.get(seg);
    }
    public static void tiff_flip$set( MemorySegment seg, int x) {
        identify_data_t.tiff_flip$VH.set(seg, x);
    }
    public static int tiff_flip$get(MemorySegment seg, long index) {
        return (int)identify_data_t.tiff_flip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tiff_flip$set(MemorySegment seg, long index, int x) {
        identify_data_t.tiff_flip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle metadata_blocks$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("metadata_blocks"));
    public static VarHandle metadata_blocks$VH() {
        return identify_data_t.metadata_blocks$VH;
    }
    public static int metadata_blocks$get(MemorySegment seg) {
        return (int)identify_data_t.metadata_blocks$VH.get(seg);
    }
    public static void metadata_blocks$set( MemorySegment seg, int x) {
        identify_data_t.metadata_blocks$VH.set(seg, x);
    }
    public static int metadata_blocks$get(MemorySegment seg, long index) {
        return (int)identify_data_t.metadata_blocks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void metadata_blocks$set(MemorySegment seg, long index, int x) {
        identify_data_t.metadata_blocks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


