// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class internal_data_t {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("input"),
        C_POINTER.withName("output"),
        C_INT.withName("input_internal"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("meta_data"),
        C_LONG_LONG.withName("profile_offset"),
        C_LONG_LONG.withName("toffset"),
        MemoryLayout.sequenceLayout(4, C_INT).withName("pana_black")
    );
    public static MemoryLayout $LAYOUT() {
        return internal_data_t.$struct$LAYOUT;
    }
    static final VarHandle input$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("input")));
    public static VarHandle input$VH() {
        return internal_data_t.input$VH;
    }
    public static MemoryAddress input$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)internal_data_t.input$VH.get(seg);
    }
    public static void input$set( MemorySegment seg, MemoryAddress x) {
        internal_data_t.input$VH.set(seg, x);
    }
    public static MemoryAddress input$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)internal_data_t.input$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void input$set(MemorySegment seg, long index, MemoryAddress x) {
        internal_data_t.input$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle output$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("output")));
    public static VarHandle output$VH() {
        return internal_data_t.output$VH;
    }
    public static MemoryAddress output$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)internal_data_t.output$VH.get(seg);
    }
    public static void output$set( MemorySegment seg, MemoryAddress x) {
        internal_data_t.output$VH.set(seg, x);
    }
    public static MemoryAddress output$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)internal_data_t.output$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void output$set(MemorySegment seg, long index, MemoryAddress x) {
        internal_data_t.output$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle input_internal$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("input_internal"));
    public static VarHandle input_internal$VH() {
        return internal_data_t.input_internal$VH;
    }
    public static int input_internal$get(MemorySegment seg) {
        return (int)internal_data_t.input_internal$VH.get(seg);
    }
    public static void input_internal$set( MemorySegment seg, int x) {
        internal_data_t.input_internal$VH.set(seg, x);
    }
    public static int input_internal$get(MemorySegment seg, long index) {
        return (int)internal_data_t.input_internal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void input_internal$set(MemorySegment seg, long index, int x) {
        internal_data_t.input_internal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle meta_data$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("meta_data")));
    public static VarHandle meta_data$VH() {
        return internal_data_t.meta_data$VH;
    }
    public static MemoryAddress meta_data$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)internal_data_t.meta_data$VH.get(seg);
    }
    public static void meta_data$set( MemorySegment seg, MemoryAddress x) {
        internal_data_t.meta_data$VH.set(seg, x);
    }
    public static MemoryAddress meta_data$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)internal_data_t.meta_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void meta_data$set(MemorySegment seg, long index, MemoryAddress x) {
        internal_data_t.meta_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle profile_offset$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("profile_offset"));
    public static VarHandle profile_offset$VH() {
        return internal_data_t.profile_offset$VH;
    }
    public static long profile_offset$get(MemorySegment seg) {
        return (long)internal_data_t.profile_offset$VH.get(seg);
    }
    public static void profile_offset$set( MemorySegment seg, long x) {
        internal_data_t.profile_offset$VH.set(seg, x);
    }
    public static long profile_offset$get(MemorySegment seg, long index) {
        return (long)internal_data_t.profile_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void profile_offset$set(MemorySegment seg, long index, long x) {
        internal_data_t.profile_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle toffset$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("toffset"));
    public static VarHandle toffset$VH() {
        return internal_data_t.toffset$VH;
    }
    public static long toffset$get(MemorySegment seg) {
        return (long)internal_data_t.toffset$VH.get(seg);
    }
    public static void toffset$set( MemorySegment seg, long x) {
        internal_data_t.toffset$VH.set(seg, x);
    }
    public static long toffset$get(MemorySegment seg, long index) {
        return (long)internal_data_t.toffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void toffset$set(MemorySegment seg, long index, long x) {
        internal_data_t.toffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment pana_black$slice(MemorySegment seg) {
        return seg.asSlice(48, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


