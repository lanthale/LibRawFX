// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$1 {

    static final FunctionDescriptor data_callback$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle data_callback$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        constants$1.data_callback$FUNC, false
    );
    static final FunctionDescriptor default_data_callback$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle default_data_callback$MH = RuntimeHelper.downcallHandle(
        libraw_h.LIBRARIES, "default_data_callback",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        constants$1.default_data_callback$FUNC, false
    );
    static final FunctionDescriptor progress_callback$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    static final MethodHandle progress_callback$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;III)I",
        constants$1.progress_callback$FUNC, false
    );
    static final FunctionDescriptor pre_identify_callback$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle pre_identify_callback$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$1.pre_identify_callback$FUNC, false
    );
}


