// Generated by jextract

package org.libraw.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class libraw_dng_levels_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("parsedfields"),
        MemoryLayout.sequenceLayout(4104, Constants$root.C_LONG$LAYOUT).withName("dng_cblack"),
        Constants$root.C_LONG$LAYOUT.withName("dng_black"),
        MemoryLayout.sequenceLayout(4104, Constants$root.C_FLOAT$LAYOUT).withName("dng_fcblack"),
        Constants$root.C_FLOAT$LAYOUT.withName("dng_fblack"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_LONG$LAYOUT).withName("dng_whitelevel"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_SHORT$LAYOUT).withName("default_crop"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("user_crop"),
        Constants$root.C_LONG$LAYOUT.withName("preview_colorspace"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("analogbalance"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("asshotneutral"),
        Constants$root.C_FLOAT$LAYOUT.withName("baseline_exposure"),
        Constants$root.C_FLOAT$LAYOUT.withName("LinearResponseLimit")
    );
    public static MemoryLayout $LAYOUT() {
        return libraw_dng_levels_t.$struct$LAYOUT;
    }
    static final VarHandle parsedfields$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("parsedfields"));
    public static VarHandle parsedfields$VH() {
        return libraw_dng_levels_t.parsedfields$VH;
    }
    public static int parsedfields$get(MemorySegment seg) {
        return (int)libraw_dng_levels_t.parsedfields$VH.get(seg);
    }
    public static void parsedfields$set( MemorySegment seg, int x) {
        libraw_dng_levels_t.parsedfields$VH.set(seg, x);
    }
    public static int parsedfields$get(MemorySegment seg, long index) {
        return (int)libraw_dng_levels_t.parsedfields$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void parsedfields$set(MemorySegment seg, long index, int x) {
        libraw_dng_levels_t.parsedfields$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment dng_cblack$slice(MemorySegment seg) {
        return seg.asSlice(4, 16416);
    }
    static final VarHandle dng_black$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dng_black"));
    public static VarHandle dng_black$VH() {
        return libraw_dng_levels_t.dng_black$VH;
    }
    public static int dng_black$get(MemorySegment seg) {
        return (int)libraw_dng_levels_t.dng_black$VH.get(seg);
    }
    public static void dng_black$set( MemorySegment seg, int x) {
        libraw_dng_levels_t.dng_black$VH.set(seg, x);
    }
    public static int dng_black$get(MemorySegment seg, long index) {
        return (int)libraw_dng_levels_t.dng_black$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dng_black$set(MemorySegment seg, long index, int x) {
        libraw_dng_levels_t.dng_black$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment dng_fcblack$slice(MemorySegment seg) {
        return seg.asSlice(16424, 16416);
    }
    static final VarHandle dng_fblack$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dng_fblack"));
    public static VarHandle dng_fblack$VH() {
        return libraw_dng_levels_t.dng_fblack$VH;
    }
    public static float dng_fblack$get(MemorySegment seg) {
        return (float)libraw_dng_levels_t.dng_fblack$VH.get(seg);
    }
    public static void dng_fblack$set( MemorySegment seg, float x) {
        libraw_dng_levels_t.dng_fblack$VH.set(seg, x);
    }
    public static float dng_fblack$get(MemorySegment seg, long index) {
        return (float)libraw_dng_levels_t.dng_fblack$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dng_fblack$set(MemorySegment seg, long index, float x) {
        libraw_dng_levels_t.dng_fblack$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment dng_whitelevel$slice(MemorySegment seg) {
        return seg.asSlice(32844, 16);
    }
    public static MemorySegment default_crop$slice(MemorySegment seg) {
        return seg.asSlice(32860, 8);
    }
    public static MemorySegment user_crop$slice(MemorySegment seg) {
        return seg.asSlice(32868, 16);
    }
    static final VarHandle preview_colorspace$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("preview_colorspace"));
    public static VarHandle preview_colorspace$VH() {
        return libraw_dng_levels_t.preview_colorspace$VH;
    }
    public static int preview_colorspace$get(MemorySegment seg) {
        return (int)libraw_dng_levels_t.preview_colorspace$VH.get(seg);
    }
    public static void preview_colorspace$set( MemorySegment seg, int x) {
        libraw_dng_levels_t.preview_colorspace$VH.set(seg, x);
    }
    public static int preview_colorspace$get(MemorySegment seg, long index) {
        return (int)libraw_dng_levels_t.preview_colorspace$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void preview_colorspace$set(MemorySegment seg, long index, int x) {
        libraw_dng_levels_t.preview_colorspace$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment analogbalance$slice(MemorySegment seg) {
        return seg.asSlice(32888, 16);
    }
    public static MemorySegment asshotneutral$slice(MemorySegment seg) {
        return seg.asSlice(32904, 16);
    }
    static final VarHandle baseline_exposure$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("baseline_exposure"));
    public static VarHandle baseline_exposure$VH() {
        return libraw_dng_levels_t.baseline_exposure$VH;
    }
    public static float baseline_exposure$get(MemorySegment seg) {
        return (float)libraw_dng_levels_t.baseline_exposure$VH.get(seg);
    }
    public static void baseline_exposure$set( MemorySegment seg, float x) {
        libraw_dng_levels_t.baseline_exposure$VH.set(seg, x);
    }
    public static float baseline_exposure$get(MemorySegment seg, long index) {
        return (float)libraw_dng_levels_t.baseline_exposure$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void baseline_exposure$set(MemorySegment seg, long index, float x) {
        libraw_dng_levels_t.baseline_exposure$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LinearResponseLimit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LinearResponseLimit"));
    public static VarHandle LinearResponseLimit$VH() {
        return libraw_dng_levels_t.LinearResponseLimit$VH;
    }
    public static float LinearResponseLimit$get(MemorySegment seg) {
        return (float)libraw_dng_levels_t.LinearResponseLimit$VH.get(seg);
    }
    public static void LinearResponseLimit$set( MemorySegment seg, float x) {
        libraw_dng_levels_t.LinearResponseLimit$VH.set(seg, x);
    }
    public static float LinearResponseLimit$get(MemorySegment seg, long index) {
        return (float)libraw_dng_levels_t.LinearResponseLimit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LinearResponseLimit$set(MemorySegment seg, long index, float x) {
        libraw_dng_levels_t.LinearResponseLimit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


